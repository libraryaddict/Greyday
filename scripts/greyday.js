/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "main": () => (/* binding */ GreyYouMain_main),
  "printEndOfRun": () => (/* binding */ printEndOfRun)
});

;// CONCATENATED MODULE: external "kolmafia"
const external_kolmafia_namespaceObject = require("kolmafia");
;// CONCATENATED MODULE: ./src/utils/GreySettings.ts
function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









function getGreySettings() {
  var towerBreak = {
    name: "greyBreakAtTower",
    description:
    "Should the script halt when it reaches the tower? False by default. Useful as continuing after breaking ronin takes less turns. This will change the behavior of the script to skip some zones.",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var moonTune = {
    name: "greyTuneMoonSpoon",
    description:
    "If set, will use the rune moon spoon (if owned) to change moon signs to the requested moon sign when done with tasks in the current moon sign.",
    valid: (value) =>
    moonSigns.find((s) => s.toLowerCase() == value.toLowerCase()) != null,
    default: null };


  var manorLights = {
    name: "greyFinishManorLights",
    description:
    "The script will do the hidden manor lights quest, but should it fight Elizabeth & Stephen at the end? (Garbo does fight Stephen for meat)",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var pvpEnable = {
    name: "greyEnablePvP",
    description:
    "Should the script enable PvP at the start of the run? This doesn't actually make much difference vs enabling it later as there's no pvp generation, unless you have robortender.",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var dailyMalware = {
    name: "greyDailyMalware",
    description:
    "If we do daily dungeon, how should we treat daily malware? If not set, will use best judgement. If true, will always use malware or avoid if malware is unavailable. If false will never use malware.",
    valid: (value) => value == "true" || value == "false",
    default: null };


  var dailyDungeon = {
    name: "greyDailyDungeon",
    description:
    "Should the script always do daily dungeon, even when there is no need to? Eg, tower break. Useful in conjunction with greyDailyMalware",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var levelingResources = {
    name: "greyPrepareLevelingResources",
    description:
    "If this is set to true, script will attempt to prepare resources that are useful for power leveling. Namely familiar scrapbook and raise goose weight.",
    valid: (value) => value == "true" || value == "false",
    default: true };


  var skipPalindome = {
    name: "greySkipPalindome",
    description:
    "If set to true, will not complete palindome. This is only useful if you intend to burn turns on UR farming, and you're recommended to save at least 80 turns minumum to resume the script. To resume, this will need to be set to false.",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var doHellQuest = {
    name: "greyAzazelSteelMargarita",
    description:
    "If set to true, will complete the requirements for the Steel Margarita +5 Liver drink. There is different scenarios for this, but this is best used with towerbreaking and ronin escaping. It will attempt to use the no-trades previously acquired.",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var deleteKmails = {
    name: "greyDeleteKmails",
    description:
    "When true, will delete kmails from spooky lady and fortune teller",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var doFortuneTeller = {
    name: "greyFortuneTeller",
    description:
    "If set to true, will complete the requirements for the Steel Margarita +5 Liver drink. There is different scenarios for this, but this is best used with towerbreaking and ronin escaping. It will attempt to use the no-trades previously acquired.",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var useMummery = {
    name: "greyUseMummery",
    description:
    "If set to true, will set grey goose to use MP restoring. This is enabled by default as there isn't really a reason not to.",
    valid: (value) => value == "true" || value == "false",
    default: true,
    viable: (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("mumming trunk")) > 0 };


  var defaultAdvValue =
  Math.round((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("valueOfAdventure")) * 0.7 / 100) * 100;

  var grayAdventureValue = {
    name: "greyValueOfAdventure",
    description:
    "Used to determine how to prioritize resources, a fax for example is worth 20k. If it saves 3 turns and each turn is worth 10k, then it's obviously worth using the fax to save those 3 turns. Default value is based off roughly 70% of pref valueOfAdventure.",
    valid: (value) => /\d+/.test(value),
    default: defaultAdvValue };


  var greyPullValue = {
    name: "greyValueOfPull",
    description:
    "Used to determine the value of a pull from storage, generally can be ignored.",
    valid: (value) => /\d+/.test(value),
    default: 0 };


  var greySavePulls = {
    name: "greyPullsLimit",
    description:
    "How many pulls the script can use, if this is too low then you're going to have a bad time. 20 means the script can use up to 20 pulls, leaving 0 remaining.",
    valid: (value) => /\d+/.test(value),
    default: 20 };


  var greyBountyHunter = {
    name: "greyBountyHunting",
    description:
    "Should the script pick up bounties that are likely to be collected along the way? Provides no advantage or disadvantage and you likely don't need it, but optimal!",
    valid: (value) => value == "true" || value == "false",
    default: false };


  var greyVoteMonster = {
    name: "greyVotingBooth",
    description:
    "If you own the voting booth, by default will not vote as aftercore voting can be better",
    valid: (value) => value == "true" || value == "false",
    default: false };


  return [
  towerBreak,
  moonTune,
  manorLights,
  pvpEnable,
  dailyDungeon,
  dailyMalware,
  levelingResources,
  skipPalindome,
  greySavePulls,
  grayAdventureValue,
  useMummery,
  greyPullValue,
  greyVoteMonster];

}

var moonSigns = [
"Mongoose",
"Wallaby",
"Vole",
"Platypus",
"Opossum",
"Marmot",
"Wombat",
"Blender",
"Packrat"];















function getMoonZone(sign) {
  var index = moonSigns.findIndex(
  (s) => s.toLowerCase() == (sign === null || sign === void 0 ? void 0 : sign.toLowerCase()));


  if (index < 0) {
    return null;
  } else if (index <= 2) {
    return "Knoll";
  } else if (index <= 5) {
    return "Canadia";
  }

  return "Gnomad";
}

var spoon = external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon");

var GreySettings = /*#__PURE__*/function () {function GreySettings() {_classCallCheck(this, GreySettings);}_createClass(GreySettings, null, [{ key: "isHardcoreMode", value:






















    function isHardcoreMode() {
      return this.hardcoreMode || (0,external_kolmafia_namespaceObject.inHardcore)();
    } }, { key: "willBeAccessible", value:

    function willBeAccessible(
    moonzone)

    {var assumeUnstarted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return (
        (assumeUnstarted || (0,external_kolmafia_namespaceObject.getProperty)("moonTuned") != "true") &&
        (0,external_kolmafia_namespaceObject.availableAmount)(spoon) > 0 &&
        this.greyTuneMoonSpoon != null &&
        getMoonZone(this.greyTuneMoonSpoon) == moonzone);

    } }, { key: "canMoonSpoon", value:

    function canMoonSpoon() {
      return (
        (0,external_kolmafia_namespaceObject.getProperty)("moonTuned") == "false" &&
        (0,external_kolmafia_namespaceObject.availableAmount)(spoon) > 0 &&
        this.greyTuneMoonSpoon != null &&
        this.greyTuneMoonSpoon.toLowerCase() != (0,external_kolmafia_namespaceObject.mySign)().toLowerCase());

    }

    /**
     * If we aim to collect a hippy outfit
     */ }, { key: "isHippyMode", value:
    function isHippyMode() {
      return this.isHardcoreMode();
    } }, { key: "shouldAvoidTowerRequirements", value:

    function shouldAvoidTowerRequirements() {
      return !GreySettings.isHardcoreMode() && this.greyBreakAtTower;
    } }, { key: "loadSettings", value:

    function loadSettings() {var _iterator = _createForOfIteratorHelper(
      getGreySettings()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var setting = _step.value;
          var prop = (0,external_kolmafia_namespaceObject.getProperty)(setting.name);

          if (prop == "") {
            prop = setting.default;
          } else if (typeof setting.default == "boolean") {
            prop = (0,external_kolmafia_namespaceObject.toBoolean)(prop);
          } else if (typeof setting.default == "number") {
            prop = (0,external_kolmafia_namespaceObject.toInt)(prop);
          }

          GreySettings[setting.name] = prop;
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }]);return GreySettings;}();_defineProperty(GreySettings, "hardcoreMode", false);_defineProperty(GreySettings, "speedRunMode", false);_defineProperty(GreySettings, "adventuresBeforeAbort", 8);_defineProperty(GreySettings, "adventuresGenerateIfPossibleOrAbort", 12);_defineProperty(GreySettings, "usefulSkillsWeight", 6);_defineProperty(GreySettings, "handySkillsWeight", 0.5);_defineProperty(GreySettings, "greyBreakAtTower", void 0);_defineProperty(GreySettings, "greyReachedTower", (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("_greyReachedTower")));_defineProperty(GreySettings, "greyDailyDungeon", void 0);_defineProperty(GreySettings, "greyDailyMalware", void 0);_defineProperty(GreySettings, "greyPrepareLevelingResources", void 0);_defineProperty(GreySettings, "greyFantasyBandits", void 0);_defineProperty(GreySettings, "greyTuneMoonSpoon", void 0);_defineProperty(GreySettings, "greyDebug", (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("greyDebug") || "false"));_defineProperty(GreySettings, "greySkipPalindome", void 0);_defineProperty(GreySettings, "greyPullsLimit", void 0);_defineProperty(GreySettings, "greyValueOfAdventure", void 0);_defineProperty(GreySettings, "greyUseMummery", void 0);_defineProperty(GreySettings, "greyVotingBooth", void 0);
;// CONCATENATED MODULE: ./src/quests/Quests.ts




















var QuestStatus;(function (QuestStatus) {QuestStatus[QuestStatus["READY"] = 0] = "READY";QuestStatus[QuestStatus["FASTER_LATER"] = 1] = "FASTER_LATER";QuestStatus[QuestStatus["NOT_READY"] = 2] = "NOT_READY";QuestStatus[QuestStatus["COMPLETED"] = 3] = "COMPLETED";})(QuestStatus || (QuestStatus = {}));






var DelayType;(function (DelayType) {DelayType[DelayType["TURN_BURNING"] = 0] = "TURN_BURNING";DelayType[DelayType["NONCOMBAT_HITTING"] = 1] = "NONCOMBAT_HITTING";})(DelayType || (DelayType = {}));













var OutfitImportance;(function (OutfitImportance) {OutfitImportance[OutfitImportance["REQUIRED"] = 0] = "REQUIRED";OutfitImportance[OutfitImportance["VERY_HELPFUL"] = 1] = "VERY_HELPFUL";OutfitImportance[OutfitImportance["HELPS"] = 2] = "HELPS";})(OutfitImportance || (OutfitImportance = {}));





function getQuestStatus(property) {
  var status = (0,external_kolmafia_namespaceObject.getProperty)(property);

  if (status == "unstarted") {
    return -1;
  } else if (status == "started") {
    return 0;
  } else if (status == "finished") {
    return 100;
  } else if (status.match(/^step\d+$/)) {
    return (0,external_kolmafia_namespaceObject.toInt)(status.replace("step", ""));
  } else {
    throw (
      "Cannot parse property '" +
      property +
      "' value '" +
      status +
      "' to an int");

  }
}
;// CONCATENATED MODULE: ./src/utils/MacroBuilder.ts
function _get() {if (typeof Reflect !== "undefined" && Reflect.get) {_get = Reflect.get.bind();} else {_get = function _get(target, property, receiver) {var base = _superPropBase(target, property);if (!base) return;var desc = Object.getOwnPropertyDescriptor(base, property);if (desc.get) {return desc.get.call(arguments.length < 3 ? target : receiver);}return desc.value;};}return _get.apply(this, arguments);}function _superPropBase(object, property) {while (!Object.prototype.hasOwnProperty.call(object, property)) {object = _getPrototypeOf(object);if (object === null) break;}return object;}function MacroBuilder_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = MacroBuilder_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || MacroBuilder_unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function MacroBuilder_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return MacroBuilder_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MacroBuilder_arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return MacroBuilder_arrayLikeToArray(arr);}function MacroBuilder_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function MacroBuilder_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function MacroBuilder_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function MacroBuilder_createClass(Constructor, protoProps, staticProps) {if (protoProps) MacroBuilder_defineProperties(Constructor.prototype, protoProps);if (staticProps) MacroBuilder_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function MacroBuilder_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _wrapNativeSuper(Class) {var _cache = typeof Map === "function" ? new Map() : undefined;_wrapNativeSuper = function _wrapNativeSuper(Class) {if (Class === null || !_isNativeFunction(Class)) return Class;if (typeof Class !== "function") {throw new TypeError("Super expression must either be null or a function");}if (typeof _cache !== "undefined") {if (_cache.has(Class)) return _cache.get(Class);_cache.set(Class, Wrapper);}function Wrapper() {return _construct(Class, arguments, _getPrototypeOf(this).constructor);}Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });return _setPrototypeOf(Wrapper, Class);};return _wrapNativeSuper(Class);}function _construct(Parent, args, Class) {if (_isNativeReflectConstruct()) {_construct = Reflect.construct.bind();} else {_construct = function _construct(Parent, args, Class) {var a = [null];a.push.apply(a, args);var Constructor = Function.bind.apply(Parent, a);var instance = new Constructor();if (Class) _setPrototypeOf(instance, Class.prototype);return instance;};}return _construct.apply(null, arguments);}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function _isNativeFunction(fn) {return Function.toString.call(fn).indexOf("[native code]") !== -1;}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}

var MACRO_NAME = "Script Autoattack Macro";
/**
 * Get the KoL native ID of the macro with name name.
 *
 * @category Combat
 * @returns {number} The macro ID.
 */
function getMacroId() {var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MACRO_NAME;
  var macroMatches = (0,external_kolmafia_namespaceObject.xpath)(
  (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php"), "//select[@name=\"macroid\"]/option[text()=\"".concat(
  name, "\"]/@value"));

  if (macroMatches.length === 0) {
    (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?action=new");
    var newMacroText = (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=0&name=".concat(
    name, "&macrotext=abort&action=save"));

    return parseInt(
    (0,external_kolmafia_namespaceObject.xpath)(newMacroText, "//input[@name=macroid]/@value")[0],
    10);

  } else {
    return parseInt(macroMatches[0], 10);
  }
}


function itemOrNameToItem(itemOrName) {
  return typeof itemOrName === "string" ? external_kolmafia_namespaceObject.Item.get(itemOrName) : itemOrName;
}

var substringCombatItems =
"spider web, really sticky spider web, dictionary, NG, Cloaca-Cola, yo-yo, top, ball, kite, yo, red potion, blue potion, adder, red button, pile of sand, mushroom, deluxe mushroom".
split(",").
map((s) => (0,external_kolmafia_namespaceObject.toItem)(s));
var substringCombatSkills =
"Shoot, Thrust-Smack, Headbutt, Toss, Sing, Disarm, LIGHT, BURN, Extract, Meteor Shower, Cleave, Boil, Slice, Rainbow".
split(",").
map((s) => (0,external_kolmafia_namespaceObject.toSkill)(s));

function itemOrItemsBallsMacroName(
itemOrItems)
{
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroName).join(", ");
  } else {
    var item = itemOrNameToItem(itemOrItems);
    return !substringCombatItems.includes(item) ?
    item.name :
    (0,external_kolmafia_namespaceObject.toInt)(item).toString();
  }
}

function itemOrItemsBallsMacroPredicate(
itemOrItems)
{
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroPredicate).join(" && ");
  } else {
    return "hascombatitem ".concat(itemOrItems);
  }
}


function skillOrNameToSkill(skillOrName) {
  if (typeof skillOrName === "string") {
    return external_kolmafia_namespaceObject.Skill.get(skillOrName);
  } else {
    return skillOrName;
  }
}

function skillBallsMacroName(skillOrName) {
  var skill = skillOrNameToSkill(skillOrName);
  return skill.name.match(/^[A-Za-z ]+$/) &&
  !substringCombatSkills.includes(skill) ?
  skill.name :
  (0,external_kolmafia_namespaceObject.toInt)(skill);
}



var InvalidMacroError = /*#__PURE__*/function (_Error) {_inherits(InvalidMacroError, _Error);var _super = _createSuper(InvalidMacroError);function InvalidMacroError() {MacroBuilder_classCallCheck(this, InvalidMacroError);return _super.apply(this, arguments);}return MacroBuilder_createClass(InvalidMacroError);}( /*#__PURE__*/_wrapNativeSuper(Error));

/**
 * BALLS macro builder for direct submission to KoL.
 * Create a new macro with `new Macro()` and add steps using the instance methods.
 * Uses a fluent interface, so each step returns the object for easy chaining of steps.
 * Each method is also defined as a static method that creates a new Macro with only that step.
 * For example, you can do `Macro.skill('Saucestorm').attack()`.
 */
var Macro = /*#__PURE__*/function () {function Macro() {MacroBuilder_classCallCheck(this, Macro);MacroBuilder_defineProperty(this, "components",





    []);MacroBuilder_defineProperty(this, "name",
    MACRO_NAME);}MacroBuilder_createClass(Macro, [{ key: "toString", value:

    /**
     * Convert macro to string.
     */
    function toString() {
      return this.components.join(";");
    }

    /**
     * Gives your macro a new name to be used when saving an autoattack.
     * @param name The name to be used when saving as an autoattack.
     * @returns The previous name assigned to this macro.
     */ }, { key: "rename", value:
    function rename(name) {
      var returnValue = this.name;
      this.name = name;
      return returnValue;
    }

    /**
     * Save a macro to a Mafia property for use in a consult script.
     */ }, { key: "save", value:
    function save() {
      (0,external_kolmafia_namespaceObject.setProperty)(Macro.SAVED_MACRO_PROPERTY, this.toString());
    }

    /**
     * Load a saved macro from the Mafia property.
     */ }, { key: "step", value:













    /**
     * Statefully add one or several steps to a macro.
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */
    function step() {var _ref;for (var _len = arguments.length, nextSteps = new Array(_len), _key = 0; _key < _len; _key++) {nextSteps[_key] = arguments[_key];}
      var nextStepsStrings = (_ref = []).concat.apply(_ref, _toConsumableArray(
      nextSteps.map((x) => x instanceof Macro ? x.components : [x])));

      this.components = [].concat(_toConsumableArray(
      this.components), _toConsumableArray(
      nextStepsStrings.filter((s) => s.length > 0)));

      return this;
    }

    /**
     * Statefully add one or several steps to a macro.
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */ }, { key: "submit", value:







    /**
     * Submit the built macro to KoL. Only works inside combat.
     */
    function submit() {
      var final = this.toString();
      return (0,external_kolmafia_namespaceObject.visitUrl)("fight.php?action=macro&macrotext=".concat(
      (0,external_kolmafia_namespaceObject.urlEncode)(final)),
      true,
      true);

    }

    /**
     * Set this macro as a KoL native autoattack.
     */ }, { key: "setAutoAttack", value:
    function setAutoAttack() {
      var id = Macro.cachedMacroIds.get(this.name);
      if (id === undefined) {
        id = getMacroId(this.name);
        Macro.cachedMacroIds.set(this.name, id);
      }
      if (
      (0,external_kolmafia_namespaceObject.getAutoAttack)() === 99000000 + id &&
      this.toString() === Macro.cachedAutoAttacks.get(this.name))
      {
        // This macro is already set. Don"t make the server request.
        return;
      }

      (0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=".concat(
      id, "&name=").concat((0,external_kolmafia_namespaceObject.urlEncode)(
      this.name), "&macrotext=").concat(
      (0,external_kolmafia_namespaceObject.urlEncode)(this.toString()), "&action=save"),
      true,
      true);

      (0,external_kolmafia_namespaceObject.visitUrl)("account.php?am=1&action=autoattack&value=".concat(
      99000000 + id, "&ajax=1"));

      Macro.cachedAutoAttacks.set(this.name, this.toString());
    }

    /**
     * Renames the macro, then sets it as an autoattack.
     * @param name The name to save the macro under as an autoattack.
     */ }, { key: "setAutoAttackAs", value:
    function setAutoAttackAs(name) {
      this.name = name;
      this.setAutoAttack();
    }

    /**
     * Clear all cached autoattacks, and delete all stored macros server-side.
     */ }, { key: "abort", value:










    /**
     * Add an "abort" step to this macro.
     * @returns {Macro} This object itself.
     */
    function abort() {
      return this.step("abort");
    }

    /**
     * Create a new macro with an "abort" step.
     * @returns {Macro} This object itself.
     */ }, { key: "runaway", value:




    /**
     * Add a "runaway" step to this macro.
     * @returns {Macro} This object itself.
     */
    function runaway() {
      return this.step("runaway");
    }

    /**
     * Create a new macro with an "runaway" step.
     * @returns {Macro} This object itself.
     */ }, { key: "if_", value:




    /**
     * Add an "if" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
    function if_(
    condition,








    ifTrue)
    {
      return this.step("if ".concat(this.createBalls(condition))).
      step(ifTrue).
      step("endif");
    }
    /**
     * Add an "if not" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param ifFalse Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */ }, { key: "ifNot_", value:
    function ifNot_(
    condition,








    ifFalse)
    {
      return this.step("if !".concat(this.createBalls(condition))).
      step(ifFalse).
      step("endif");
    } }, { key: "createBalls", value:

    function createBalls(
    condition)








    {
      var ballsCondition = "";
      if (condition instanceof external_kolmafia_namespaceObject.Monster) {
        ballsCondition = "monsterid ".concat(condition.id);
      } else if (condition instanceof external_kolmafia_namespaceObject.Effect) {
        ballsCondition = "haseffect ".concat((0,external_kolmafia_namespaceObject.toInt)(condition));
      } else if (condition instanceof external_kolmafia_namespaceObject.Skill) {
        ballsCondition = "hasskill ".concat(skillBallsMacroName(condition));
      } else if (condition instanceof external_kolmafia_namespaceObject.Item) {
        if (!condition.combat) {
          throw new InvalidMacroError("Item ".concat(
          condition, " cannot be made a valid BALLS predicate (it is not combat-usable)"));

        }

        ballsCondition = "hascombatitem ".concat(itemOrItemsBallsMacroName(condition));
      } else if (condition instanceof external_kolmafia_namespaceObject.Location) {
        var snarfblat = condition.id;

        if (snarfblat < 1) {
          throw new InvalidMacroError("Location ".concat(
          condition, " cannot be made a valid BALLS predicate (it has no location id)"));

        }

        ballsCondition = "snarfblat ".concat(snarfblat);
      } else if (condition instanceof external_kolmafia_namespaceObject.Class) {
        if ((0,external_kolmafia_namespaceObject.toInt)(condition) > 6) {
          throw new InvalidMacroError("Class ".concat(
          condition, " cannot be made a valid BALLS predicate (it is not a standard class)"));

        }

        ballsCondition = condition.toString().replaceAll(" ", "").toLowerCase();
      } else if (condition instanceof external_kolmafia_namespaceObject.Stat) {
        ballsCondition = "".concat(condition.toString().toLowerCase(), "class");
      } else {
        ballsCondition = condition;
      }

      return ballsCondition;
    }

    /**
     * Create a new macro with an "if" statement.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */ }, { key: "while_", value:






















    /**
     * Add a "while" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */
    function while_(condition, contents) {
      return this.step("while ".concat(condition)).step(contents).step("endwhile");
    }

    /**
     * Create a new macro with a "while" statement.
     * @param condition The BALLS condition for the if statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */ }, { key: "externalIf", value:








    /**
     * Conditionally add a step to a macro based on a condition evaluated at the time of building the macro.
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */
    function externalIf(
    condition,
    ifTrue,
    ifFalse)
    {
      if (condition) return this.step(ifTrue);else
      if (ifFalse) return this.step(ifFalse);else
      return this;
    }

    /**
     * Create a new macro with a condition evaluated at the time of building the macro.
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */ }, { key: "repeat", value:









    /**
     * Add a repeat step to the macro.
     * @returns {Macro} This object itself.
     */
    function repeat() {
      return this.step("repeat");
    }

    /**
     * Add one or more skill cast steps to the macro.
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */ }, { key: "skill", value:
    function skill() {for (var _len2 = arguments.length, skills = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {skills[_key2] = arguments[_key2];}
      return this.step.apply(this, _toConsumableArray(
      skills.map((skill) => {
        return "skill ".concat(skillBallsMacroName(skill));
      })));

    }

    /**
     * Create a new macro with one or more skill cast steps.
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */ }, { key: "trySkill", value:







    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */
    function trySkill() {for (var _len3 = arguments.length, skills = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {skills[_key3] = arguments[_key3];}
      return this.step.apply(this, _toConsumableArray(
      skills.map((skill) => {
        return Macro.if_("hasskill ".concat(
        skillBallsMacroName(skill)),
        Macro.skill(skill));

      })));

    }

    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */ }, { key: "trySkillRepeat", value:







    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */
    function trySkillRepeat() {for (var _len4 = arguments.length, skills = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {skills[_key4] = arguments[_key4];}
      return this.step.apply(this, _toConsumableArray(
      skills.map((skill) => {
        return Macro.if_("hasskill ".concat(
        skillBallsMacroName(skill)),
        Macro.skill(skill).repeat());

      })));

    }

    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */ }, { key: "item", value:







    /**
     * Add one or more item steps to the macro.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function item() {for (var _len5 = arguments.length, items = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {items[_key5] = arguments[_key5];}
      return this.step.apply(this, _toConsumableArray(
      items.map((itemOrItems) => {
        return "use ".concat(itemOrItemsBallsMacroName(itemOrItems));
      })));

    }

    /**
     * Create a new macro with one or more item steps.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */ }, { key: "tryItem", value:







    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function tryItem() {for (var _len6 = arguments.length, items = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {items[_key6] = arguments[_key6];}
      return this.step.apply(this, _toConsumableArray(
      items.map((item) => {
        return Macro.if_(
        itemOrItemsBallsMacroPredicate(item), "use ".concat(
        itemOrItemsBallsMacroName(item)));

      })));

    }

    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */ }, { key: "attack", value:







    /**
     * Add an attack step to the macro.
     * @returns {Macro} This object itself.
     */
    function attack() {
      return this.step("attack");
    }

    /**
     * Create a new macro with an attack step.
     * @returns {Macro} This object itself.
     */ }, { key: "ifHolidayWanderer", value:




    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, unmutated.
     * @param macro The macro to place in the if_ statement
     */
    function ifHolidayWanderer(macro) {
      // const todaysWanderers = getTodaysHolidayWanderers();
      // if (todaysWanderers.length === 0) return this;
      // return this.if_(
      //   todaysWanderers.map((monster) => `monsterid ${monster.id}`).join(" || "),
      //   macro
      // );
      return this;
    }
    /**
     * Create a new macro starting with an ifHolidayWanderer step.
     * @param macro The macro to place inside the if_ statement
     */ }, { key: "ifNotHolidayWanderer", value:







    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, with the input macro appended.
     * @param macro The macro to place in the if_ statement.
     */
    function ifNotHolidayWanderer(macro) {
      /*const todaysWanderers = getTodaysHolidayWanderers();
      if (todaysWanderers.length === 0) return this.step(macro);
      return this.if_(
        todaysWanderers.map((monster) => `!monsterid ${monster.id}`).join(" && "),
        macro
      );*/
      return this;
    }
    /**
     * Create a new macro starting with an ifNotHolidayWanderer step.
     * @param macro The macro to place inside the if_ statement
     */ }], [{ key: "load", value: function load() {var _this;return (_this = new this()).step.apply(_this, _toConsumableArray((0,external_kolmafia_namespaceObject.getProperty)(Macro.SAVED_MACRO_PROPERTY).split(";")));} /**
     * Clear the saved macro in the Mafia property.
     */ }, { key: "clearSaved", value: function clearSaved() {(0,external_kolmafia_namespaceObject.removeProperty)(Macro.SAVED_MACRO_PROPERTY);} }, { key: "step", value: function step() {var _this2;return (_this2 = new this()).step.apply(_this2, arguments);} }, { key: "clearAutoAttackMacros", value: function clearAutoAttackMacros() {var _iterator = MacroBuilder_createForOfIteratorHelper(Macro.cachedAutoAttacks.keys()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _Macro$cachedMacroIds;var name = _step.value;var id = (_Macro$cachedMacroIds = Macro.cachedMacroIds.get(name)) !== null && _Macro$cachedMacroIds !== void 0 ? _Macro$cachedMacroIds : getMacroId(name);(0,external_kolmafia_namespaceObject.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&action=edit&what=Delete&confirm=1"));Macro.cachedAutoAttacks.delete(name);}} catch (err) {_iterator.e(err);} finally {_iterator.f();}} }, { key: "abort", value: function abort() {return new this().abort();} }, { key: "runaway", value: function runaway() {return new this().runaway();} }, { key: "if_", value: function if_(condition, ifTrue) {return new this().if_(condition, ifTrue);} /**
     * Create a new macro with an "if" statement.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */ }, { key: "ifNot_", value: function ifNot_(condition, ifTrue) {return new this().ifNot_(condition, ifTrue);} }, { key: "while_", value: function while_(condition, contents) {return new this().while_(condition, contents);} }, { key: "externalIf", value: function externalIf(condition, ifTrue, ifFalse) {return new this().externalIf(condition, ifTrue, ifFalse);} }, { key: "skill", value: function skill() {var _this3;return (_this3 = new this()).skill.apply(_this3, arguments);} }, { key: "trySkill", value: function trySkill() {var _this4;return (_this4 = new this()).trySkill.apply(_this4, arguments);} }, { key: "trySkillRepeat", value: function trySkillRepeat() {var _this5;return (_this5 = new this()).trySkillRepeat.apply(_this5, arguments);} }, { key: "item", value: function item() {var _this6;return (_this6 = new this()).item.apply(_this6, arguments);} }, { key: "tryItem", value: function tryItem() {var _this7;return (_this7 = new this()).tryItem.apply(_this7, arguments);} }, { key: "attack", value: function attack() {return new this().attack();} }, { key: "ifHolidayWanderer", value: function ifHolidayWanderer(macro) {return new this().ifHolidayWanderer(macro);} }, { key: "ifNotHolidayWanderer", value: function ifNotHolidayWanderer(macro) {return new this().ifNotHolidayWanderer(macro);} }]);return Macro;}();

/**
 * Adventure in a location and handle all combats with a given macro.
 * To use this function you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param macro Macro to execute.
 */MacroBuilder_defineProperty(Macro, "SAVED_MACRO_PROPERTY", "libram_savedMacro");MacroBuilder_defineProperty(Macro, "cachedMacroIds", new Map());MacroBuilder_defineProperty(Macro, "cachedAutoAttacks", new Map());
function adventureMacro(loc, macro) {
  macro.save();
  setAutoAttack(0);
  try {
    adv1(loc, 0, "");
    while (inMultiFight()) {runCombat();}
    if (choiceFollowsFight()) visitUrl("choice.php");
  } finally {
    Macro.clearSaved();
  }
}

/**
 * Adventure in a location and handle all combats with a given autoattack and manual macro.
 * To use the nextMacro parameter you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param autoMacro Macro to execute via KoL autoattack.
 * @param nextMacro Macro to execute manually after autoattack completes.
 */
function adventureMacroAuto(
loc,
autoMacro)

{var _nextMacro;var nextMacro = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  nextMacro = (_nextMacro = nextMacro) !== null && _nextMacro !== void 0 ? _nextMacro : Macro.abort();
  autoMacro.setAutoAttack();
  nextMacro.save();
  try {
    adv1(loc, 0, "");
    while (inMultiFight()) {runCombat();}
    if (choiceFollowsFight()) visitUrl("choice.php");
  } finally {
    Macro.clearSaved();
  }
}

var StrictMacro = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Macro) {_inherits(StrictMacro, _Macro);var _super2 = _createSuper(StrictMacro);function StrictMacro() {MacroBuilder_classCallCheck(this, StrictMacro);return _super2.apply(this, arguments);}MacroBuilder_createClass(StrictMacro, [{ key: "skill", value:
    /**
     * Add one or more skill cast steps to the macro.
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */
    function skill() {var _get2;for (var _len7 = arguments.length, skills = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {skills[_key7] = arguments[_key7];}
      return (_get2 = _get(_getPrototypeOf(StrictMacro.prototype), "skill", this)).call.apply(_get2, [this].concat(skills));
    }

    /**
     * Create a new macro with one or more skill cast steps.
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "item", value:







    /**
     * Add one or more item steps to the macro.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function item() {var _get3;for (var _len8 = arguments.length, items = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {items[_key8] = arguments[_key8];}
      return (_get3 = _get(_getPrototypeOf(StrictMacro.prototype), "item", this)).call.apply(_get3, [this].concat(items));
    }

    /**
     * Create a new macro with one or more item steps.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "trySkill", value:







    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkill() {var _get4;for (var _len9 = arguments.length, skills = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {skills[_key9] = arguments[_key9];}
      return (_get4 = _get(_getPrototypeOf(StrictMacro.prototype), "trySkill", this)).call.apply(_get4, [this].concat(skills));
    }

    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "tryItem", value:







    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function tryItem() {var _get5;for (var _len10 = arguments.length, items = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {items[_key10] = arguments[_key10];}
      return (_get5 = _get(_getPrototypeOf(StrictMacro.prototype), "tryItem", this)).call.apply(_get5, [this].concat(items));
    }

    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "trySkillRepeat", value:







    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkillRepeat() {var _get6;for (var _len11 = arguments.length, skills = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {skills[_key11] = arguments[_key11];}
      return (_get6 = _get(_getPrototypeOf(StrictMacro.prototype), "trySkillRepeat", this)).call.apply(_get6, [this].concat(skills));
    }

    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */ }], [{ key: "skill", value: function skill() {var _this8;return (_this8 = new this()).skill.apply(_this8, arguments);} }, { key: "item", value: function item() {var _this9;return (_this9 = new this()).item.apply(_this9, arguments);} }, { key: "trySkill", value: function trySkill() {var _this10;return (_this10 = new this()).trySkill.apply(_this10, arguments);} }, { key: "tryItem", value: function tryItem() {var _this11;return (_this11 = new this()).tryItem.apply(_this11, arguments);} }, { key: "trySkillRepeat", value:
    function trySkillRepeat()


    {var _this12;
      return (_this12 = new this()).trySkillRepeat.apply(_this12, arguments);
    } }]);return StrictMacro;}(Macro)));
;// CONCATENATED MODULE: ./src/typings/ResourceTypes.ts






// We should use the category only to determine if a quest is asking for a resource type, but doesn't tell us if it supports a certain resource or not. Aka not implemented.
var ResourceCategory;(function (ResourceCategory) {ResourceCategory[ResourceCategory["COPIER"] = 0] = "COPIER";ResourceCategory[ResourceCategory["OLFACT_COPIER"] = 1] = "OLFACT_COPIER";ResourceCategory[ResourceCategory["FAXER"] = 2] = "FAXER";ResourceCategory[ResourceCategory["CARGO_SHORTS"] = 3] = "CARGO_SHORTS";ResourceCategory[ResourceCategory["BANISHER"] = 4] = "BANISHER";ResourceCategory[ResourceCategory["YELLOW_RAY"] = 5] = "YELLOW_RAY";ResourceCategory[ResourceCategory["PULL"] = 6] = "PULL";ResourceCategory[ResourceCategory["ZAP"] = 7] = "ZAP";ResourceCategory[ResourceCategory["CLOVER"] = 8] = "CLOVER";ResourceCategory[ResourceCategory["POLAR_VORTEX"] = 9] = "POLAR_VORTEX";ResourceCategory[ResourceCategory["FIRE_EXTINGUSHER_ZONE"] = 10] = "FIRE_EXTINGUSHER_ZONE";ResourceCategory[ResourceCategory["GLOVE_REPLACE"] = 11] = "GLOVE_REPLACE";ResourceCategory[ResourceCategory["DECK_OF_EVERY_CARD"] = 12] = "DECK_OF_EVERY_CARD";ResourceCategory[ResourceCategory["DECK_OF_EVERY_CARD_CHEAT"] = 13] = "DECK_OF_EVERY_CARD_CHEAT";ResourceCategory[ResourceCategory["CAT_HEIST"] = 14] = "CAT_HEIST";ResourceCategory[ResourceCategory["HOT_TUB"] = 15] = "HOT_TUB";})(ResourceCategory || (ResourceCategory = {}));


















var ResourceIds = [
"Backup Camera",
"Cosplay Saber",
"Bowling Ball",
"Asdon",
"Combat Locket",
"Fax Machine",
"Wish",
"Cargo Shorts",
"Powerful Glove",
"Fire Extingusher",
"Yellow Rocket",
"Retro Yellow Ray",
"Pull",
"Clover",
"Deck of Every Card",
"Zap Wand",
"Cat Burglar Heist",
"Hot Tub",
"Chateau Painting"];


















var glove = external_kolmafia_namespaceObject.Item.get("Powerful Glove");

var gloveReplace = {
  type: ResourceCategory.GLOVE_REPLACE,
  id: "Powerful Glove",
  worthInAftercore: 22000,
  resourcesUsed: 10,
  prepare: (outfit) =>
  outfit != null ? outfit.addItem(glove) : null,
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("CHEAT CODE: Replace Enemy")) };


var clover = {
  type: ResourceCategory.CLOVER,
  id: "Clover",
  worthInAftercore: 22000, // How much we could sell a clover for
  prepare: () => {} };


var extingusher = external_kolmafia_namespaceObject.Item.get("industrial fire extinguisher");

var extingusherPolar = {
  type: ResourceCategory.POLAR_VORTEX,
  id: "Fire Extingusher",
  resourcesUsed: 10,
  worthInAftercore: 1500, // Tattered paper cost and assume free run
  prepare: (outfit) =>
  outfit != null ? outfit.addItem(extingusher) : null,
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Fire Extinguisher: Polar Vortex")) };


var extingusherZoneSpecific = {
  type: ResourceCategory.FIRE_EXTINGUSHER_ZONE,
  id: "Fire Extingusher",
  resourcesUsed: 20,
  worthInAftercore: 3000, // Tattered paper cost x 2
  prepare: (outfit) =>
  outfit != null ? outfit.addItem(extingusher) : null,
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Fire Extinguisher: Zone Specific")) };


var pull = {
  type: ResourceCategory.PULL,
  id: "Pull",
  worthInAftercore: (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("greyValueOfPull") || "0"), // This doesn't cost us anything to use
  prepare: () => {} };


var rocket = external_kolmafia_namespaceObject.Item.get("Yellow Rocket");
var vipInvitation = external_kolmafia_namespaceObject.Item.get("Clan VIP Lounge key");

var yellowRocket = {
  type: ResourceCategory.YELLOW_RAY,
  id: "Yellow Rocket",
  worthInAftercore: 250, // Cost of a yellow rocket
  prepare: () => {
    if ((0,external_kolmafia_namespaceObject.itemAmount)(rocket) == 0) {
      (0,external_kolmafia_namespaceObject.cliExecute)("acquire yellow rocket");
    }

    if ((0,external_kolmafia_namespaceObject.itemAmount)(rocket) == 0) {
      throw "Unable to acquire a yellow rocket";
    }
  },
  macro: () => Macro.item(external_kolmafia_namespaceObject.Item.get("Yellow Rocket")),
  ready: () =>
  (0,external_kolmafia_namespaceObject.myMeat)() > 300 && (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Everything Looks Yellow")) == 0 };


var retrocape = external_kolmafia_namespaceObject.Item.get("unwrapped knock-off retro superhero cape");

var retroRay = {
  type: ResourceCategory.YELLOW_RAY,
  id: "Retro Yellow Ray",
  worthInAftercore: 0,
  prepare: (outfit, props) => {
    if (outfit != null) {
      outfit.addItem(retrocape);
    }

    if (props != null) {
      (0,external_kolmafia_namespaceObject.cliExecute)("retro heck kiss");
    }
  },
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Unleash the Devil's Kiss")),
  ready: () =>
  (0,external_kolmafia_namespaceObject.myMeat)() > 300 && (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Everything Looks Yellow")) == 0 };


var cosplaySaber = external_kolmafia_namespaceObject.Item.get("Fourth of May Cosplay Saber");

var cosplayYellowRay = {
  type: ResourceCategory.YELLOW_RAY,
  id: "Cosplay Saber",
  // If we have more than 60 pills, the saber is free. Otherwise it's worth 3k meat when its alien free day
  worthInAftercore:
  (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("distention pill")) > 60 ?
  0 :
  (0,external_kolmafia_namespaceObject.modifierEval)("G") >= 4 ?
  3000 :
  0, // Garbo has some use of it, but if you have an oflaction like its basically worth grimace pill/2 free fights
  prepare: (outfit, props) => {
    if (outfit != null) {
      outfit.addItem(cosplaySaber);
    }
    if (props != null) {
      props.setChoice(1387, 3);
    }
  },
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Use The Force")),
  ready: () => true };


var backupCamera = external_kolmafia_namespaceObject.Item.get("Backup Camera");

var backupCopier = {
  type: ResourceCategory.COPIER,
  id: "Backup Camera",
  worthInAftercore: 20000, // Embezzler
  prepare: (outfit) =>
  outfit != null ? outfit.addItem(backupCamera) : null,
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Back-Up to your Last Enemy")) };


var cosplayCopier = {
  type: ResourceCategory.OLFACT_COPIER,
  id: "Cosplay Saber",
  worthInAftercore: 3000, // Garbo has some use of it, but if you have an oflaction like its basically worth grimace pill/2 free fights
  prepare: (outfit, props) => {
    if (outfit != null) {
      outfit.addItem(cosplaySaber);
    }
    if (props != null) {
      props.setChoice(1387, 2);
    }
  },
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Use The Force")) };


var cargoShorts = {
  type: ResourceCategory.CARGO_SHORTS,
  id: "Cargo Shorts",
  worthInAftercore: 30000, // Some sellable item
  prepare: () => {},
  pocket: function (_pocket) {function pocket(_x) {return _pocket.apply(this, arguments);}pocket.toString = function () {return _pocket.toString();};return pocket;}((pocket) => {
    (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?action=pocket");
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1420&option=1&pocket=" + pocket + "&pwd=");
  }) };


var faxMachine = {
  type: ResourceCategory.FAXER,
  id: "Fax Machine",
  worthInAftercore: 20000, // Embezzler
  prepare: () => {},
  fax: (monster) => {
    if (!(0,external_kolmafia_namespaceObject.canFaxbot)(monster)) {
      throw (
        "Can't fax in " +
        monster.name +
        ". Try fax it in manually, and yellow rocket it?");

    }

    (0,external_kolmafia_namespaceObject.faxbot)(monster);

    if ((0,external_kolmafia_namespaceObject.getProperty)("photocopyMonster") != monster.name) {
      throw (
        "Expected " +
        monster.name +
        " but mafia reports we have a faxed " +
        (0,external_kolmafia_namespaceObject.getProperty)("photocopyMonster") +
        ". Try fax it in manually and yellow rocket it?");

    }

    (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?which=3&whichitem=4873&pwd");
  } };


var combatLocket = {
  type: ResourceCategory.FAXER,
  id: "Combat Locket",
  worthInAftercore: 20000, // Embezzler
  prepare: () => {},
  fax: (monster) => {
    (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?reminisce=1", false);
    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1463&option=1&mid=" + (0,external_kolmafia_namespaceObject.toInt)(monster));
  } };


var wish = external_kolmafia_namespaceObject.Item.get("Pocket Wish");
var genieBottle = external_kolmafia_namespaceObject.Item.get("Genie Bottle");

var wishFaxer = {
  type: ResourceCategory.FAXER,
  id: "Wish",
  worthInAftercore: 50000, // Sell
  prepare: () => {},
  fax: (monster) => {
    if (
    (0,external_kolmafia_namespaceObject.availableAmount)(genieBottle) > 0 &&
    (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_genieWishesUsed")) < 3)
    {
      (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd=&which=99&whichitem=9529");
    } else if ((0,external_kolmafia_namespaceObject.availableAmount)(wish) == 0) {
      throw "Not enough pocket wishes!";
    } else {
      (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd=&which=99&whichitem=9537");
    }

    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?forceoption=0");

    try {
      (0,external_kolmafia_namespaceObject.visitUrl)(
      "choice.php?pwd=&option=1&whichchoice=1267&wish=" +
      (0,external_kolmafia_namespaceObject.urlEncode)("to fight " + monster.name),
      true,
      true);

    } catch (e) {
      (0,external_kolmafia_namespaceObject.print)(e);
    }

    (0,external_kolmafia_namespaceObject.visitUrl)("choice.php");

    if ((0,external_kolmafia_namespaceObject.currentRound)() == 0) {
      throw "Failed to wish in a monster";
    }
  } };


var cosplayBanisher = {
  type: ResourceCategory.BANISHER,
  id: "Cosplay Saber",
  worthInAftercore: 3000, // Garbo has some use of it, but if you have an oflaction like its basically worth grimace pill/2 free fights
  prepare: (outfit, props) => {
    if (outfit != null) {
      outfit.addItem(cosplaySaber);
    }
    if (outfit != null) {
      props.setChoice(1387, 3);
    }
  },
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Use The Force")) };


var bowlingBall = {
  type: ResourceCategory.BANISHER,
  id: "Bowling Ball",
  worthInAftercore: 0, // This doesn't cost us anything to use
  prepare: () => {},
  macro: () => Macro.skill(external_kolmafia_namespaceObject.Skill.get("Bowl a Curveball")) };


var asdon = {
  type: ResourceCategory.BANISHER,
  id: "Asdon",
  worthInAftercore: 900, // The rough price to fuel up the asdon
  prepare: () => {} };


var deckOfEveryCard = {
  type: ResourceCategory.DECK_OF_EVERY_CARD,
  id: "Deck of Every Card",
  worthInAftercore: 2000,
  prepare: () => {},
  pickCard: (card) => {
    if (card != null) {
      throw "You're not running a Pack of Cards Cheat, why provide a card name?";
    }

    (0,external_kolmafia_namespaceObject.cliExecute)("play random");
  } };


var deckOfEveryCardCheat = {
  type: ResourceCategory.DECK_OF_EVERY_CARD_CHEAT,
  id: "Deck of Every Card",
  worthInAftercore: 20000, // Worth 20k, 20k and 10k (Blue mana x2, then misc)
  resourcesUsed: 5,
  prepare: () => {},
  pickCard: (card) => (0,external_kolmafia_namespaceObject.cliExecute)("cheat ".concat(card)) };


var zappable = {
  type: ResourceCategory.ZAP,
  id: "Zap Wand",
  worthInAftercore: 15000,
  prepare: () => {} };


var catHeist = {
  type: ResourceCategory.CAT_HEIST,
  id: "Cat Burglar Heist",
  worthInAftercore: 0,
  prepare: () => {},
  doHeist: (item) => {
    if (
    (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("catBurglarBankHeists")) == 0 &&
    (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_catBurglarCharge")) <
    10 * ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_catBurglarHeistsComplete")) + 1))
    {
      throw "Unable to heist, no heists available!";
    }

    var heistResult = (0,external_kolmafia_namespaceObject.heist)(item);

    if (!heistResult) {
      throw "Failed to perform a cat burglar heist";
    }
  } };


var chateauPainting = {
  type: ResourceCategory.FAXER,
  id: "Chateau Painting",
  worthInAftercore: 5000,
  prepare: () => {},
  fax: (monster) => {
    if ((0,external_kolmafia_namespaceObject.toMonster)((0,external_kolmafia_namespaceObject.getProperty)("chateauMonster")) != monster) {
      throw "Unexpected monster attempted to fax!";
    }
  } };


var hottub = {
  type: ResourceCategory.HOT_TUB,
  id: "Hot Tub",
  worthInAftercore: 0,
  prepare: () => {} };


var allResources = [
gloveReplace,
clover,
extingusherPolar,
extingusherZoneSpecific,
pull,
yellowRocket,
cosplayYellowRay,
backupCopier,
cosplayCopier,
cargoShorts,
faxMachine,
combatLocket,
wishFaxer,
cosplayBanisher,
bowlingBall,
asdon,
deckOfEveryCard,
deckOfEveryCardCheat,
zappable,
catHeist,
hottub,
retroRay,
chateauPainting].
sort((r1, r2) => r1.worthInAftercore - r2.worthInAftercore);

function getResources() {
  return allResources;
}

function getResourcesLeft(
resourceType)

{var assumeUnused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  switch (resourceType) {
    case "Asdon":
      return 0;
    case "Yellow Rocket":
      if ((0,external_kolmafia_namespaceObject.availableAmount)(vipInvitation) == 0) {
        return 0;
      }

      {
        var turnsRemaining =
        650 - (
        assumeUnused ?
        0 :
        (0,external_kolmafia_namespaceObject.turnsPlayed)() +
        (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Everything Looks Yellow")));

        return Math.floor(turnsRemaining / 75);
      }
    case "Retro Yellow Ray":
      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(vipInvitation) > 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(retrocape) == 0)
      {
        return 0;
      }
      {
        var _turnsRemaining =
        650 - (
        assumeUnused ?
        0 :
        (0,external_kolmafia_namespaceObject.turnsPlayed)() +
        (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Everything Looks Yellow")));

        return Math.floor(_turnsRemaining / 100);
      }
    case "Pull":
      if (GreySettings.isHardcoreMode()) {
        return 0;
      }

      if (!assumeUnused && (0,external_kolmafia_namespaceObject.pullsRemaining)() == -1) {
        return 1000;
      }

      // Clamp
      var pullsLimit = Math.max(0, Math.min(GreySettings.greyPullsLimit, 20));

      if (assumeUnused) {
        return pullsLimit;
      }

      var greyPulled = (0,external_kolmafia_namespaceObject.getProperty)("_greyPulls").
      split(",").
      filter((s) => s.length > 0);

      var pullsAllowed = Math.min(
      (0,external_kolmafia_namespaceObject.pullsRemaining)(),
      pullsLimit - greyPulled.length);


      return Math.max(0, pullsAllowed);
    case "Backup Camera":
      return (0,external_kolmafia_namespaceObject.availableAmount)(backupCamera) > 0 ?
      11 - (assumeUnused ? 0 : (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_backUpUses"))) :
      0;
    case "Combat Locket":
      return (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Combat Lover's Locket")) > 0 ?
      3 - (
      assumeUnused ?
      0 :
      (0,external_kolmafia_namespaceObject.getProperty)("_locketMonstersFought").
      split(",").
      filter((s) => s.length > 0).length) :
      0;
    case "Cargo Shorts":
      return (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Cargo Cultist Shorts")) > 0 && (
      assumeUnused || (0,external_kolmafia_namespaceObject.getProperty)("_cargoPocketEmptied") != "true") ?
      1 :
      0;
    case "Powerful Glove":
      return (0,external_kolmafia_namespaceObject.availableAmount)(glove) > 0 ?
      100 - (
      assumeUnused ?
      0 :
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_powerfulGloveBatteryPowerUsed"))) :
      0;
    case "Fire Extingusher":
      return (0,external_kolmafia_namespaceObject.availableAmount)(extingusher) > 0 ?
      assumeUnused ?
      100 :
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_fireExtinguisherCharge")) :
      0;
    case "Clover":
      return assumeUnused || !(0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("breakfastCompleted")) ?
      3 :
      (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("11-leaf clover"));
    case "Deck of Every Card":
      return (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Deck of Every Card")) > 0 ?
      15 - (assumeUnused ? 0 : (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_deckCardsDrawn"))) :
      0;
    case "Zap Wand":
      return Math.max(
      0,
      2 - (assumeUnused ? 0 : (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_zapCount"))));

    case "Cosplay Saber":
      return (0,external_kolmafia_namespaceObject.availableAmount)(cosplaySaber) > 0 ?
      5 - (assumeUnused ? 0 : (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_saberForceUses"))) :
      0;
    case "Bowling Ball":
      return 0;
    case "Wish":
      var haveBottle = (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Genie Bottle")) > 0;

      if (!haveBottle) {
        return 0;
      }

      if (assumeUnused) {
        return 3;
      }

      var fightsRemaining = 3 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_genieFightsUsed"));
      var wishesAvailable = Math.max(
      (0,external_kolmafia_namespaceObject.availableAmount)(wish),
      3 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_genieWishesUsed")));


      return Math.min(fightsRemaining, wishesAvailable);
    case "Fax Machine":
      return (0,external_kolmafia_namespaceObject.availableAmount)(vipInvitation) > 0 && (
      assumeUnused || (0,external_kolmafia_namespaceObject.getProperty)("_photocopyUsed") == "false") ?
      1 :
      0;
    case "Cat Burglar Heist":
      return (0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Cat Burglar")) ?
      assumeUnused ?
      1 :
      1 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_catBurglarHeistsComplete")) :
      0;
    case "Hot Tub":
      if ((0,external_kolmafia_namespaceObject.availableAmount)(vipInvitation) == 0) {
        return 0;
      }

      return 5 - (assumeUnused ? 0 : (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_hotTubSoaks")));
    case "Chateau Painting":
      if (!(0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("chateauAvailable"))) {
        return 0;
      }

      return assumeUnused || !(0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("_chateauMonsterFought")) ?
      1 :
      0;
    default:
      throw "No idea what the resource " + resourceType + " is.";}

}
;// CONCATENATED MODULE: ./src/typings/TaskInfo.ts
function TaskInfo_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) TaskInfo_setPrototypeOf(subClass, superClass);}function TaskInfo_setPrototypeOf(o, p) {TaskInfo_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return TaskInfo_setPrototypeOf(o, p);}function TaskInfo_createSuper(Derived) {var hasNativeReflectConstruct = TaskInfo_isNativeReflectConstruct();return function _createSuperInternal() {var Super = TaskInfo_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = TaskInfo_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return TaskInfo_possibleConstructorReturn(this, result);};}function TaskInfo_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return TaskInfo_assertThisInitialized(self);}function TaskInfo_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function TaskInfo_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function TaskInfo_getPrototypeOf(o) {TaskInfo_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return TaskInfo_getPrototypeOf(o);}function TaskInfo_toConsumableArray(arr) {return TaskInfo_arrayWithoutHoles(arr) || TaskInfo_iterableToArray(arr) || TaskInfo_unsupportedIterableToArray(arr) || TaskInfo_nonIterableSpread();}function TaskInfo_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskInfo_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function TaskInfo_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return TaskInfo_arrayLikeToArray(arr);}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || TaskInfo_unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function TaskInfo_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskInfo_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function TaskInfo_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskInfo_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskInfo_arrayLikeToArray(o, minLen);}function TaskInfo_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function TaskInfo_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskInfo_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskInfo_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskInfo_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskInfo_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskInfo_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}





var TaskInfo = /*#__PURE__*/TaskInfo_createClass(function TaskInfo() {TaskInfo_classCallCheck(this, TaskInfo);});





















var ResourcesSnapshot = /*#__PURE__*/TaskInfo_createClass(function ResourcesSnapshot() {TaskInfo_classCallCheck(this, ResourcesSnapshot);TaskInfo_defineProperty(this, "resources",
  []);TaskInfo_defineProperty(this, "resourceMap",
  new Map());TaskInfo_defineProperty(this, "unused",
  []);} // For those special resources that have limits that change on the fly, aka yellow rocket
);

var PossiblePath = /*#__PURE__*/function () {










  function PossiblePath(advsMin) {var advsMax = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : advsMin;TaskInfo_classCallCheck(this, PossiblePath);TaskInfo_defineProperty(this, "resourcesNeeded", []);TaskInfo_defineProperty(this, "resourceUsed", []);TaskInfo_defineProperty(this, "resourcesAvailable", []);TaskInfo_defineProperty(this, "ignoreResources", []);TaskInfo_defineProperty(this, "pulls", []);TaskInfo_defineProperty(this, "advsSavedMin", void 0);TaskInfo_defineProperty(this, "advsSavedMax", void 0);TaskInfo_defineProperty(this, "miscMeat", 0);TaskInfo_defineProperty(this, "pathCost", void 0);
    this.advsSavedMax = advsMax;
    this.advsSavedMin = advsMin;
  }TaskInfo_createClass(PossiblePath, [{ key: "setRoughPathCost", value:

    function setRoughPathCost(resourcesUsed) {
      this.pathCost = this.miscMeat;var _iterator = TaskInfo_createForOfIteratorHelper(

      resourcesUsed),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = _slicedToArray(_step.value, 2),res = _step$value[1];
          this.pathCost += res.worthInAftercore;
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getAverageTurns", value:

    function getAverageTurns() {
      return Math.ceil((this.advsSavedMin + this.advsSavedMax) / 2);
    } }, { key: "getCostOfPath", value:

    function getCostOfPath() {
      return (
        this.pathCost + this.getAverageTurns() * GreySettings.greyValueOfAdventure);

    } }, { key: "getCostPerAdv", value:

    function getCostPerAdv() {
      return this.pathCost / this.getAverageTurns();
    } }, { key: "clone", value:

    function clone() {
      var path = new PossiblePath(this.advsSavedMin, this.advsSavedMax);
      path.resourcesNeeded = TaskInfo_toConsumableArray(
      this.resourcesNeeded.map(
      (_ref) => {var _ref2 = _slicedToArray(_ref, 2),v1 = _ref2[0],v2 = _ref2[1];return [v1, v2];}));


      path.resourceUsed = TaskInfo_toConsumableArray(this.resourceUsed);
      path.resourcesAvailable = TaskInfo_toConsumableArray(this.resourcesAvailable);
      path.ignoreResources = TaskInfo_toConsumableArray(this.ignoreResources);
      path.miscMeat = this.miscMeat;

      return path;
    } }, { key: "detectResourceUsage", value:

    function detectResourceUsage(snapshot) {var _this = this;
      var changed = getResourcesChanged(snapshot, this);
      var diff = changed.resourceMap;
      // Get all resources that were among the changed, and uses enough of the resource to fit in
      var viableResources = this.resourcesAvailable.filter(
      (r) => {var _r$resourcesUsed;return diff.has(r.id) && diff.get(r.id) >= ((_r$resourcesUsed = r.resourcesUsed) !== null && _r$resourcesUsed !== void 0 ? _r$resourcesUsed : 1);});var _iterator2 = TaskInfo_createForOfIteratorHelper(


      diff.keys()),_step2;try {var _loop = function _loop() {var _resources$0$resource, _changed$resources;var resourceId = _step2.value;
          var resources = viableResources.filter((r) => r.id == resourceId);

          if (resources.length == 0) {
            return "continue";
          }

          // If all the resources using this key, are not of the same type
          if (resources.filter((r) => r.type != resources[0].type).length > 1) {
            throw "Multiple resources of the same source were used, need to manually register the resources of ".concat(resourceId, " and types ").concat(resources.map(
            (r) => ResourceCategory[r.type]), " as used.");

          }

          var amountUsed =
          diff.get(resourceId) / ((_resources$0$resource = resources[0].resourcesUsed) !== null && _resources$0$resource !== void 0 ? _resources$0$resource : 1);

          if (amountUsed % 1 != 0) {var _resources$0$resource2;
            throw "Unexpected amount of a resource used! Expected a multiple of ".concat((_resources$0$resource2 =
            resources[0].resourcesUsed) !== null && _resources$0$resource2 !== void 0 ? _resources$0$resource2 : 1, " from ").concat(
            resources[0].id, " of type ").concat(
            ResourceCategory[resources[0].type], " but got a total of ").concat(
            diff.get(resourceId), " used!");
          }

          if (amountUsed > resources.length) {
            throw "Unexpected amount of a resource used! Expected ".concat(
            resources.length, " or less of ").concat(
            resources[0].id, " of type ").concat(
            ResourceCategory[resources[0].type], " but got a total of ").concat(
            diff.get(resourceId), " used!");
          }

          _this.addUsedResource(resources[0], amountUsed);
          (_changed$resources = changed.resources).push.apply(_changed$resources, TaskInfo_toConsumableArray(resources.slice(0, amountUsed)));
          (0,external_kolmafia_namespaceObject.print)(
          "Detected resource change, " +
          resources[0].id +
          " of " +
          ResourceCategory[resources[0].type] +
          " x " +
          amountUsed);};for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;

        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return changed;
    } }, { key: "addMeat", value:

    function addMeat(meat) {
      this.miscMeat += meat;

      return this;
    } }, { key: "addIgnored", value:

    function addIgnored(resource) {
      this.ignoreResources.push(resource);

      return this;
    } }, { key: "getResource", value:

    function getResource(resource) {
      return this.resourcesAvailable.find((r) => r.type == resource);
    } }, { key: "addUsedResource", value:

    function addUsedResource(resource) {var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      for (var i = 0; i < amount; i++) {
        var index = this.resourcesAvailable.findIndex((r) => r === resource);

        if (index >= 0) {
          this.resourcesAvailable.splice(index, 1);
        } else {
          throw "Expected to find a ".concat(resource.id, " of type ").concat(
          ResourceCategory[resource.type], " but none were remaining!");

        }

        this.resourceUsed.push(resource.type);
      }

      return this;
    } }, { key: "addUsed", value:

    function addUsed(resource) {var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      for (var i = 0; i < amount; i++) {
        var index = this.resourcesAvailable.findIndex(
        (r) => r.type == resource);


        if (index >= 0) {
          this.resourcesAvailable.splice(index, 1);
        }

        this.resourceUsed.push(resource);
      }

      return this;
    } }, { key: "canUse", value:

    function canUse(resource) {
      return Math.max(
      0,
      this.resourcesNeeded.filter((r) => r[0] == resource).length -
      this.getUsed(resource));

    } }, { key: "addMaybe", value:

    function addMaybe(
    resource,
    chance)

    {var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      for (var i = 0; i < amount; i++) {
        this.resourcesNeeded.push([resource, chance]);
      }

      return this;
    } }, { key: "addConsumablePull", value:

    function addConsumablePull(item) {var chance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.addMeat((0,external_kolmafia_namespaceObject.historicalPrice)(item) * 1.1);

      return this.addPull(item, chance);
    } }, { key: "addPull", value:

    function addPull(item) {var chance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.pulls.push(item);

      return this.addMaybe(ResourceCategory.PULL, chance);
    } }, { key: "addFax", value:

    function addFax(monster) {var chance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      if (!(0,external_kolmafia_namespaceObject.canFaxbot)(monster)) {
        this.addIgnored("Fax Machine");
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("chateauMonster") != "" &&
      (0,external_kolmafia_namespaceObject.toMonster)((0,external_kolmafia_namespaceObject.getProperty)("chateauMonster")) != monster)
      {
        this.addIgnored("Chateau Painting");
      }

      var foughtLocket = (0,external_kolmafia_namespaceObject.getProperty)("_locketMonstersFought").
      split(",").
      map((s) => (0,external_kolmafia_namespaceObject.toInt)(s));

      if (
      foughtLocket.length < 3 && (
      foughtLocket.includes((0,external_kolmafia_namespaceObject.toInt)(monster)) ||
      !(0,external_kolmafia_namespaceObject.getLocketMonsters)()[monster.name]))
      {
        this.addIgnored("Combat Locket");
      }

      return this.addMaybe(ResourceCategory.FAXER, chance);
    } }, { key: "add", value:

    function add(resource) {var resources = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      if (resource == ResourceCategory.PULL) {
        throw "Please use addPull instead";
      }

      if (resource == ResourceCategory.FAXER) {
        throw "Please use addFax instead";
      }

      this.addMaybe(resource, 1, resources);

      return this;
    } }, { key: "getUsed", value:

    function getUsed(resource) {
      return this.resourceUsed.filter((r) => r == resource).length;
    } }]);return PossiblePath;}();


var PossibleMultiPath = /*#__PURE__*/function (_PossiblePath) {TaskInfo_inherits(PossibleMultiPath, _PossiblePath);var _super = TaskInfo_createSuper(PossibleMultiPath);function PossibleMultiPath() {var _this2;TaskInfo_classCallCheck(this, PossibleMultiPath);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this2 = _super.call.apply(_super, [this].concat(args));TaskInfo_defineProperty(TaskInfo_assertThisInitialized(_this2), "subpaths",
    []);return _this2;}TaskInfo_createClass(PossibleMultiPath, [{ key: "addPath", value:

    function addPath(quest, path) {var _this$resourcesNeeded, _this$resourceUsed, _this$resourcesAvaila, _this$ignoreResources, _this$pulls;
      this.subpaths.push([quest, path]);

      (_this$resourcesNeeded = this.resourcesNeeded).push.apply(_this$resourcesNeeded, TaskInfo_toConsumableArray(path.resourcesNeeded));
      (_this$resourceUsed = this.resourceUsed).push.apply(_this$resourceUsed, TaskInfo_toConsumableArray(path.resourceUsed));
      (_this$resourcesAvaila = this.resourcesAvailable).push.apply(_this$resourcesAvaila, TaskInfo_toConsumableArray(path.resourcesAvailable));
      (_this$ignoreResources = this.ignoreResources).push.apply(_this$ignoreResources, TaskInfo_toConsumableArray(path.ignoreResources));
      (_this$pulls = this.pulls).push.apply(_this$pulls, TaskInfo_toConsumableArray(path.pulls));
      this.advsSavedMin += path.advsSavedMin;
      this.advsSavedMax += path.advsSavedMax;
      this.miscMeat += path.miscMeat;
    } }]);return PossibleMultiPath;}(PossiblePath);


var TaskRelation;(function (TaskRelation) {TaskRelation[TaskRelation["WAIT_FOR"] = 0] = "WAIT_FOR";TaskRelation[TaskRelation["DO_BEFORE"] = 1] = "DO_BEFORE";TaskRelation[TaskRelation["DO_AFTER"] = 2] = "DO_AFTER";TaskRelation[TaskRelation["UNRELATED"] = 3] = "UNRELATED";})(TaskRelation || (TaskRelation = {}));






function createResourcesSnapshot(
path)
{
  var snapshot = new ResourcesSnapshot();var _iterator3 = TaskInfo_createForOfIteratorHelper(

  ResourceIds),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var resource = _step3.value;
      if (resource == "Yellow Rocket" || resource == "Retro Yellow Ray") {
        if ((0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Everything Looks Yellow")) == 0) {
          snapshot.unused.push(resource);
        }
      }

      snapshot.resourceMap.set(resource, getResourcesLeft(resource));
    }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

  if (path != null) {var _snapshot$resources;
    (_snapshot$resources = snapshot.resources).push.apply(_snapshot$resources, TaskInfo_toConsumableArray(path.resourcesAvailable));
  }

  return snapshot;
}

function getResourcesChanged(
snapshot,
path)
{
  var newSnapshot = new ResourcesSnapshot();var _iterator4 = TaskInfo_createForOfIteratorHelper(

  ResourceIds),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var resource = _step4.value;
      var resourcesLeft = getResourcesLeft(resource);

      // If this resource is a yellow rocket
      if (resource == "Yellow Rocket" || resource == "Retro Yellow Ray") {
        // We're not checking resources left, instead we're checking another state
        resourcesLeft = snapshot.resourceMap.get(resource);
        // If we have yellow vision, and previously it was unused
        if (
        (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Everything Looks Yellow")) > (
        resource == "Retro Yellow Ray" ? 80 : 60) &&
        snapshot.unused.includes(resource))
        {
          resourcesLeft--;
        }
      }

      // 20 - 19 = 1 resource used.
      var res = snapshot.resourceMap.get(resource) - resourcesLeft;

      if (res === 0) {
        continue;
      }

      newSnapshot.resourceMap.set(resource, res);
    }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

  newSnapshot.resources = [];

  if (path == null) {
    return newSnapshot;
  }

  // Now we're looking for the difference between available resources, and previously available

  var lastIndex = 0;

  snapshot.resources.forEach((resource) => {
    if (lastIndex < path.resourcesAvailable.length) {
      if (path.resourcesAvailable[lastIndex] === resource) {
        lastIndex++;
        return;
      }
    }

    newSnapshot.resources.push(resource);
    (0,external_kolmafia_namespaceObject.print)("Removing " + resource.id + " x " + ResourceCategory[resource.type]);
  });

  if (newSnapshot.resources.length > 0) {
    (0,external_kolmafia_namespaceObject.print)(
    "We manually used: " +
    newSnapshot.resources.
    map((r) => r.id + " x " + ResourceCategory[r.type]).
    join(", "));

  }

  return newSnapshot;
}

// TODO Read combats.txt to find out the combat rate of the area. Then figure out how much +combat and -combat we can stack.
// May need to do something for predicting future -combat and +combat
var combatPercents = new Map();

function getCombatRate(location) {
  if (combatPercents.size == 0) {
    var buffer = fileToBuffer("combats.txt");var _iterator5 = TaskInfo_createForOfIteratorHelper(
    buffer.split("\n").map((s) => s.split("\t"))),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var _step5$value = _slicedToArray(_step5.value, 2),loc = _step5$value[0],combats = _step5$value[1];
        if (combats == null || !combats.match(/-?\d+/)) {
          continue;
        }

        var l = Location.get(loc);

        if (l == Location.get("None")) {
          continue;
        }

        combatPercents.set(l, parseInt(combats));
      }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}
  }

  return combatPercents.get(location);
}


// What we going to do about resources like -combat, limited banishes, and the like?
// The obvious answer is to expose a generic interface, listing a benifit, listing a cost, listing how long the benifit lasts

var nanovision = external_kolmafia_namespaceObject.Skill.get("Double Nanovision");
var compression = external_kolmafia_namespaceObject.Skill.get("Gravitational Compression");

function getEstimatedTurnsToDrop(
location,
item,
amount)
{
  var itemDrop = 1 + (haveSkill(nanovision) ? 2 : 0);

  var rates = Object.entries(
  appearanceRates(location)).
  map((val) => [Monster.get(val[0]), val[1]]);
  var dropChances = [];var _iterator6 = TaskInfo_createForOfIteratorHelper(

  rates),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var _step6$value = _slicedToArray(_step6.value, 2),monster = _step6$value[0],_rate = _step6$value[1];
      if (_rate <= 0 || isBanished(monster)) {
        continue;
      }

      var drops = Object.entries(itemDrops(monster)).map(
      (_ref3) => {var _ref4 = _slicedToArray(_ref3, 2),i = _ref4[0],n = _ref4[1];return [Item.get(i), n];});


      var _rates = [];var _iterator7 = TaskInfo_createForOfIteratorHelper(

      drops),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var _step7$value = _slicedToArray(_step7.value, 2),i = _step7$value[0],perc = _step7$value[1];
          if (i != item) {
            continue;
          }

          _rates.push(perc);
        }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}

      dropChances.push([_rate, _rates]);
    }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}

  var dropChancePerFight = 0;

  for (var _i2 = 0, _dropChances = dropChances; _i2 < _dropChances.length; _i2++) {var _dropChances$_i = _slicedToArray(_dropChances[_i2], 2),rate = _dropChances$_i[0],chances = _dropChances$_i[1];
    if (chances.length == 0) {
      continue;
    }

    dropChancePerFight += rate / 100 * chances.reduce((c, p) => c + p, 0);
  }

  dropChancePerFight = dropChancePerFight / 100;

  return null;
}

function getEstimatedTurnsToHitMonster(
location,
monster)
{
  // TODO Calculate crystal ball, banishes, +combat.
  // Something to account for when we're not allowed to run +combat effect
  // Account for banishes
  return [0, 0];
}

function getEstimatedTurnsToHitNC(location) {
  return [0, 0];
}
;// CONCATENATED MODULE: ./src/utils/GreyUtils.ts
function GreyUtils_slicedToArray(arr, i) {return GreyUtils_arrayWithHoles(arr) || GreyUtils_iterableToArrayLimit(arr, i) || GreyUtils_unsupportedIterableToArray(arr, i) || GreyUtils_nonIterableRest();}function GreyUtils_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyUtils_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyUtils_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyUtils_arrayLikeToArray(o, minLen);}function GreyUtils_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyUtils_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function GreyUtils_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

var UmbrellaState;(function (UmbrellaState) {UmbrellaState["MONSTER_LEVEL"] = "broken";UmbrellaState["DAMAGE_REDUCTION_SHIELD"] = "forward";UmbrellaState["ITEM_DROPS"] = "bucket";UmbrellaState["WEAPON_DAMAGE"] = "pitchfork";UmbrellaState["SPELL_DAMAGE"] = "twirling";UmbrellaState["MINUS_COMBAT"] = "cocoon";})(UmbrellaState || (UmbrellaState = {}));








function centerText(text, color) {
  return "<div style=\"text-align: center;\"".concat(
  color ? " color='" + color + "'" : "", "><p style=\"margin: 0; padding: 0;\">").concat(
  text, "</p></div>");
}

var umbrella = external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella");
var lefthand = external_kolmafia_namespaceObject.Familiar.get("Left-Hand Man");

function setUmbrella(setting) {
  if (
  (0,external_kolmafia_namespaceObject.availableAmount)(umbrella) == 0 ||
  (0,external_kolmafia_namespaceObject.getProperty)("umbrellaState").includes(setting))
  {
    return;
  }

  if (
  (0,external_kolmafia_namespaceObject.familiarEquippedEquipment)(lefthand) == umbrella &&
  (0,external_kolmafia_namespaceObject.myFamiliar)() != lefthand)
  {
    (0,external_kolmafia_namespaceObject.retrieveItem)(umbrella);
  }

  (0,external_kolmafia_namespaceObject.cliExecute)("umbrella " + setting);
}

function canCombatLocket(monster) {
  var foughtToday = (0,external_kolmafia_namespaceObject.getProperty)("_locketMonstersFought").
  split(",").
  map((s) => (0,external_kolmafia_namespaceObject.toMonster)((0,external_kolmafia_namespaceObject.toInt)(s)));

  if (foughtToday.length >= 3 || foughtToday.includes(monster)) {
    return false;
  }

  var monsters = Object.keys((0,external_kolmafia_namespaceObject.getLocketMonsters)()).map((s) =>
  (0,external_kolmafia_namespaceObject.toMonster)(s));


  if (!monsters.includes(monster)) {
    return false;
  }

  return true;
}

function getBackupsRemaining() {
  return 11 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_backUpUses"));
}

function doColor(text, color) {
  return "<font color='".concat(color, "'>").concat(text, "</font>");
}

var ballProp = () =>
(0,external_kolmafia_namespaceObject.getProperty)("crystalBallPredictions").
split("|").
map((element) => element.split(":")).
map(
(_ref) => {var _ref2 = GreyUtils_slicedToArray(_ref, 3),turncount = _ref2[0],location = _ref2[1],monster = _ref2[2];return (
    [parseInt(turncount), (0,external_kolmafia_namespaceObject.toLocation)(location), (0,external_kolmafia_namespaceObject.toMonster)(monster)]);});






var lastBallCheck = 0;
/**
 * Returns a map of locations, and the monsters predicted.
 *
 * The boolean is a "Should we show fights that will still be valid if we waste a turn elsewhere"
 */
function currentPredictions()

{var showPredictionsNotAboutToExpire = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var predictions = ballProp();

  if (lastBallCheck != (0,external_kolmafia_namespaceObject.turnsPlayed)()) {
    (0,external_kolmafia_namespaceObject.visitUrl)("inventory.php?ponder=1", false);

    lastBallCheck = (0,external_kolmafia_namespaceObject.turnsPlayed)();
    predictions = ballProp();
  }

  return new Map(
  predictions.map((_ref3) => {var _ref4 = GreyUtils_slicedToArray(_ref3, 3),location = _ref4[1],monster = _ref4[2];return [location, monster];}));


  /*// If a prediction should've been expired by mafia, ponder because something is wrong.
  if (predictions.find(([turn]) => turn + 2 <= myTurncount())) {
    visitUrl("inventory.php?ponder=1", false);
     predictions = ballProp();
  }
   // The alternative is to make the 'gottenLastTurn' always return true if the predicted turns is smaller than turns
   const gottenLastTurn = (predictedTurns: number, turns: number) =>
    predictedTurns < turns;
  const gottenThisTurn = (predictedTurns: number, turns: number) =>
    predictedTurns === turns;
   return new Map(
    predictions
      .filter(
        ([turncount]) =>
          gottenLastTurn(turncount, myTurncount()) ||
          (showPredictionsNotAboutToExpire &&
            gottenThisTurn(turncount, myTurncount()))
      )
      .map(([, location, monster]) => [location, monster])
  );*/




}
function getAllCombinations(
valuesArray)

{var uniquesOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var combi = [];
  var temp = [];
  var slent = Math.pow(2, valuesArray.length);
  var uniques = [];
  var added = [];

  valuesArray.forEach((v, index) => {
    if (valuesArray.indexOf(v) != index) {
      return;
    }

    uniques.push(v);
  });

  for (var i = 0; i < slent; i++) {
    temp = [];

    for (var j = 0; j < valuesArray.length; j++) {
      if (!(i & Math.pow(2, j))) {
        continue;
      }

      temp.push(valuesArray[j]);
    }

    if (temp.length == 0) {
      continue;
    }

    // If we don't want the same arrays but in different orders
    if (uniquesOnly) {
      var id = temp.
      map((t) => uniques.indexOf(t)).
      sort().
      join(",");

      if (added.includes(id)) {
        continue;
      } else {
        added.push(id);
      }
    }

    combi.push(temp);
  }

  combi.sort((a, b) => a.length - b.length);

  return combi;
}

function hasPulled(item) {
  return (0,external_kolmafia_namespaceObject.getProperty)("_roninStoragePulls").
  split(",").
  includes((0,external_kolmafia_namespaceObject.toInt)(item).toString());
}
;// CONCATENATED MODULE: ./src/utils/GreyOutfitter.ts
function GreyOutfitter_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyOutfitter_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyOutfitter_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyOutfitter_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyOutfitter_arrayLikeToArray(o, minLen);}function GreyOutfitter_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyOutfitter_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyOutfitter_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyOutfitter_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyOutfitter_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyOutfitter_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyOutfitter_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var GreyOutfit = /*#__PURE__*/function () {



















  function GreyOutfit() {var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;GreyOutfitter_classCallCheck(this, GreyOutfit);GreyOutfitter_defineProperty(this, "allowChampBottle", false);GreyOutfitter_defineProperty(this, "famExpWeight", 30);GreyOutfitter_defineProperty(this, "itemDropWeight", 0.3);GreyOutfitter_defineProperty(this, "meatDropWeight", 0.1);GreyOutfitter_defineProperty(this, "hpWeight", 0.001);GreyOutfitter_defineProperty(this, "hpRegenWeight", 0.01);GreyOutfitter_defineProperty(this, "mpWeight", 0.001);GreyOutfitter_defineProperty(this, "mpRegenWeight", 0.01);GreyOutfitter_defineProperty(this, "initWeight", 0.05);GreyOutfitter_defineProperty(this, "plusCombatWeight", 0);GreyOutfitter_defineProperty(this, "minusCombatWeight", 0);GreyOutfitter_defineProperty(this, "plusMonsterLevelWeight", 0);GreyOutfitter_defineProperty(this, "minusMonsterLevelWeight", 0);GreyOutfitter_defineProperty(this, "itemsWeight", []);GreyOutfitter_defineProperty(this, "bonusWeights", []);GreyOutfitter_defineProperty(this, "overrideMaximizer", void 0);GreyOutfitter_defineProperty(this, "umbrellaSetting", void 0);
    this.overrideMaximizer = string;

    this.setWeights();
  }GreyOutfitter_createClass(GreyOutfit, [{ key: "getUmbrella", value:

    function getUmbrella() {
      if (this.umbrellaSetting == null) {
        if (this.minusCombatWeight > 0) {
          return UmbrellaState.MINUS_COMBAT;
        } else if (this.plusMonsterLevelWeight > 0) {
          return UmbrellaState.MONSTER_LEVEL;
        } else {
          //if (outfit.itemDropWeight > 2) {
          return UmbrellaState.ITEM_DROPS;
        }
      }

      return this.umbrellaSetting;
    } }, { key: "setWeights", value:

    function setWeights() {
      this.addBonus("+50 bonus mafia thumb ring");

      if (getQuestStatus("questL13Final") <= 5) {
        if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("powerful glove")) > 0) {
          this.addBonus("-4 bonus hewn moon-rune spoon");
          this.addBonus("+4.5 bonus powerful glove");
        }
      }
      if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Camp Scout Backpack")) > 0) {
        this.addBonus("+1 bonus camp scout backpack");
      }

      this.addBonus("-equip screwing pooch");

      if ((0,external_kolmafia_namespaceObject.myLevel)() > 15) {
        this.initWeight = 0.001;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() > 12000) {
        this.meatDropWeight = 0.01;
      }

      if (
      !(0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Hivemindedness")) &&
      (0,external_kolmafia_namespaceObject.myMp)() < Math.min(125, Math.max((0,external_kolmafia_namespaceObject.myMaxmp)(), 70)))
      {
        this.mpRegenWeight += 1;

        if ((0,external_kolmafia_namespaceObject.myMp)() <= 30) {
          this.mpRegenWeight += 2;
        }

        /*if (myMp() < 42) {
          this.mpRegenWeight += 2;
        }*/
      }

      if (
      GreySettings.isHardcoreMode() &&
      (0,external_kolmafia_namespaceObject.myAdventures)() < 40 &&
      (0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) < 6 &&
      (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Phase Shift")) &&
      (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Photonic Shroud")))
      {
        this.famExpWeight = 100;
      }
      // Setup weights according to w/e passives I have
    } }, { key: "addBonus", value:

    function addBonus(message) {
      this.bonusWeights.push(message);

      return this;
    } }, { key: "addItem", value:

    function addItem(item) {var weight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 999999;
      if (weight < 999999 || (0,external_kolmafia_namespaceObject.availableAmount)(item) == 0) {
        this.itemsWeight.push([item, weight]);
      } else {
        this.addBonus("+equip " + item.name);
      }

      return this;
    } }, { key: "setNoCombat", value:

    function setNoCombat() {
      this.minusCombatWeight += 10;
      return this;
    } }, { key: "setPlusCombat", value:

    function setPlusCombat() {
      this.plusCombatWeight += 10;
      return this;
    } }, { key: "setItemDrops", value:

    function setItemDrops() {
      this.itemDropWeight = 2;

      return this;
    } }, { key: "setChampagneBottle", value:

    function setChampagneBottle() {
      this.allowChampBottle = true;

      return this;
    } }, { key: "createString", value:

    function createString() {
      if (this.overrideMaximizer != null) {
        return this.overrideMaximizer;
      }

      var modifiers = [];

      if (this.famExpWeight > 0) {
        modifiers.push("+" + this.famExpWeight + " familiar experience");
      }

      if (this.itemDropWeight > 0) {
        modifiers.push("+" + this.itemDropWeight + " item drop");
      }

      if (this.meatDropWeight > 0) {
        modifiers.push("+" + this.meatDropWeight + " meat drop");
      }

      if (this.hpWeight > 0) {
        modifiers.push("+" + this.hpWeight + " hp");
      }

      if (this.hpRegenWeight > 0) {
        modifiers.push("+" + this.hpRegenWeight + " hp regen");
      }

      if (this.mpWeight > 0) {
        modifiers.push("+" + this.mpWeight + " mp");
      }

      if (this.mpRegenWeight > 0) {
        modifiers.push("+" + this.mpRegenWeight + " mp regen");
      }

      if (this.initWeight > 0) {
        modifiers.push("+" + this.initWeight + " init");
      }

      if (this.plusCombatWeight > 0) {
        modifiers.push("+" + this.plusCombatWeight + " combat 25 MAX");
      }

      if (this.minusCombatWeight > 0) {
        modifiers.push("-" + this.minusCombatWeight + " combat 25 MAX");
      }

      if (this.plusMonsterLevelWeight > 0) {
        modifiers.push("+" + this.plusMonsterLevelWeight + " ml");
      }

      if (this.minusMonsterLevelWeight > 0) {
        modifiers.push("-" + this.minusMonsterLevelWeight + " ml");
      }var _iterator = GreyOutfitter_createForOfIteratorHelper(

      this.itemsWeight),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var pair = _step.value;
          modifiers.push("+" + pair[1] + " bonus " + pair[0]);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = GreyOutfitter_createForOfIteratorHelper(

      this.bonusWeights),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _pair = _step2.value;
          modifiers.push(_pair);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      if (!this.allowChampBottle) {
        modifiers.push("-equip broken champagne bottle");
      }

      return modifiers.join(" ");
    } }]);return GreyOutfit;}();GreyOutfitter_defineProperty(GreyOutfit, "IGNORE_OUTFIT", "Ignore Outfit");
;// CONCATENATED MODULE: ./src/utils/GreyResources.ts
function GreyResources_slicedToArray(arr, i) {return GreyResources_arrayWithHoles(arr) || GreyResources_iterableToArrayLimit(arr, i) || GreyResources_unsupportedIterableToArray(arr, i) || GreyResources_nonIterableRest();}function GreyResources_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyResources_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function GreyResources_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyResources_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyResources_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyResources_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyResources_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyResources_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyResources_arrayLikeToArray(o, minLen);}function GreyResources_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyResources_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyResources_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyResources_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyResources_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyResources_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}


function getBanishers() {
  // Scrapbook
  // Bowl a curveball
  // Middle finger ring
  // Grey You banisher skill
}

function getYellowRays() {
  // Yellow Rocket
  // 9 Volt battery
}

function getSniffers() {
  // Nosy Nose fam
}

function getCopiers() {
  // Backup Camera
  // Cloning Kit
  // Combat Locket
  // 4-D camera
}

var GreyPulls = /*#__PURE__*/function () {function GreyPulls() {GreyResources_classCallCheck(this, GreyPulls);}GreyResources_createClass(GreyPulls, null, [{ key: "pullFratWarOutfit", value:
    function pullFratWarOutfit() {var _iterator = GreyResources_createForOfIteratorHelper(
      (0,external_kolmafia_namespaceObject.outfitPieces)("Frat Warrior Fatigues")),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if ((0,external_kolmafia_namespaceObject.availableAmount)(i) > 0) {
            continue;
          }

          GreyPulls.tryPull(i);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "pullCrypts", value:

    function pullCrypts() {
      GreyPulls.tryPull(external_kolmafia_namespaceObject.Item.get("Gravy Boat"));
    } }, { key: "pullBoxOfMatches", value:

    function pullBoxOfMatches() {
      GreyPulls.tryPull(external_kolmafia_namespaceObject.Item.get("book of matches"));
    } }, { key: "pullScrip", value:

    function pullScrip() {
      GreyPulls.tryPull(external_kolmafia_namespaceObject.Item.get("Shore Inc. Ship Trip Scrip"));
    } }, { key: "pullOre", value:

    function pullOre() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL08Trapper") != "step1") {
        return;
      }

      var ore = external_kolmafia_namespaceObject.Item.get((0,external_kolmafia_namespaceObject.getProperty)("trapperOre"));

      if (ore == external_kolmafia_namespaceObject.Item.get("none") || (0,external_kolmafia_namespaceObject.availableAmount)(ore) >= 3) {
        return;
      }

      this.tryPull(ore);
    } }, { key: "getPullableKeys", value:

    function getPullableKeys() {
      var items = getZappables(external_kolmafia_namespaceObject.Item.get("Jarlsberg's key")).filter(
      (i) => !i.quest);


      items.sort((i1, i2) => {
        // If an item is in storage, and the other item isn't. Prioritize the item in storage.
        if ((0,external_kolmafia_namespaceObject.storageAmount)(i1) > 0 != (0,external_kolmafia_namespaceObject.storageAmount)(i2) > 0) {
          return (0,external_kolmafia_namespaceObject.storageAmount)(i2) - (0,external_kolmafia_namespaceObject.storageAmount)(i1);
        }

        return (0,external_kolmafia_namespaceObject.mallPrice)(i1) - (0,external_kolmafia_namespaceObject.mallPrice)(i2);
      });

      return items;
    } }, { key: "tryRetrieve", value:

    function tryRetrieve(item) {var maxCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;
      if ((0,external_kolmafia_namespaceObject.pullsRemaining)() >= 0) {
        return this.tryPull(item, maxCost);
      }

      if ((0,external_kolmafia_namespaceObject.itemAmount)(item) > 0) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(item) > 0) {
        (0,external_kolmafia_namespaceObject.cliExecute)("retrieve " + item);
      } else {
        if ((0,external_kolmafia_namespaceObject.myMeat)() > (0,external_kolmafia_namespaceObject.myStorageMeat)()) {
          (0,external_kolmafia_namespaceObject.buy)(item, 1, maxCost);
        } else {
          (0,external_kolmafia_namespaceObject.buyUsingStorage)(item, 1, maxCost);
        }
      }
    } }, { key: "tryPull", value:

    function tryPull(item) {var maxCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;
      if ((0,external_kolmafia_namespaceObject.storageAmount)(item) == 0) {
        (0,external_kolmafia_namespaceObject.buyUsingStorage)(item, 1, maxCost);
      }

      if ((0,external_kolmafia_namespaceObject.storageAmount)(item) == 0) {
        throw "Unable to pull " + item.name;
      }

      var propPrior = (0,external_kolmafia_namespaceObject.getProperty)("_roninStoragePulls");

      (0,external_kolmafia_namespaceObject.cliExecute)("pull " + item.name);

      if ((0,external_kolmafia_namespaceObject.getProperty)("_roninStoragePulls") != propPrior) {
        var pulled = (0,external_kolmafia_namespaceObject.getProperty)("_roninStoragePulls").split(",");

        var greyPulls = (0,external_kolmafia_namespaceObject.getProperty)("_greyPulls").
        split(",").
        filter((s) => s.length > 0);
        greyPulls.push((0,external_kolmafia_namespaceObject.toInt)(item).toString());
        var pullsSorted = [];var _iterator2 = GreyResources_createForOfIteratorHelper(

        pulled),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var pull = _step2.value;
            if (!greyPulls.includes(pull)) {
              continue;
            }

            pullsSorted.push(pull);
          }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = GreyResources_createForOfIteratorHelper(

        greyPulls),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var remainder = _step3.value;
            if (pullsSorted.includes(remainder)) {
              continue;
            }

            (0,external_kolmafia_namespaceObject.print)("Somehow didn't detect " + remainder + " as a used pull", "red");
            pullsSorted.push(remainder);
          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

        (0,external_kolmafia_namespaceObject.setProperty)("_greyPulls", pullsSorted.join(","));
      }
    } }]);return GreyPulls;}();


var GreyClovers = /*#__PURE__*/function () {function GreyClovers() {GreyResources_classCallCheck(this, GreyClovers);}GreyResources_createClass(GreyClovers, null, [{ key: "doOres", value:


    function doOres() {
      // 2
      (0,external_kolmafia_namespaceObject.use)(this.clover);
    } }, { key: "doWand", value:

    function doWand() {
      // 1
      (0,external_kolmafia_namespaceObject.use)(this.clover);
    } }]);return GreyClovers;}();GreyResources_defineProperty(GreyClovers, "clover", external_kolmafia_namespaceObject.Item.get("11-leaf Clover"));


var GreyVortex = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyVortex() {GreyResources_classCallCheck(this, GreyVortex);}GreyResources_createClass(GreyVortex, null, [{ key: "doBatCave", value:
    function doBatCave() {
      // 20
    } }, { key: "doHarem", value:

    function doHarem() {
      // 20
    } }, { key: "doHiddenTemple", value:

    function doHiddenTemple() {
      // 20
    } }, { key: "doSmutOrcs", value:

    function doSmutOrcs() {
      // 20
    } }, { key: "doCrypt", value:

    function doCrypt() {
      // 20
    } }]);return GreyVortex;}()));


var GreyCombatLocket = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyCombatLocket() {GreyResources_classCallCheck(this, GreyCombatLocket);}GreyResources_createClass(GreyCombatLocket, null, [{ key: "doSystemSweep", value:
    function doSystemSweep() {} }, { key: "doInfiniteLoop", value:

    function doInfiniteLoop() {} }, { key: "doFantasyBandit", value:

    function doFantasyBandit() {} }, { key: "doMountainMan", value:

    function doMountainMan() {} }]);return GreyCombatLocket;}()));


function getZappables(item) {
  var items = [];

  Object.keys((0,external_kolmafia_namespaceObject.getRelated)(item, "zap")).forEach((s) => {
    var i = external_kolmafia_namespaceObject.Item.get(s);

    if (items.includes(i)) {
      return;
    }

    items.push(i);
  });

  return items;
}var

Required;(function (Required) {Required["MUST"] = "You really should have these";Required["VERY_USEFUL"] = "Optional, but very very useful";Required["USEFUL"] = "Useful, but not major";Required["MINOR"] = "Minor, can skip";})(Required || (Required = {}));






var GreyRequirements = /*#__PURE__*/function () {function GreyRequirements() {GreyResources_classCallCheck(this, GreyRequirements);}GreyResources_createClass(GreyRequirements, [{ key: "hasRequired", value:
    function hasRequired() {
      var required = [];
      var add = (
      name,
      desc,
      e,
      owns) =>
      {
        if (name instanceof external_kolmafia_namespaceObject.Item) {
          owns = (0,external_kolmafia_namespaceObject.availableAmount)(name) + (0,external_kolmafia_namespaceObject.storageAmount)(name) > 0;
          name = name.name;
        }

        required.push([name, desc, e, owns]);
      };

      add(
      "Grey Goose",
      "Without this, Grey You isn't really feasible",
      Required.MUST,
      (0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")));


      add(
      "Gelatinous Cubeling",
      "Saves about 10 turns if you're not doing a tower break",
      Required.VERY_USEFUL,
      (0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Gelatinous Cubeling")));


      add(
      external_kolmafia_namespaceObject.Item.get("Combat Lover's Locket"),
      "Used as a fax source, with some helpful enchants",
      Required.VERY_USEFUL);


      var locket = Object.keys((0,external_kolmafia_namespaceObject.getLocketMonsters)()).map((s) =>
      s.toLowerCase().trim());


      if (locket.length > 0) {
        var monstersLocket = [
        "pygmy witch lawyer",
        "mountain man",
        "cloud of disembodied whiskers",
        "one-eyed willie",
        "little man in the canoe",
        "fantasy bandit",
        "pygmy janitor"];

        var monstersNeed = monstersLocket.filter((m) => !locket.includes(m));
        var monstersHave = monstersLocket.filter((m) => locket.includes(m));

        if (monstersNeed.length > 0) {
          add(
          "Combat Locket: " + monstersNeed.join(", "),
          "The script uses these in run, you are missing these from your combat locket",
          Required.MUST,
          false);

        }

        if (monstersHave.length > 0) {
          add(
          "Combat Locket: " + monstersHave.join(", "),
          "The script uses these in run, you have these",
          Required.MUST,
          true);

        }
      }

      add(
      external_kolmafia_namespaceObject.Item.get("Industrial Fire Extinguisher"),
      "Can speed up by up 15 to 25 turns",
      Required.USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("Backup Camera"),
      "Great for +ML, Init and sometimes Fantasy Bandits & Lobsters",
      Required.VERY_USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("unwrapped knock-off retro superhero cape"),
      "Great for crypts & tower",
      Required.VERY_USEFUL);


      add(
      "Mayday Contract",
      "Gives a nice +combat cape and starting 5k meat boost",
      Required.USEFUL,
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("maydayContractOwned")));


      add(
      external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"),
      "Awesome -Combat and +ML for Oil Peak",
      Required.VERY_USEFUL);


      add(
      "Cosmic Bowling Ball",
      "Banishes for all!",
      Required.USEFUL,
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("hasCosmicBowlingBall")));


      add(
      external_kolmafia_namespaceObject.Item.get("miniature crystal ball"),
      "Great for speeding up predictions",
      Required.VERY_USEFUL);


      add(
      "Short Order Cook",
      "Great for tower killing and provides an absorb at the start of your run",
      Required.USEFUL,
      (0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Short Order Cook")));


      add(
      external_kolmafia_namespaceObject.Item.get("Clan VIP Lounge key"),
      "Used to remove Beaten Up, and the +familiar effect!",
      Required.MUST);


      add(
      external_kolmafia_namespaceObject.Item.get("Familiar Scrapbook"),
      "Great for power leveling after GYou ends, and the offhand +1 fam exp!",
      Required.VERY_USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("Powerful Glove"),
      "If not tower breaking, great for white pixels. If you have cursed mag glass, saves 5 turns?",
      Required.USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("Cursed Magnifying Glass"),
      "Only really used for minor delay burning, and lobsters + powerful glove",
      Required.MINOR);


      add(
      external_kolmafia_namespaceObject.Item.get("Cargo Cultist Shorts"),
      "Used to fight Smut Orc to save 6 turns, or for the frat outfit to save pulls or 12 turns",
      Required.USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("HOA regulation book"),
      "Prefered over Space Trip safety headphones for the +2 res, saves 20? turns, especially on smut orcs",
      Required.VERY_USEFUL);

      add(
      external_kolmafia_namespaceObject.Item.get("Space Trip safety headphones"),
      "HOA regulation book is used instead when available, but this still saves 20? turns, especially on smut orcs",
      Required.VERY_USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("Mafia Thumb Ring"),
      "Gives roughly 30 extra adventures over the course of your run",
      Required.VERY_USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("Yule Hatchet"),
      "Gives +2 fam exp every fight, basically a must have",
      Required.MUST);


      add(
      external_kolmafia_namespaceObject.Item.get("Deck of lewd playing cards"),
      "Speeds up Ron Protesters",
      Required.USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("SongBoom&trade; BoomBox"),
      "Awesome for startup meat & nuns, then passive Special Seasoning generation you can use/sell",
      Required.VERY_USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("latte lovers member's mug"),
      "Gives +3 familiar exp roughly 100 turns into the run",
      Required.USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("Designer Sweatpants"),
      "Great for Ron Protesters, and restoring MP!",
      Required.VERY_USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("June Cleaver"),
      "Great for 1.5k meat, occasional 5 advs, smut orcs and the teachers pen which is +2 fam exp!",
      Required.VERY_USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("mumming trunk"),
      "Absolutely great for early game MP regeneration. Especially when you're tough on meat.",
      Required.VERY_USEFUL);


      var poolSkill = Math.floor(
      2 * Math.sqrt((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("poolSharkCount"))));


      if (poolSkill < 10) {
        add(
        "Pool Skill", "You can train this up using 11-Leaf Clovers to have a permanant +10 across ascensions. You currently have a pool skill of ".concat(
        poolSkill, ", we want 10. Try looking up \"A Shark's Chum\" in the kol wiki."),
        Required.MUST,
        false);

      } else {
        add(
        "Pool Skill",
        "You have fully trained up your pool skill, which is great for the Billards pool test!",
        Required.MUST,
        true);

      }

      add(
      "Melodramedary",
      "Saves 3 adventures for desert!",
      Required.MINOR,
      (0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Melodramedary")));


      add(
      "Cat Burglar",
      "Only used rarely, generally not worth picking up but does sometimes save 20k of resources in meat!",
      Required.MINOR,
      (0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Cat Burglar")));


      add(
      external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon"),
      "Great for starting as vole, then switching to Blender! Probably worth 20 turns! Don't forget to setup your Greyday settings!",
      Required.VERY_USEFUL);


      add(
      "Fantasyrealm",
      "This isn't worth buying as it devalues Lucky Gold Ring, but if you do have it; Then it's useful as another key source.",
      Required.MINOR,
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("frAlways")));


      add(
      external_kolmafia_namespaceObject.Item.get("Deck of Every Card"),
      "Used as a key source and as an initial meat source. Not worth buying as its very expensive",
      Required.VERY_USEFUL);


      add(
      "Gingerbread City",
      "Useful as another key source - CURRENTLY UNSUPPORTED",
      Required.MINOR,
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("gingerbreadCityAvailable")));


      add(
      "Piraterealm",
      "Useful as another key source - CURRENTLY UNSUPPORTED",
      Required.MINOR,
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("prAlways")));


      add(
      external_kolmafia_namespaceObject.Item.get("Kramco Sausage-o-Matic&trade;"),
      "Useful as a delay burner, and for another 23 adventures a day",
      Required.MINOR);


      add(
      "Voting Booth",
      "Iotm for voting, +3 hot res, +25% moxie buff, has interaction with powerful glove for lobsterfrogman, and gives 3 free delay burns",
      Required.MINOR,
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("voteAlways")));


      add(
      external_kolmafia_namespaceObject.Item.get("Greatest American Pants"),
      "Free runs - CURRENTLY UNSUPPORTED",
      Required.USEFUL);


      add(
      external_kolmafia_namespaceObject.Item.get("Pantsgiving"),
      "Gives +2 all res, 10 items which can help save turncount and stacks up stomach size increasers",
      Required.USEFUL);


      required.sort((r1, r2) => r1[0].localeCompare(r2[0]));

      (0,external_kolmafia_namespaceObject.printHtml)(
      '<div style="text-align: center;">======= Grey Requirements =======</div>');


      var tick = "<font color='green'>✔</font>";
      var cross = "<font color='red'>✘</font>";var _loop = function _loop() {

        var e = _arr[_i];
        var color = "green";

        if (e == Required.MUST) {
          color = "red";
        } else if (e == Required.VERY_USEFUL) {
          color = "#BC3823";
        } else if (e == Required.USEFUL) {
          color = "blue";
        } else if (e == Required.MINOR) {
          color = "gray";
        } else {
          return "continue";
        }

        (0,external_kolmafia_namespaceObject.print)("");
        (0,external_kolmafia_namespaceObject.printHtml)("<div style=\"text-align: center;\"> ".concat(e, " </div>"));
        var values = required.filter((r) => r[2] == e);var _iterator4 = GreyResources_createForOfIteratorHelper(

        values),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var _step4$value = GreyResources_slicedToArray(_step4.value, 4),name = _step4$value[0],desc = _step4$value[1],has = _step4$value[3];
            (0,external_kolmafia_namespaceObject.printHtml)("".concat(
            has ? tick : cross, " <font color='").concat(
            has ? "" : "red", "'>").concat(
            name, "</font> <font color='gray'>=> ").concat(desc, "</font>"));

          }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}};for (var _i = 0, _arr = Object.values(Required); _i < _arr.length; _i++) {var _ret = _loop();if (_ret === "continue") continue;
      }

      if (required.find((r) => r[3] == false) == null) {
        (0,external_kolmafia_namespaceObject.printHtml)(
        "<center color='green'>Wow! You have everything in here!</center>");

      }

      (0,external_kolmafia_namespaceObject.printHtml)('<div style="text-align: center;">===============</div>');
      // TODO Camelcalf?
    } }]);return GreyRequirements;}();
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptPull.ts
function QuestL7CryptPull_slicedToArray(arr, i) {return QuestL7CryptPull_arrayWithHoles(arr) || QuestL7CryptPull_iterableToArrayLimit(arr, i) || QuestL7CryptPull_unsupportedIterableToArray(arr, i) || QuestL7CryptPull_nonIterableRest();}function QuestL7CryptPull_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL7CryptPull_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL7CryptPull_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL7CryptPull_arrayLikeToArray(o, minLen);}function QuestL7CryptPull_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL7CryptPull_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function QuestL7CryptPull_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL7CryptPull_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptPull_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL7CryptPull_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptPull_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptPull_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptPull_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptPull_setPrototypeOf(subClass, superClass);}function QuestL7CryptPull_setPrototypeOf(o, p) {QuestL7CryptPull_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptPull_setPrototypeOf(o, p);}function QuestL7CryptPull_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptPull_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptPull_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptPull_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptPull_possibleConstructorReturn(this, result);};}function QuestL7CryptPull_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptPull_assertThisInitialized(self);}function QuestL7CryptPull_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptPull_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptPull_getPrototypeOf(o) {QuestL7CryptPull_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptPull_getPrototypeOf(o);}function QuestL7CryptPull_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL7CryptPull = /*#__PURE__*/function (_TaskInfo) {QuestL7CryptPull_inherits(QuestL7CryptPull, _TaskInfo);var _super = QuestL7CryptPull_createSuper(QuestL7CryptPull);function QuestL7CryptPull() {var _this;QuestL7CryptPull_classCallCheck(this, QuestL7CryptPull);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "cape",
    external_kolmafia_namespaceObject.Item.get("Unwrapped knock-off retro superhero cape"));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "gravyboat",
    external_kolmafia_namespaceObject.Item.get("Gravy Boat"));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "completed",
    false);QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "backupCamera",
    external_kolmafia_namespaceObject.Item.get("Backup Camera"));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "hasRun",
    false);QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "paths",
    []);return _this;}QuestL7CryptPull_createClass(QuestL7CryptPull, [{ key: "getId", value:

    function getId() {
      return "Council / Crypt / Gravy Boat Pull";
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          this.hasRun = true;

          if (!path.canUse(ResourceCategory.PULL)) {
            return;
          }

          GreyPulls.pullCrypts();
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      var _this$getEstimatedFig = this.getEstimatedFights(
      assumeUnstarted || (0,external_kolmafia_namespaceObject.getProperty)("questL07Cyrptic") == "unstarted"),_this$getEstimatedFig2 = QuestL7CryptPull_slicedToArray(_this$getEstimatedFig, 2),without = _this$getEstimatedFig2[0],withBoat = _this$getEstimatedFig2[1];


      this.paths = [
      new PossiblePath(without[0], without[1]),
      new PossiblePath(withBoat[0], withBoat[1]).addPull(this.gravyboat)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    }

    /**
     * Returns estimated fights, without boat. And with boat.
     */ }, { key: "getEstimatedFights", value:
    function getEstimatedFights(
    assumeFresh)
    {
      // TODO Estimate using retrocape, fire extingusher, init, ML, rough item drop

      var swarmKills = Math.max(
      Math.floor(Math.sqrt(((0,external_kolmafia_namespaceObject.availableAmount)(this.backupCamera) ? 50 : 0) + 30)),
      3);

      var modernEncounterRate =
      0.15 + (((0,external_kolmafia_namespaceObject.availableAmount)(this.backupCamera) > 0 ? 100 : 0) + 150) / 1000;
      var eyeDropRate = 0.45; // Lets assume you have +300 drop rate and do party skeleton for -50 item
      var rattlingNC = 0.6; // Lets assume you have -25%, and base is 85%. So its 60%;

      var dirty = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cyrptNicheEvilness"));
      var eyes = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cyrptNookEvilness"));
      var rattling = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cyrptCrannyEvilness"));
      var sprinters = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cyrptAlcoveEvilness"));

      if (assumeFresh) {
        dirty = eyes = rattling = sprinters = 25;
      } else {
        dirty = Math.max(0, dirty - 25);
        eyes = Math.max(0, eyes - 25);
        rattling = Math.max(0, rattling - 25);
        sprinters = Math.max(0, sprinters - 25);
      }

      var evilPerNormFight = 1 + ((0,external_kolmafia_namespaceObject.availableAmount)(this.cape) > 0 ? 1 : 0);
      var evilPerBoatFight = evilPerNormFight + 1;

      var boatlessMinKills = 0;
      var boatlessMaxKills = 0;
      var boatMinKills = 0;
      var boatMaxKills = 0;

      // Eyes
      boatlessMaxKills += Math.ceil(eyes / evilPerNormFight);
      boatlessMinKills += Math.ceil(eyes / (evilPerNormFight + eyeDropRate * 3));

      boatMaxKills += Math.ceil(eyes / evilPerBoatFight);
      boatMinKills += Math.ceil(eyes / (evilPerBoatFight + eyeDropRate * 3));

      // Dirty
      boatlessMaxKills += Math.ceil(dirty / evilPerNormFight);
      // Adjust for encounter rate
      boatlessMinKills += Math.ceil(dirty / (evilPerNormFight + 3 * 0.3));

      boatMaxKills += Math.ceil(dirty / evilPerBoatFight);
      boatMinKills += Math.ceil(dirty / (evilPerBoatFight + 3 * 0.3));

      // Sprinters
      boatlessMaxKills += Math.ceil(sprinters / evilPerNormFight);
      // Adjust for encounter rate
      boatlessMinKills += Math.ceil(
      sprinters / (evilPerNormFight + 5 * modernEncounterRate));


      boatMaxKills += Math.ceil(sprinters / evilPerBoatFight);
      // Adjust for encounter rate
      boatMinKills += Math.ceil(
      sprinters / (evilPerBoatFight + 5 * modernEncounterRate));


      // Rattling
      boatlessMaxKills += Math.ceil(rattling / evilPerNormFight);
      boatlessMinKills += Math.ceil(
      rattling / (evilPerNormFight + rattlingNC * swarmKills));


      boatMaxKills += Math.ceil(rattling / evilPerBoatFight);
      boatMinKills += Math.ceil(
      rattling / (evilPerBoatFight + rattlingNC * swarmKills));


      return [
      [boatlessMinKills, boatlessMaxKills],
      [boatMinKills, boatMaxKills]];

    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status(path) {
      if (this.hasRun || (0,external_kolmafia_namespaceObject.availableAmount)(this.gravyboat) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (path != null && !path.canUse(ResourceCategory.PULL)) {
        this.hasRun = true;
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }]);return QuestL7CryptPull;}(TaskInfo);
;// CONCATENATED MODULE: ./src/utils/Properties.ts
function Properties_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = Properties_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function Properties_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return Properties_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Properties_arrayLikeToArray(o, minLen);}function Properties_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function Properties_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function Properties_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function Properties_createClass(Constructor, protoProps, staticProps) {if (protoProps) Properties_defineProperties(Constructor.prototype, protoProps);if (staticProps) Properties_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function Properties_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var handledChoices = [];

var PropertyManager = /*#__PURE__*/function () {function PropertyManager() {Properties_classCallCheck(this, PropertyManager);Properties_defineProperty(this, "properties",
    new Map());Properties_defineProperty(this, "choicesSet",
    []);}Properties_createClass(PropertyManager, [{ key: "setProperty", value:

    function setProperty(property, value) {var quiet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (!this.properties.has(property)) {
        this.properties.set(property, (0,external_kolmafia_namespaceObject.getProperty)(property));
      }

      (0,external_kolmafia_namespaceObject.setProperty)(property, value);

      if (!quiet) {
        (0,external_kolmafia_namespaceObject.print)("Set property " + property + " to " + value);
      }
    } }, { key: "setChoice", value:

    function setChoice(choice, value) {
      var combo = [choice, value];

      this.choicesSet.push(combo);
      handledChoices.push(combo);
    } }, { key: "resetAll", value:

    function resetAll() {var quiet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.properties.forEach((value, key) => {
        (0,external_kolmafia_namespaceObject.setProperty)(key, value);

        if (!quiet) {
          (0,external_kolmafia_namespaceObject.print)("Reset property " + key + " back to " + value);
        }
      });

      this.properties.clear();var _iterator = Properties_createForOfIteratorHelper(

      this.choicesSet),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          var index = handledChoices.lastIndexOf(combo);

          if (index < 0) {
            throw "Failed to reset a choice! Was missing!";
          }

          handledChoices.splice(index, 1);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      this.choicesSet.splice(0, this.choicesSet.length);
    } }]);return PropertyManager;}();
;// CONCATENATED MODULE: ./src/utils/Banishers.ts
function Banishers_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function Banishers_createClass(Constructor, protoProps, staticProps) {if (protoProps) Banishers_defineProperties(Constructor.prototype, protoProps);if (staticProps) Banishers_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function Banishers_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function Banishers_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function Banishers_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = Banishers_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function Banishers_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return Banishers_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Banishers_arrayLikeToArray(o, minLen);}function Banishers_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}

function hasBanished(location, banish) {
  var banished = getBanished().filter((b) => b.banisher.type == banish);

  if (banish.length == 0) {
    return false;
  }

  if (location == null) {
    return true;
  }var _iterator = Banishers_createForOfIteratorHelper(

  Object.keys((0,external_kolmafia_namespaceObject.getLocationMonsters)(location)).map((m) =>
  external_kolmafia_namespaceObject.Monster.get(m))),_step;try {var _loop = function _loop() {var mob = _step.value;

      if (banished.filter((b) => b.monster == mob).length == 0) {
        return "continue";
      }

      return { v: true };};for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;if (typeof _ret === "object") return _ret.v;
    }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

  return false;
}

var BanishReason;(function (BanishReason) {BanishReason[BanishReason["QUEST"] = 0] = "QUEST";BanishReason[BanishReason["REASBORB"] = 1] = "REASBORB";BanishReason[BanishReason["UNKNOWN"] = 2] = "UNKNOWN";})(BanishReason || (BanishReason = {}));





var BanishType;(function (BanishType) {BanishType["BALEFUL_HOWL"] = "baleful howl";BanishType["BANISHING_SHOUT"] = "banishing shout";BanishType["BATTER_UP"] = "batter up!";BanishType["BEANCANNON"] = "beancannon";BanishType["BE_A_MIND_MASTER"] = "Be a Mind Master";BanishType["BLART_SPRAY_WIDE"] = "B. L. A. R. T. Spray (wide)";BanishType["BOWL_A_CURVEBALL"] = "Bowl a Curveball";BanishType["BREATHE_OUT"] = "breathe out";BanishType["BUNDLE_OF_FRAGRANT_HERBS"] = "bundle of &quot;fragrant&quot; herbs";BanishType["CHATTERBOXING"] = "chatterboxing";BanishType["CLASSY_MONKEY"] = "classy monkey";BanishType["COCKTAIL_NAPKIN"] = "cocktail napkin";BanishType["CRYSTAL_SKULL"] = "crystal skull";BanishType["CURSE_OF_VACATION"] = "curse of vacation";BanishType["DEATHCHUCKS"] = "deathchucks";BanishType["DIRTY_STINKBOMB"] = "dirty stinkbomb";BanishType["DIVINE_CHAMPAGNE_POPPER"] = "divine champagne popper";BanishType["FEEL_HATRED"] = "Feel Hatred";BanishType["GINGERBREAD_RESTRAINING_ORDER"] = "gingerbread restraining order";BanishType["HAROLDS_BELL"] = "harold's bell";BanishType["HOWL_OF_THE_ALPHA"] = "howl of the alpha";BanishType["HUMAN_MUSK"] = "human musk";BanishType["ICE_HOTEL_BELL"] = "ice hotel bell";BanishType["ICE_HOUSE"] = "ice house";BanishType["KGB_TRANQUILIZER_DART"] = "KGB tranquilizer dart";BanishType["LICORICE_ROPE"] = "licorice rope";BanishType["LOUDER_THAN_BOMB"] = "louder than bomb";BanishType["MAFIA_MIDDLEFINGER_RING"] = "mafia middle finger ring";BanishType["NANORHINO"] = "nanorhino";BanishType["PANTSGIVING"] = "pantsgiving";BanishType["PEEL_OUT"] = "peel out";BanishType["PULLED_INDIGO_TAFFY"] = "pulled indigo taffy";BanishType["REFLEX_HAMMER"] = "Reflex Hammer";BanishType["SABER_FORCE"] = "Saber Force";BanishType["SHOW_YOUR_BORING_FAMILIAR_PICTURES"] = "Show your boring familiar pictures";BanishType["SMOKE_GRENADE"] = "smoke grenade";BanishType["SNOKEBOMB"] = "snokebomb";BanishType["SPOOKY_MUSIC_BOX_MECHANISM"] = "spooky music box mechanism";BanishType["SPRING_LOADED_FRONT_BUMPER"] = "Spring-Loaded Front Bumper";BanishType["STAFF_OF_THE_STANDALONE_CHEESE"] = "staff of the standalone cheese";BanishType["STINKY_CHEESE_EYE"] = "stinky cheese eye";BanishType["SYSTEM_SWEEP"] = "System Sweep";BanishType["TENNIS_BALL"] = "tennis ball";BanishType["THROW_LATTE_ON_OPPONENT"] = "Throw Latte on Opponent";BanishType["THUNDER_CLAP"] = "thunder clap";BanishType["TRYPTOPHAN_DART"] = "tryptophan dart";BanishType["ULTRA_HAMMER"] = "Ultra Hammer";BanishType["V_FOR_VIVALA_MASK"] = "v for vivala mask";BanishType["WALK_AWAY_FROM_EXPLOSION"] = "walk away from explosion";})(BanishType || (BanishType = {}));var



















































Banisher = /*#__PURE__*/Banishers_createClass(function Banisher() {Banishers_classCallCheck(this, Banisher);Banishers_defineProperty(this, "item", void 0);Banishers_defineProperty(this, "turnsBanish", void 0);Banishers_defineProperty(this, "type", void 0);});





var Banish = /*#__PURE__*/Banishers_createClass(function Banish() {Banishers_classCallCheck(this, Banish);Banishers_defineProperty(this, "monster", void 0);Banishers_defineProperty(this, "turnBanished", void 0);Banishers_defineProperty(this, "banisher", void 0);Banishers_defineProperty(this, "reason", void 0);});












function getBanished() {
  var prop = (0,external_kolmafia_namespaceObject.getProperty)("banishedMonsters").split(":");
  var banishes = [];
  var banishers = Banishers_getBanishers();var _loop2 = function _loop2(

  i) {
    var monsterName = (0,external_kolmafia_namespaceObject.toMonster)(prop[i]);
    var banisherName = prop[i + 1];
    var turnBanished = (0,external_kolmafia_namespaceObject.toInt)(prop[i + 2]);

    var banisher = new Banish();
    banisher.monster = monsterName;
    var banishType =
    BanishType[getEnumKeyByEnumValue(BanishType, banisherName)];
    banisher.banisher = banishers.find((b) => b.type == banishType);
    banisher.turnBanished = turnBanished;

    if (banisher.banisher == null) {
      banisher.banisher = new Banisher();
      banisher.banisher.type = banishType;
    }

    banishes.push(banisher);};for (var i = 0; i + 2 < prop.length; i += 3) {_loop2(i);
  }

  return banishes;
}

function getEnumKeyByEnumValue(myEnum, enumValue) {
  var keys = Object.keys(myEnum).filter((x) => myEnum[x] == enumValue);

  return keys.length > 0 ? keys[0] : null;
}

var BanishManager = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function BanishManager() {Banishers_classCallCheck(this, BanishManager);}Banishers_createClass(BanishManager, [{ key: "getGoodBanishers", value:
    function getGoodBanishers(
    location)

    {var turnsSpendingInZone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : myAdventures();
      var banishers = Banishers_getBanishers().filter(
      (b) => !this.isInUse(b, location));


      if (
      choiceFollowsFight() ||
      currentRound() != 0 ||
      fightFollowsChoice() ||
      handlingChoice() ||
      !canInteract())
      {
        banishers = banishers.filter((b) => availableAmount(b.item) > 0);
      }

      banishers.sort((b1, b2) => {
        return (
          this.getTotalCost(b1, turnsSpendingInZone) -
          this.getTotalCost(b2, turnsSpendingInZone));

      });

      return banishers;
    } }, { key: "getTotalCost", value:

    function getTotalCost(banisher, turnsToSpend) {
      var cost = mallPrice(banisher.item);

      if (banisher.turnsBanish == -1) {
        return cost;
      }

      var itemsToBuy = Math.ceil(turnsToSpend / banisher.turnsBanish);

      return cost * itemsToBuy;
    } }, { key: "getMonsterLocations", value:

    function getMonsterLocations(monster) {
      var locations = [];var _iterator2 = Banishers_createForOfIteratorHelper(

      Location.all()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var location = _step2.value;
          var monsters = this.getMonstersAtLocation(location);

          if (!monsters.includes(monster)) {
            continue;
          }

          locations.push(location);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return locations;
    } }, { key: "getMonstersAtLocation", value:

    function getMonstersAtLocation(location) {
      return Object.keys(getLocationMonsters(location)).map((s) => toMonster(s));
    } }, { key: "isInUse", value:

    function isInUse(banisher, location) {
      return (
        getBanished().find(
        (b) =>
        b.banisher.type == banisher.type &&
        this.getMonsterLocations(b.monster).includes(location)) !=
        null);

    } }]);return BanishManager;}()));


function Banishers_getBanishers() {
  var banishers = [
  [BanishType.HUMAN_MUSK, "Human Musk", -1],
  [BanishType.BE_A_MIND_MASTER, "Daily Affirmation: Be a Mind Master", 80],
  [BanishType.TENNIS_BALL, "Tennis Ball", 30],
  [BanishType.LOUDER_THAN_BOMB, "Louder Than Bomb", 20],
  [BanishType.CRYSTAL_SKULL, "Crystal Skull", 20],
  [BanishType.DIVINE_CHAMPAGNE_POPPER, "Divine Champagne Popper", 5],
  [BanishType.ICE_HOUSE, "Ice House", -1]];


  return banishers.map((b) => {
    var banish = new Banisher();
    banish.item = (0,external_kolmafia_namespaceObject.toItem)(b[1]);
    banish.turnsBanish = b[2];
    banish.type = b[0];

    return banish;
  });
}
;// CONCATENATED MODULE: ./src/utils/GreyAbsorber.ts
function GreyAbsorber_toConsumableArray(arr) {return GreyAbsorber_arrayWithoutHoles(arr) || GreyAbsorber_iterableToArray(arr) || GreyAbsorber_unsupportedIterableToArray(arr) || GreyAbsorber_nonIterableSpread();}function GreyAbsorber_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyAbsorber_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function GreyAbsorber_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return GreyAbsorber_arrayLikeToArray(arr);}function GreyAbsorber_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyAbsorber_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyAbsorber_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyAbsorber_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyAbsorber_arrayLikeToArray(o, minLen);}function GreyAbsorber_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyAbsorber_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyAbsorber_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyAbsorber_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyAbsorber_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyAbsorber_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyAbsorber_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var Absorb = /*#__PURE__*/GreyAbsorber_createClass(function Absorb() {GreyAbsorber_classCallCheck(this, Absorb);GreyAbsorber_defineProperty(this, "monster", void 0);GreyAbsorber_defineProperty(this, "skill", void 0);GreyAbsorber_defineProperty(this, "adventures",


  0);GreyAbsorber_defineProperty(this, "mus",
  0);GreyAbsorber_defineProperty(this, "mys",
  0);GreyAbsorber_defineProperty(this, "mox",
  0);GreyAbsorber_defineProperty(this, "hp",
  0);GreyAbsorber_defineProperty(this, "mp",
  0);});


var AbsorbsProvider = /*#__PURE__*/function () {function AbsorbsProvider() {GreyAbsorber_classCallCheck(this, AbsorbsProvider);}GreyAbsorber_createClass(AbsorbsProvider, [{ key: "getRolloverAdvs", value:



    function getRolloverAdvs() {
      return new Map(
      [
      ["Subatomic Tango", 15],
      ["Solid Fuel", 10],
      ["Autochrony", 10],
      ["Temporal Hyperextension", 10],
      ["Spooky Veins", 10],
      ["Extra Innings", 5],
      ["Reloading", 5],
      ["Harried", 5],
      ["Temporal Bent", 5],
      ["Provably Efficient", 5],
      ["Basic Improvements", 5],
      ["Shifted About", 5],
      ["Seven Foot Feelings", 5],
      ["Self-Actualized", 5]].
      map((s) => [(0,external_kolmafia_namespaceObject.toSkill)(s[0]), s[1] + " Rollover Adventures"]));

    } }, { key: "getUsefulSkills", value:

    function getUsefulSkills() {
      return new Map(
      [
      ["Advanced Exo-Alloy", "100 DA"],
      ["Conifer Polymers", "3 Stench Resist"],
      //["Clammy Microcilia", "2 Stench Resist"],
      //["Cooling Tubules", "10 Cold Damage"],
      ["Cryocurrency", "5 Cold Damage"],
      // ["Ire Proof", "+3 Hot Resist"],
      // ["Snow-Cooling System", "+15 Cold Dmg"],
      ["Cooling Tubules", "+10 Cold Dmg"],
      //["Financial Spreadsheets", "+40% Meat from Monsters"],
      //["Innuendo Circuitry", "+15 Sleaze Damage"],
      ["Ponzi Apparatus", "Scaling meat%"],
      // ["Procgen Ribaldry", "10 Sleaze Damage"],
      ["Propagation Drive", "20% Item Drops"],
      ["Overclocking", "Scaling +init"]].
      map((s) => [(0,external_kolmafia_namespaceObject.toSkill)(s[0]), s[1]]));

    } }, { key: "getMustHaveSkills", value:

    function getMustHaveSkills() {
      return new Map(
      [
      ["Subatomic Hardening", "Scaling DR"],
      ["Fluid Dynamics Simulation", "Scaling HP Regen"],
      ["Infinite Loop", "Fast Leveling"],
      ["Gravitational Compression", "Scaling Item Drop"],
      ["Hivemindedness", "Scaling MP Regen"],
      ["Photonic Shroud", "-10 Combat"],
      ["Piezoelectric Honk", "+10 Combat"],
      ["Phase Shift", "-10 Combat"],
      ["Ponzi Apparatus", "Scaling Meat Drop"]].
      map((s) => [(0,external_kolmafia_namespaceObject.toSkill)(s[0]), s[1]]));

    } }, { key: "getAbsorbsInLocation", value:

    function getAbsorbsInLocation(location) {
      var absorbs = [];

      if (location == null) {
        return absorbs;
      }

      var monsters = (0,external_kolmafia_namespaceObject.getMonsters)(location);var _iterator = GreyAbsorber_createForOfIteratorHelper(

      AbsorbsProvider.loadAbsorbs()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var absorb = _step.value;
          if (!monsters.includes(absorb.monster)) {
            continue;
          }

          absorbs.push(absorb);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return absorbs;
    } }, { key: "getMultiplier", value:

    function getMultiplier(monster, defeated) {
      if (
      defeated.has(monster) &&
      defeated.get(monster) === Reabsorbed.REABSORBED)
      {
        return 0;
      }

      var mult = defeated.get(monster) == null ? 1 : 0;

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) >= 6) {
        mult += 1;
      }

      return mult;
    } }, { key: "getAdventuresByAbsorbs", value:

    function getAdventuresByAbsorbs(
    defeated,
    monsters)

    {var includeSkills = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var skills = this.getMustHaveSkills();

      if (!GreySettings.speedRunMode) {var _iterator2 = GreyAbsorber_createForOfIteratorHelper(
        this.getUsefulSkills()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var entry = _step2.value;
            skills.set(entry[0], entry[1]);
          }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
      }

      // for (let entry of this.getRolloverAdvs()) {
      //   skills.set(entry[0], entry[1]);
      // }

      var absorbs = monsters.
      map((m) => AbsorbsProvider.getAbsorb(m)).
      filter((a) => {
        if (
        a.adventures <= 0 && (
        a.skill == null || !includeSkills || !skills.has(a.skill)))
        {
          return false;
        }

        if (
        a.adventures > 0 &&
        defeated.get(a.monster) == Reabsorbed.REABSORBED)
        {
          return false;
        }

        if (a.skill != null && (0,external_kolmafia_namespaceObject.haveSkill)(a.skill)) {
          return false;
        }

        return true;
      });

      if (absorbs.length == 0) {
        return null;
      }

      var advsSpent = 1;

      var totalAdvs = absorbs.reduce(
      (p, a) =>
      Math.max(0, a.adventures) * this.getMultiplier(a.monster, defeated) + p,
      0);

      var newSkills = new Map();var _iterator3 = GreyAbsorber_createForOfIteratorHelper(

      absorbs),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var a = _step3.value;
          if (!skills.has(a.skill)) {
            continue;
          }

          newSkills.set(a, skills.get(a.skill));
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

      return {
        location: null,
        turnsToGain: totalAdvs,
        expectedTurnsProfit:
        totalAdvs - (advsSpent + Math.max(2, Math.ceil(advsSpent * 0.2))),
        monsters: absorbs.map((a) => a.monster),
        skills: newSkills,
        shouldWait:
        absorbs.filter((a) => a.adventures > 0 && !defeated.has(a.monster)).
        length > 0,
        shouldRunOrb: false,
        ensuredOrb: null };

    } }, { key: "getAdventuresInLocation", value:

    function getAdventuresInLocation(
    defeated,
    location)

    {var includeSkills = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var skills = this.getMustHaveSkills();

      if (!GreySettings.speedRunMode) {var _iterator4 = GreyAbsorber_createForOfIteratorHelper(
        this.getUsefulSkills()),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var entry = _step4.value;
            skills.set(entry[0], entry[1]);
          }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
      }

      // for (let entry of this.getRolloverAdvs()) {
      //   skills.set(entry[0], entry[1]);
      // }

      var absorbs = this.getAbsorbsInLocation(location).filter((a) => {
        if (
        a.adventures <= 0 && (
        a.skill == null || !includeSkills || !skills.has(a.skill)))
        {
          return false;
        }

        if (
        a.adventures > 0 &&
        defeated.get(a.monster) == Reabsorbed.REABSORBED)
        {
          return false;
        }

        if (a.skill != null && (0,external_kolmafia_namespaceObject.haveSkill)(a.skill)) {
          return false;
        }

        return true;
      });

      if (absorbs.length == 0) {
        return null;
      }

      var appearRates = (0,external_kolmafia_namespaceObject.appearanceRates)(location);

      // Special workaround for screambat making appearance rates of non-screambats zero
      if (appearRates["screambat"] == 100) {
        for (var _i = 0, _Object$keys = Object.keys(appearRates); _i < _Object$keys.length; _i++) {var key = _Object$keys[_i];
          if (key == "none") {
            continue;
          }

          appearRates[key] = 20;
        }
      }

      var advsSpent = 0;
      var rates = [];
      var combatPercent =
      location == external_kolmafia_namespaceObject.Location.get("Twin Peak") ? 100 : location.combatPercent;

      Object.entries(appearRates).forEach((v) => {
        var monster = external_kolmafia_namespaceObject.Monster.get(v[0]);
        var rate = v[1];

        if (rate <= 0 || combatPercent <= 0) {
          return;
        }

        rates.push([monster, rate * (combatPercent / 100)]);
      });

      if (location == external_kolmafia_namespaceObject.Location.get("Oil Peak")) {
        rates.push([external_kolmafia_namespaceObject.Monster.get("Oil Baron"), 100]);
      }

      absorbs = absorbs.filter(
      (a) => rates.find((r) => r[0] == a.monster) != null);


      if (absorbs.length == 0) {
        return null;
      }

      while (
      rates.filter(
      (r) =>
      r[1] * advsSpent < 100 &&
      absorbs.filter((a) => a.monster == r[0]).length > 0).
      length > 0)
      {
        advsSpent++;
      }

      var totalAdvs = absorbs.reduce(
      (p, a) =>
      Math.max(0, a.adventures) * this.getMultiplier(a.monster, defeated) + p,
      0);

      var newSkills = new Map();var _iterator5 = GreyAbsorber_createForOfIteratorHelper(

      absorbs),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var a = _step5.value;
          if (!skills.has(a.skill)) {
            continue;
          }

          newSkills.set(a, skills.get(a.skill));
        }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}

      return {
        location: location,
        turnsToGain: totalAdvs,
        expectedTurnsProfit:
        totalAdvs - (advsSpent + Math.max(2, Math.ceil(advsSpent * 0.2))),
        monsters: absorbs.map((a) => a.monster),
        skills: newSkills,
        shouldWait:
        absorbs.filter((a) => a.adventures > 0 && !defeated.has(a.monster)).
        length > 0,
        shouldRunOrb: false,
        ensuredOrb: false };

    } }, { key: "getOnlyUsefulAbsorbs", value:

    function getOnlyUsefulAbsorbs(absorbs) {
      var usefulSkills = GreyAbsorber_toConsumableArray(this.getMustHaveSkills().keys());

      if (!GreySettings.speedRunMode) {
        usefulSkills.push.apply(usefulSkills, GreyAbsorber_toConsumableArray(this.getUsefulSkills().keys()));
      }

      return absorbs.filter((a) => {
        return (
          a.adventures > 0 ||
          a.mp > 0 ||
          a.skill != null && usefulSkills.includes(a.skill));

      });
    } }, { key: "getAbsorbedMonstersFromInstance", value:



































































    function getAbsorbedMonstersFromInstance() {
      var monsters = new Map();
      var absorbed = AbsorbsProvider.getAbsorbedMonsters();
      var reabsorbed = AbsorbsProvider.getReabsorbedMonsters();

      reabsorbed.forEach((m) => {
        monsters.set(m, Reabsorbed.REABSORBED);
      });

      absorbed.forEach((m) => {
        if (reabsorbed.includes(m)) {
          return;
        }

        monsters.set(m, Reabsorbed.NOT_REABSORBED);
      });

      return monsters;
    } }, { key: "getExtraAdventures", value:












    function getExtraAdventures(
    defeated)

    {var includeSkills = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var map = new Map();var _iterator6 = GreyAbsorber_createForOfIteratorHelper(

      AbsorbsProvider.loadAbsorbs().filter(
      (a) =>
      (includeSkills || a.adventures > 0) &&
      defeated.get(a.monster) != Reabsorbed.REABSORBED)),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;)
        {var absorb = _step6.value;var _iterator7 = GreyAbsorber_createForOfIteratorHelper(
          getLocations(absorb.monster)),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var l = _step7.value;
              if (map.has(l)) {
                continue;
              }

              map.set(l, this.getAdventuresInLocation(defeated, l, includeSkills));
            }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}
        }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}

      return GreyAbsorber_toConsumableArray(map.values()).filter((a) => a != null);
    } }, { key: "printRemainingAbsorbs", value:

    function printRemainingAbsorbs() {
      var defeated = this.getAbsorbedMonstersFromInstance();
      var absorbs = AbsorbsProvider.loadAbsorbs().filter(
      (a) =>
      a.adventures > 0 && defeated.get(a.monster) != Reabsorbed.REABSORBED);


      absorbs.sort((a1, a2) => a2.adventures - a1.adventures);

      if (absorbs.length == 0) {
        (0,external_kolmafia_namespaceObject.print)("No adventures to absorb!", "blue");
        return;
      }

      if (
      (0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) >= 6 &&
      getQuestStatus("questL13Final") > 11)
      {
        (0,external_kolmafia_namespaceObject.print)(
        "The remaining absorbs are likely either out of reach or judged to be wasteful to acquire",
        "red");

      }

      (0,external_kolmafia_namespaceObject.printHtml)(
      "<font color='blue'>Absorbs:</font> " +
      absorbs.
      map(
      (a) =>
      a.monster.name +
      " <font color='gray'>(" +
      a.adventures +
      " advs, Absorb x " + (
      defeated.has(a.monster) ? "1" : "2") +
      ")</font>").

      join(", "));

    } }], [{ key: "getAbsorb", value: function getAbsorb(monster) {var _iterator8 = GreyAbsorber_createForOfIteratorHelper(AbsorbsProvider.loadAbsorbs()),_step8;try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var absorb = _step8.value;if (absorb.monster != monster) {continue;}return absorb;}} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}return null;} }, { key: "loadAbsorbs", value: function loadAbsorbs() {if (AbsorbsProvider.allAbsorbs != null) {return AbsorbsProvider.allAbsorbs;}AbsorbsProvider.allAbsorbs = [];var _iterator9 = GreyAbsorber_createForOfIteratorHelper((0,external_kolmafia_namespaceObject.fileToBuffer)("data/grey_you_data.txt").split("\n")),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var line = _step9.value;var spl = line.split("\t");if (spl.length != 2 || spl[1] == null || spl[1].length == 0) {continue;}var mons = (0,external_kolmafia_namespaceObject.toMonster)(spl[0]);if (mons == external_kolmafia_namespaceObject.Monster.get("None")) {(0,external_kolmafia_namespaceObject.print)("Unknown " + spl[0]);continue;}var absorb = new Absorb();absorb.monster = mons;if (spl[1].endsWith("adventures")) {absorb.adventures = (0,external_kolmafia_namespaceObject.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("muscle")) {absorb.mus = (0,external_kolmafia_namespaceObject.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("mysticality")) {absorb.mys = (0,external_kolmafia_namespaceObject.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("moxie")) {absorb.mox = (0,external_kolmafia_namespaceObject.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("maximum hp")) {absorb.hp = (0,external_kolmafia_namespaceObject.toInt)(spl[1].substring(0, spl[1].indexOf(" ")));} else if (spl[1].endsWith("maximum mp")) {absorb.mp = (0,external_kolmafia_namespaceObject.toInt)(spl[1].substring(0, spl[1].indexOf(" ")));} else {absorb.skill = (0,external_kolmafia_namespaceObject.toSkill)(spl[1]);if (absorb.skill == external_kolmafia_namespaceObject.Skill.get("None")) {(0,external_kolmafia_namespaceObject.print)("Unknown thingy " + spl[1]);}}AbsorbsProvider.allAbsorbs.push(absorb);}} catch (err) {_iterator9.e(err);} finally {_iterator9.f();}this.remainingAdvAbsorbs = AbsorbsProvider.allAbsorbs.filter((a) => a.adventures > 0).map((a) => a.monster);return AbsorbsProvider.allAbsorbs;} }, { key: "getAbsorbedMonsters", value: function getAbsorbedMonsters() {return Object.keys((0,external_kolmafia_namespaceObject.absorbedMonsters)()).map((m) => external_kolmafia_namespaceObject.Monster.get(m));} }, { key: "getReabsorbedMonsters", value: function getReabsorbedMonsters() {return (0,external_kolmafia_namespaceObject.getProperty)("gooseReprocessed").split(",").filter((s) => s != "").map((m) => (0,external_kolmafia_namespaceObject.toMonster)((0,external_kolmafia_namespaceObject.toInt)(m)));} }]);return AbsorbsProvider;}();GreyAbsorber_defineProperty(AbsorbsProvider, "allAbsorbs", void 0);GreyAbsorber_defineProperty(AbsorbsProvider, "remainingAdvAbsorbs", void 0);













var Reabsorbed;(function (Reabsorbed) {Reabsorbed[Reabsorbed["REABSORBED"] = 0] = "REABSORBED";Reabsorbed[Reabsorbed["NOT_REABSORBED"] = 1] = "NOT_REABSORBED";})(Reabsorbed || (Reabsorbed = {}));var




GreyYou = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyYou() {GreyAbsorber_classCallCheck(this, GreyYou);}GreyAbsorber_createClass(GreyYou, [{ key: "doCommand", value:
    function doCommand(command) {
      // this.getPlacesToAdv();
    }

    /*getPlacesToAdv(includeSkills: boolean = true) {
      let fought = this.utils.getAbsorbedMonsters();
      let map: Map<Location, AdventureLocation> = new Map();
       for (let absorb of this.utils.getOnlyUsefulAbsorbs(
        this.utils.getUnabsorbed()
      )) {
        for (let l of this.getLocations(absorb.monster)) {
          if (map.has(l)) continue;
           map.set(l, this.utils.getExtraAdventures(fought, l, includeSkills));
        }
      }
       let sort: AdventureLocation[] = [];
       for (let entry of map.values()) {
        if (entry == null) {
          continue;
        }
         sort.push(entry);
      }
       sort.sort((v1, v2) => v2.expectedTurnsInZone - v1.expectedTurnsInZone);
      let unnatural = this.getUnnaturalLocations();
      let impossible = this.getImpossibleLocations();
      let intentional = this.getManualUnlocks();
      let color = function (message: string, color: string) {
        return `<font color='${color}'>${message}</font>`;
      };
       let htmls: string[] = [];
       for (let r of sort) {
        // TODO Highlight zones based on if we'll encounter them naturally in our path
         // If we'll encounter this naturally, don't bother displaying yet
        if (
          !impossible.includes(r.location) &&
          !intentional.includes(r.location) &&
          !canAdv(r.location)
        ) {
          continue;
        }
         let html = `Try ${r.location}: ${r.expectedTurnsInZone} (${
          r.turnsToGain
        }) adventures, Monsters: ${color(
          r.monsters.map((m) => m.name).join(", "),
          "gray"
        )}`;
         if (r.skills.size > 0) {
          html += " " + color("Grab while you're here: ", "black");
           for (let absorb of r.skills.keys()) {
            html += absorb.monster.name + " (" + r.skills.get(absorb) + ") ";
          }
        }
         html = color(
          html,
          impossible.includes(r.location)
            ? "purple"
            : !canAdv(r.location)
            ? "red"
            : unnatural.includes(r.location)
            ? "blue"
            : "green"
        );
         htmls.push(html);
      }
       for (let html of htmls) {
        printHtml(html);
      }
    }*/ }]);return GreyYou;}()));

















function main(command) {
  new GreyYou().doCommand(command);
}
;// CONCATENATED MODULE: ./src/utils/GreyCombat.ts
function GreyCombat_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyCombat_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyCombat_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyCombat_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyCombat_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}






var

MacroFiller = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function MacroFiller() {GreyCombat_classCallCheck(this, MacroFiller);}GreyCombat_createClass(MacroFiller, [{ key: "addBanish", value:
    function addBanish(monster) {} }, { key: "addGenericStuff", value:

    function addGenericStuff() {
      // Sing!
      // Absorb
      // Whatever
    } }, { key: "addMountainMan", value:

    function addMountainMan() {} }, { key: "addGlarkCable", value:

    function addGlarkCable() {} }, { key: "addCigerette", value:

    function addCigerette() {} }, { key: "addKilling", value:

    function addKilling() {
      // Absorb
      // Infinite Loop
      // +Item Drop
      // Banish
    } }, { key: "addYellowRay", value:

    function addYellowRay(monster) {} }, { key: "useBackups", value:

    function useBackups() {} }, { key: "addGremlins", value:

    function addGremlins() {} }]);return MacroFiller;}()));


function greyDuringFightMacro(settings) {
  var macro = new Macro();

  var monster = (0,external_kolmafia_namespaceObject.lastMonster)();
  var absorb = AbsorbsProvider.getAbsorb(monster);
  var hasAbsorbed = AbsorbsProvider.getReabsorbedMonsters().includes(monster);

  if (
  (0,external_kolmafia_namespaceObject.myFamiliar)() == external_kolmafia_namespaceObject.Familiar.get("Space Jellyfish") &&
  (0,external_kolmafia_namespaceObject.monsterElement)(monster) == external_kolmafia_namespaceObject.Element.get("stench"))
  {
    macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Extract Jelly"));
  }

  // If low weight fam, but not too high. Let them try to dupe.
  if (
  (0,external_kolmafia_namespaceObject.myLevel)() >= 6 &&
  monster == external_kolmafia_namespaceObject.Monster.get("Sausage Goblin") &&
  !GreySettings.isHardcoreMode() &&
  (0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) < 9)
  {
    macro = macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Emit Matter Duplicating Drones"));
  } else if (
  absorb != null && (
  (0,external_kolmafia_namespaceObject.myAdventures)() > 20 && absorb.mp > 0 || absorb.adventures > 0) &&
  !hasAbsorbed)
  {
    if (absorb.adventures > 0) {
      macro = macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Re-Process Matter"));
    }
  } else if (isBanishable(settings, monster)) {
    // If they have no good absorbs, or we've already absorbed them
    if (
    absorb == null ||
    hasAbsorbed != null ||
    absorb.hp == 0 &&
    absorb.mp == 0 && (
    absorb.skill == null || (0,external_kolmafia_namespaceObject.haveSkill)(absorb.skill)))
    {
      // If the script explicitly wanted to banish these and this isn't a non-quest
      if (
      !settings.nonquest && (
      settings.banishThese != null || settings.dontBanishThese != null))
      {
        if (
        !hasBanished((0,external_kolmafia_namespaceObject.myLocation)(), BanishType.SPRING_LOADED_FRONT_BUMPER) &&
        (0,external_kolmafia_namespaceObject.getFuel)() >= 50)
        {
          macro.trySkill("Asdon Martin: Spring-Loaded Front Bumper");
        }

        if (
        !hasBanished((0,external_kolmafia_namespaceObject.myLocation)(), BanishType.BOWL_A_CURVEBALL) &&
        (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Cosmic bowling ball")) > 0)
        {
          macro.trySkill("Bowl a Curveball");
        }
      }

      if (
      !hasBanished((0,external_kolmafia_namespaceObject.myLocation)(), BanishType.SYSTEM_SWEEP) &&
      (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("System Sweep")) &&
      (0,external_kolmafia_namespaceObject.getMonsters)((0,external_kolmafia_namespaceObject.myLocation)()).includes(monster))
      {
        // We want to banish always on quests, but not on non-quests which we're likely to be wasting a banish in
        var wastedBanish =
        settings.nonquest &&
        getBanished().filter(
        (b) =>
        b.banisher.type == BanishType.SYSTEM_SWEEP &&
        b.turnBanished + 1 >= (0,external_kolmafia_namespaceObject.myTurncount)()).
        length > 0;

        // If we're using crystal ball on a non-quest and we're only aiming to hit one banish
        if (
        !wastedBanish &&
        settings.nonquest &&
        (0,external_kolmafia_namespaceObject.equippedAmount)(external_kolmafia_namespaceObject.Item.get("miniature crystal ball")) > 0 &&
        settings.dontBanishThese != null &&
        settings.dontBanishThese.length == 1)
        {
          // If our next monster is a monster we're aiming to hit.
          var nextMonster = currentPredictions().get((0,external_kolmafia_namespaceObject.myLocation)());

          // If our next predicted combat is against a monster we specifically don't want to banish.
          wastedBanish =
          nextMonster != null && !isBanishable(settings, nextMonster);
        }

        if (!wastedBanish) {
          // If we do want to banish something..
          macro.trySkill(external_kolmafia_namespaceObject.Skill.get("System Sweep"));
        }
      }
    }
  }

  if (
  /*toInt(getProperty("flyeredML")) <= 10000 && */monster.baseHp < 300 &&
  (0,external_kolmafia_namespaceObject.myHp)() > 120 &&
  !monster.attributes.includes("FREE") &&
  monster != external_kolmafia_namespaceObject.Monster.get("Quantum Mechanic"))
  {
    macro.tryItem(external_kolmafia_namespaceObject.Item.get("rock band flyers"));
  }

  macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Pocket Crumbs"));

  if (
  (0,external_kolmafia_namespaceObject.myHp)() > monster.baseAttack * 2 &&
  Math.max(monster.baseAttack, monster.baseHp) * 1.1 <
  (0,external_kolmafia_namespaceObject.myBasestat)(external_kolmafia_namespaceObject.Stat.get("Moxie")) &&
  (0,external_kolmafia_namespaceObject.getProperty)("boomBoxSong") == "Total Eclipse of Your Meat")
  {
    // Always try to sing along if the mob is weak enough
    macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Sing Along"));
  }

  return macro;
}

function isBanishable(
settings,
monster)
{
  if (settings.banishThese == null && settings.dontBanishThese == null) {
    return false;
  }

  if (settings.banishThese != null) {
    return settings.banishThese.includes(monster);
  } else if (!settings.dontBanishThese.includes(monster) && !monster.boss) {
    var loc = (0,external_kolmafia_namespaceObject.myLocation)();
    var rates = (0,external_kolmafia_namespaceObject.appearanceRates)(loc);

    if (rates[monster.name] > 5) {
      return true;
    }
  }

  return false;
}

function greyKillingBlow(outfit) {
  var macro = new Macro();
  var healthPerc = Math.min(Math.floor((0,external_kolmafia_namespaceObject.myHp)() / (0,external_kolmafia_namespaceObject.myMaxhp)() * 100) - 5, 30);

  if ((0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Temporary Amnesia")) == 0) {
    if ((0,external_kolmafia_namespaceObject.myLevel)() < 4 && (0,external_kolmafia_namespaceObject.myFamiliar)() == external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) {
      macro = macro.trySkill(" Convert Matter to Pomade");
    }

    if (
    (0,external_kolmafia_namespaceObject.getProperty)("retroCapeSuperhero") == "vampire" &&
    (0,external_kolmafia_namespaceObject.getProperty)("retroCapeWashingInstructions") == "kill")
    {
      macro = macro.trySkillRepeat("Slay the dead");
    }

    if (
    ((0,external_kolmafia_namespaceObject.lastMonster)().baseHp < 2 || (0,external_kolmafia_namespaceObject.lastMonster)().physicalResistance < 70) &&
    (0,external_kolmafia_namespaceObject.myMp)() >= 20)
    {
      if (outfit.itemDropWeight >= 2 || (0,external_kolmafia_namespaceObject.myLevel)() > 20) {
        macro.while_("!pastround 15 && !hppercentbelow ".concat(
        healthPerc, " && hasskill Double Nanovision"),
        Macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Double Nanovision")));

      }

      // Only infinite loop if we're underleveled or have the outfit
      if (
      (0,external_kolmafia_namespaceObject.myLevel)() <= 10 ||
      (0,external_kolmafia_namespaceObject.myLevel)() < 20 && (
      !GreySettings.isHippyMode() ||
      (0,external_kolmafia_namespaceObject.haveOutfit)("Filthy Hippy Disguise") ||
      (0,external_kolmafia_namespaceObject.haveOutfit)("Frat Warrior Fatigues")))
      {
        macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Infinite Loop"));
        macro.while_("!pastround 15 && !hppercentbelow ".concat(
        healthPerc, " && hasskill Infinite Loop"),
        Macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Infinite Loop")));

      } else {
        macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));
        macro.while_("!pastround 15 && !hppercentbelow ".concat(
        healthPerc, " && hasskill Double Nanovision"),
        Macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Double Nanovision")));

      }
    }
  }

  macro.if_("!pastround 15 && !hppercentbelow ".concat(
  healthPerc),
  Macro.tryItem(external_kolmafia_namespaceObject.Item.get("Beehive")));

  macro.while_("!pastround 15 && !hppercentbelow 30", Macro.attack());
  macro.abort();

  return macro;
}
;// CONCATENATED MODULE: ./src/utils/RandomChoiceHandler.ts


function getBackupChoices() {
  var backupChoices = [];

  var choices = function choices(choiceNumber) {for (var _len = arguments.length, choices = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {choices[_key - 1] = arguments[_key];}
    for (var _i = 0, _choices = choices; _i < _choices.length; _i++) {var choice = _choices[_i];
      backupChoices.push([choiceNumber, choice]);
    }
  };

  // Sleazy back alley
  choices(112, 1);
  choices(110, 4);
  choices(109, 1);
  choices(108, 4);
  choices(31, 2);

  // Skeleton Office
  choices(1060, 4, 1);

  // Madness Bakery
  choices(1061, 1, 4);

  // Overgrown lot
  choices(1062, 5, 3);

  // Deep Machine
  choices(1119, 6);

  // NEP
  choices(1322, 6);

  // Manor pantry
  choices(888, 4);
  choices(889, 5);
  choices(114, 2);
  choices(115, 1);
  choices(116, 4);
  choices(117, 1);

  // Manor library
  choices(163, 3);

  // Manor billards
  choices(875, 1, 3);

  // Manor gallery
  choices(91, 2);
  choices(89, 6);

  // Manor bathroom
  choices(90, 3);
  choices(106, 3);
  choices(107, 4);
  choices(105, 2);
  choices(402, 3);
  choices(882, 2);

  // Manor bedroom
  choices(876, 1);
  choices(877, 1);
  choices(878, 4);
  choices(879, 4, 2);
  choices(880, 1, 2);

  // Palin
  choices(180, 2);
  choices(127, 1);
  choices(126, 1);

  // Airship
  choices(178, 2);
  choices(182, 4, 1);
  choices(669, 4);
  choices(670, 5);
  choices(671, 1);
  choices(672, 3);
  choices(673, 3);
  choices(674, 3);
  choices(677, 2, 1);
  choices(678, 1);
  choices(1026, 2);
  choices(1431, 1);
  choices(676, 1);
  choices(675, 1);

  // Knob Goblin
  choices(76, 3);
  choices(111, 3);
  choices(113, 1, 2);
  choices(118, 2);
  choices(120, 4);
  choices(522, 2);

  // Crypts
  choices(153, 4);
  choices(157, 4);
  choices(155, 4, 5);
  choices(523, 4);
  choices(527, 2);

  // Distant woods
  // The NC
  choices(502, 1);
  choices(505, 2);

  choices(46, 3);
  choices(47, 2);
  choices(73, 2);
  choices(74, 2);
  choices(75, 2);
  choices(511, 2);
  choices(512, 2);
  choices(579, 2);
  choices(581, 3);
  choices(582, 1);
  choices(584, 4);
  choices(794, 1);
  choices(795, 1);
  choices(796, 2);
  choices(798, 1);
  choices(923, 1);
  choices(924, 1);

  // Hidden city
  choices(791, 6);
  choices(788, 1);
  choices(786, 1);
  choices(789, 6);
  choices(784, 1);
  choices(780, 6);
  choices(787, 1, 6);
  choices(685, 1, 6);
  choices(783, 1, 6);
  choices(781, 1, 6);

  // Smut orcs
  choices(1345, 3);

  // Daily dungeon
  choices(692, 3, 8);
  choices(693, 2, 3);
  choices(690, 2);
  choices(691, 2);
  choices(689, 1);

  // Mountains
  choices(25, 3);
  choices(297, 3);
  choices(451, 1);

  // Mountain Peak
  choices(15, 3);
  choices(16, 3);
  choices(17, 3);
  choices(575, 3);
  choices(18, 3);
  choices(19, 3);
  choices(20, 3);
  choices(556, 2);

  // Protesters
  choices(856, 2);
  choices(857, 2);
  choices(858, 2);

  // Desert
  choices(4, 3);
  choices(929, 6);

  // Desert vacation
  choices(793, 4);

  // Island
  choices(22, 3);
  choices(23, 3);
  choices(24, 2);
  choices(72, 2);
  choices(138, 4);
  choices(136, 3);
  choices(137, 3);
  choices(181, 2);
  choices(1433, 3, 1, 2);
  choices(1434, 2, 3, 1);

  // Island war
  choices(147, 3);
  choices(148, 1);
  choices(149, 2);

  choices(139, 3);
  choices(140, 3);
  choices(141, 2);
  choices(142, 3, 2);
  choices(143, 3);
  choices(144, 3);
  choices(145, 2);
  choices(146, 3, 2);

  // Signed zones
  choices(5, 2);

  choices(696, 1, 2);
  choices(697, 1, 2);
  choices(698, 1, 2);

  // Manor lights
  for (var _i2 = 0, _arr = [
  890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903]; _i2 < _arr.length; _i2++)
  {var choiceNo = _arr[_i2];
    choices(choiceNo, 1, 2, 3);
  }

  // Lil Doctor Bag, turn it off today if we have all upgrades. Otherwise accept.
  choices(1340, (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("doctorBagUpgrades")) >= 5 ? 3 : 1);
  choices(1341, 1);

  // Haunted dog
  choices(1108, 1); // Food
  choices(1106, 3); //Dog chow
  choices(1107, (0,external_kolmafia_namespaceObject.myMeat)() < 6000 ? 3 : 1); // Meat or tennis ball

  return backupChoices;
}
;// CONCATENATED MODULE: ./src/utils/GreyLocations.ts
function GreyLocations_slicedToArray(arr, i) {return GreyLocations_arrayWithHoles(arr) || GreyLocations_iterableToArrayLimit(arr, i) || GreyLocations_unsupportedIterableToArray(arr, i) || GreyLocations_nonIterableRest();}function GreyLocations_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyLocations_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function GreyLocations_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyLocations_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyLocations_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyLocations_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyLocations_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyLocations_arrayLikeToArray(o, minLen);}function GreyLocations_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyLocations_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyLocations_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyLocations_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyLocations_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyLocations_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyLocations_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var AdventureSettings = /*#__PURE__*/function () {function AdventureSettings() {GreyLocations_classCallCheck(this, AdventureSettings);GreyLocations_defineProperty(this, "startOfFightMacro", void 0);GreyLocations_defineProperty(this, "duringFightMacro", void 0);GreyLocations_defineProperty(this, "finishingBlowMacro", void 0);GreyLocations_defineProperty(this, "choices", void 0);GreyLocations_defineProperty(this, "dontBanishThese", void 0);GreyLocations_defineProperty(this, "banishThese", void 0);GreyLocations_defineProperty(this, "nonquest",






    false);}GreyLocations_createClass(AdventureSettings, [{ key: "addBanishes", value:

    function addBanishes(monsters) {var _iterator = GreyLocations_createForOfIteratorHelper(
      monsters),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var monster = _step.value;
          this.addBanish(monster);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return this;
    } }, { key: "addBanish", value:

    function addBanish(monster) {
      if (this.dontBanishThese != null) {
        throw "Already declared banish everything but";
      }

      if (this.banishThese == null) {
        this.banishThese = [];
      }

      this.banishThese.push(monster);

      return this;
    } }, { key: "addNoBanishes", value:

    function addNoBanishes(monsters) {var _iterator2 = GreyLocations_createForOfIteratorHelper(
      monsters),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var monster = _step2.value;
          this.addNoBanish(monster);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return this;
    } }, { key: "addNoBanish", value:

    function addNoBanish(monster) {
      if (this.banishThese != null) {
        throw "Already declared banish only X";
      }

      if (this.dontBanishThese == null) {
        this.dontBanishThese = [];
      }

      this.dontBanishThese.push(monster);

      return this;
    } }, { key: "setBanishAnything", value:

    function setBanishAnything() {
      if (this.dontBanishThese != null || this.banishThese != null) {
        throw "Already declared some banishing";
      }

      if (this.dontBanishThese == null) {
        this.dontBanishThese = [];
      }

      return this;
    } }, { key: "setChoices", value:

    function setChoices(choices) {
      this.choices = choices;

      return this;
    } }, { key: "setStartOfFightMacro", value:

    function setStartOfFightMacro(startOfFightMacro) {
      this.startOfFightMacro = startOfFightMacro;

      return this;
    } }, { key: "setDuringFightMacro", value:

    function setDuringFightMacro(duringFightMacro) {
      this.duringFightMacro = duringFightMacro;

      return this;
    } }, { key: "setFinishingBlowMacro", value:

    function setFinishingBlowMacro(finishingBlowMacro) {
      this.finishingBlowMacro = finishingBlowMacro;

      return this;
    } }]);return AdventureSettings;}();


var backupChoices = getBackupChoices();

function greyAdv(
location,
outfit,
settings)
{
  if (outfit == null) {
    outfit = new GreyOutfit();
  }

  if (settings == null) {
    settings = new AdventureSettings();
  }

  var macro;

  var createMacro = function createMacro() {
    if (settings.startOfFightMacro == null) {
      macro = new Macro();
    } else {
      macro = settings.startOfFightMacro;
    }

    if (settings.duringFightMacro == null) {
      macro.step(greyDuringFightMacro(settings));
    } else {
      macro.
      step(settings.duringFightMacro).
      step(greyDuringFightMacro(settings));
    }

    if (settings.finishingBlowMacro == null) {
      macro.step(greyKillingBlow(outfit));
    } else {
      macro.step(settings.finishingBlowMacro);
    }
  };

  var choicesRun = [];

  var runChoice = function runChoice() {
    var choiceToPick;

    if (Object.keys((0,external_kolmafia_namespaceObject.availableChoiceOptions)()).length == 0) {
      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php");
    }

    if ((0,external_kolmafia_namespaceObject.lastChoice)() == 904) {
      (0,external_kolmafia_namespaceObject.cliExecute)("choice-goal");
      return;
    }

    var juneCleaver = (0,external_kolmafia_namespaceObject.lastChoice)() >= 1467 && (0,external_kolmafia_namespaceObject.lastChoice)() <= 1475;

    if (juneCleaver) {
      choiceToPick = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("choiceAdventure" + (0,external_kolmafia_namespaceObject.lastChoice)()));
    } else if (settings.choices != null) {
      if (settings.choices.calledOutOfScopeChoiceBehavior((0,external_kolmafia_namespaceObject.lastChoice)())) {
        return;
      }

      choiceToPick = settings.choices.handleChoice((0,external_kolmafia_namespaceObject.lastChoice)());
    }

    if (choiceToPick == null) {
      loop: for (var _i = 0, _arr = [handledChoices, backupChoices]; _i < _arr.length; _i++) {var choices = _arr[_i];var _iterator3 = GreyLocations_createForOfIteratorHelper(
        choices),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _step3$value = GreyLocations_slicedToArray(_step3.value, 2),choiceNumber = _step3$value[0],choiceValue = _step3$value[1];
            if (choiceNumber != (0,external_kolmafia_namespaceObject.lastChoice)()) {
              continue;
            }

            if ((0,external_kolmafia_namespaceObject.availableChoiceOptions)()[choiceValue] == null) {
              continue;
            }

            choiceToPick = choiceValue;
            break loop;
          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
      }
    }

    if (choiceToPick == null) {
      (0,external_kolmafia_namespaceObject.print)("Oh god", "red");
      throw "No idea what to do! Handle the choice manually? Report this issue! Reported to be in choice ".concat((0,external_kolmafia_namespaceObject.lastChoice)(), " with choice options ").concat((0,external_kolmafia_namespaceObject.toJson)(
      (0,external_kolmafia_namespaceObject.availableChoiceOptions)()), ", handling choice: ").concat(
      (0,external_kolmafia_namespaceObject.handlingChoice)(), ", fight follows: ").concat((0,external_kolmafia_namespaceObject.fightFollowsChoice)());
    }

    if (choicesRun.filter((c) => c == (0,external_kolmafia_namespaceObject.lastChoice)()).length > 6) {
      throw "Detected we're looping in a choice, you will need to manually resolve the choice and should report this issue.";
    }

    choicesRun.push((0,external_kolmafia_namespaceObject.lastChoice)());

    var url =
    "choice.php?pwd=&whichchoice=" + (0,external_kolmafia_namespaceObject.lastChoice)() + "&option=" + choiceToPick;

    (0,external_kolmafia_namespaceObject.visitUrl)(url);
    (0,external_kolmafia_namespaceObject.print)("Visited " + url);
  };

  var runCombat = function runCombat() {
    if (macro == null) {
      createMacro();
    }

    (0,external_kolmafia_namespaceObject.print)(macro.toString());
    macro.submit();
  };

  if ((0,external_kolmafia_namespaceObject.currentRound)() == 0 && !(0,external_kolmafia_namespaceObject.handlingChoice)()) {
    if (outfit.plusCombatWeight > 0) {
      castCombatSkill();
    } else if (outfit.minusCombatWeight > 0) {
      castNoCombatSkills();
    }

    if (typeof location == "string") {
      (0,external_kolmafia_namespaceObject.visitUrl)(location);
    } else if (location != null) {
      (0,external_kolmafia_namespaceObject.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_namespaceObject.toInt)(location));
    }
  }

  while ((0,external_kolmafia_namespaceObject.currentRound)() != 0 || (0,external_kolmafia_namespaceObject.handlingChoice)() || (0,external_kolmafia_namespaceObject.fightFollowsChoice)()) {
    if ((0,external_kolmafia_namespaceObject.currentRound)() != 0) {
      runCombat();

      if ((0,external_kolmafia_namespaceObject.currentRound)() != 0) {
        throw "Didn't expect to still be in combat! Maybe health is too low that we aborted to be safe?";
      }
    } else if ((0,external_kolmafia_namespaceObject.handlingChoice)() || (0,external_kolmafia_namespaceObject.fightFollowsChoice)()) {
      runChoice();
    }
  }
}

var cachedLocations = new Map();

function getLocations(monster) {
  if (cachedLocations.has(monster)) {
    return cachedLocations.get(monster);
  }

  var locations = [];var _iterator4 = GreyLocations_createForOfIteratorHelper(

  external_kolmafia_namespaceObject.Location.all()),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var l = _step4.value;
      var monsters = Object.keys((0,external_kolmafia_namespaceObject.getLocationMonsters)(l)).map((k) =>
      external_kolmafia_namespaceObject.Monster.get(k));


      if (!monsters.includes(monster)) {
        continue;
      }

      locations.push(l);
    }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

  cachedLocations.set(monster, locations);

  return locations;
}
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayBurningKramco.ts
function DelayBurningKramco_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayBurningKramco_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function DelayBurningKramco_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayBurningKramco_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayBurningKramco_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayBurningKramco_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var DelayBurningKramco = /*#__PURE__*/function () {function DelayBurningKramco() {DelayBurningKramco_classCallCheck(this, DelayBurningKramco);DelayBurningKramco_defineProperty(this, "kramco",
    external_kolmafia_namespaceObject.Item.get("Kramco Sausage-o-Matic"));}DelayBurningKramco_createClass(DelayBurningKramco, [{ key: "doFightSetup", value:

    function doFightSetup() {
      (0,external_kolmafia_namespaceObject.equip)(this.kramco, external_kolmafia_namespaceObject.Slot.get("off-hand"));

      return [external_kolmafia_namespaceObject.Slot.get("off-hand")];
    } }, { key: "isViableAsCombatReplacer", value:

    function isViableAsCombatReplacer() {
      return this.getChanceOfFight() > 0.1; // 10% chance
    } }, { key: "isViable", value:

    function isViable() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.kramco) > 0;
    } }, { key: "isFree", value:

    function isFree() {
      return true;
    } }, { key: "readyIn", value:

    function readyIn() {
      return this.getNextGuaranteedFight();
    } }, { key: "doSetup", value:

    function doSetup() {} }, { key: "getGoblinsFought", value:

    function getGoblinsFought() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_sausageFights"));
    } }, { key: "getLastGoblinTurn", value:

    function getLastGoblinTurn() {
      return (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_lastSausageMonsterTurn"));
    } }, { key: "getNextGuaranteedGoblin", value:

    function getNextGuaranteedGoblin() {
      var goblinsFought = this.getGoblinsFought();
      return (
        4 +
        goblinsFought * 3 +
        Math.max(0, goblinsFought - 5) *
        Math.max(0, goblinsFought - 5) *
        Math.max(0, goblinsFought - 5));

    } }, { key: "getNextGuaranteedFight", value:

    function getNextGuaranteedFight() {
      if (this.getGoblinsFought() == 0) {
        return 0;
      }

      return Math.max(
      0,
      this.getNextGuaranteedGoblin() - this.getLastGoblinTurn());

    } }, { key: "getGoblinMultiplier", value:

    function getGoblinMultiplier() {
      return Math.max(0, this.getGoblinsFought() - 5);
    } }, { key: "getChanceOfFight", value:

    function getChanceOfFight() {
      var chance =
      (this.getLastGoblinTurn() + 1.0) / (
      (5.0 + this.getGoblinsFought()) * 3.0 +
      this.getGoblinMultiplier() *
      this.getGoblinMultiplier() *
      this.getGoblinMultiplier());

      if (chance > 1) {
        chance = 1;
      }
      if (chance < 0) {
        chance = 0;
      }

      return chance;
    } }]);return DelayBurningKramco;}();
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayBurningVoter.ts
function DelayBurningVoter_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayBurningVoter_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function DelayBurningVoter_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayBurningVoter_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayBurningVoter_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayBurningVoter_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var DelayBurningVoter = /*#__PURE__*/function () {function DelayBurningVoter() {DelayBurningVoter_classCallCheck(this, DelayBurningVoter);DelayBurningVoter_defineProperty(this, "absentee",
    external_kolmafia_namespaceObject.Item.get("Absentee Voter Ballot"));DelayBurningVoter_defineProperty(this, "sticker",
    external_kolmafia_namespaceObject.Item.get('"I Voted!" sticker'));}DelayBurningVoter_createClass(DelayBurningVoter, [{ key: "doFightSetup", value:

    function doFightSetup() {
      (0,external_kolmafia_namespaceObject.equip)(this.sticker, external_kolmafia_namespaceObject.Slot.get("acc3"));

      return [external_kolmafia_namespaceObject.Slot.get("acc3")];
    } }, { key: "isViableAsCombatReplacer", value:

    function isViableAsCombatReplacer() {
      return false;
    } }, { key: "readyIn", value:

    function readyIn() {
      var turnsTillNextFight = ((0,external_kolmafia_namespaceObject.totalTurnsPlayed)() - 1) % 11;

      if (turnsTillNextFight > 0) {
        turnsTillNextFight = 10 - turnsTillNextFight;
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastVoteMonsterTurn")) >= (0,external_kolmafia_namespaceObject.totalTurnsPlayed)()) {
        turnsTillNextFight += 10;
      }

      return turnsTillNextFight;
    } }, { key: "doSetup", value:

    function doSetup() {
      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.sticker) > 0 ||
      (0,external_kolmafia_namespaceObject.turnsPlayed)() < 200 ||
      !GreySettings.greyVotingBooth)
      {
        return;
      }

      this.voterSetup();
    } }, { key: "isViable", value:

    function isViable() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.sticker) > 0 ||
        (0,external_kolmafia_namespaceObject.getProperty)("voteAlways") == "true" ||
        (0,external_kolmafia_namespaceObject.getProperty)("_voteToday") == "true" ||
        (0,external_kolmafia_namespaceObject.availableAmount)(this.absentee) > 0);

    } }, { key: "isFree", value:

    function isFree() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_voteFreeFights")) < 3;
    } }, { key: "voterSetup", value:

    function voterSetup() {
      var voterValueTable = [
      {
        monster: external_kolmafia_namespaceObject.Monster.get("terrible mutant"),
        value: (0,external_kolmafia_namespaceObject.mallPrice)(external_kolmafia_namespaceObject.Item.get("glob of undifferentiated tissue")) + 10 },

      {
        monster: external_kolmafia_namespaceObject.Monster.get("angry ghost"),
        value: (0,external_kolmafia_namespaceObject.mallPrice)(external_kolmafia_namespaceObject.Item.get("ghostly ectoplasm")) * 1.11 },

      {
        monster: external_kolmafia_namespaceObject.Monster.get("government bureaucrat"),
        value:
        (0,external_kolmafia_namespaceObject.mallPrice)(external_kolmafia_namespaceObject.Item.get("absentee voter ballot")) * 0.05 + 75 * 0.25 + 50 },

      {
        monster: external_kolmafia_namespaceObject.Monster.get("annoyed snake"),
        value: 25 * 0.5 + 25 },

      {
        monster: external_kolmafia_namespaceObject.Monster.get("slime blob"),
        value: 20 * 0.4 + 50 * 0.2 + 250 * 0.01 }];



      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.absentee) > 0 &&
      (0,external_kolmafia_namespaceObject.getProperty)("_voteToday") == "false" &&
      (0,external_kolmafia_namespaceObject.getProperty)("voteAlways") == "false")
      {
        try {
          (0,external_kolmafia_namespaceObject.visitUrl)("inv_use.php?pwd&which=3&whichitem=9991");
          //use(Item.get("Absentee Voter Ballot"));
        } catch (e) {}
      }

      try {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=town_right&action=townright_vote");
      } catch (e) {}

      var votingMonsterPriority = voterValueTable.
      sort((a, b) => b.value - a.value).
      map((element) => element.monster.name);

      var monsterVote =
      votingMonsterPriority.indexOf((0,external_kolmafia_namespaceObject.getProperty)("_voteMonster1")) <
      votingMonsterPriority.indexOf((0,external_kolmafia_namespaceObject.getProperty)("_voteMonster2")) ?
      1 :
      2;

      var firstInit = [2, "Moxie Percent"];
      var secondInit = [3, "Hot Resistance: +3"];
      var firstProp = (0,external_kolmafia_namespaceObject.getProperty)("_voteLocal" + (firstInit[0] + 1));
      var secondProp = (0,external_kolmafia_namespaceObject.getProperty)("_voteLocal" + (secondInit[0] + 1));

      if (firstInit[1] != firstProp || secondInit[1] != secondProp) {
        throw "Expected voting booth to give us ".concat(firstInit[1], " and ").concat(secondInit[1], " but instead they give ").concat(firstProp, " and ").concat(secondProp);
      }

      (0,external_kolmafia_namespaceObject.print)(
      "We're voting for " +
      (0,external_kolmafia_namespaceObject.getProperty)("_voteLocal" + (firstInit[0] + 1)) +
      " (" +
      firstInit +
      ")" +
      " and " +
      (0,external_kolmafia_namespaceObject.getProperty)("_voteLocal" + (secondInit[0] + 1)) +
      " (" +
      secondInit +
      ")",
      "gray");


      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?option=1&whichchoice=1331&g=".concat(
      monsterVote, "&local[]=").concat(firstInit[0], "&local[]=").concat(secondInit[0]));

      (0,external_kolmafia_namespaceObject.waitq)(1);
    } }]);return DelayBurningVoter;}();
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayCursedMagnifyingGlass.ts
function DelayCursedMagnifyingGlass_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayCursedMagnifyingGlass_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function DelayCursedMagnifyingGlass_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayCursedMagnifyingGlass_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayCursedMagnifyingGlass_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayCursedMagnifyingGlass_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var DelayBurningCursedMagnifyingGlass = /*#__PURE__*/function () {function DelayBurningCursedMagnifyingGlass() {DelayCursedMagnifyingGlass_classCallCheck(this, DelayBurningCursedMagnifyingGlass);DelayCursedMagnifyingGlass_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("Cursed Magnifying Glass"));DelayCursedMagnifyingGlass_defineProperty(this, "lobsterBarrels",
    external_kolmafia_namespaceObject.Item.get("barrel of gunpowder"));DelayCursedMagnifyingGlass_defineProperty(this, "monster",
    external_kolmafia_namespaceObject.Monster.get("Lobsterfrogman"));}DelayCursedMagnifyingGlass_createClass(DelayBurningCursedMagnifyingGlass, [{ key: "isViable", value:

    function isViable() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.item) == 0) {
        return false;
      }

      // Force it to be available for lobster
      if (
      (0,external_kolmafia_namespaceObject.getProperty)("sidequestLighthouseCompleted") == "none" &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.lobsterBarrels) < 5)
      {
        return false;
      }

      return true;
    } }, { key: "isViableAsCombatReplacer", value:

    function isViableAsCombatReplacer() {
      return false;
    } }, { key: "isFree", value:

    function isFree() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_voidFreeFights")) < 5;
    } }, { key: "readyIn", value:

    function readyIn() {
      return 13 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cursedMagnifyingGlassCount"));
    } }, { key: "doSetup", value:

    function doSetup() {} }, { key: "doFightSetup", value:

    function doFightSetup() {
      (0,external_kolmafia_namespaceObject.equip)(this.item, external_kolmafia_namespaceObject.Slot.get("off-hand"));

      return [external_kolmafia_namespaceObject.Slot.get("off-hand")];
    } }]);return DelayBurningCursedMagnifyingGlass;}();
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayBurners.ts
function DelayBurners_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = DelayBurners_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function DelayBurners_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return DelayBurners_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DelayBurners_arrayLikeToArray(o, minLen);}function DelayBurners_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function DelayBurners_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayBurners_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function DelayBurners_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayBurners_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayBurners_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayBurners_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var DelayBurners = /*#__PURE__*/function () {function DelayBurners() {DelayBurners_classCallCheck(this, DelayBurners);}DelayBurners_createClass(DelayBurners, null, [{ key: "getDelays", value:


    function getDelays() {
      if (this.delays != null) {
        return this.delays;
      }

      this.delays = [
      new DelayBurningKramco(),
      new DelayBurningVoter(),
      new DelayBurningCursedMagnifyingGlass()].
      filter((d) => d.isViable());var _iterator = DelayBurners_createForOfIteratorHelper(

      this.delays),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var delay = _step.value;
          delay.doSetup();
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return this.delays;
    } }, { key: "getDelayBurners", value:

    function getDelayBurners() {
      return this.getDelays().filter((d) => d.isViable());
    } }, { key: "isTryingForDupeableGoblin", value:

    function isTryingForDupeableGoblin() {
      var fam = external_kolmafia_namespaceObject.Familiar.get("Grey Goose");
      return (
        (0,external_kolmafia_namespaceObject.familiarWeight)(fam) >= 6 &&
        (0,external_kolmafia_namespaceObject.familiarWeight)(fam) < 9 &&
        (0,external_kolmafia_namespaceObject.equippedAmount)(external_kolmafia_namespaceObject.Item.get("Kramco Sausage-o-Matic")) > 0);

    } }, { key: "getReadyDelayBurner", value:

    function getReadyDelayBurner() {var freeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var burner = this.getDelayBurner(freeOnly);

      if (burner == null || burner.readyIn() > 0) {
        return null;
      }

      return burner;
    } }, { key: "isDelayBurnerReady", value:

    function isDelayBurnerReady() {var freeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var burner = this.getDelayBurner(freeOnly);

      return burner != null && burner.readyIn() <= 0;
    } }, { key: "tryReplaceCombats", value:

    function tryReplaceCombats() {var maxTurnsWasted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      var delays = this.getDelays().
      filter((d) => d.isViable() && d.isViableAsCombatReplacer()).
      sort((d1, d2) => d1.readyIn() - d2.readyIn());

      var toReturn = delays.find(
      (d) => d.isFree() && d.readyIn() <= maxTurnsWasted);


      if (toReturn == null) {
        toReturn = delays[0];
      }

      if (toReturn == null) {
        return;
      }

      return toReturn.doFightSetup();
    } }, { key: "isDelayBurnerFeasible", value:

    function isDelayBurnerFeasible() {
      return this.getDelayBurners().find((d) => d.readyIn() < 7) != null;
    } }, { key: "getDelayBurner", value:

    function getDelayBurner() {var freeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var delays = this.getDelays().
      filter((d) => d.isViable() && (d.isFree() || freeOnly)).
      sort((d1, d2) => d1.readyIn() - d2.readyIn());

      var toReturn = delays.find((d) => d.isFree());

      if (toReturn == null) {
        toReturn = delays[0];
      }

      return toReturn;
    } }]);return DelayBurners;}();DelayBurners_defineProperty(DelayBurners, "delays", void 0);
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantShip.ts
function QuestL10GiantShip_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantShip_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL10GiantShip_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantShip_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantShip_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantShip_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL10GiantShip = /*#__PURE__*/function () {function QuestL10GiantShip() {QuestL10GiantShip_classCallCheck(this, QuestL10GiantShip);QuestL10GiantShip_defineProperty(this, "modelShip",
    external_kolmafia_namespaceObject.Item.get("Model airship"));QuestL10GiantShip_defineProperty(this, "amulet",
    external_kolmafia_namespaceObject.Item.get("Amulet of Extreme Plot Significance"));QuestL10GiantShip_defineProperty(this, "umbrella",
    external_kolmafia_namespaceObject.Item.get("Titanium Assault Umbrella"));QuestL10GiantShip_defineProperty(this, "wig",
    external_kolmafia_namespaceObject.Item.get("Mohawk Wig"));QuestL10GiantShip_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Penultimate Fantasy Airship"));QuestL10GiantShip_defineProperty(this, "wads",
    [
    "Tissue Paper Immateria",
    "Tin Foil Immateria",
    "Gauze Immateria",
    "Plastic Wrap Immateria"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestL10GiantShip_defineProperty(this, "protag",
    external_kolmafia_namespaceObject.Monster.get("Protagonist"));QuestL10GiantShip_defineProperty(this, "toAbsorb", void 0);}QuestL10GiantShip_createClass(QuestL10GiantShip, [{ key: "shouldRunNC", value:


    function shouldRunNC() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.modelShip) == 0 || this.loc.turnsSpent >= 25) {
        return true;
      }

      if (this.loc.turnsSpent < 5) {
        return false;
      }

      var wadExpected = this.wads[Math.floor(this.loc.turnsSpent - 5) / 5];

      // If we have this wad already, then we need to wait for the next wad to be available
      if (wadExpected != null && (0,external_kolmafia_namespaceObject.availableAmount)(wadExpected) > 0) {
        return false;
      }

      return true;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (this.shouldRunNC()) {
        outfit.setNoCombat();
      }

      var wantDrops =
      (0,external_kolmafia_namespaceObject.availableAmount)(this.amulet) == 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) == 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.wig) == 0;

      if (wantDrops) {
        outfit.setItemDrops();
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(681, 1);

          if (!this.shouldRunNC()) {
            var ready = DelayBurners.getReadyDelayBurner();

            if (ready != null) {
              ready.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          try {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.modelShip) == 0) {
              props.setChoice(182, 4);
            } else {
              props.setChoice(182, 1);
            }

            var settings = new AdventureSettings();
            settings.addBanish(this.protag);

            greyAdv(this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Ship";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 6) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantShip;}();
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantGround.ts
function QuestL10GiantGround_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantGround_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL10GiantGround_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantGround_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantGround_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantGround_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL10GiantGround = /*#__PURE__*/function () {function QuestL10GiantGround() {QuestL10GiantGround_classCallCheck(this, QuestL10GiantGround);QuestL10GiantGround_defineProperty(this, "boning",
    external_kolmafia_namespaceObject.Item.get("electric boning knife"));QuestL10GiantGround_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get(
    "The Castle in the Clouds in the Sky (Ground Floor)"));QuestL10GiantGround_defineProperty(this, "toAbsorb", void 0);QuestL10GiantGround_defineProperty(this, "drunkBell",


    external_kolmafia_namespaceObject.Item.get("Drunkula's bell"));QuestL10GiantGround_defineProperty(this, "rocket",
    external_kolmafia_namespaceObject.Item.get("Great Wolf's rocket launcher"));}QuestL10GiantGround_createClass(QuestL10GiantGround, [{ key: "isDelayBurning", value:

    function isDelayBurning() {
      return (
        this.isKnifeHunting() &&
        this.toAbsorb.length == 0 &&
        this.loc.turnsSpent < 11);

    } }, { key: "isKnifeHunting", value:

    function isKnifeHunting() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.boning) > 0) {
        return false;
      }

      if (GreySettings.shouldAvoidTowerRequirements()) {
        return (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.drunkBell) +
          (0,external_kolmafia_namespaceObject.availableAmount)(this.rocket) +
          (0,external_kolmafia_namespaceObject.storageAmount)(this.drunkBell) +
          (0,external_kolmafia_namespaceObject.storageAmount)(this.rocket) ==
          0);

      }

      return true;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (this.loc.turnsSpent < 11) {
        if (this.isKnifeHunting()) {
          outfit.setNoCombat();
        } else {
          outfit.setPlusCombat();
        }
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          var hasBone = (0,external_kolmafia_namespaceObject.availableAmount)(this.boning) > 0;

          if (this.isDelayBurning()) {
            var ready = DelayBurners.getReadyDelayBurner();

            if (ready != null) {
              ready.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }
          } else if (this.toAbsorb.length == 0) {
            DelayBurners.tryReplaceCombats();
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          try {
            // props.setChoice(672, hasBone ? 2 : 1);
            // props.setChoice(673, hasBone ? 2 : 1);
            // props.setChoice(674, hasBone ? 2 : 1);
            props.setChoice(672, 2);
            props.setChoice(673, 2);
            props.setChoice(674, 2);
            props.setChoice(1026, hasBone ? 3 : 2);

            greyAdv(this.loc, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Ground";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 8) {
        return QuestStatus.NOT_READY;
      }

      if (status > 8) {
        return QuestStatus.COMPLETED;
      }

      if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantGround;}();
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantBasement.ts
function QuestL10GiantBasement_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantBasement_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL10GiantBasement_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantBasement_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantBasement_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantBasement_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL10GiantBasement = /*#__PURE__*/function () {






  // TODO Once we've got the absorbs, try replace combats if it doesn't interfere with our slots cos umbrella

  function QuestL10GiantBasement() {QuestL10GiantBasement_classCallCheck(this, QuestL10GiantBasement);QuestL10GiantBasement_defineProperty(this, "amulet", external_kolmafia_namespaceObject.Item.get("Amulet of Extreme Plot Significance"));QuestL10GiantBasement_defineProperty(this, "umbrella", external_kolmafia_namespaceObject.Item.get("Titanium Assault Umbrella"));QuestL10GiantBasement_defineProperty(this, "dumbell", external_kolmafia_namespaceObject.Item.get("Massive Dumbbell"));QuestL10GiantBasement_defineProperty(this, "loc", external_kolmafia_namespaceObject.Location.get("The Castle in the Clouds in the Sky (Basement)"));
    var umbrella = external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella");

    if ((0,external_kolmafia_namespaceObject.availableAmount)(umbrella) > 0) {
      this.umbrella = umbrella; // They replace!
    }
  }QuestL10GiantBasement_createClass(QuestL10GiantBasement, [{ key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var turnsSpent = (0,external_kolmafia_namespaceObject.turnsPlayed)();
          this.runAdv(outfit);

          // If we took a turn, or the last choice wasn't one asking for umbrella & amulet
          if (
          turnsSpent != (0,external_kolmafia_namespaceObject.turnsPlayed)() ||
          (0,external_kolmafia_namespaceObject.lastChoice)() != 669 && (0,external_kolmafia_namespaceObject.lastChoice)() != 670)
          {
            return;
          }

          (0,external_kolmafia_namespaceObject.print)(
          "Detected that we've hit the giant NC and want to wear an umbrella/amulet.. So equipping that and trying it again.",
          "blue");


          for (var _i = 0, _arr = [this.umbrella, this.amulet]; _i < _arr.length; _i++) {var i = _arr[_i];
            if ((0,external_kolmafia_namespaceObject.equippedAmount)(i) > 0 || (0,external_kolmafia_namespaceObject.itemAmount)(i) == 0) {
              continue;
            }

            (0,external_kolmafia_namespaceObject.equip)(i);
          }

          this.runAdv(outfit);
        } };

    } }, { key: "runAdv", value:

    function runAdv(outfit) {
      var props = new PropertyManager();

      try {
        // Do umbrella
        if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.umbrella) > 0 || (0,external_kolmafia_namespaceObject.itemAmount)(this.umbrella) == 0) {
          // If we have umbrella equipped, or don't have one
          props.setChoice(669, 1);
        } else {
          props.setChoice(669, 4); // Skip so we can resume
        }

        // If have amulet otherwise grab dumbbell (or skips it)
        if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.amulet) > 0) {
          props.setChoice(670, 4);
        } else if ((0,external_kolmafia_namespaceObject.itemAmount)(this.amulet) == 0) {
          // Grab dumbbell
          props.setChoice(670, 1);
        } else {
          // Skip
          props.setChoice(670, 5);
        }

        // Use dumbbell to open stuff
        if ((0,external_kolmafia_namespaceObject.availableAmount)(this.dumbell) > 0) {
          props.setChoice(671, 1);
        } else {
          // Go to gym
          props.setChoice(671, 4);
        }

        greyAdv(this.loc, outfit);
      } finally {
        props.resetAll();
      }
    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Basement";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 7) {
        return QuestStatus.NOT_READY;
      }

      if (status > 7) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantBasement;}();
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantTop.ts
function QuestL10GiantTop_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantTop_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL10GiantTop_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantTop_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantTop_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantTop_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL10GiantTop = /*#__PURE__*/function () {function QuestL10GiantTop() {QuestL10GiantTop_classCallCheck(this, QuestL10GiantTop);QuestL10GiantTop_defineProperty(this, "modelAirShip",
    external_kolmafia_namespaceObject.Item.get("Model airship"));QuestL10GiantTop_defineProperty(this, "wig",
    external_kolmafia_namespaceObject.Item.get("Mohawk Wig"));QuestL10GiantTop_defineProperty(this, "record",
    external_kolmafia_namespaceObject.Item.get("drum 'n' bass 'n' drum 'n' bass record"));QuestL10GiantTop_defineProperty(this, "rocketToStars",
    external_kolmafia_namespaceObject.Item.get("steam-powered model rocketship"));QuestL10GiantTop_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get(
    "The Castle in the Clouds in the Sky (Top Floor)"));QuestL10GiantTop_defineProperty(this, "steamNC",

    677);QuestL10GiantTop_defineProperty(this, "raverNC",
    676);QuestL10GiantTop_defineProperty(this, "punkNC",
    678);QuestL10GiantTop_defineProperty(this, "gothNC",
    675);}QuestL10GiantTop_createClass(QuestL10GiantTop, [{ key: "run", value:

    // TODO Once we've got the absorbs, try replace combats

    function run() {
      var outfit = new GreyOutfit().setNoCombat();

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.wig) > 0) {
        outfit.addItem(this.wig);
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          try {
            // Goth and steam love each other
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.modelAirShip) > 0) {
              props.setChoice(this.steamNC, 1); // Use model ship
              props.setChoice(this.gothNC, 4); // Crawl to copper
            } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.record) > 0) {
              // We have the record, lets end this.
              props.setChoice(this.steamNC, 4); // Crawl to goth
              props.setChoice(this.gothNC, 2); // Grab record
            } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.rocketToStars) == 0) {
              // We don't have airship or record, to avoid fighting lets just grab the rocket if we can
              props.setChoice(this.steamNC, 2); // Grab rocket
              props.setChoice(this.gothNC, 4); // Crawl to steam
            } else {
              // This adv is a waste, just fight.
              props.setChoice(this.steamNC, 1); // Fight steam
              props.setChoice(this.gothNC, 1); // Fight goth
            }

            // Punk and raver love each other
            if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.wig) > 0) {
              // If we can end this with the wig
              props.setChoice(this.punkNC, 1); // Use wig
              props.setChoice(this.raverNC, 4); // Crawl to punk rock
            } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.record) == 0) {
              // If we can grab a record
              props.setChoice(this.punkNC, 4); // Crawl to raver
              props.setChoice(this.raverNC, 3); // Grab record
            } else {
              // We're going to waste an adventure
              props.setChoice(this.punkNC, 4); // Crawl to raver
              props.setChoice(this.raverNC, 1); // Fight the raver for their advs
            }

            props.setChoice(679, 1); // Turn dat wheel

            greyAdv(this.loc, outfit);

            if ((0,external_kolmafia_namespaceObject.lastChoice)() == 679) {
              (0,external_kolmafia_namespaceObject.council)();
            }
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Top";
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 9) {
        return QuestStatus.NOT_READY;
      }

      if (status > 9) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantTop;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL10Giants.ts
function QuestL10Giants_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10Giants_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL10Giants_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10Giants_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10Giants_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10Giants_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL10Beanstalk = /*#__PURE__*/function () {



  function QuestL10Beanstalk() {QuestL10Giants_classCallCheck(this, QuestL10Beanstalk);QuestL10Giants_defineProperty(this, "bean", external_kolmafia_namespaceObject.Item.get("Enchanted Bean"));QuestL10Giants_defineProperty(this, "children", []);
    this.children.push(new QuestL10GiantShip());
    this.children.push(new QuestL10GiantGround());
    this.children.push(new QuestL10GiantBasement());
    this.children.push(new QuestL10GiantTop());
  }QuestL10Giants_createClass(QuestL10Beanstalk, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / EnchantedBean";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.bean) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "run", value:

    function run() {
      // Use bean if we need to
      var status = getQuestStatus("questL10Garbage");

      if (status == 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get("Enchanted Bean"));
          } };

      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.council)();
        } };

    } }]);return QuestL10Beanstalk;}();var


GiantStatus;(function (GiantStatus) {GiantStatus["unstarted"] = "unstarted";GiantStatus["started"] = "started";GiantStatus["step1"] = "PLANTED_BEAN";GiantStatus["step2"] = "LOOKING_SHIP_WADS";GiantStatus["step3"] = "TISSUE_WAD";GiantStatus["step4"] = "TIN_WAD";GiantStatus["step5"] = "GAUZE_WAD";GiantStatus["step6"] = "PLASTIC_WAD";GiantStatus["step7"] = "BASEMENT";GiantStatus["step8"] = "GROUND_FLOOR";GiantStatus["step9"] = "TOP_FLOOR";GiantStatus["step10"] = "TURNED_WHEEL";GiantStatus["finished"] = "finished";})(GiantStatus || (GiantStatus = {}));
;// CONCATENATED MODULE: ./src/utils/LatteUtils.ts
function LatteUtils_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = LatteUtils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function LatteUtils_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return LatteUtils_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LatteUtils_arrayLikeToArray(o, minLen);}function LatteUtils_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}

var LatteFlavor;



















// Map of kol latte names, to mafia latte names
(function (LatteFlavor) {LatteFlavor["FAM_EXP"] = "vitamins";LatteFlavor["ITEM_DROP"] = "carrot";LatteFlavor["COLD_DAMAGE"] = "blue chalks";LatteFlavor["MEAT_DROP"] = "cajun";LatteFlavor["FAM_WEIGHT"] = "rawhide";LatteFlavor["PVP_FIGHTS"] = "hellion";LatteFlavor["PLUS_COMBAT"] = "hot wing";LatteFlavor["MINUS_COMBAT"] = "ink";LatteFlavor["MP_5_REGEN"] = "carrrdamom";LatteFlavor["MP_10_REGEN"] = "lizard milk";LatteFlavor["HOT_RESIST"] = "chili seeds";LatteFlavor["COLD_RESIST"] = "cocoa powder";LatteFlavor["SLEAZE_RESIST"] = "white flour";LatteFlavor["SPOOKY_RESIST"] = "squamous salt";LatteFlavor["STENCH_RESIST"] = "clove";LatteFlavor["FAMILIAR_WEIGHT"] = "rawhide";LatteFlavor["UNKNOWN"] = "";})(LatteFlavor || (LatteFlavor = {}));var latteAliases = new Map([["fortified", "vitamins"]]);

function getFlavors() {
  var page = (0,external_kolmafia_namespaceObject.visitUrl)("main.php?latte=1", false);
  var flavors = [];var _iterator = LatteUtils_createForOfIteratorHelper(

  page.split(
  '<td valign="top" style="border-bottom: 1px solid black"></td>')),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;)
    {var spl = _step.value;
      var match = spl.match(
      /<input {2}type="radio" name="l([123])" checked value="[a-zA-Z0-9/+]+">[a-zA-z- ]+<\/td>/);


      if (match == null) {
        continue;
      }

      var level = (0,external_kolmafia_namespaceObject.toInt)(match[1]);
      match = spl.match(
      /<input {2}type="radio" name="l1" (?:checked)? value="[a-zA-Z0-9/+]+"> *([a-zA-z- ]+?) *<\/td>/);


      flavors[level - 1] = match[1];
    }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

  return flavors;
}

function getCurrentLatteFlavors() {
  var knownFlavors = (0,external_kolmafia_namespaceObject.getProperty)("_latteFlavors");

  if (knownFlavors.startsWith((0,external_kolmafia_namespaceObject.getProperty)("latteModifier") + "|")) {
    return knownFlavors.
    substring(knownFlavors.lastIndexOf("|") + 1).
    split(",");
  }

  var getEnum = (flavor) => {
    flavor = flavor.toLowerCase();

    if (latteAliases.has(flavor)) {
      flavor = latteAliases.get(flavor);
    }

    for (var _i = 0, _Object$values = Object.values(LatteFlavor); _i < _Object$values.length; _i++) {var v = _Object$values[_i];
      if (flavor != v) {
        continue;
      }

      return v;
    }

    return LatteFlavor.UNKNOWN;
  };

  var flavors = getFlavors();

  for (var i = 0; i < flavors.length; i++) {
    var flav = getEnum(flavors[i]);

    if (flav == LatteFlavor.UNKNOWN) {
      /* print(
        "Unknown Latte Flavor " + flavors[i] + "! Cautiously continuing..",
        "gray"
      );*/
    }

    flavors[i] = flav;
  }

  (0,external_kolmafia_namespaceObject.setProperty)(
  "_latteFlavors",
  (0,external_kolmafia_namespaceObject.getProperty)("latteModifier") + "|" + flavors.join(","));


  return flavors;
}

function hasUnlockedLatteFlavor(drink) {
  return (0,external_kolmafia_namespaceObject.getProperty)("latteUnlocks").split(",").includes(drink);
}
;// CONCATENATED MODULE: ./src/tasks/TaskMaintainStatus.ts
function TaskMaintainStatus_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskMaintainStatus_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function TaskMaintainStatus_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskMaintainStatus_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskMaintainStatus_arrayLikeToArray(o, minLen);}function TaskMaintainStatus_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function TaskMaintainStatus_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskMaintainStatus_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskMaintainStatus_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskMaintainStatus_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskMaintainStatus_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskMaintainStatus_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var TaskMaintainStatus = /*#__PURE__*/function () {







































































  function TaskMaintainStatus() {TaskMaintainStatus_classCallCheck(this, TaskMaintainStatus);TaskMaintainStatus_defineProperty(this, "restorers", []);TaskMaintainStatus_defineProperty(this, "toRemove", ["Really Quite Poisoned", "Majorly Poisoned", "Somewhat Poisoned", "A Little Bit Poisoned", "Hardly Poisoned at All", "Temporary Amnesia"].map((s) => external_kolmafia_namespaceObject.Effect.get(s)));
    this.fillRestorers();
  }TaskMaintainStatus_createClass(TaskMaintainStatus, [{ key: "fillRestorers", value: function fillRestorers() {this.restorers.push({ item: external_kolmafia_namespaceObject.Item.get("Psychokinetic energy blob"), mpRestored: 25, hpRestored: 0, available: () => (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Psychokinetic energy blob")) > 0, price: 0 });this.restorers.push({ item: external_kolmafia_namespaceObject.Item.get("Knob Goblin seltzer"), mpRestored: 11, hpRestored: 0, available: () => (0,external_kolmafia_namespaceObject.dispensaryAvailable)() || (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Knob Goblin seltzer")) > 0, price: 80 });this.restorers.push({ item: external_kolmafia_namespaceObject.Item.get("Black cherry soda"), mpRestored: 11, hpRestored: 0, available: () => (0,external_kolmafia_namespaceObject.blackMarketAvailable)() || (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Black cherry soda")) > 0, price: 80 });this.restorers.push({ item: external_kolmafia_namespaceObject.Item.get("Doc Galaktik's Invigorating Tonic"), mpRestored: 11, hpRestored: 0, available: () => true, price: 90 }); // HP
      this.restorers.push({ item: external_kolmafia_namespaceObject.Item.get("Cast"), mpRestored: 0, hpRestored: 30, available: () => (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Cast")) > 0, price: 0 });this.restorers.push({ item: external_kolmafia_namespaceObject.Item.get("Doc Galaktik's Homeopathic Elixir"), mpRestored: 0, hpRestored: 19, available: () => true, price: 120 });this.restorers.push({ item: external_kolmafia_namespaceObject.Item.get("Doc Galaktik's Pungent Unguent"), mpRestored: 0, hpRestored: 4, available: () => true, price: 0 });} }, { key: "restoreHPTo", value:
    function restoreHPTo(hp) {
      var desiredHp = Math.min(hp, (0,external_kolmafia_namespaceObject.myMaxhp)());

      while ((0,external_kolmafia_namespaceObject.myMeat)() > 100 && (0,external_kolmafia_namespaceObject.myHp)() < desiredHp) {
        var restorer = this.restorers.find(
        (r) => (0,external_kolmafia_namespaceObject.availableAmount)(r.item) > 0 && r.hpRestored > 0);


        if (restorer == null) {
          restorer = this.restorers.find(
          (r) => r.available() && r.hpRestored > 0);

        }

        if (restorer == null) {
          return false;
        }

        var toUse = Math.ceil((desiredHp - (0,external_kolmafia_namespaceObject.myHp)()) / restorer.hpRestored);

        if ((0,external_kolmafia_namespaceObject.availableAmount)(restorer.item) > 0) {
          toUse = Math.min(toUse, (0,external_kolmafia_namespaceObject.availableAmount)(restorer.item));
        } else {
          toUse = Math.min(Math.floor((0,external_kolmafia_namespaceObject.myMeat)() / restorer.price), toUse);

          (0,external_kolmafia_namespaceObject.cliExecute)("acquire " + toUse + " " + restorer.item);
        }

        (0,external_kolmafia_namespaceObject.cliExecute)("use " + toUse + " " + restorer.item);
      }

      return (0,external_kolmafia_namespaceObject.myHp)() >= hp;
    } }, { key: "restoreMPTo", value:

    function restoreMPTo(mp) {
      if ((0,external_kolmafia_namespaceObject.myMp)() >= mp) {
        return true;
      }

      var ronStatus = getQuestStatus("questL11Ron");

      var desiredMp = Math.min(mp, (0,external_kolmafia_namespaceObject.myMaxmp)());

      if (
      (ronStatus < 0 || ronStatus > 1 || getQuestStatus("questL11Shen") <= 6) &&
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("sweat")) >= (
      (0,external_kolmafia_namespaceObject.myMp)() + 10 >= desiredMp && (0,external_kolmafia_namespaceObject.myMaxmp)() - (0,external_kolmafia_namespaceObject.myMp)() < 50 ? 95 : 80))
      {
        (0,external_kolmafia_namespaceObject.useSkill)(external_kolmafia_namespaceObject.Skill.get("Sip Some Sweat"));
      }

      while ((0,external_kolmafia_namespaceObject.myMeat)() > 100 && (0,external_kolmafia_namespaceObject.myMp)() < desiredMp) {
        var restorer = this.restorers.find(
        (r) => (0,external_kolmafia_namespaceObject.availableAmount)(r.item) > 0 && r.mpRestored > 0);


        if (restorer == null) {
          restorer = this.restorers.find(
          (r) => r.available() && r.mpRestored > 0);

        }

        if (restorer == null) {
          return false;
        }

        var toUse = Math.ceil((desiredMp - (0,external_kolmafia_namespaceObject.myMp)()) / restorer.mpRestored);

        if ((0,external_kolmafia_namespaceObject.availableAmount)(restorer.item) > 0) {
          toUse = Math.min(toUse, (0,external_kolmafia_namespaceObject.availableAmount)(restorer.item));
        } else {
          toUse = Math.min(Math.floor((0,external_kolmafia_namespaceObject.myMeat)() / restorer.price), toUse);

          (0,external_kolmafia_namespaceObject.cliExecute)("acquire " + toUse + " " + restorer.item);
        }

        (0,external_kolmafia_namespaceObject.cliExecute)("use " + toUse + " " + restorer.item);
      }

      return (0,external_kolmafia_namespaceObject.myMp)() >= mp;
    } }, { key: "run", value:

    function run() {var _iterator = TaskMaintainStatus_createForOfIteratorHelper(
      this.toRemove),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var effect = _step.value;
          if ((0,external_kolmafia_namespaceObject.haveEffect)(effect) == 0) {
            continue;
          }

          (0,external_kolmafia_namespaceObject.cliExecute)("shrug " + effect.name);

          if ((0,external_kolmafia_namespaceObject.haveEffect)(effect) > 0) {
            throw "Tried to remove " + effect.name + " but failed!";
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if ((0,external_kolmafia_namespaceObject.myMaxmp)() < 20) {
        return;
      }

      var desiredMp = 20; //myMaxmp() < 40 ? 20 : 40;

      this.restoreMPTo(desiredMp);
    } }]);return TaskMaintainStatus;}();


var maintainStatus = new TaskMaintainStatus();

function restoreMPTo(mp) {
  // If we can't hit that MP
  if (mp > (0,external_kolmafia_namespaceObject.myMaxmp)()) {
    return false;
  }

  // If we already have that amount
  if (mp <= (0,external_kolmafia_namespaceObject.myMp)()) {
    return true;
  }

  // If we don't have 100 meat per 10 mp
  if (Math.ceil(((0,external_kolmafia_namespaceObject.myMp)() - mp) / 10) * 100 > (0,external_kolmafia_namespaceObject.myMeat)()) {
    return false;
  }

  return maintainStatus.restoreMPTo(mp);
}

function restoreHPTo(hp) {
  // If we can't hit that MP
  if (hp > (0,external_kolmafia_namespaceObject.myMaxhp)()) {
    return false;
  }

  // If we already have that amount
  if (hp <= (0,external_kolmafia_namespaceObject.myMp)()) {
    return true;
  }

  // If we don't have 100 meat per 10 mp
  if (Math.ceil(((0,external_kolmafia_namespaceObject.myHp)() - hp) / 10) * 100 > (0,external_kolmafia_namespaceObject.myMeat)()) {
    return false;
  }

  return maintainStatus.restoreHPTo(hp);
}
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerWallSkin.ts
function QuestTowerWallSkin_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerWallSkin_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerWallSkin_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerWallSkin_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerWallSkin_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerWallSkin_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestTowerWallSkin_setPrototypeOf(subClass, superClass);}function QuestTowerWallSkin_setPrototypeOf(o, p) {QuestTowerWallSkin_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestTowerWallSkin_setPrototypeOf(o, p);}function QuestTowerWallSkin_createSuper(Derived) {var hasNativeReflectConstruct = QuestTowerWallSkin_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestTowerWallSkin_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestTowerWallSkin_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestTowerWallSkin_possibleConstructorReturn(this, result);};}function QuestTowerWallSkin_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestTowerWallSkin_assertThisInitialized(self);}function QuestTowerWallSkin_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestTowerWallSkin_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestTowerWallSkin_getPrototypeOf(o) {QuestTowerWallSkin_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestTowerWallSkin_getPrototypeOf(o);}function QuestTowerWallSkin_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var QuestTowerWallSkin = /*#__PURE__*/function (_TaskInfo) {QuestTowerWallSkin_inherits(QuestTowerWallSkin, _TaskInfo);var _super = QuestTowerWallSkin_createSuper(QuestTowerWallSkin);function QuestTowerWallSkin() {var _this;QuestTowerWallSkin_classCallCheck(this, QuestTowerWallSkin);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "beehive",
    external_kolmafia_namespaceObject.Item.get("Beehive"));QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "killer",
    new QuestTowerKillSkin());QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "blackForest",
    external_kolmafia_namespaceObject.Location.get("The Black Forest"));QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "paths", void 0);return _this;}QuestTowerWallSkin_createClass(QuestTowerWallSkin, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [
      new PossiblePath(0).addMeat(1000),
      new PossiblePath(0).add(ResourceCategory.HOT_TUB)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / WallOfSkin";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 6) {
        return QuestStatus.NOT_READY;
      }

      if (status > 6) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.beehive) == 0) {
        if (this.killer.isPossible()) {
          return this.killer.run(path);
        } else {
          return this.runBees();
        }
      }

      return {
        location: null,
        run: () => {
          greyAdv(
          "place.php?whichplace=nstower&action=ns_05_monster1",
          null,
          new AdventureSettings().setStartOfFightMacro(
          Macro.tryItem(this.beehive)));


        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "runBees", value:

    function runBees() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.blackForest,
        run: () => {
          var props = new PropertyManager();
          DelayBurners.tryReplaceCombats();

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          try {
            props.setChoice(924, 3); // Beezzzz
            props.setChoice(1018, 1);
            props.setChoice(1019, 1);

            greyAdv(this.blackForest, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }]);return QuestTowerWallSkin;}(TaskInfo);


var QuestTowerKillSkin = /*#__PURE__*/function () {function QuestTowerKillSkin() {QuestTowerWallSkin_classCallCheck(this, QuestTowerKillSkin);QuestTowerWallSkin_defineProperty(this, "familiar",
    external_kolmafia_namespaceObject.Familiar.get("Shorter-Order Cook"));QuestTowerWallSkin_defineProperty(this, "hotPlate",
    external_kolmafia_namespaceObject.Item.get("Hot Plate"));QuestTowerWallSkin_defineProperty(this, "maximizeString",

    "hot dmg 1 max +stench dmg 1 max +cold dmg 1 max +sleaze dmg 1 max +spooky dmg 1 max -tie");QuestTowerWallSkin_defineProperty(this, "familiarEquips",
    [
    "Muscle band",
    "Ant Hoe",
    "Ant Pick",
    "Ant Pitchfork",
    "Ant Rake",
    "Ant Sickle",
    "Tiny bowler"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestTowerWallSkin_defineProperty(this, "lastPossible",
    0);QuestTowerWallSkin_defineProperty(this, "possible", void 0);}QuestTowerWallSkin_createClass(QuestTowerKillSkin, [{ key: "isPossible", value:


    function isPossible() {
      if (!(0,external_kolmafia_namespaceObject.haveFamiliar)(this.familiar)) {
        return false;
      }

      if (getQuestStatus("questL13Final") < 6) {
        return true;
      }

      if (this.lastPossible == (0,external_kolmafia_namespaceObject.turnsPlayed)()) {
        return this.possible;
      }

      this.lastPossible = (0,external_kolmafia_namespaceObject.turnsPlayed)();

      // Short cook and physical damage
      var damagePerRound = 7;

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.hotPlate) > 0) {
        damagePerRound += 1;
      }

      if (
      this.familiarEquips.find((equip) => (0,external_kolmafia_namespaceObject.availableAmount)(equip) > 0) != null)
      {
        damagePerRound++;
      }

      (0,external_kolmafia_namespaceObject.maximize)(this.maximizeString + " -offhand -familiar", true);

      for (var _i = 0, _arr = ["Cold", "Hot", "Sleaze", "Spooky", "Stench"]; _i < _arr.length; _i++) {var ele = _arr[_i];
        var mod = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", ele + " Damage");

        if (mod > 0) {
          damagePerRound += 1;
        }
      }

      return this.possible = damagePerRound >= 13;
    } }, { key: "run", value:

    function run(path) {
      var str = this.maximizeString;

      var fam = this.familiarEquips.find((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) > 0);

      if (fam != null) {
        str += " +equip " + fam;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.hotPlate) > 0) {
        str += " +equip " + this.hotPlate;
      }

      var outfit = new GreyOutfit(str);

      return {
        location: null,
        familiar: this.familiar,
        disableFamOverride: true,
        outfit: outfit,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.myFamiliar)() != this.familiar) {
            throw "Expected to be using cook!";
          }

          if ((0,external_kolmafia_namespaceObject.myHp)() < (0,external_kolmafia_namespaceObject.myMaxhp)()) {
            if (path.canUse(ResourceCategory.HOT_TUB)) {
              (0,external_kolmafia_namespaceObject.cliExecute)("hottub");
              path.addUsed(ResourceCategory.HOT_TUB);
            } else {
              restoreHPTo((0,external_kolmafia_namespaceObject.myMaxhp)());
            }
          }

          if ((0,external_kolmafia_namespaceObject.myHp)() < (0,external_kolmafia_namespaceObject.myMaxhp)()) {
            throw "Not healthy enough!";
          }

          greyAdv(
          "place.php?whichplace=nstower&action=ns_05_monster1",
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          Macro.skill("Grey Noise").repeat()));


        } };

    } }]);return QuestTowerKillSkin;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Black.ts
function QuestL11Black_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11Black_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL11Black_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11Black_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11Black_arrayLikeToArray(o, minLen);}function QuestL11Black_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL11Black_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Black_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Black_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Black_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Black_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Black_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestL11Black = /*#__PURE__*/function () {function QuestL11Black() {QuestL11Black_classCallCheck(this, QuestL11Black);QuestL11Black_defineProperty(this, "boots",
    external_kolmafia_namespaceObject.Item.get("Blackberry Galoshes"));QuestL11Black_defineProperty(this, "beehive",
    external_kolmafia_namespaceObject.Item.get("Beehive"));QuestL11Black_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Black Forest"));QuestL11Black_defineProperty(this, "latte",
    external_kolmafia_namespaceObject.Item.get("Latte lovers member's mug"));QuestL11Black_defineProperty(this, "blackbird",
    external_kolmafia_namespaceObject.Item.get("reassembled blackbird"));QuestL11Black_defineProperty(this, "dontBanish",
    ["Black Adder", "Black Panther"].map((s) =>
    external_kolmafia_namespaceObject.Monster.get(s)));QuestL11Black_defineProperty(this, "toAbsorb", void 0);QuestL11Black_defineProperty(this, "blackberry",


    external_kolmafia_namespaceObject.Item.get("Blackberry"));QuestL11Black_defineProperty(this, "skinKiller",
    new QuestTowerKillSkin());}QuestL11Black_createClass(QuestL11Black, [{ key: "level", value:

    function level() {
      return 11;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.MEAT_DROP));

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Black";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Black");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.myHp)() < 60) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setPlusCombat();

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.boots) > 0) {
        outfit.addItem(this.boots);
      } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.blackberry) <= 1) {
        outfit.setItemDrops();
        outfit.addBonus("+0.1 booze drop +0.1 food drop");
      }

      if (this.shouldWearLatte()) {
        outfit.addItem(this.latte);
      }

      outfit.addBonus("+moxie");

      var fam;

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.blackbird) == 0) {
        fam = external_kolmafia_namespaceObject.Familiar.get("Reassembled Blackbird");
      }

      return {
        location: this.loc,
        outfit: outfit,
        familiar: fam,
        run: () => {
          var props = new PropertyManager();

          try {
            props.setChoice(923, 1);

            if (
            !GreySettings.shouldAvoidTowerRequirements() &&
            (0,external_kolmafia_namespaceObject.availableAmount)(this.beehive) == 0 &&
            !this.skinKiller.isPossible())
            {
              props.setChoice(924, 3); // Beezzzz
              props.setChoice(1018, 1);
              props.setChoice(1019, 1);
            } else if (
            (0,external_kolmafia_namespaceObject.availableAmount)(this.boots) == 0 &&
            (0,external_kolmafia_namespaceObject.availableAmount)(this.blackberry) >= 3)
            {
              props.setChoice(924, 2); // Cobble
              props.setChoice(928, 4); // Make boots
            } else {
              props.setChoice(924, 1); // Fight bush
            }

            var settings = new AdventureSettings();

            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.blackbird) == 0) {var _iterator = QuestL11Black_createForOfIteratorHelper(
              this.dontBanish),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var mon = _step.value;
                  settings.addNoBanish(mon);
                }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
            }

            greyAdv(this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 4;
    } }]);return QuestL11Black;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertCompass.ts
function QuestL11DesertCompass_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertCompass_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11DesertCompass_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertCompass_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertCompass_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertCompass_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11DesertCompass_setPrototypeOf(subClass, superClass);}function QuestL11DesertCompass_setPrototypeOf(o, p) {QuestL11DesertCompass_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11DesertCompass_setPrototypeOf(o, p);}function QuestL11DesertCompass_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11DesertCompass_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11DesertCompass_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11DesertCompass_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11DesertCompass_possibleConstructorReturn(this, result);};}function QuestL11DesertCompass_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11DesertCompass_assertThisInitialized(self);}function QuestL11DesertCompass_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11DesertCompass_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11DesertCompass_getPrototypeOf(o) {QuestL11DesertCompass_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11DesertCompass_getPrototypeOf(o);}function QuestL11DesertCompass_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL11DesertCompass = /*#__PURE__*/function (_TaskInfo) {QuestL11DesertCompass_inherits(QuestL11DesertCompass, _TaskInfo);var _super = QuestL11DesertCompass_createSuper(QuestL11DesertCompass);function QuestL11DesertCompass() {var _this;QuestL11DesertCompass_classCallCheck(this, QuestL11DesertCompass);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "compass",
    external_kolmafia_namespaceObject.Item.get("UV-resistant compass"));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "script",
    external_kolmafia_namespaceObject.Item.get("Shore Inc. Ship Trip Scrip"));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "dontPullScriptAt",
    6);QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "pullScript",
    new PossiblePath(0).addConsumablePull(_this.script));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "noPull",
    new PossiblePath(3));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "camel",
    external_kolmafia_namespaceObject.Familiar.get("Melodramedary"));return _this;}QuestL11DesertCompass_createClass(QuestL11DesertCompass, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Compass";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      if ((0,external_kolmafia_namespaceObject.storageAmount)(this.script) <= this.dontPullScriptAt) {
        return [this.noPull];
      }

      return [this.noPull, this.pullScript];
    } }, { key: "status", value:

    function status(path) {
      if (
      (0,external_kolmafia_namespaceObject.haveFamiliar)(this.camel) ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.compass) > 0 ||
      (0,external_kolmafia_namespaceObject.getProperty)("questL11Desert") == "finished")
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.myAdventures)() < 40 && path == this.pullScript) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Desert") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        run: () => {
          if (!path.canUse(ResourceCategory.PULL)) {
            var props = new PropertyManager();

            try {
              props.setChoice(793, 1);

              greyAdv(external_kolmafia_namespaceObject.Location.get("The Shore, Inc. Travel Agency"));
            } finally {
              props.resetAll();
            }
          } else {
            GreyPulls.pullScrip();
            path.addUsed(ResourceCategory.PULL);
          }

          (0,external_kolmafia_namespaceObject.cliExecute)("make " + this.compass.name);

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.compass) == 0) {
            throw "Compass should've been available!";
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 3;
    } }]);return QuestL11DesertCompass;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertExplore.ts
function QuestL11DesertExplore_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertExplore_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11DesertExplore_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertExplore_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertExplore_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertExplore_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11DesertExplore_setPrototypeOf(subClass, superClass);}function QuestL11DesertExplore_setPrototypeOf(o, p) {QuestL11DesertExplore_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11DesertExplore_setPrototypeOf(o, p);}function QuestL11DesertExplore_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11DesertExplore_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11DesertExplore_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11DesertExplore_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11DesertExplore_possibleConstructorReturn(this, result);};}function QuestL11DesertExplore_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11DesertExplore_assertThisInitialized(self);}function QuestL11DesertExplore_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11DesertExplore_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11DesertExplore_getPrototypeOf(o) {QuestL11DesertExplore_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11DesertExplore_getPrototypeOf(o);}function QuestL11DesertExplore_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}












var QuestL11DesertExplore = /*#__PURE__*/function (_TaskInfo) {QuestL11DesertExplore_inherits(QuestL11DesertExplore, _TaskInfo);var _super = QuestL11DesertExplore_createSuper(QuestL11DesertExplore);function QuestL11DesertExplore() {var _this;QuestL11DesertExplore_classCallCheck(this, QuestL11DesertExplore);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "hydrated",
    external_kolmafia_namespaceObject.Effect.get("Ultrahydrated"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "oasis",
    external_kolmafia_namespaceObject.Location.get("Oasis"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "desert",
    external_kolmafia_namespaceObject.Location.get("The Arid, Extra-Dry Desert"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "compass",
    external_kolmafia_namespaceObject.Item.get("UV-resistant compass"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "knife",
    external_kolmafia_namespaceObject.Item.get("survival knife"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "toAbsorb", void 0);QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "camel",

    external_kolmafia_namespaceObject.Familiar.get("Melodramedary"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "ball",
    external_kolmafia_namespaceObject.Item.get("miniature crystal ball"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "page",
    external_kolmafia_namespaceObject.Item.get("worm-riding manual page"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "goose",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "rose",
    external_kolmafia_namespaceObject.Item.get("Stone Rose"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "lefthand",
    external_kolmafia_namespaceObject.Familiar.get("Left-Hand Man"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "extingusherProp",
    "");QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "kramco",
    external_kolmafia_namespaceObject.Item.get("Kramco Sausage-o-Matic&trade;"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "paths",
    []);QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "curse3",
    external_kolmafia_namespaceObject.Effect.get("Thrice-Cursed"));return _this;}QuestL11DesertExplore_createClass(QuestL11DesertExplore, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];
      // Shitty math
      var turnsLeft = (assumeUnstarted ? 100 : this.getExploredRemaining()) / 5;

      var withoutExtingusher = new PossiblePath(turnsLeft);
      this.paths.push(withoutExtingusher);

      if (assumeUnstarted || (0,external_kolmafia_namespaceObject.getProperty)(this.extingusherProp) != "true") {
        var withExtingusher = new PossiblePath(turnsLeft - 3).add(
        ResourceCategory.FIRE_EXTINGUSHER_ZONE);


        this.paths.push(withExtingusher);
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Explore";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeRose", value:

    function wantsGnomeRose() {
      return (this.getGnome() & 1) != 1;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) == 0 || this.getExploredRemaining() <= 0) {
        return false;
      }

      if (
      (0,external_kolmafia_namespaceObject.canAdventure)(this.oasis) &&
      (0,external_kolmafia_namespaceObject.getProperty)("_gnasirAvailable") == "true" &&
      this.wantsGnomeRose() &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.rose) == 0)
      {
        return false;
      }

      return true;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (
      !(0,external_kolmafia_namespaceObject.haveFamiliar)(this.camel) && (0,external_kolmafia_namespaceObject.availableAmount)(this.compass) == 0 ||
      !(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision))
      {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Tenuous Grip on Reality")) ||
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Barking Dogs")))
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) == 0 && (0,external_kolmafia_namespaceObject.haveEffect)(this.curse3) > 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) == 0 && (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) < 6) {
        return QuestStatus.FASTER_LATER;
      }

      if (
      getQuestStatus("questM20Necklace") < 4 &&
      this.getExplored() > 40 &&
      (0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) == 0)
      {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_namespaceObject.myAdventures)() < 70) {
        //|| !haveEffect(this.hydrated)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      var resource =
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("_gnasirAvailable")) &&
      (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 6 ?
      path.getResource(ResourceCategory.FIRE_EXTINGUSHER_ZONE) :
      null;

      if (resource == null) {
        if (
        (0,external_kolmafia_namespaceObject.canAdventure)(this.oasis) &&
        (0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) == 0 &&
        this.getExploredRemaining() > 3)
        {
          return {
            location: this.desert,
            outfit: GreyOutfit.IGNORE_OUTFIT,
            run: () => {
              greyAdv(this.oasis);
            } };

        }
      }

      var outfit = new GreyOutfit();
      outfit.addItem(this.compass); // Compass
      outfit.addItem(this.knife);

      if (resource != null) {
        resource.prepare(outfit);
      }

      if (this.toAbsorb.length > 0) {
        outfit.addBonus("-equip " + this.kramco.name);
      }

      return {
        outfit: outfit,
        location: this.desert,
        familiar: (0,external_kolmafia_namespaceObject.haveFamiliar)(this.camel) ? this.camel : null,
        disableFamOverride: this.toAbsorb.length == 0 && (0,external_kolmafia_namespaceObject.haveFamiliar)(this.camel),
        run: () => {
          var killing = Macro.if_(
          external_kolmafia_namespaceObject.Effect.get("Tenuous Grip on Reality"),
          Macro.attack().repeat()).
          step(greyKillingBlow(outfit));

          // If we're looking for an absorb, have the crystal ball and have the camel
          if (
          this.toAbsorb.length > 0 &&
          (0,external_kolmafia_namespaceObject.availableAmount)(this.ball) > 0 &&
          (0,external_kolmafia_namespaceObject.haveFamiliar)(this.camel))
          {
            var crystalBall = currentPredictions();

            // If we already have a prediction, and the prediction isn't what we want
            if (
            crystalBall.has(this.desert) &&
            !this.toAbsorb.includes(crystalBall.get(this.desert)))
            {
              (0,external_kolmafia_namespaceObject.useFamiliar)(this.camel);
              (0,external_kolmafia_namespaceObject.equip)(this.ball);
            } else if (
            (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 6 &&
            (0,external_kolmafia_namespaceObject.equippedAmount)(this.ball) == 0)
            {
              (0,external_kolmafia_namespaceObject.equip)(this.ball);
            }
          } else if (this.toAbsorb.length == 0 && resource != null) {
            killing = resource.macro().step(killing);
          } else if (
          this.toAbsorb.length == 0 &&
          DelayBurners.isDelayBurnerReady())
          {
            DelayBurners.tryReplaceCombats(3);

            // If the compass is not equipped, and we don't own camel, but we do own left-hand man.
            // Then it's worth it.
            if (
            (0,external_kolmafia_namespaceObject.itemAmount)(this.compass) > 0 &&
            (0,external_kolmafia_namespaceObject.equippedAmount)(this.compass) == 0 &&
            (0,external_kolmafia_namespaceObject.haveFamiliar)(this.lefthand) &&
            (0,external_kolmafia_namespaceObject.myFamiliar)() != this.camel)
            {
              (0,external_kolmafia_namespaceObject.useFamiliar)(this.lefthand);
              (0,external_kolmafia_namespaceObject.equip)(this.compass, external_kolmafia_namespaceObject.Slot.get("familiar"));
            }
          }

          var explored = this.getExplored();
          var props = new PropertyManager();
          props.setChoice(805, 1);

          try {
            greyAdv(
            this.desert,
            outfit,
            new AdventureSettings().setFinishingBlowMacro(killing));

          } finally {
            props.resetAll();
          }

          if (explored == this.getExplored()) {
            (0,external_kolmafia_namespaceObject.print)("Checking explored..", "blue");
            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=desertbeach", false);
          } else if (
          explored >= 10 &&
          ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("gnasirProgress")) & 8) != 8)
          {
            (0,external_kolmafia_namespaceObject.print)("Worm Pages: " + (0,external_kolmafia_namespaceObject.availableAmount)(this.page) + " / 15", "blue");
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.desert];
    } }, { key: "getExplored", value:

    function getExplored() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("desertExploration"));
    } }, { key: "getExploredRemaining", value:

    function getExploredRemaining() {
      return 100 - this.getExplored();
    } }]);return QuestL11DesertExplore;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertGnome.ts
function QuestL11DesertGnome_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertGnome_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11DesertGnome_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertGnome_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertGnome_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertGnome_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestL11DesertGnome = /*#__PURE__*/function () {function QuestL11DesertGnome() {QuestL11DesertGnome_classCallCheck(this, QuestL11DesertGnome);QuestL11DesertGnome_defineProperty(this, "availableProp",
    "_gnasirAvailable");QuestL11DesertGnome_defineProperty(this, "hooks",
    external_kolmafia_namespaceObject.Item.get("worm-riding hooks"));QuestL11DesertGnome_defineProperty(this, "drum",
    external_kolmafia_namespaceObject.Item.get("Drum Machine"));QuestL11DesertGnome_defineProperty(this, "killingJar",
    external_kolmafia_namespaceObject.Item.get("Killing Jar"));QuestL11DesertGnome_defineProperty(this, "rose",
    external_kolmafia_namespaceObject.Item.get("Stone Rose"));}QuestL11DesertGnome_createClass(QuestL11DesertGnome, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Gnome";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getAdventuresToComplete", value:

    function getAdventuresToComplete() {
      return 0;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      // Can gnome be turned in
      if (!this.isAvailable()) {
        return QuestStatus.NOT_READY;
      }

      if (this.wantsGnomeKillingJar() && (0,external_kolmafia_namespaceObject.availableAmount)(this.killingJar) > 0) {
        return QuestStatus.READY;
      }

      if (this.wantsGnomePaint() && (0,external_kolmafia_namespaceObject.myMeat)() > 1000) {
        return QuestStatus.READY;
      }

      if (this.wantsGnomeRose() && (0,external_kolmafia_namespaceObject.availableAmount)(this.rose) > 0) {
        return QuestStatus.READY;
      }

      if (this.wantsWormPages() && !this.needsMorePages()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }, { key: "run", value:

    function run() {
      if (this.wantsGnomePaint() && (0,external_kolmafia_namespaceObject.myMeat)() >= 1000) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            if ((0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get("Can of black paint")) == 0) {
              (0,external_kolmafia_namespaceObject.retrieveItem)(external_kolmafia_namespaceObject.Item.get("Can of black paint"));
            }

            (0,external_kolmafia_namespaceObject.print)("Giving gnome their black paint");
            this.turnInItem();
          } };

      }

      if (this.wantsGnomeKillingJar() && (0,external_kolmafia_namespaceObject.availableAmount)(this.killingJar) > 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            (0,external_kolmafia_namespaceObject.print)("Giving gnome their killing jar");

            this.turnInItem();
          } };

      }

      if (this.wantsWormPages() && !this.needsMorePages()) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            (0,external_kolmafia_namespaceObject.print)("Giving gnome their pages");
            this.turnInItem();
          } };

      }

      if (this.wantsGnomeRose() && (0,external_kolmafia_namespaceObject.availableAmount)(this.rose) > 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            (0,external_kolmafia_namespaceObject.print)("Giving gnome their rose");
            this.turnInItem();
          } };

      }

      throw "Not sure why we got to this state";
    } }, { key: "turnInItem", value:

    function turnInItem() {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=desertbeach&action=db_gnasir");
      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=805&option=1&pwd=");
      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=805&option=2&pwd=");
      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=805&option=1&pwd=");

      var item = external_kolmafia_namespaceObject.Item.get("desert sightseeing pamphlet");

      if ((0,external_kolmafia_namespaceObject.availableAmount)(item) <= 0) {
        return;
      }

      (0,external_kolmafia_namespaceObject.use)(item, (0,external_kolmafia_namespaceObject.availableAmount)(item));
    } }, { key: "needsMorePages", value:

    function needsMorePages() {
      return (0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get("Worm-Riding Manual Page")) < 15;
    } }, { key: "isAvailable", value:

    function isAvailable() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("gnasirProgress") != "0") {
        return true;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("lastEncounter") == "A Sietch in Time") {
        (0,external_kolmafia_namespaceObject.setProperty)(this.availableProp, "true");
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)(this.availableProp) == "true") {
        return true;
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("desertExploration")) <= 10) {
        return false;
      }

      var page = (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=desertbeach");

      if (!page.includes("place.php?whichplace=desertbeach&action=db_gnasir")) {
        return false;
      }

      (0,external_kolmafia_namespaceObject.setProperty)(this.availableProp, "true");
      return true;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeRose", value:

    function wantsGnomeRose() {
      return (this.getGnome() & 1) != 1;
    } }, { key: "wantsGnomePaint", value:

    function wantsGnomePaint() {
      return (this.getGnome() & 2) != 2;
    } }, { key: "wantsGnomeKillingJar", value:

    function wantsGnomeKillingJar() {
      return (this.getGnome() & 4) != 4;
    } }, { key: "wantsWormPages", value:

    function wantsWormPages() {
      return (this.getGnome() & 8) != 8;
    } }, { key: "wantsToWormRide", value:

    function wantsToWormRide() {
      return (this.getGnome() & 16) != 16;
    } }]);return QuestL11DesertGnome;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertStoneRose.ts
function QuestL11DesertStoneRose_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertStoneRose_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11DesertStoneRose_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertStoneRose_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertStoneRose_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertStoneRose_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11DesertStoneRose = /*#__PURE__*/function () {function QuestL11DesertStoneRose() {QuestL11DesertStoneRose_classCallCheck(this, QuestL11DesertStoneRose);QuestL11DesertStoneRose_defineProperty(this, "hydrated",
    external_kolmafia_namespaceObject.Effect.get("Ultrahydrated"));QuestL11DesertStoneRose_defineProperty(this, "oasis",
    external_kolmafia_namespaceObject.Location.get("Oasis"));QuestL11DesertStoneRose_defineProperty(this, "rose",
    external_kolmafia_namespaceObject.Item.get("Stone Rose"));QuestL11DesertStoneRose_defineProperty(this, "blur",
    external_kolmafia_namespaceObject.Monster.get("Blur"));QuestL11DesertStoneRose_defineProperty(this, "toAbsorb", void 0);QuestL11DesertStoneRose_defineProperty(this, "fam",

    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestL11DesertStoneRose_defineProperty(this, "swarm",
    external_kolmafia_namespaceObject.Monster.get("Swarm of fire ants"));QuestL11DesertStoneRose_defineProperty(this, "curse3",
    external_kolmafia_namespaceObject.Effect.get("Thrice-Cursed"));}QuestL11DesertStoneRose_createClass(QuestL11DesertStoneRose, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / StoneRose";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!this.wantsGnomeRose() || (0,external_kolmafia_namespaceObject.availableAmount)(this.rose) > 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) == 0 && (0,external_kolmafia_namespaceObject.haveEffect)(this.curse3) > 0) {
        return QuestStatus.NOT_READY;
      }

      if (status < 0 || !(0,external_kolmafia_namespaceObject.canAdventure)(this.oasis)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("_gnasirAvailable") != "true") {
        return QuestStatus.NOT_READY;
      }

      if (!AbsorbsProvider.getReabsorbedMonsters().includes(this.swarm)) {
        return QuestStatus.NOT_READY;
      }

      if (this.toAbsorb.length > 0) {
        if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.fam) < 6) {
          return QuestStatus.NOT_READY;
        }
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.oasis,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(this.blur);

          greyAdv(this.oasis, null, settings);
        } };

    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeRose", value:

    function wantsGnomeRose() {
      return (this.getGnome() & 1) != 1;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.oasis];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) > 0;
    } }]);return QuestL11DesertStoneRose;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertWormRide.ts
function QuestL11DesertWormRide_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertWormRide_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11DesertWormRide_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertWormRide_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertWormRide_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertWormRide_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11DesertWormRide = /*#__PURE__*/function () {function QuestL11DesertWormRide() {QuestL11DesertWormRide_classCallCheck(this, QuestL11DesertWormRide);QuestL11DesertWormRide_defineProperty(this, "hooks",
    external_kolmafia_namespaceObject.Item.get("worm-riding hooks"));QuestL11DesertWormRide_defineProperty(this, "drum",
    external_kolmafia_namespaceObject.Item.get("Drum Machine"));QuestL11DesertWormRide_defineProperty(this, "oasis",
    external_kolmafia_namespaceObject.Location.get("Oasis"));QuestL11DesertWormRide_defineProperty(this, "toAbsorb", void 0);QuestL11DesertWormRide_defineProperty(this, "fam",

    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestL11DesertWormRide_defineProperty(this, "curse3",
    external_kolmafia_namespaceObject.Effect.get("Thrice-Cursed"));QuestL11DesertWormRide_defineProperty(this, "hydrated",
    external_kolmafia_namespaceObject.Effect.get("Ultrahydrated"));}QuestL11DesertWormRide_createClass(QuestL11DesertWormRide, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / WormRide";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getAdventuresToComplete", value:

    function getAdventuresToComplete() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.drum) > 0 ? 0 : 2;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0 || !this.wantsToWormRide()) {
        return QuestStatus.COMPLETED;
      }

      if (this.toAbsorb.length > 0 && (0,external_kolmafia_namespaceObject.availableAmount)(this.hooks) == 0) {
        if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.fam) < 6) {
          return QuestStatus.NOT_READY;
        }

        if (status > 0) {
          return QuestStatus.READY;
        }
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.hooks) == 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.drum) == 0) {
        if ((0,external_kolmafia_namespaceObject.haveEffect)(this.hydrated) == 0 && (0,external_kolmafia_namespaceObject.haveEffect)(this.curse3) > 0) {
          return QuestStatus.NOT_READY;
        }

        if (this.getExploredRemaining() < 6) {
          return QuestStatus.NOT_READY;
        }
      }

      return QuestStatus.READY;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("gnasirProgress"));
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }, { key: "wantsToWormRide", value:

    function wantsToWormRide() {
      return (this.getGnome() & 16) != 16;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.drum) == 0) {
        var outfit = new GreyOutfit();
        outfit.setItemDrops();

        return {
          outfit: outfit,
          location: this.oasis,
          run: () => {
            greyAdv(this.oasis, outfit);
          } };

      }

      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.equip)(this.hooks);
          (0,external_kolmafia_namespaceObject.use)(this.drum);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.oasis];
    } }, { key: "getExplored", value:

    function getExplored() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("desertExploration"));
    } }, { key: "getExploredRemaining", value:

    function getExploredRemaining() {
      return 100 - this.getExplored();
    } }]);return QuestL11DesertWormRide;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Desert.ts
function QuestL11Desert_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Desert_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Desert_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Desert_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Desert_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Desert_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL11Desert = /*#__PURE__*/function () {


  function QuestL11Desert() {QuestL11Desert_classCallCheck(this, QuestL11Desert);QuestL11Desert_defineProperty(this, "children", []);
    this.children.push(new QuestL11DesertCompass());
    this.children.push(new QuestL11DesertExplore());
    this.children.push(new QuestL11DesertGnome());
    this.children.push(new QuestL11DesertStoneRose());
    this.children.push(new QuestL11DesertWormRide());
  }QuestL11Desert_createClass(QuestL11Desert, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11Desert;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorBomb.ts
function QuestL11ManorBomb_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorBomb_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ManorBomb_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorBomb_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorBomb_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorBomb_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11ManorBomb = /*#__PURE__*/function () {function QuestL11ManorBomb() {QuestL11ManorBomb_classCallCheck(this, QuestL11ManorBomb);QuestL11ManorBomb_defineProperty(this, "soda",
    external_kolmafia_namespaceObject.Item.get("blasting soda"));QuestL11ManorBomb_defineProperty(this, "wine",
    external_kolmafia_namespaceObject.Item.get("bottle of Chateau de Vinegar"));QuestL11ManorBomb_defineProperty(this, "unstable",
    external_kolmafia_namespaceObject.Item.get("unstable fulminate"));QuestL11ManorBomb_defineProperty(this, "bomb",
    external_kolmafia_namespaceObject.Item.get("Wine Bomb"));QuestL11ManorBomb_defineProperty(this, "boiler",
    external_kolmafia_namespaceObject.Location.get("The Haunted Boiler Room"));}QuestL11ManorBomb_createClass(QuestL11ManorBomb, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Bomb";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.unstable) == 0 && (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.soda) == 0 || (0,external_kolmafia_namespaceObject.availableAmount)(this.wine) == 0))
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.unstable) == 0) {
        return {
          location: null,
          run: () => {
            var props = new PropertyManager();
            props.setProperty("requireBoxServants", "false");

            try {
              (0,external_kolmafia_namespaceObject.cliExecute)("create Unstable Fulminate");
            } finally {
              props.resetAll();
            }
          } };

      }

      var outfit = new GreyOutfit().addItem(this.unstable);
      outfit.plusMonsterLevelWeight = 5;

      return {
        location: this.boiler,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("monstrous boiler"));

          greyAdv(this.boiler, outfit, settings);

          if ((0,external_kolmafia_namespaceObject.itemAmount)(this.unstable) == 0) {
            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor4&action=manor4_chamberwall");
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.boiler];
    } }]);return QuestL11ManorBomb;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorBoss.ts
function QuestL11ManorBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ManorBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorBoss_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11ManorBoss = /*#__PURE__*/function () {function QuestL11ManorBoss() {QuestL11ManorBoss_classCallCheck(this, QuestL11ManorBoss);QuestL11ManorBoss_defineProperty(this, "summoning",
    external_kolmafia_namespaceObject.Location.get("Summoning Chamber"));}QuestL11ManorBoss_createClass(QuestL11ManorBoss, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Boss";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.summoning,
        run: () => {
          greyAdv(
          "place.php?whichplace=manor4&action=manor4_chamberboss",
          null,
          new AdventureSettings().setStartOfFightMacro(
          Macro.skill(external_kolmafia_namespaceObject.Skill.get("Infinite Loop"))));


        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11ManorBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorRecipe.ts
function QuestL11ManorRecipe_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorRecipe_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ManorRecipe_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorRecipe_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorRecipe_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorRecipe_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var QuestL11ManorRecipe = /*#__PURE__*/function () {function QuestL11ManorRecipe() {QuestL11ManorRecipe_classCallCheck(this, QuestL11ManorRecipe);QuestL11ManorRecipe_defineProperty(this, "glasses",
    external_kolmafia_namespaceObject.Item.get("Lord Spookyraven's Spectacles"));}QuestL11ManorRecipe_createClass(QuestL11ManorRecipe, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Recipe";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.glasses) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.equip)(this.glasses);
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor4&action=manor4_chamberwall");
          (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get("recipe: mortar-dissolving solution"));
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11ManorRecipe;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorSoda.ts
function QuestL11ManorSoda_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorSoda_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ManorSoda_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorSoda_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorSoda_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorSoda_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11ManorSoda = /*#__PURE__*/function () {function QuestL11ManorSoda() {QuestL11ManorSoda_classCallCheck(this, QuestL11ManorSoda);QuestL11ManorSoda_defineProperty(this, "soda",
    external_kolmafia_namespaceObject.Item.get("blasting soda"));QuestL11ManorSoda_defineProperty(this, "laundry",
    external_kolmafia_namespaceObject.Location.get("The Haunted Laundry Room"));QuestL11ManorSoda_defineProperty(this, "unstable",
    external_kolmafia_namespaceObject.Item.get("unstable fulminate"));QuestL11ManorSoda_defineProperty(this, "bomb",
    external_kolmafia_namespaceObject.Item.get("Wine Bomb"));}QuestL11ManorSoda_createClass(QuestL11ManorSoda, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Soda";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (
      status > 2 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.soda) > 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.unstable) > 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.bomb) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops();

      if (this.laundry.turnsSpent > 1) {
        outfit.setChampagneBottle();
      }

      return {
        location: this.laundry,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("cabinet of Dr. Limpieza"));

          greyAdv(this.laundry, outfit, settings);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.laundry];
    } }]);return QuestL11ManorSoda;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorWine.ts
function QuestL11ManorWine_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorWine_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ManorWine_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorWine_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorWine_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorWine_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11ManorWine = /*#__PURE__*/function () {function QuestL11ManorWine() {QuestL11ManorWine_classCallCheck(this, QuestL11ManorWine);QuestL11ManorWine_defineProperty(this, "wine",
    external_kolmafia_namespaceObject.Item.get("bottle of Chateau de Vinegar"));QuestL11ManorWine_defineProperty(this, "celler",
    external_kolmafia_namespaceObject.Location.get("The Haunted Wine Cellar"));QuestL11ManorWine_defineProperty(this, "unstable",
    external_kolmafia_namespaceObject.Item.get("unstable fulminate"));QuestL11ManorWine_defineProperty(this, "bomb",
    external_kolmafia_namespaceObject.Item.get("Wine Bomb"));}QuestL11ManorWine_createClass(QuestL11ManorWine, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Wine";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (
      status > 2 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.wine) > 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.unstable) > 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.bomb) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops();

      if (this.celler.turnsSpent > 1) {
        outfit.setChampagneBottle();
      }

      return {
        location: this.celler,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("possessed wine rack"));

          greyAdv(this.celler, outfit, settings);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.celler];
    } }]);return QuestL11ManorWine;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Manor.ts
function QuestL11Manor_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Manor_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Manor_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Manor_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Manor_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Manor_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}












var QuestL11Manor = /*#__PURE__*/function () {



  function QuestL11Manor() {QuestL11Manor_classCallCheck(this, QuestL11Manor);QuestL11Manor_defineProperty(this, "ballroom", external_kolmafia_namespaceObject.Location.get("The Haunted Ballroom"));QuestL11Manor_defineProperty(this, "children", []);
    this.children.push(new QuestL11ManorBomb());
    this.children.push(new QuestL11ManorBoss());
    this.children.push(new QuestL11ManorRecipe());
    this.children.push(new QuestL11ManorSoda());
    this.children.push(new QuestL11ManorWine());
  }QuestL11Manor_createClass(QuestL11Manor, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Ballroom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.ballroom];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 0 || !(0,external_kolmafia_namespaceObject.canAdventure)(this.ballroom)) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.ballroom,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          try {
            props.setChoice(921, 1); // Play da music
            props.setChoice(106, 3);
            props.setChoice(90, 3);
            greyAdv(this.ballroom, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getStatus", value:

    function getStatus() {
      return ManorStatus[(0,external_kolmafia_namespaceObject.getProperty)("questL11Manor")];
    } }]);return QuestL11Manor;}();var


ManorStatus;(function (ManorStatus) {ManorStatus["unstarted"] = "unstarted";ManorStatus["started"] = "started";ManorStatus["step1"] = "CELLER_OPENED";ManorStatus["step2"] = "RECIPE_ACQUIRED";ManorStatus["step3"] = "WALL_BROKEN";ManorStatus["finished"] = "finished";})(ManorStatus || (ManorStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/palin/QuestL11PalinStew.ts
function QuestL11PalinStew_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PalinStew_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11PalinStew_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PalinStew_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PalinStew_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PalinStew_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11PalinStew = /*#__PURE__*/function () {function QuestL11PalinStew() {QuestL11PalinStew_classCallCheck(this, QuestL11PalinStew);QuestL11PalinStew_defineProperty(this, "wetStew",
    external_kolmafia_namespaceObject.Item.get("Wet Stew"));QuestL11PalinStew_defineProperty(this, "stuntNuts",
    external_kolmafia_namespaceObject.Item.get("Stunt Nuts"));QuestL11PalinStew_defineProperty(this, "talisman",
    external_kolmafia_namespaceObject.Item.get("Talisman o' Namsilat"));QuestL11PalinStew_defineProperty(this, "stuntNutStew",
    external_kolmafia_namespaceObject.Item.get("Wet stunt nut stew"));QuestL11PalinStew_defineProperty(this, "rib",
    external_kolmafia_namespaceObject.Item.get("Bird Rib"));QuestL11PalinStew_defineProperty(this, "lionOil",
    external_kolmafia_namespaceObject.Item.get("lion oil"));QuestL11PalinStew_defineProperty(this, "grove",
    external_kolmafia_namespaceObject.Location.get("Whitey's Grove"));}QuestL11PalinStew_createClass(QuestL11PalinStew, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Palin / WetStew";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Palindome");

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (status > 4) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.stuntNuts) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops().setPlusCombat();

      return {
        location: this.grove,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("white lion"));
          settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("whitesnake"));

          var props = new PropertyManager();
          props.setChoice(73, 3);
          props.setChoice(74, 2);
          props.setChoice(75, 2);

          try {
            greyAdv(this.grove, outfit, settings);
          } finally {
            props.resetAll();
          }

          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.rib) > 0 &&
          (0,external_kolmafia_namespaceObject.availableAmount)(this.lionOil) > 0)
          {
            (0,external_kolmafia_namespaceObject.cliExecute)("create " + this.stuntNutStew.name);
            (0,external_kolmafia_namespaceObject.equip)(this.talisman);

            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=palindome&action=pal_mrlabel");
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.grove];
    } }]);return QuestL11PalinStew;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestTrapGhost.ts
function QuestTrapGhost_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTrapGhost_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTrapGhost_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTrapGhost_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTrapGhost_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTrapGhost_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestTrapGhost = /*#__PURE__*/function () {function QuestTrapGhost() {QuestTrapGhost_classCallCheck(this, QuestTrapGhost);QuestTrapGhost_defineProperty(this, "pack",
    external_kolmafia_namespaceObject.Item.get("protonic accelerator pack"));QuestTrapGhost_defineProperty(this, "sweatpants",
    external_kolmafia_namespaceObject.Item.get("Designer Sweatpants"));QuestTrapGhost_defineProperty(this, "gallery",
    external_kolmafia_namespaceObject.Location.get("The Haunted Gallery"));QuestTrapGhost_defineProperty(this, "icyPeak",
    external_kolmafia_namespaceObject.Location.get("The Icy Peak"));QuestTrapGhost_defineProperty(this, "palindome",
    external_kolmafia_namespaceObject.Location.get("Inside the Palindome"));QuestTrapGhost_defineProperty(this, "smutOrcs",
    external_kolmafia_namespaceObject.Location.get("The Smut Orc Logging Camp"));QuestTrapGhost_defineProperty(this, "spookyForest",
    external_kolmafia_namespaceObject.Location.get("The Spooky Forest"));QuestTrapGhost_defineProperty(this, "hasColdRes", void 0);QuestTrapGhost_defineProperty(this, "lastColdResCheck", void 0);}QuestTrapGhost_createClass(QuestTrapGhost, [{ key: "getId", value:



    function getId() {
      return "Misc / Ghost Buster";
    } }, { key: "level", value:

    function level() {
      return 3;
    } }, { key: "isReady", value:

    function isReady() {
      return (0,external_kolmafia_namespaceObject.getProperty)("ghostLocation") != "";
    } }, { key: "getLocation", value:

    function getLocation() {
      return external_kolmafia_namespaceObject.Location.get((0,external_kolmafia_namespaceObject.getProperty)("ghostLocation"));
    } }, { key: "isBadLocation", value:

    function isBadLocation() {
      var loc = this.getLocation();

      switch (loc) {
        case this.gallery:
          return getQuestStatus("questM21Dance") <= 1;
        case this.palindome:
          return getQuestStatus("questL11Palindome") <= 1;
        case this.smutOrcs:
          if (getQuestStatus("questL09Topping") > 0) {
            return false;
          }

          var progress = (0,external_kolmafia_namespaceObject.getProperty)("smutOrcNoncombatProgress");

          if (progress == "") {
            return false;
          }

          return (0,external_kolmafia_namespaceObject.toInt)(progress) >= 15;
        case this.spookyForest:
          return (
            (0,external_kolmafia_namespaceObject.myLevel)() >= 6 && (0,external_kolmafia_namespaceObject.getProperty)("questM16Temple") != "finished" ||
            (0,external_kolmafia_namespaceObject.getProperty)("questL02Larva") != "finished");

        case this.icyPeak:
          if (getQuestStatus("questL08Trapper") < 100) {
            return true;
          }

          if (this.lastColdResCheck + 5 >= (0,external_kolmafia_namespaceObject.totalTurnsPlayed)()) {
            return !this.hasColdRes;
          }

          (0,external_kolmafia_namespaceObject.maximize)("cold res 5 min +equip ".concat(
          this.pack.name).concat(
          (0,external_kolmafia_namespaceObject.availableAmount)(this.sweatpants) > 0 ?
          " +equip designer sweatpants" :
          "", " -tie"),

          true);


          var res = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Cold Resistance");
          this.lastColdResCheck = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
          this.hasColdRes = res >= 5;

          return !this.hasColdRes;}


      return false;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.pack) == 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.myHp)() < 10) {
        return QuestStatus.NOT_READY;
      }

      if (!this.isReady()) {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.sweatpants) > 0 &&
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("sweat")) < 5)
      {
        return QuestStatus.NOT_READY;
      }

      var loc = this.getLocation();

      if (!(0,external_kolmafia_namespaceObject.canAdventure)(loc)) {
        return QuestStatus.NOT_READY;
      }

      if (this.isBadLocation()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = getGhostBustingOutfit();

      if (this.getLocation() == this.icyPeak) {
        outfit.addBonus("+10 cold res 5 min");
      }

      return {
        outfit: outfit,
        location: null,
        run: () => {
          greyAdv(
          this.getLocation(),
          outfit,
          new AdventureSettings().setStartOfFightMacro(getGhostBustingMacro()));

        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTrapGhost;}();


var sweatpants = external_kolmafia_namespaceObject.Item.get("Designer Sweatpants");
var pack = external_kolmafia_namespaceObject.Item.get("protonic accelerator pack");

function getGhostBustingOutfit() {
  var outfit = new GreyOutfit();

  outfit.addItem(pack);

  if ((0,external_kolmafia_namespaceObject.availableAmount)(sweatpants) > 0) {
    outfit.addItem(sweatpants);
  } else {
    outfit.addBonus("+DA +DR");
  }

  return outfit;
}

function isGhostBustingTime(loc) {
  return (
    (0,external_kolmafia_namespaceObject.getProperty)("ghostLocation") != "" &&
    loc == external_kolmafia_namespaceObject.Location.get((0,external_kolmafia_namespaceObject.getProperty)("ghostLocation")));

}

function shouldAvoidGhosts() {
  return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("sweat")) < 5 && (0,external_kolmafia_namespaceObject.availableAmount)(sweatpants) > 0;
}

function getGhostBustingMacro() {
  var macro = new Macro();

  if ((0,external_kolmafia_namespaceObject.availableAmount)(sweatpants) > 0) {
    macro.skill(external_kolmafia_namespaceObject.Skill.get("Sweat Flood"));
  }

  for (var i = 0; i < 3; i++) {
    macro.skill(external_kolmafia_namespaceObject.Skill.get("Shoot Ghost"));
  }

  macro.skill(external_kolmafia_namespaceObject.Skill.get("Trap Ghost"));

  return macro;
}
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/palin/QuestL11PalinBook.ts
function QuestL11PalinBook_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PalinBook_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11PalinBook_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PalinBook_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PalinBook_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PalinBook_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11PalinBook_setPrototypeOf(subClass, superClass);}function QuestL11PalinBook_setPrototypeOf(o, p) {QuestL11PalinBook_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11PalinBook_setPrototypeOf(o, p);}function QuestL11PalinBook_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11PalinBook_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11PalinBook_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11PalinBook_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11PalinBook_possibleConstructorReturn(this, result);};}function QuestL11PalinBook_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11PalinBook_assertThisInitialized(self);}function QuestL11PalinBook_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11PalinBook_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11PalinBook_getPrototypeOf(o) {QuestL11PalinBook_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11PalinBook_getPrototypeOf(o);}function QuestL11PalinBook_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}













var QuestL11PalinBook = /*#__PURE__*/function (_TaskInfo) {QuestL11PalinBook_inherits(QuestL11PalinBook, _TaskInfo);var _super = QuestL11PalinBook_createSuper(QuestL11PalinBook);function QuestL11PalinBook() {var _this;QuestL11PalinBook_classCallCheck(this, QuestL11PalinBook);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "camera",
    external_kolmafia_namespaceObject.Item.get("Disposable Instant Camera"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "stuntNuts",
    external_kolmafia_namespaceObject.Item.get("Stunt Nuts"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "talisman",
    external_kolmafia_namespaceObject.Item.get("Talisman o' Namsilat"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "loveBook1",
    external_kolmafia_namespaceObject.Item.get('"I Love Me, Vol. I"'));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "loveBook2",
    external_kolmafia_namespaceObject.Item.get('"2 Love Me, Vol. 2"'));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "palindome",
    external_kolmafia_namespaceObject.Location.get("Inside the Palindome"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "ncPhotos",
    [
    "photograph of an ostrich egg",
    "photograph of a red nugget",
    "photograph of God"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "dogPhoto",
    external_kolmafia_namespaceObject.Item.get("photograph of a dog"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "bobRace",
    external_kolmafia_namespaceObject.Monster.get("Bob Racecar"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "raceBob",
    external_kolmafia_namespaceObject.Monster.get("Racecar Bob"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "paths", void 0);return _this;}QuestL11PalinBook_createClass(QuestL11PalinBook, [{ key: "createPaths", value:


    function createPaths(assumeUnused) {
      this.paths = [new PossiblePath(0).addMeat(1000)];

      if (!assumeUnused && getQuestStatus("questL11Palindome") > 1) {
        return;
      }

      this.paths.push(new PossiblePath(0).add(ResourceCategory.HOT_TUB));
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Palin / Book";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Palindome");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (
      isGhostBustingTime(this.palindome) &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.talisman) > 0 &&
      !shouldAvoidGhosts())
      {
        return QuestStatus.READY;
      }

      if (GreySettings.greySkipPalindome && !this.isFarmDudes()) {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_namespaceObject.myMeat)() < 1000 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.talisman) == 0 ||
      status < 0 ||
      this.needDogPhoto() && (0,external_kolmafia_namespaceObject.availableAmount)(this.camera) == 0)
      {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "needDogPhoto", value:

    function needDogPhoto() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.dogPhoto) == 0;
    } }, { key: "isFarmDudes", value:

    function isFarmDudes() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.stuntNuts) == 0 ||
        this.needDogPhoto() ||
        this.ncPhotos.filter((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0).length > 0 ||
        (0,external_kolmafia_namespaceObject.availableAmount)(this.loveBook1) == 0);

    } }, { key: "run", value:

    function run(path) {
      if (this.isFarmDudes()) {
        return this.farmDudes();
      }

      return this.turnInStuff(path);
    } }, { key: "turnInStuff", value:

    function turnInStuff(path) {
      return {
        location: null,
        outfit: new GreyOutfit().addItem(this.talisman),
        run: () => {
          (0,external_kolmafia_namespaceObject.use)(this.loveBook1);
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=palindome&action=pal_drlabel");
          (0,external_kolmafia_namespaceObject.visitUrl)(
          "choice.php?pwd=&whichchoice=872&option=1&photo1=2259&photo2=7264&photo3=7263&photo4=7265");


          if (path.canUse(ResourceCategory.HOT_TUB)) {
            (0,external_kolmafia_namespaceObject.cliExecute)("hottub");
            path.addUsed(ResourceCategory.HOT_TUB);
          } else {
            restoreHPTo(Math.min((0,external_kolmafia_namespaceObject.myMaxhp)(), 120));
          }

          (0,external_kolmafia_namespaceObject.use)(this.loveBook2);
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=palindome&action=pal_mroffice");
        } };

    } }, { key: "farmDudes", value:

    function farmDudes() {
      var outfit = isGhostBustingTime(this.palindome) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.stuntNuts) == 0) {
        outfit.setItemDrops();
      }

      if (this.ncPhotos.filter((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0).length > 0) {
        outfit.setNoCombat();
      }

      // No NCs to be hit other than quest so no need to +combat

      outfit.addItem(this.talisman);

      return {
        outfit: outfit,
        location: this.palindome,
        run: () => {
          var macro = null;

          if (isGhostBustingTime(this.palindome)) {
            macro = getGhostBustingMacro();
          } else if (this.needDogPhoto()) {
            macro = new Macro().
            if_(this.bobRace, Macro.tryItem(this.camera)).
            if_(this.raceBob, Macro.tryItem(this.camera));
          }

          var settings = new AdventureSettings().setStartOfFightMacro(macro);
          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("Evil Olive"));
          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("Flock of Stab-bats"));
          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("Taco Cat"));
          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("Tan Gnat"));

          var props = new PropertyManager();
          props.setChoice(129, 1);
          props.setChoice(873, 1);

          try {
            greyAdv(this.palindome, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.palindome];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return isGhostBustingTime(this.palindome);
    } }]);return QuestL11PalinBook;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Palindome.ts
function QuestL11Palindome_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Palindome_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Palindome_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Palindome_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Palindome_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Palindome_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var QuestL11Palin = /*#__PURE__*/function () {




  function QuestL11Palin() {QuestL11Palindome_classCallCheck(this, QuestL11Palin);QuestL11Palindome_defineProperty(this, "megagem", external_kolmafia_namespaceObject.Item.get("Mega Gem"));QuestL11Palindome_defineProperty(this, "talisman", external_kolmafia_namespaceObject.Item.get("Talisman o' Namsilat"));QuestL11Palindome_defineProperty(this, "children", []);
    this.children.push(new QuestL11PalinStew());
    this.children.push(new QuestL11PalinBook());
  }QuestL11Palindome_createClass(QuestL11Palin, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Palin / Boss";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Palindome");

      if (status == 100) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.megagem) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().
      addItem(this.talisman).
      addItem(this.megagem);

      return {
        outfit: outfit,
        location: null,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(131, 1);

          try {
            greyAdv("place.php?whichplace=palindome&action=pal_drlabel", outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }]);return QuestL11Palin;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/pyramid/QuestL11PyramidControl.ts
function QuestL11PyramidControl_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PyramidControl_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11PyramidControl_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PyramidControl_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PyramidControl_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PyramidControl_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var QuestL11PyramidControl = /*#__PURE__*/function () {function QuestL11PyramidControl() {QuestL11PyramidControl_classCallCheck(this, QuestL11PyramidControl);QuestL11PyramidControl_defineProperty(this, "wheel",
    external_kolmafia_namespaceObject.Item.get("Crumbling Wooden Wheel"));QuestL11PyramidControl_defineProperty(this, "ratchet",
    external_kolmafia_namespaceObject.Item.get("Tomb Ratchet"));}QuestL11PyramidControl_createClass(QuestL11PyramidControl, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Pyramid / Wheel";
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 3;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_namespaceObject.getProperty)("lowerChamberUnlock") != "true" ||
      (0,external_kolmafia_namespaceObject.getProperty)("controlRoomUnlock") != "true")
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("pyramidBombUsed") == "true") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.wheel) + (0,external_kolmafia_namespaceObject.availableAmount)(this.ratchet) < 10) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("pyramidPosition") != "1") {
        throw "Shouldn't have used any wheels or ratchets yet!";
      }

      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=pyramid&action=pyramid_control");

          for (var wheel = 1; wheel <= 10; wheel++) {
            if ((0,external_kolmafia_namespaceObject.itemAmount)(this.wheel) > 0) {
              (0,external_kolmafia_namespaceObject.visitUrl)(
              "choice.php?pwd=&whichchoice=929&option=1&choiceform1=Use+a+wheel+on+the+peg&pwd=" +
              (0,external_kolmafia_namespaceObject.myHash)());

            } else {
              (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=929&option=2&pwd");
            }

            if (wheel == 3 || wheel == 7 || wheel == 10) {
              (0,external_kolmafia_namespaceObject.visitUrl)(
              "choice.php?pwd=&whichchoice=929&option=5&choiceform5=Head+down+to+the+Lower+Chambers+%281%29&pwd=" +
              (0,external_kolmafia_namespaceObject.myHash)());

            }

            if (wheel == 3 || wheel == 7) {
              (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=pyramid&action=pyramid_control");
            }
          }

          if ((0,external_kolmafia_namespaceObject.getProperty)("pyramidBombUsed") != "true") {
            throw "Bomb should've been used in the pyramid!";
          }
        } };

    } }]);return QuestL11PyramidControl;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/pyramid/QuestL11PyramidMiddle.ts
function QuestL11PyramidMiddle_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PyramidMiddle_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11PyramidMiddle_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PyramidMiddle_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PyramidMiddle_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PyramidMiddle_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL11PyramidMiddle = /*#__PURE__*/function () {function QuestL11PyramidMiddle() {QuestL11PyramidMiddle_classCallCheck(this, QuestL11PyramidMiddle);QuestL11PyramidMiddle_defineProperty(this, "ratTangle",
    external_kolmafia_namespaceObject.Item.get("Tangle of rat tails"));QuestL11PyramidMiddle_defineProperty(this, "tombRat",
    external_kolmafia_namespaceObject.Monster.get("Tomb Rat"));QuestL11PyramidMiddle_defineProperty(this, "middleLoc",
    external_kolmafia_namespaceObject.Location.get("The Middle Chamber"));QuestL11PyramidMiddle_defineProperty(this, "wheel",
    external_kolmafia_namespaceObject.Item.get("Crumbling Wooden Wheel"));QuestL11PyramidMiddle_defineProperty(this, "ratchet",
    external_kolmafia_namespaceObject.Item.get("Tomb Ratchet"));QuestL11PyramidMiddle_defineProperty(this, "servant",
    external_kolmafia_namespaceObject.Monster.get("Tomb Servant"));QuestL11PyramidMiddle_defineProperty(this, "toAbsorb", void 0);}QuestL11PyramidMiddle_createClass(QuestL11PyramidMiddle, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / Pyramid / Middle";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("pyramidBombUsed") == "true") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("middleChamberUnlock") == "false") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("lowerChamberUnlock") == "true" &&
      (0,external_kolmafia_namespaceObject.getProperty)("controlRoomUnlock") == "true" &&
      this.haveEnough())
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL03Rat") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if (this.toAbsorb.length == 0 && this.haveEnough()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "haveEnough", value:

    function haveEnough() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.wheel) + (0,external_kolmafia_namespaceObject.availableAmount)(this.ratchet) >= 10;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.middleLoc,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();

          var startMacro = new Macro();

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.ratTangle) > 0) {
            startMacro.if_(this.tombRat, Macro.item(this.ratTangle));
          } else if (this.haveEnough() && this.toAbsorb.length == 0) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          settings.addNoBanish(this.tombRat);

          settings.setStartOfFightMacro(startMacro);
          greyAdv(this.middleLoc, outfit, settings);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.middleLoc];
    } }]);return QuestL11PyramidMiddle;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/pyramid/QuestL11PyramidTop.ts
function QuestL11PyramidTop_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PyramidTop_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11PyramidTop_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PyramidTop_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PyramidTop_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PyramidTop_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11PyramidTop = /*#__PURE__*/function () {function QuestL11PyramidTop() {QuestL11PyramidTop_classCallCheck(this, QuestL11PyramidTop);QuestL11PyramidTop_defineProperty(this, "topLoc",
    external_kolmafia_namespaceObject.Location.get("The Upper Chamber"));QuestL11PyramidTop_defineProperty(this, "eye",
    external_kolmafia_namespaceObject.Item.get("Eye of Ed"));QuestL11PyramidTop_defineProperty(this, "amulet",
    external_kolmafia_namespaceObject.Item.get("ancient amulet"));QuestL11PyramidTop_defineProperty(this, "headpiece",
    external_kolmafia_namespaceObject.Item.get("headpiece of the Staff of Ed"));QuestL11PyramidTop_defineProperty(this, "staff",
    external_kolmafia_namespaceObject.Item.get("Staff of Fats"));QuestL11PyramidTop_defineProperty(this, "staff2",
    external_kolmafia_namespaceObject.Item.get("[2325]Staff Of Ed"));}QuestL11PyramidTop_createClass(QuestL11PyramidTop, [{ key: "getId", value:

    // TODO Once we've got the absorbs, try replace combats

    function getId() {
      return "Council / MacGruffin / Pyramid / Top";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Pyramid");

      if (status <= 0 && !this.isUnlockable()) {
        return QuestStatus.NOT_READY;
      }

      if (this.isMiddleUnlocked() || status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Desert") != "finished") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "isMiddleUnlocked", value:

    function isMiddleUnlocked() {
      return (0,external_kolmafia_namespaceObject.getProperty)("middleChamberUnlock") == "true";
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        this.isUnlockable() &&
        (0,external_kolmafia_namespaceObject.getProperty)("questL11Desert") == "finished" &&
        (0,external_kolmafia_namespaceObject.getProperty)("questL11Pyramid") == "unstarted");

    } }, { key: "run", value:

    function run() {
      if (this.mustBeDone()) {
        return {
          location: null,
          run: () => {
            // Unlock
            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=desertbeach&action=db_pyramid1");
          } };

      }

      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.topLoc,
        outfit: outfit,
        run: () => {
          greyAdv(this.topLoc, outfit);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.topLoc];
    } }, { key: "isUnlockable", value:

    function isUnlockable() {
      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("desertExploration")) < 100) {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Palindome") != "finished") {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Manor") != "finished") {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Worship") != "finished") {
        return false;
      }

      return true;
    } }]);return QuestL11PyramidTop;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Pyramid.ts
function QuestL11Pyramid_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Pyramid_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Pyramid_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Pyramid_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Pyramid_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Pyramid_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestL11Pyramid = /*#__PURE__*/function () {



  function QuestL11Pyramid() {QuestL11Pyramid_classCallCheck(this, QuestL11Pyramid);QuestL11Pyramid_defineProperty(this, "edUndying", external_kolmafia_namespaceObject.Location.get("The Lower Chambers"));QuestL11Pyramid_defineProperty(this, "children", []);
    this.children.push(new QuestL11PyramidControl());
    this.children.push(new QuestL11PyramidTop());
    this.children.push(new QuestL11PyramidMiddle());
  }QuestL11Pyramid_createClass(QuestL11Pyramid, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Pyramid / EdUndying";
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 9;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Pyramid");

      if (status < 3 || (0,external_kolmafia_namespaceObject.getProperty)("pyramidBombUsed") == "false") {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      var fam = external_kolmafia_namespaceObject.Familiar.get("Grey Goose");

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(fam) >= 3) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.edUndying,
        run: () => {
          for (var i = 0; i < 7; i++) {
            greyAdv("place.php?whichplace=pyramid&action=pyramid_state1a");
          }

          (0,external_kolmafia_namespaceObject.council)();
        } };

    } }]);return QuestL11Pyramid;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/ron/QuestL11RonAirship.ts
function QuestL11RonAirship_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11RonAirship_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11RonAirship_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11RonAirship_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11RonAirship_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11RonAirship_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL11RonAirship = /*#__PURE__*/function () {function QuestL11RonAirship() {QuestL11RonAirship_classCallCheck(this, QuestL11RonAirship);QuestL11RonAirship_defineProperty(this, "ticket",
    external_kolmafia_namespaceObject.Item.get("Red Zeppelin Ticket"));QuestL11RonAirship_defineProperty(this, "ron",
    external_kolmafia_namespaceObject.Monster.get('Ron "The Weasel" Copperhead'));QuestL11RonAirship_defineProperty(this, "airship",
    external_kolmafia_namespaceObject.Location.get("The Red Zeppelin"));}QuestL11RonAirship_createClass(QuestL11RonAirship, [{ key: "getLocations", value:

    function getLocations() {
      return [this.airship];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Ron / Zepp";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Ron");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (status > 4) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.ticket) == 0 && (0,external_kolmafia_namespaceObject.myMeat)() <= 5000) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.airship,
        outfit: outfit,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.ticket) == 0) {
            (0,external_kolmafia_namespaceObject.retrieveItem)(this.ticket);
          }

          var macro = greyKillingBlow(outfit);

          if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Glark Cable")) > 0) {
            macro = Macro.if_(this.ron, macro).
            step(Macro.tryItem(external_kolmafia_namespaceObject.Item.get("Glark Cable"))).
            step(macro);
          }

          var settings = new AdventureSettings();
          settings.setFinishingBlowMacro(macro);
          settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Red Skeleton"));
          settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Red Butler"));

          greyAdv(this.airship, outfit, settings);
        } };

    } }]);return QuestL11RonAirship;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/ron/QuestL11RonProtesters.ts
function QuestL11RonProtesters_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11RonProtesters_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL11RonProtesters_toConsumableArray(arr) {return QuestL11RonProtesters_arrayWithoutHoles(arr) || QuestL11RonProtesters_iterableToArray(arr) || QuestL11RonProtesters_unsupportedIterableToArray(arr) || QuestL11RonProtesters_nonIterableSpread();}function QuestL11RonProtesters_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL11RonProtesters_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11RonProtesters_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11RonProtesters_arrayLikeToArray(o, minLen);}function QuestL11RonProtesters_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestL11RonProtesters_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestL11RonProtesters_arrayLikeToArray(arr);}function QuestL11RonProtesters_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL11RonProtesters_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11RonProtesters_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11RonProtesters_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11RonProtesters_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11RonProtesters_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11RonProtesters_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11RonProtesters_setPrototypeOf(subClass, superClass);}function QuestL11RonProtesters_setPrototypeOf(o, p) {QuestL11RonProtesters_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11RonProtesters_setPrototypeOf(o, p);}function QuestL11RonProtesters_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11RonProtesters_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11RonProtesters_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11RonProtesters_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11RonProtesters_possibleConstructorReturn(this, result);};}function QuestL11RonProtesters_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11RonProtesters_assertThisInitialized(self);}function QuestL11RonProtesters_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11RonProtesters_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11RonProtesters_getPrototypeOf(o) {QuestL11RonProtesters_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11RonProtesters_getPrototypeOf(o);}function QuestL11RonProtesters_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var


PossiblePathExtra = /*#__PURE__*/function (_PossiblePath) {QuestL11RonProtesters_inherits(PossiblePathExtra, _PossiblePath);var _super = QuestL11RonProtesters_createSuper(PossiblePathExtra);function PossiblePathExtra() {var _this;QuestL11RonProtesters_classCallCheck(this, PossiblePathExtra);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this), "equips",
    []);return _this;}return QuestL11RonProtesters_createClass(PossiblePathExtra);}(PossiblePath);


var QuestL11RonProtesters = /*#__PURE__*/function (_TaskInfo) {QuestL11RonProtesters_inherits(QuestL11RonProtesters, _TaskInfo);var _super2 = QuestL11RonProtesters_createSuper(QuestL11RonProtesters);function QuestL11RonProtesters() {var _this2;QuestL11RonProtesters_classCallCheck(this, QuestL11RonProtesters);for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}_this2 = _super2.call.apply(_super2, [this].concat(args));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "proLoc",
    external_kolmafia_namespaceObject.Location.get("A Mob Of Zeppelin Protesters"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "deck",
    external_kolmafia_namespaceObject.Item.get("deck of lewd playing cards"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndHat",
    external_kolmafia_namespaceObject.Item.get("lynyrdskin cap"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndPants",
    external_kolmafia_namespaceObject.Item.get("lynyrdskin breeches"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndShirt",
    external_kolmafia_namespaceObject.Item.get("lynyrdskin tunic"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndCostume",
    [_this2.lyrndHat, _this2.lyrndPants, _this2.lyrndShirt]);QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "musk",
    external_kolmafia_namespaceObject.Item.get("lynyrd musk"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "cig",
    external_kolmafia_namespaceObject.Item.get("cigarette lighter"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "flaming",
    external_kolmafia_namespaceObject.Item.get("Flamin' Whatshisname"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "musky",
    external_kolmafia_namespaceObject.Effect.get("Musky"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "toAbsorb", void 0);QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "torsoAwareness",

    external_kolmafia_namespaceObject.Skill.get("Torso Awareness"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "smutSleazeSkill",
    external_kolmafia_namespaceObject.Skill.get("Procgen Ribaldry"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "sleazeSkill2",
    external_kolmafia_namespaceObject.Skill.get("Innuendo Circuitry"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "starChart",
    external_kolmafia_namespaceObject.Item.get("Star Chart"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "sweatpants",
    external_kolmafia_namespaceObject.Item.get("designer sweatpants"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "spoon",
    external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "umbrella",
    external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "vipInvitation",

    external_kolmafia_namespaceObject.Item.get("Clan VIP Lounge key"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "transparentPants",
    external_kolmafia_namespaceObject.Item.get("Transparent pants"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "clover",
    external_kolmafia_namespaceObject.Item.get("11-Leaf Clover"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lucky",
    external_kolmafia_namespaceObject.Effect.get("Lucky!"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "paths",
    []);QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "sleazeEquips",



    [
    _this2.deck,
    (0,external_kolmafia_namespaceObject.availableAmount)(_this2.sweatpants) > 0 ?
    _this2.sweatpants :
    external_kolmafia_namespaceObject.Item.get("Transparent pants")]);return _this2;}QuestL11RonProtesters_createClass(QuestL11RonProtesters, [{ key: "getRelation", value:


    function getRelation(id) {
      if (id == "Council / Peaks / Orcs" && !(0,external_kolmafia_namespaceObject.haveSkill)(this.smutSleazeSkill)) {
        return TaskRelation.WAIT_FOR;
      }

      if (
      id == "Council / Tower / Keys / Star" &&
      !GreySettings.shouldAvoidTowerRequirements() &&
      !(0,external_kolmafia_namespaceObject.haveSkill)(this.sleazeSkill2) &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.starChart) == 0)
      {
        return TaskRelation.WAIT_FOR;
      }

      return TaskRelation.UNRELATED;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      var paths = [];

      // Combinations of sleaze equips, clover, costume
      var allPossible = [].concat(QuestL11RonProtesters_toConsumableArray(
      this.sleazeEquips.filter(
      (i) => (0,external_kolmafia_namespaceObject.storageAmount)(i) > 0 || (0,external_kolmafia_namespaceObject.availableAmount)(i) > 0)), QuestL11RonProtesters_toConsumableArray(

      this.lyrndCostume), [
      "Clover",
      "Clover",
      "Clover"]);


      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.spoon) == 0 && !(0,external_kolmafia_namespaceObject.gnomadsAvailable)()) {
        allPossible = allPossible.filter((i) => i != this.lyrndShirt);
      }var _iterator = QuestL11RonProtesters_createForOfIteratorHelper(

      getAllCombinations(allPossible)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combination = _step.value;
          if (
          (combination.includes(this.sweatpants) ||
          combination.includes(this.transparentPants)) &&
          combination.includes(this.lyrndPants))
          {
            continue;
          }

          var items = combination.filter(
          (i) => i instanceof external_kolmafia_namespaceObject.Item);

          var clovers = combination.filter((i) => i == "Clover").length;
          var toPull = items.filter(
          (i) =>
          this.lyrndCostume.includes(i) ||
          i == this.deck ||
          i == this.transparentPants);


          var turns = this.getEstimatedTurns(assumeUnstarted, clovers, items);

          var path = new PossiblePathExtra(turns);

          for (var clover = 0; clover < clovers; clover++) {
            path.add(ResourceCategory.CLOVER);
          }var _iterator2 = QuestL11RonProtesters_createForOfIteratorHelper(

          toPull),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var item = _step2.value;
              path.addPull(item);

              if (!assumeUnstarted && (0,external_kolmafia_namespaceObject.availableAmount)(item) > 0) {
                path.addUsed(ResourceCategory.PULL);
              }
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = QuestL11RonProtesters_createForOfIteratorHelper(

          items),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _item = _step3.value;
              path.equips.push(_item);
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          paths.push(path);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      this.paths = paths;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getEstimatedTurns", value:

    function getEstimatedTurns(
    assumeUnstarted,
    clovers,
    item)
    {
      var estimatedFires = 2;
      var lynyrdScares =
      3 + this.lyrndCostume.filter((i) => item.includes(i)).length * 5; // Do calcs without musk
      var sleazeScares =
      ((0,external_kolmafia_namespaceObject.availableAmount)(this.sweatpants) > 0 ? 120 : 0) +
      item.
      map(
      (i) =>
      i != this.sweatpants &&
      (0,external_kolmafia_namespaceObject.numericModifier)(i, "Sleaze Damage") +
      (0,external_kolmafia_namespaceObject.numericModifier)(i, "Sleaze Spell Damage")).

      reduce((p, n) => p + n, 0);

      sleazeScares = Math.floor(Math.pow(sleazeScares, 0.5));
      // Assume we're running -20 so 65% chance of a combat
      var ncModifier = 0;
      // Minus 20 for skills
      ncModifier += 20;
      // Minus 5 if we're not wearing lynrd cap and can wear -5 hat
      if (
      !item.includes(this.lyrndHat) &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.vipInvitation) > 0)
      {
        ncModifier += 5;
      }
      // Minus 10 if we're not wearing sleaze deck and have umbrella
      if (!item.includes(this.deck) && (0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) > 0) {
        ncModifier += 10;
      }
      // Cap it
      if (ncModifier > 25) {
        ncModifier = 25 + (ncModifier - 25) / 5;
      }

      var toScare = assumeUnstarted ?
      80 :
      Math.max(0, this.getProtestersRemaining());

      var ncs = [
      () => sleazeScares,
      () => {
        return estimatedFires-- > 0 ? 10 : 3;
      },
      () => lynyrdScares];

      // 1.5 instead of 1 for bad luck
      var ncEveryXTurns = Math.ceil(1.5 / (1 - (85 - ncModifier) / 100));
      var turnsTaken = 0;

      for (var c = 0; c < clovers; c++) {
        toScare -= Math.max(sleazeScares, lynyrdScares + 3); // 3 cos I assume we have musk
        turnsTaken++;
      }

      var turnsToNC = ncEveryXTurns;
      var nc = 0;
      while (toScare > 0) {
        turnsToNC--;
        turnsTaken++;

        if (turnsToNC <= 0) {
          toScare -= ncs[nc++ % 3]();
          turnsToNC = ncEveryXTurns;
        } else {
          toScare -= 1.1; // Assume cig lighter
        }
      }

      return turnsTaken;
    } }, { key: "isReady", value:

    function isReady() {
      return (
        (0,external_kolmafia_namespaceObject.getProperty)("questL11Ron") == "started" ||
        (0,external_kolmafia_namespaceObject.getProperty)("questL11Ron") == "step1" ||
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("zeppelinProtestors")) <= 80);

    } }, { key: "waitingForShirt", value:

    function waitingForShirt() {
      return (
        !(0,external_kolmafia_namespaceObject.haveSkill)(this.torsoAwareness) && (
        (0,external_kolmafia_namespaceObject.gnomadsAvailable)() ||
        (0,external_kolmafia_namespaceObject.availableAmount)(this.spoon) > 0 &&
        getMoonZone(GreySettings.greyTuneMoonSpoon) == "Gnomad" &&
        (0,external_kolmafia_namespaceObject.getProperty)("moonTuned") != "true"));

    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Ron / Crowd";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Ron");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (!GreySettings.isHardcoreMode() && this.waitingForShirt()) {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.sweatpants) + (0,external_kolmafia_namespaceObject.equippedAmount)(this.sweatpants) > 0 &&
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("sweat")) < 100)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.gnomadsAvailable)() && !(0,external_kolmafia_namespaceObject.haveSkill)(this.torsoAwareness)) {
        return QuestStatus.NOT_READY;
      }

      // If we don't have max flaming boozes
      if (getQuestStatus("questL11Shen") <= 6) {
        return QuestStatus.NOT_READY;
      }

      if (
      !(0,external_kolmafia_namespaceObject.haveSkill)(this.sleazeSkill2) &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.starChart) == 0 &&
      !GreySettings.shouldAvoidTowerRequirements())
      {
        return QuestStatus.NOT_READY;
      }

      if (
      !(0,external_kolmafia_namespaceObject.haveSkill)(this.smutSleazeSkill) &&
      getQuestStatus("questL09Topping") < 1)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getLynyrdScares", value:

    function getLynyrdScares() {
      return (
        3 + (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.musk) + (0,external_kolmafia_namespaceObject.haveEffect)(this.musky) > 0 ? 3 : 0) +
        this.lyrndCostume.filter((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) > 0).length * 5);

    } }, { key: "getSleazeScares", value:

    function getSleazeScares() {
      return Math.floor(
      Math.pow(
      this.sleazeEquips.
      map((i) =>
      (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0 || (0,external_kolmafia_namespaceObject.equippedAmount)(i) > 0 ?
      0 :
      (0,external_kolmafia_namespaceObject.numericModifier)(i, "Sleaze Damage") +
      (0,external_kolmafia_namespaceObject.numericModifier)(i, "Sleaze Spell Damage")).

      reduce(
      (p, n) => p + n,
      (0,external_kolmafia_namespaceObject.numericModifier)("Sleaze Damage") +
      (0,external_kolmafia_namespaceObject.numericModifier)("Sleaze Spell Damage")),

      0.5));


    } }, { key: "runClover", value:

    function runClover(path) {
      var runSleaze = this.getSleazeScares() >= this.getLynyrdScares();
      var str = runSleaze ?
      "Sleaze Spell Damage +Sleaze Damage" :
      this.lyrndCostume.map((i) => "+equip " + i).join(" ");
      var outfit = new GreyOutfit(str + " -tie");

      return {
        location: null,
        outfit: outfit,
        run: () => {
          while (
          path.canUse(ResourceCategory.CLOVER) &&
          this.getProtestersRemaining() > 1)
          {
            var props = new PropertyManager();

            if (runSleaze) {
              props.setChoice(866, 2); // Clover
              props.setChoice(857, 1); // Sleaze
            } else {
              if (!(0,external_kolmafia_namespaceObject.haveEffect)(this.musky) && (0,external_kolmafia_namespaceObject.availableAmount)(this.musk) > 0) {
                (0,external_kolmafia_namespaceObject.use)(this.musk);
              }

              props.setChoice(866, 1); // Clover
              props.setChoice(856, 1); // Scare
            }

            (0,external_kolmafia_namespaceObject.use)(this.clover);

            if (!(0,external_kolmafia_namespaceObject.haveEffect)(this.lucky)) {
              throw "Expected lucky effect";
            }

            try {
              greyAdv(this.proLoc, outfit);
            } finally {
              props.resetAll();
            }

            if ((0,external_kolmafia_namespaceObject.haveEffect)(this.lucky)) {
              throw "Expected not to have lucky effect";
            }

            path.addUsed(ResourceCategory.CLOVER);
          }
        } };

    } }, { key: "run", value:

    function run(path) {
      if (path.canUse(ResourceCategory.PULL)) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {var _iterator4 = QuestL11RonProtesters_createForOfIteratorHelper(
            path.pulls.filter(
            (i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0)),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;)
              {var item = _step4.value;
                GreyPulls.tryPull(item);
                path.addUsed(ResourceCategory.PULL);
              }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
          } };

      }

      if (path.canUse(ResourceCategory.CLOVER) && this.toAbsorb.length == 0) {
        return this.runClover(path);
      }

      // If we can get more than 6
      var lynyrdScares = this.getLynyrdScares();
      // Calculate sleaze scares using our current sleaze stuff, skip equipped items so we can do our baseline
      var sleazeScares = this.getSleazeScares();

      var outfit = new GreyOutfit().setNoCombat().setNoCombat().setItemDrops();

      path.equips.forEach((i) => outfit.addItem(i));

      if (sleazeScares * 2 >= lynyrdScares) {
        outfit.addBonus("+2 sleaze dmg +2 sleaze spell dmg");
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) > 0 &&
      !path.equips.includes(this.deck))
      {
        outfit.addItem(this.umbrella);
      }

      // TODO Run left hand man?

      return {
        location: this.proLoc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          try {
            if (
            lynyrdScares > 3 &&
            (0,external_kolmafia_namespaceObject.haveEffect)(this.musky) <= 0 &&
            (0,external_kolmafia_namespaceObject.availableAmount)(this.musk) > 0)
            {
              (0,external_kolmafia_namespaceObject.use)(this.musk);
            }

            var doLynrd = lynyrdScares > 3;
            var doSleaze = sleazeScares >= 5;
            var doFire =
            (0,external_kolmafia_namespaceObject.availableAmount)(this.flaming) > 0 ||
            sleazeScares + lynyrdScares < 18;

            props.setChoice(856, doLynrd ? 1 : 2); // Lynrd
            props.setChoice(857, doSleaze ? 1 : 2); // Bench warrent
            props.setChoice(858, doFire ? 1 : 2);

            var settings = new AdventureSettings();
            settings.setFinishingBlowMacro(
            new Macro().tryItem(this.cig).step(greyKillingBlow(outfit)));

            settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Blue Oyster Cultist"));
            settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Lynyrd Skinner"));

            greyAdv(this.proLoc, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getProtestersRemaining", value:

    function getProtestersRemaining() {
      return 80 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("zeppelinProtestors"));
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.proLoc];
    } }]);return QuestL11RonProtesters;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Ron.ts
function QuestL11Ron_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Ron_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Ron_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Ron_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Ron_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Ron_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11Ron = /*#__PURE__*/function () {


  function QuestL11Ron() {QuestL11Ron_classCallCheck(this, QuestL11Ron);QuestL11Ron_defineProperty(this, "children", []);
    this.children.push(new QuestL11RonProtesters());
    this.children.push(new QuestL11RonAirship());
  }QuestL11Ron_createClass(QuestL11Ron, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Ron / Parent";
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }]);return QuestL11Ron;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenBats.ts
function QuestL11ShenBats_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenBats_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ShenBats_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenBats_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenBats_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenBats_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11ShenBats = /*#__PURE__*/function () {function QuestL11ShenBats() {QuestL11ShenBats_classCallCheck(this, QuestL11ShenBats);QuestL11ShenBats_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Batrat and Ratbat Burrow"));}QuestL11ShenBats_createClass(QuestL11ShenBats, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / Bats";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL04Bat") < 1) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (getQuestStatus("questL04Bat") <= 3) {
        outfit.setItemDrops();
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          greyAdv(this.location);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL11ShenBats;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenGiants.ts
function QuestL11ShenGiants_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenGiants_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ShenGiants_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenGiants_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenGiants_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenGiants_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11ShenGiants = /*#__PURE__*/function () {function QuestL11ShenGiants() {QuestL11ShenGiants_classCallCheck(this, QuestL11ShenGiants);QuestL11ShenGiants_defineProperty(this, "modelAirShip",
    external_kolmafia_namespaceObject.Item.get("Model airship"));QuestL11ShenGiants_defineProperty(this, "wig",
    external_kolmafia_namespaceObject.Item.get("Mohawk Wig"));QuestL11ShenGiants_defineProperty(this, "record",
    external_kolmafia_namespaceObject.Item.get("drum 'n' bass 'n' drum 'n' bass record"));QuestL11ShenGiants_defineProperty(this, "rocketToStars",
    external_kolmafia_namespaceObject.Item.get("steam-powered model rocketship"));QuestL11ShenGiants_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get(
    "The Castle in the Clouds in the Sky (Top Floor)"));QuestL11ShenGiants_defineProperty(this, "steamNC",

    677);QuestL11ShenGiants_defineProperty(this, "raverNC",
    676);QuestL11ShenGiants_defineProperty(this, "punkNC",
    678);QuestL11ShenGiants_defineProperty(this, "gothNC",
    675);}QuestL11ShenGiants_createClass(QuestL11ShenGiants, [{ key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.rocketToStars) == 0 ||
      (0,external_kolmafia_namespaceObject.getProperty)("questL10Garbage") != "finished")
      {
        outfit.setNoCombat();
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.wig) > 0) {
        outfit.addItem(this.wig);
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          try {
            // Goth and steam love each other
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.modelAirShip) > 0) {
              props.setChoice(this.steamNC, 1); // Use model ship
              props.setChoice(this.gothNC, 4); // Crawl to copper
            } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.record) > 0) {
              // We have the record, lets end this.
              props.setChoice(this.steamNC, 4); // Crawl to goth
              props.setChoice(this.gothNC, 2); // Grab record
            } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.rocketToStars) == 0) {
              // We don't have airship or record, to avoid fighting lets just grab the rocket if we can
              props.setChoice(this.steamNC, 2); // Grab rocket
              props.setChoice(this.gothNC, 4); // Crawl to steam
            } else {
              // This adv is a waste, just fight.
              props.setChoice(this.steamNC, 1); // Fight steam
              props.setChoice(this.gothNC, 1); // Fight goth
            }

            // Punk and raver love each other
            if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.wig) > 0) {
              // If we can end this with the wig
              props.setChoice(this.punkNC, 1); // Use wig
              props.setChoice(this.raverNC, 4); // Crawl to punk rock
            } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.record) == 0) {
              // If we can grab a record
              props.setChoice(this.punkNC, 4); // Crawl to raver
              props.setChoice(this.raverNC, 3); // Grab record
            } else {
              // We're going to waste an adventure
              props.setChoice(this.punkNC, 4); // Crawl to raver
              props.setChoice(this.raverNC, 1); // Fight the raver for their advs
            }

            props.setChoice(679, 1); // Turn dat wheel

            greyAdv(this.loc, outfit);

            if ((0,external_kolmafia_namespaceObject.lastChoice)() == 679) {
              (0,external_kolmafia_namespaceObject.council)();
            }
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / Giants";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 5) {
        return QuestStatus.COMPLETED;
      }

      if (status < 5) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL10Garbage") < 9) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL11ShenGiants;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenNinja.ts
function QuestL11ShenNinja_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenNinja_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ShenNinja_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenNinja_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenNinja_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenNinja_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11ShenNinja = /*#__PURE__*/function () {function QuestL11ShenNinja() {QuestL11ShenNinja_classCallCheck(this, QuestL11ShenNinja);QuestL11ShenNinja_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("Lair of the Ninja Snowmen"));}QuestL11ShenNinja_createClass(QuestL11ShenNinja, [{ key: "getId", value:
    // TODO Once we've got the absorbs, try replace combats if assassins isnt done cos we're really just stacking +combat

    function getId() {
      return "Council / MacGruffin / Shen / Ninjas";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL08Trapper") < 2) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (getQuestStatus("questL08Trapper") <= 2) {
        outfit.setPlusCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          greyAdv(this.location, outfit);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL11ShenNinja;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenTurnIn.ts
function QuestL11ShenTurnIn_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11ShenTurnIn_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL11ShenTurnIn_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11ShenTurnIn_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11ShenTurnIn_arrayLikeToArray(o, minLen);}function QuestL11ShenTurnIn_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL11ShenTurnIn_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenTurnIn_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ShenTurnIn_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenTurnIn_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenTurnIn_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenTurnIn_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL11ShenTurnIn = /*#__PURE__*/function () {function QuestL11ShenTurnIn() {QuestL11ShenTurnIn_classCallCheck(this, QuestL11ShenTurnIn);QuestL11ShenTurnIn_defineProperty(this, "disguise",
    external_kolmafia_namespaceObject.Item.get("Crappy Waiter Disguise"));QuestL11ShenTurnIn_defineProperty(this, "shenClub",
    external_kolmafia_namespaceObject.Location.get("The Copperhead Club"));QuestL11ShenTurnIn_defineProperty(this, "crappy",
    external_kolmafia_namespaceObject.Effect.get("Crappily Disguised as a Waiter"));QuestL11ShenTurnIn_defineProperty(this, "crappyDisguises",
    [
    "Waiter dressed as a ninja",
    "Ninja dressed as a waiter"].
    map((s) => external_kolmafia_namespaceObject.Monster.get(s)));QuestL11ShenTurnIn_defineProperty(this, "toAbsorb", void 0);QuestL11ShenTurnIn_defineProperty(this, "nanovision",

    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestL11ShenTurnIn_defineProperty(this, "cocktail",
    external_kolmafia_namespaceObject.Item.get("Unnamed cocktail"));QuestL11ShenTurnIn_defineProperty(this, "penguin",
    external_kolmafia_namespaceObject.Monster.get("Mob Penguin Capo"));QuestL11ShenTurnIn_defineProperty(this, "robor",
    external_kolmafia_namespaceObject.Familiar.get("Robortender"));QuestL11ShenTurnIn_defineProperty(this, "ball",
    external_kolmafia_namespaceObject.Item.get("miniature crystal ball"));}QuestL11ShenTurnIn_createClass(QuestL11ShenTurnIn, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / TurnIn";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return this.haveEffect();
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return this.haveEffect() ? 0 : 1;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 6) {
        return QuestStatus.COMPLETED;
      }

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (status % 2 == 1) {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "needToDeliver", value:

    function needToDeliver() {
      var prop = (0,external_kolmafia_namespaceObject.getProperty)("questL11Shen");

      return prop == "step2" || prop == "step4" || prop == "step6";
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      /*  if (
        getProperty("copperheadClubHazard") != "lantern" ||
        availableAmount(this.cocktail) < 2
      )*/{
        outfit.setItemDrops();
      }

      var usingRobo =
      (0,external_kolmafia_namespaceObject.haveFamiliar)(this.robor) &&
      !(0,external_kolmafia_namespaceObject.isBanished)(this.penguin) &&
      this.toAbsorb.length == 0;

      return {
        location: this.shenClub,
        outfit: outfit,
        familiar: usingRobo ? this.robor : null,
        run: () => {
          if (!this.hittingNC()) {
            if (!this.haveEffect() && (0,external_kolmafia_namespaceObject.availableAmount)(this.disguise) > 0) {
              (0,external_kolmafia_namespaceObject.use)(this.disguise);
            }
          }

          if (usingRobo && (0,external_kolmafia_namespaceObject.availableAmount)(this.ball) > 0) {
            if (
            !currentPredictions().has(this.shenClub) ||
            currentPredictions().get(this.shenClub) == this.penguin)
            {
              (0,external_kolmafia_namespaceObject.equip)(this.ball);
            } else if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.ball) > 0) {
              (0,external_kolmafia_namespaceObject.equip)(external_kolmafia_namespaceObject.Slot.get("familiar"), external_kolmafia_namespaceObject.Item.get("None"));
            }
          } else if (
          this.toAbsorb.length == 0 &&
          DelayBurners.isTryingForDupeableGoblin())
          {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          var props = new PropertyManager();

          try {
            if ((0,external_kolmafia_namespaceObject.getProperty)("copperheadClubHazard") != "lantern") {
              props.setChoice(855, 3); // Light lanterns on fire
            } else {
              props.setChoice(855, 4); // Get unnamed cocktails

              if (this.toAbsorb.length == 0) {
                var ready = DelayBurners.getReadyDelayBurner();

                if (ready != null) {
                  ready.doFightSetup();
                } else {
                  DelayBurners.tryReplaceCombats();
                }
              }
            }

            props.setChoice(1074, 1); // Approach table
            props.setChoice(851, 1); // Sip poison
            props.setChoice(852, 1); // Sip poison
            props.setChoice(853, 1); // Sip poison
            props.setChoice(854, 1); // Sip poison

            var settings = new AdventureSettings();var _iterator = QuestL11ShenTurnIn_createForOfIteratorHelper(

            this.crappyDisguises),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var m = _step.value;
                settings.addNoBanish(m);
              }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

            if ((0,external_kolmafia_namespaceObject.haveFamiliar)(this.robor)) {
              settings.addNoBanish(this.penguin);
            }

            greyAdv(this.shenClub, outfit, settings);

            if (this.haveEffect()) {
              (0,external_kolmafia_namespaceObject.refreshStatus)();

              if (this.haveEffect()) {
                greyAdv(this.shenClub, outfit, settings);
              }
            }
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "hittingNC", value:

    function hittingNC() {
      var turnsSpent = this.shenClub.turnsSpent;
      var nextMeeting = Math.floor(getQuestStatus("questL11Shen") / 2) * 5;

      return turnsSpent > nextMeeting - 1;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.shenClub];
    } }, { key: "haveEffect", value:

    function haveEffect() {
      return (0,external_kolmafia_namespaceObject.haveEffect)(this.crappy) > 0;
    } }]);return QuestL11ShenTurnIn;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Shen.ts
function QuestL11Shen_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Shen_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Shen_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Shen_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Shen_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Shen_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL11Shen = /*#__PURE__*/function () {








  function QuestL11Shen() {QuestL11Shen_classCallCheck(this, QuestL11Shen);QuestL11Shen_defineProperty(this, "shenClub", external_kolmafia_namespaceObject.Location.get("The Copperhead Club"));QuestL11Shen_defineProperty(this, "shenItems", new Map());QuestL11Shen_defineProperty(this, "children", []);
    this.children.push(new QuestL11ShenTurnIn());
    this.children.push(new QuestL11ShenGiants());
    this.children.push(new QuestL11ShenNinja());
    this.children.push(new QuestL11ShenBats());
  }QuestL11Shen_createClass(QuestL11Shen, [{ key: "getLocations", value: function getLocations() {return [];} }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / Meet";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(1074, 1); // Approach table
          props.setChoice(851, 1);

          try {
            greyAdv(this.shenClub);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }]);return QuestL11Shen;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleBowling.ts
function QuestL11TempleBowling_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleBowling_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleBowling_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleBowling_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleBowling_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleBowling_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL11Bowling = /*#__PURE__*/function () {function QuestL11Bowling() {QuestL11TempleBowling_classCallCheck(this, QuestL11Bowling);QuestL11TempleBowling_defineProperty(this, "bowl",
    external_kolmafia_namespaceObject.Item.get("Bowl of Scorpions"));QuestL11TempleBowling_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Hidden Bowling Alley"));QuestL11TempleBowling_defineProperty(this, "bowlingBall",
    external_kolmafia_namespaceObject.Item.get("Bowling Ball"));QuestL11TempleBowling_defineProperty(this, "cosmicBall",
    external_kolmafia_namespaceObject.Item.get("Cosmic Bowling Ball"));QuestL11TempleBowling_defineProperty(this, "goose",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestL11TempleBowling_defineProperty(this, "cosmicBowled",
    "_greyCosmicBowled");QuestL11TempleBowling_defineProperty(this, "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestL11TempleBowling_defineProperty(this, "drunk",
    external_kolmafia_namespaceObject.Monster.get("Drunk pygmy"));QuestL11TempleBowling_defineProperty(this, "book",
    external_kolmafia_namespaceObject.Item.get("Book of matches"));QuestL11TempleBowling_defineProperty(this, "toAbsorb", void 0);}QuestL11TempleBowling_createClass(QuestL11Bowling, [{ key: "hasCosmicBowled", value:


    function hasCosmicBowled() {
      return (0,external_kolmafia_namespaceObject.getProperty)(this.cosmicBowled) == "true";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "ownCosmicBall", value:

    function ownCosmicBall() {
      return (0,external_kolmafia_namespaceObject.getProperty)("hasCosmicBowlingBall") == "true";
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Bowling";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getProgress", value:

    function getProgress() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hiddenBowlingAlleyProgress"));
    } }, { key: "isCosmicBallNextCombat", value:

    function isCosmicBallNextCombat() {
      return (
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cosmicBowlingBallReturnCombats")) <= 0 ||
        (0,external_kolmafia_namespaceObject.availableAmount)(this.cosmicBall) > 0);

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (this.toAbsorb.length > 0 && (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) < 6) {
        return false;
      }

      if (!this.ownCosmicBall()) {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Ultrahydrated"))) {
        return false;
      }

      if (this.status() != QuestStatus.READY) {
        return false;
      }

      if (this.getProgress() != 1 || !this.isCosmicBallNextCombat()) {
        return false;
      }

      return true;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL11Spare");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Worship") != "step3") {
        return QuestStatus.NOT_READY;
      }

      if (!this.barUnlocked() && (0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.bowlingBall) > 0) {
        return QuestStatus.READY;
      }

      // If we don't have nanovision yet
      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision) && !(0,external_kolmafia_namespaceObject.isBanished)(this.drunk)) {
        return QuestStatus.READY;
      }

      // If we have the cosmic ball, but have not bowled yet. Lets delay this until we can definitely score some progress.
      if (
      this.ownCosmicBall() &&
      !this.hasCosmicBowled() &&
      this.getProgress() <= 3 &&
      !this.isCosmicBallNextCombat())
      {
        return QuestStatus.NOT_READY;
      }

      // If we can't skip a drunk, faster later
      if ((0,external_kolmafia_namespaceObject.myMeat)() < 1000 && (0,external_kolmafia_namespaceObject.availableAmount)(this.bowl) == 0) {
        return QuestStatus.FASTER_LATER;
      }

      if (this.getProgress() > 6) {
        throw "Shouldn't be at this point for bowling. Did we cosmic ball late?";
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (this.getProgress() >= 5 && (0,external_kolmafia_namespaceObject.availableAmount)(this.bowlingBall) > 0) {
        outfit.addBonus("+max 0.1 elemental dmg");
      } else {
        outfit.setItemDrops();
      }

      // Banishers
      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var macro = null;
          var couldBeBowling = false;

          if (
          !this.hasCosmicBowled() &&
          this.ownCosmicBall() &&
          this.isCosmicBallNextCombat())
          {
            macro = new Macro().item(this.cosmicBall);
            couldBeBowling = true;

            if ((0,external_kolmafia_namespaceObject.itemAmount)(this.bowlingBall) > 0) {
              (0,external_kolmafia_namespaceObject.putCloset)(this.bowlingBall, (0,external_kolmafia_namespaceObject.availableAmount)(this.bowlingBall));
            }
          } else if ((0,external_kolmafia_namespaceObject.closetAmount)(this.bowlingBall) > 0) {
            (0,external_kolmafia_namespaceObject.takeCloset)(this.bowlingBall, (0,external_kolmafia_namespaceObject.closetAmount)(this.bowlingBall));
          }

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.book) > 0 && !this.barUnlocked()) {
            (0,external_kolmafia_namespaceObject.use)(this.book);
          }

          if ((0,external_kolmafia_namespaceObject.itemAmount)(this.bowlingBall) == 0 && this.barUnlocked()) {
            (0,external_kolmafia_namespaceObject.retrieveItem)(this.bowl);
          }

          var progressPrior = this.getProgress();

          var props = new PropertyManager();
          props.setChoice(788, 1);

          try {
            var settings = new AdventureSettings();
            settings.setStartOfFightMacro(macro);
            settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Pygmy Bowler"));

            if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
              settings.addNoBanish(this.drunk);
            }

            greyAdv(this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }

          if (couldBeBowling && this.getProgress() > progressPrior) {
            (0,external_kolmafia_namespaceObject.setProperty)(this.cosmicBowled, "true");
          }
        } };

    } }, { key: "barUnlocked", value:

    function barUnlocked() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }]);return QuestL11Bowling;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleBusiness.ts
function QuestL11TempleBusiness_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleBusiness_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleBusiness_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleBusiness_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleBusiness_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleBusiness_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11Business = /*#__PURE__*/function () {function QuestL11Business() {QuestL11TempleBusiness_classCallCheck(this, QuestL11Business);QuestL11TempleBusiness_defineProperty(this, "files",
    [
    "McClusky file (page 1)",
    "McClusky file (page 2)",
    "McClusky file (page 3)",
    "McClusky file (page 4)",
    "McClusky file (page 5)"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestL11TempleBusiness_defineProperty(this, "completeFile",
    external_kolmafia_namespaceObject.Item.get("McClusky file (complete)"));QuestL11TempleBusiness_defineProperty(this, "binderClip",
    external_kolmafia_namespaceObject.Item.get("Boring Binder Clip"));QuestL11TempleBusiness_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("the hidden office building"));QuestL11TempleBusiness_defineProperty(this, "apartment",
    external_kolmafia_namespaceObject.Location.get("The Hidden Apartment Building"));QuestL11TempleBusiness_defineProperty(this, "toAbsorb", void 0);}QuestL11TempleBusiness_createClass(QuestL11Business, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / HiddenCity / Accountants";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc, this.apartment];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "delayUntilNextNC", value:

    function delayUntilNextNC() {
      var totalTurns = this.loc.turnsSpent;

      return 4 - (totalTurns - 1) % 5;
    } }, { key: "isDelayBurning", value:

    function isDelayBurning() {
      return (
        this.delayUntilNextNC() > 0 && (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.completeFile) > 0 || this.filesRemaining() == 0));

    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL11Business");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Worship") != "step3") {
        return QuestStatus.NOT_READY;
      }

      if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      // Banish non-accountant?
      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.binderClip) > 0 &&
      this.filesRemaining() > 0 &&
      this.delayUntilNextNC() == 0)
      {
        //
        return {
          location: this.apartment,
          run: () => {
            var props = new PropertyManager();

            props.setChoice(780, 6); // Skip
            var settings = new AdventureSettings().addBanish(
            external_kolmafia_namespaceObject.Monster.get("pygmy witch lawyer"));


            try {
              greyAdv(this.apartment, null, settings);

              this.tryCreate();
            } finally {
              props.resetAll();
            }
          } };

      }

      return {
        location: this.loc,
        run: () => {
          var props = new PropertyManager();

          try {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.completeFile) > 0) {
              props.setChoice(786, 1); // Have complete file, fight
            } else if ((0,external_kolmafia_namespaceObject.availableAmount)(this.binderClip) == 0) {
              props.setChoice(786, 2); // Get binder clip
            } else {
              props.setChoice(786, 3); // Fight accountant
            }

            if (
            (0,external_kolmafia_namespaceObject.availableAmount)(this.completeFile) > 0 &&
            this.filesRemaining() == 0)
            {
              var ready = DelayBurners.getReadyDelayBurner();

              if (ready != null) {
                ready.doFightSetup();
              } else {
                DelayBurners.tryReplaceCombats();
              }
            }

            if (DelayBurners.isTryingForDupeableGoblin()) {
              (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
            }

            var settings = new AdventureSettings().addBanish(
            external_kolmafia_namespaceObject.Monster.get("pygmy headhunter"));


            greyAdv(this.loc, null, settings);

            this.tryCreate();
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "tryCreate", value:

    function tryCreate() {
      if (this.filesRemaining() > 0 || (0,external_kolmafia_namespaceObject.availableAmount)(this.binderClip) == 0) {
        return;
      }

      (0,external_kolmafia_namespaceObject.use)(this.binderClip);
    } }, { key: "filesRemaining", value:

    function filesRemaining() {
      return this.files.reduce((p, v) => ((0,external_kolmafia_namespaceObject.availableAmount)(v) > 0 ? 1 : 0) + p, 0);
    } }, { key: "shouldExploreApartments", value:

    function shouldExploreApartments() {
      return;
    } }]);return QuestL11Business;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleCurses.ts
function QuestL11TempleCurses_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleCurses_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleCurses_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleCurses_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleCurses_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleCurses_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11Curses = /*#__PURE__*/function () {function QuestL11Curses() {QuestL11TempleCurses_classCallCheck(this, QuestL11Curses);QuestL11TempleCurses_defineProperty(this, "curse1",
    external_kolmafia_namespaceObject.Effect.get("Once-Cursed"));QuestL11TempleCurses_defineProperty(this, "curse2",
    external_kolmafia_namespaceObject.Effect.get("Twice-Cursed"));QuestL11TempleCurses_defineProperty(this, "curse3",
    external_kolmafia_namespaceObject.Effect.get("Thrice-Cursed"));QuestL11TempleCurses_defineProperty(this, "apartment",
    external_kolmafia_namespaceObject.Location.get("The Hidden Apartment Building"));QuestL11TempleCurses_defineProperty(this, "toAbsorb", void 0);}QuestL11TempleCurses_createClass(QuestL11Curses, [{ key: "level", value:


    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.apartment];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Curses";
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.curse3) > 9) {
        return false;
      }

      return (
        (0,external_kolmafia_namespaceObject.haveEffect)(this.curse1) +
        (0,external_kolmafia_namespaceObject.haveEffect)(this.curse2) +
        (0,external_kolmafia_namespaceObject.haveEffect)(this.curse3) >
        0);

    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL11Curses");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Worship") != "step3") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hiddenBowlingAlleyProgress")) <= 1) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.curse3) && this.delayForNextNC() == 0) {
        return QuestStatus.READY;
      }

      return QuestStatus.READY;
    } }, { key: "delayForNextNC", value:

    function delayForNextNC() {
      var totalTurns = this.apartment.turnsSpent;

      if (totalTurns < 9) {
        return 8 - totalTurns;
      }

      return 7 - (totalTurns - 9) % 8;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.apartment,
        run: () => {
          var props = new PropertyManager();

          if ((0,external_kolmafia_namespaceObject.haveEffect)(this.curse3)) {
            props.setChoice(780, 1);

            if (this.delayForNextNC() > 0) {
              var ready = DelayBurners.getReadyDelayBurner();

              if (ready != null) {
                ready.doFightSetup();
              } else {
                DelayBurners.tryReplaceCombats();
              }
            }
          } else {
            props.setChoice(780, 2);
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          var settings = new AdventureSettings().addBanish(
          external_kolmafia_namespaceObject.Monster.get("pygmy witch lawyer"));


          try {
            greyAdv(this.apartment, null, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }]);return QuestL11Curses;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleDoctor.ts
function QuestL11TempleDoctor_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11TempleDoctor_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL11TempleDoctor_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11TempleDoctor_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11TempleDoctor_arrayLikeToArray(o, minLen);}function QuestL11TempleDoctor_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL11TempleDoctor_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleDoctor_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleDoctor_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleDoctor_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleDoctor_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleDoctor_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11Doctor = /*#__PURE__*/function () {function QuestL11Doctor() {QuestL11TempleDoctor_classCallCheck(this, QuestL11Doctor);QuestL11TempleDoctor_defineProperty(this, "equips",
    [
    "bloodied surgical dungarees",
    "half-size scalpel",
    "surgical apron",
    "head mirror",
    "surgical mask"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestL11TempleDoctor_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Hidden Hospital"));}QuestL11TempleDoctor_createClass(QuestL11Doctor, [{ key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Doctor";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL11Doctor");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Worship") != "step3") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();var _iterator = QuestL11TempleDoctor_createForOfIteratorHelper(

      this.equips),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if ((0,external_kolmafia_namespaceObject.availableAmount)(i) == 0) {
            continue;
          }

          outfit.addItem(i);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(784, 1);

          try {
            greyAdv(
            this.loc,
            outfit,
            new AdventureSettings().addNoBanish(
            external_kolmafia_namespaceObject.Monster.get("pygmy witch surgeon")));


          } finally {
            props.resetAll();
          }
        } };

    } }]);return QuestL11Doctor;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/QuestL11ShrineVines.ts
function QuestL11ShrineVines_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11ShrineVines_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL11ShrineVines_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11ShrineVines_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11ShrineVines_arrayLikeToArray(o, minLen);}function QuestL11ShrineVines_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL11ShrineVines_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShrineVines_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11ShrineVines_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShrineVines_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShrineVines_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShrineVines_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11ShrineVines = /*#__PURE__*/function () {function QuestL11ShrineVines() {QuestL11ShrineVines_classCallCheck(this, QuestL11ShrineVines);QuestL11ShrineVines_defineProperty(this, "locs",
    [
    [
    "hiddenBowlingAlleyProgress",
    external_kolmafia_namespaceObject.Location.get("An Overgrown Shrine (Southeast)"),
    external_kolmafia_namespaceObject.Item.get("scorched stone sphere"),
    787],

    [
    "hiddenApartmentProgress",
    external_kolmafia_namespaceObject.Location.get("An Overgrown Shrine (Northwest)"),
    external_kolmafia_namespaceObject.Item.get("moss-covered stone sphere"),
    781],

    [
    "hiddenOfficeProgress",
    external_kolmafia_namespaceObject.Location.get("An Overgrown Shrine (Northeast)"),
    external_kolmafia_namespaceObject.Item.get("crackling stone sphere"),
    785],

    [
    "hiddenHospitalProgress",
    external_kolmafia_namespaceObject.Location.get("An Overgrown Shrine (Southwest)"),
    external_kolmafia_namespaceObject.Item.get("dripping stone sphere"),
    783],

    [null, external_kolmafia_namespaceObject.Location.get("A Massive Ziggurat"), null, null]]);QuestL11ShrineVines_defineProperty(this, "machete",

    external_kolmafia_namespaceObject.Item.get("Antique Machete"));}QuestL11ShrineVines_createClass(QuestL11ShrineVines, [{ key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return this.locs.map((l) => l[1]);
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 4) {
        return QuestStatus.COMPLETED;
      }

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (this.shrineNeedsDoing() == null) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.machete) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Vines";
    } }, { key: "lianaCleared", value:

    function lianaCleared(loc) {
      //need to check the combat names due to wanderers
      //we are assuming victory. you could have potentially fought liana without machete and then ran away. but you we are assuming you didn't
      var dense_liana_defeated = 0;
      var area_combats_seen = loc.combatQueue.split("; ");var _iterator = QuestL11ShrineVines_createForOfIteratorHelper(

      area_combats_seen),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var s = _step.value;
          if (s == "dense liana") {
            dense_liana_defeated += 1;
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return dense_liana_defeated > 2;
    } }, { key: "run", value:

    function run() {
      var adv = this.shrineNeedsDoing();
      var outfit;

      if (adv[2]) {
        outfit = new GreyOutfit().addItem(this.machete);
      } else {
        outfit = GreyOutfit.IGNORE_OUTFIT;
      }

      return {
        location: adv[0],
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          if (adv[1] != null) {
            props.setChoice(adv[1], adv[2] ? 1 : 2);
          }

          try {
            greyAdv(adv[0], outfit);
          } finally {
            props.resetAll();
          }
        } };

    }

    // Location, choice adv number, needs to clear vines
  }, { key: "shrineNeedsDoing", value: function shrineNeedsDoing() {var _iterator2 = QuestL11ShrineVines_createForOfIteratorHelper(
      this.locs),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var l = _step2.value;
          if (
          l[0] != null ? (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)(l[0])) <= 0 : !this.lianaCleared(l[1]))
          {
            return [l[1], l[3], true];
          }

          if (l[2] != null && (0,external_kolmafia_namespaceObject.availableAmount)(l[2]) > 0) {
            return [l[1], l[3], false];
          }
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return null;
    } }]);return QuestL11ShrineVines;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/QuestL11HiddenPark.ts
function QuestL11HiddenPark_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11HiddenPark_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11HiddenPark_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11HiddenPark_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11HiddenPark_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11HiddenPark_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL11HiddenPark = /*#__PURE__*/function () {function QuestL11HiddenPark() {QuestL11HiddenPark_classCallCheck(this, QuestL11HiddenPark);QuestL11HiddenPark_defineProperty(this, "matches",
    external_kolmafia_namespaceObject.Item.get("Book of Matches"));QuestL11HiddenPark_defineProperty(this, "sword",
    external_kolmafia_namespaceObject.Item.get("Antique Machete"));QuestL11HiddenPark_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Hidden Park"));QuestL11HiddenPark_defineProperty(this, "book",
    external_kolmafia_namespaceObject.Item.get("Book of matches"));}QuestL11HiddenPark_createClass(QuestL11HiddenPark, [{ key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (!this.needsSword() && this.hasRelocatedJanitors()) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / HiddenPark";
    } }, { key: "hasRelocatedJanitors", value:

    function hasRelocatedJanitors() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("relocatePygmyJanitor")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "barUnlocked", value:

    function barUnlocked() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "needsSword", value:

    function needsSword() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.sword) <= 0;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat().setItemDrops();

      if (
      this.hasRelocatedJanitors() &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.book) == 0 &&
      this.hasRelocatedJanitors())
      {
        outfit.setChampagneBottle();
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          if (!this.hasRelocatedJanitors()) {
            props.setChoice(789, 2);
          } else {
            props.setChoice(789, 1);
          }

          var settings = new AdventureSettings();
          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("pygmy blowgunner"));
          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("pygmy assault squad"));
          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("boaraffe"));

          try {
            greyAdv(this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }]);return QuestL11HiddenPark;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/QuestL11HiddenBookMatches.ts
function QuestL11HiddenBookMatches_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11HiddenBookMatches_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11HiddenBookMatches_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11HiddenBookMatches_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11HiddenBookMatches_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11HiddenBookMatches_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11HiddenBookMatches_setPrototypeOf(subClass, superClass);}function QuestL11HiddenBookMatches_setPrototypeOf(o, p) {QuestL11HiddenBookMatches_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11HiddenBookMatches_setPrototypeOf(o, p);}function QuestL11HiddenBookMatches_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11HiddenBookMatches_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11HiddenBookMatches_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11HiddenBookMatches_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11HiddenBookMatches_possibleConstructorReturn(this, result);};}function QuestL11HiddenBookMatches_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11HiddenBookMatches_assertThisInitialized(self);}function QuestL11HiddenBookMatches_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11HiddenBookMatches_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11HiddenBookMatches_getPrototypeOf(o) {QuestL11HiddenBookMatches_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11HiddenBookMatches_getPrototypeOf(o);}function QuestL11HiddenBookMatches_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL11HiddenBookMatches = /*#__PURE__*/function (_TaskInfo) {QuestL11HiddenBookMatches_inherits(QuestL11HiddenBookMatches, _TaskInfo);var _super = QuestL11HiddenBookMatches_createSuper(QuestL11HiddenBookMatches);function QuestL11HiddenBookMatches() {var _this;QuestL11HiddenBookMatches_classCallCheck(this, QuestL11HiddenBookMatches);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "book",
    external_kolmafia_namespaceObject.Item.get("Book of matches"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "monster",
    external_kolmafia_namespaceObject.Monster.get("pygmy janitor"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "location",
    external_kolmafia_namespaceObject.Location.get("The Hidden Park"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "toAbsorb", void 0);QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "noPull",

    new PossiblePath(5));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "doPull",
    new PossiblePath(0).addConsumablePull(_this.book));return _this;}QuestL11HiddenBookMatches_createClass(QuestL11HiddenBookMatches, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / BookOfMatches";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.noPull, this.doPull];
    } }, { key: "status", value:

    function status() {
      if (this.barUnlocked() || (0,external_kolmafia_namespaceObject.getProperty)("questL11Spare") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL11Worship") < 3) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.book) > 0) {
        return QuestStatus.READY;
      }

      // Might still hit the drop!
      if (
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("relocatePygmyJanitor")) < (0,external_kolmafia_namespaceObject.myAscensions)() &&
      //getProperty("questL11Business") != "finished" ||
      // getProperty("questL11Doctor") != "finished" ||
      (0,external_kolmafia_namespaceObject.getProperty)("questL11Curses") != "finished")
      {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "barUnlocked", value:

    function barUnlocked() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "run", value:

    function run(path) {
      var outfit = new GreyOutfit();

      if (!path.canUse(ResourceCategory.PULL)) {
        outfit.setItemDrops();
        outfit.setPlusCombat();
        outfit.setChampagneBottle();
      } else {
        outfit = GreyOutfit.IGNORE_OUTFIT;
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.book) == 0) {
            if (path.canUse(ResourceCategory.PULL)) {
              GreyPulls.pullBoxOfMatches();
            } else {
              var settings = new AdventureSettings().addNoBanish(this.monster);

              greyAdv(this.location, outfit, settings);
            }
          }

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.book) > 0) {
            (0,external_kolmafia_namespaceObject.use)(this.book);

            if (!this.barUnlocked()) {
              throw "Bar should be unlocked";
            }
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11HiddenBookMatches;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleGrabWool.ts
function QuestL11TempleGrabWool_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleGrabWool_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleGrabWool_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleGrabWool_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleGrabWool_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleGrabWool_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11TempleGrabWool_setPrototypeOf(subClass, superClass);}function QuestL11TempleGrabWool_setPrototypeOf(o, p) {QuestL11TempleGrabWool_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11TempleGrabWool_setPrototypeOf(o, p);}function QuestL11TempleGrabWool_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11TempleGrabWool_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11TempleGrabWool_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11TempleGrabWool_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11TempleGrabWool_possibleConstructorReturn(this, result);};}function QuestL11TempleGrabWool_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11TempleGrabWool_assertThisInitialized(self);}function QuestL11TempleGrabWool_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11TempleGrabWool_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11TempleGrabWool_getPrototypeOf(o) {QuestL11TempleGrabWool_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11TempleGrabWool_getPrototypeOf(o);}function QuestL11TempleGrabWool_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL11TempleGrabWool = /*#__PURE__*/function (_TaskInfo) {QuestL11TempleGrabWool_inherits(QuestL11TempleGrabWool, _TaskInfo);var _super = QuestL11TempleGrabWool_createSuper(QuestL11TempleGrabWool);function QuestL11TempleGrabWool() {var _this;QuestL11TempleGrabWool_classCallCheck(this, QuestL11TempleGrabWool);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "wool",
    external_kolmafia_namespaceObject.Item.get("Stone Wool"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "loc",
    external_kolmafia_namespaceObject.Location.get("The Hidden Temple"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "woolMonster",
    external_kolmafia_namespaceObject.Monster.get("Baa-relief sheep"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "luckyWoolMonster",
    external_kolmafia_namespaceObject.Monster.get("Baa'baa'bu'ran"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "polarPath",
    new PossiblePath(1, 3).add(
    ResourceCategory.POLAR_VORTEX,
    2));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "manual",

    new PossiblePath(2, 8));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "clover",
    new PossiblePath(1).add(ResourceCategory.CLOVER));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "fax",
    new PossiblePath(1).addFax(_this.luckyWoolMonster));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "deck",
    new PossiblePath(0).add(
    ResourceCategory.DECK_OF_EVERY_CARD));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "paths",

    []);return _this;}QuestL11TempleGrabWool_createClass(QuestL11TempleGrabWool, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = []; //[this.clover, this.fax, this.deck];

      var amountNeeded = 2 - (assumeUnstarted ? 0 : (0,external_kolmafia_namespaceObject.availableAmount)(this.wool));

      this.paths.push(new PossiblePath(2, 4 * amountNeeded));
      this.paths.push(
      new PossiblePath(1, 3).add(ResourceCategory.POLAR_VORTEX, amountNeeded));

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Temple / GrabWool";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 1 || (0,external_kolmafia_namespaceObject.availableAmount)(this.wool) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || !this.templeFound()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_namespaceObject.getProperty)("questM16Temple") == "finished";
    } }, { key: "run", value:

    function run(path) {
      var outfit = new GreyOutfit().setItemDrops().setPlusCombat();
      var resource = path.getResource(ResourceCategory.POLAR_VORTEX);

      if (resource != null) {
        resource.prepare(outfit);
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(this.woolMonster);

          if (resource != null) {
            settings.setStartOfFightMacro(
            Macro.if_(this.woolMonster, resource.macro().step(resource.macro())));

          }

          var props = new PropertyManager();
          props.setChoice(580, 1); // Hidden heart of temple
          props.setChoice(583, 1); // Such confusing buttons
          props.setChoice(581, 3); // Fight cave bears
          props.setChoice(579, 2); // Such great heights, grab the nostril

          try {
            greyAdv(this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "shouldGrabWool", value:

    function shouldGrabWool() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.wool) == 0;
    } }]);return QuestL11TempleGrabWool;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleNostril.ts
function QuestL11TempleNostril_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleNostril_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleNostril_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleNostril_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleNostril_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleNostril_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11TempleNostril = /*#__PURE__*/function () {function QuestL11TempleNostril() {QuestL11TempleNostril_classCallCheck(this, QuestL11TempleNostril);QuestL11TempleNostril_defineProperty(this, "wool",
    external_kolmafia_namespaceObject.Item.get("Stone Wool"));QuestL11TempleNostril_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Hidden Temple"));QuestL11TempleNostril_defineProperty(this, "nostril",
    external_kolmafia_namespaceObject.Item.get("The Nostril of the Serpent"));QuestL11TempleNostril_defineProperty(this, "choices", void 0);}QuestL11TempleNostril_createClass(QuestL11TempleNostril, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / Temple / Nostril";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_namespaceObject.getProperty)("questM16Temple") == "finished";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.nostril) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || !this.templeFound()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.wool) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.use)(this.wool);

          this.runTempleChoices();

          greyAdv(
          external_kolmafia_namespaceObject.Location.get("The Hidden Temple"),
          null,
          new AdventureSettings().setChoices(this.choices));

        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "runTempleChoices", value:

    function runTempleChoices() {
      this.choices = new TempleChoices();

      this.choices.runChoice(582, 1); // Grab nostril
      this.choices.runChoice(579, 2); // Grab nostil
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 4;
    } }]);return QuestL11TempleNostril;}();var


TempleChoices = /*#__PURE__*/function () {function TempleChoices() {QuestL11TempleNostril_classCallCheck(this, TempleChoices);QuestL11TempleNostril_defineProperty(this, "choices",
    []);}QuestL11TempleNostril_createClass(TempleChoices, [{ key: "calledOutOfScopeChoiceBehavior", value:

    function calledOutOfScopeChoiceBehavior(choiceNo) {
      return false;
    } }, { key: "runChoice", value:

    function runChoice(choiceNo, choicePick) {
      this.choices.push([choiceNo, choicePick]);
    } }, { key: "handleChoice", value:

    function handleChoice(choiceNo) {
      if (this.choices.length == 0) {
        throw "Expected to be handling a choice but uh, wasn't";
      }

      if (this.choices[0][0] != choiceNo) {
        throw (
          "Expected to be in choice " +
          this.choices[0][0] +
          " but instead was in choice " +
          choiceNo);

      }

      var toReturn = this.choices[0][1];
      this.choices.splice(0, 1);

      return toReturn;
    } }]);return TempleChoices;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleUnlock.ts
function QuestL11TempleUnlock_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleUnlock_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleUnlock_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleUnlock_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleUnlock_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleUnlock_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var QuestL11TempleUnlock = /*#__PURE__*/function () {function QuestL11TempleUnlock() {QuestL11TempleUnlock_classCallCheck(this, QuestL11TempleUnlock);QuestL11TempleUnlock_defineProperty(this, "coin",
    external_kolmafia_namespaceObject.Item.get("Tree-holed coin"));QuestL11TempleUnlock_defineProperty(this, "map",
    external_kolmafia_namespaceObject.Item.get("Spooky Temple Map"));QuestL11TempleUnlock_defineProperty(this, "fertilizer",
    external_kolmafia_namespaceObject.Item.get("Spooky-Gro Fertilizer"));QuestL11TempleUnlock_defineProperty(this, "sapling",
    external_kolmafia_namespaceObject.Item.get("Spooky Sapling"));QuestL11TempleUnlock_defineProperty(this, "spookyLoc",
    external_kolmafia_namespaceObject.Location.get("The Spooky Forest"));QuestL11TempleUnlock_defineProperty(this, "choices", void 0);QuestL11TempleUnlock_defineProperty(this, "latte",

    external_kolmafia_namespaceObject.Item.get("Latte lovers member's mug"));QuestL11TempleUnlock_defineProperty(this, "toAbsorb", void 0);}QuestL11TempleUnlock_createClass(QuestL11TempleUnlock, [{ key: "shouldWearLatte", value:


    function shouldWearLatte() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.FAMILIAR_WEIGHT));

    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Temple / Unlock";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if (this.templeFound()) {
        return QuestStatus.COMPLETED;
      }

      if (isGhostBustingTime(this.spookyLoc)) {
        if (shouldAvoidGhosts()) {
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.READY;
      }

      if (!hasNonCombatSkillsReady(false) && (0,external_kolmafia_namespaceObject.myLevel)() >= 5) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady(true)) {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questM16Temple") == "unstarted") {
        //   return QuestStatus.NOT_READY;
      }

      if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_namespaceObject.getProperty)("questM16Temple") == "finished";
    } }, { key: "tryUnlockTemple", value:

    function tryUnlockTemple() {
      if (
      (0,external_kolmafia_namespaceObject.itemAmount)(this.sapling) == 0 ||
      (0,external_kolmafia_namespaceObject.itemAmount)(this.fertilizer) == 0 ||
      (0,external_kolmafia_namespaceObject.itemAmount)(this.map) == 0)
      {
        return;
      }

      (0,external_kolmafia_namespaceObject.use)(this.map);
    } }, { key: "runSpookyChoices", value:

    function runSpookyChoices() {
      this.choices = new QuestL11TempleUnlock_TempleChoices();

      if ((0,external_kolmafia_namespaceObject.itemAmount)(this.coin) == 0 && (0,external_kolmafia_namespaceObject.itemAmount)(this.map) == 0) {
        this.choices.runChoice(502, 2);
        this.choices.runChoice(505, 2);
      } else if ((0,external_kolmafia_namespaceObject.itemAmount)(this.map) == 0) {
        this.choices.runChoice(502, 3);
        this.choices.runChoice(506, 3);
        this.choices.runChoice(507, 1);
      } else if ((0,external_kolmafia_namespaceObject.itemAmount)(this.fertilizer) == 0) {
        this.choices.runChoice(502, 3);
        this.choices.runChoice(506, 3);
        this.choices.runChoice(506, 2);
      } else if ((0,external_kolmafia_namespaceObject.itemAmount)(this.sapling) == 0) {
        this.choices.runChoice(502, 1);
        this.choices.runChoice(503, 3);

        // Sell skins
        if ((0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get("bar skin")) > 1) {
          this.choices.runChoice(504, 2);
        } else if ((0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get("bar skin")) > 0) {
          this.choices.runChoice(504, 1);
        }

        this.choices.runChoice(504, 3);
        this.choices.runChoice(504, 4);
      }
    } }, { key: "isDelayBurning", value:

    function isDelayBurning() {
      return this.spookyLoc.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return isGhostBustingTime(this.spookyLoc);
    } }, { key: "run", value:

    function run() {
      var outfit = isGhostBustingTime(this.spookyLoc) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      if (this.spookyLoc.turnsSpent >= 5) {
        outfit.setNoCombat();
      }

      return {
        location: this.spookyLoc,
        outfit: outfit,
        run: () => {
          this.tryUnlockTemple();

          if (this.templeFound()) {
            return;
          }

          var settings = new AdventureSettings().setChoices(this.choices);

          if (isGhostBustingTime(this.spookyLoc)) {
            settings.setStartOfFightMacro(getGhostBustingMacro());
          } else if (!this.shouldWearLatte() && this.toAbsorb.length == 0) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            } else if (hasNonCombatSkillsReady()) {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          this.runSpookyChoices();

          greyAdv(this.spookyLoc, outfit, settings);

          this.tryUnlockTemple();
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.spookyLoc];
    } }]);return QuestL11TempleUnlock;}();var


QuestL11TempleUnlock_TempleChoices = /*#__PURE__*/function () {function TempleChoices() {QuestL11TempleUnlock_classCallCheck(this, TempleChoices);QuestL11TempleUnlock_defineProperty(this, "choices",
    []);}QuestL11TempleUnlock_createClass(TempleChoices, [{ key: "calledOutOfScopeChoiceBehavior", value:

    function calledOutOfScopeChoiceBehavior(choiceNo) {
      return false;
    } }, { key: "runChoice", value:

    function runChoice(choiceNo, choicePick) {
      this.choices.push([choiceNo, choicePick]);
    } }, { key: "handleChoice", value:

    function handleChoice(choiceNo) {
      if (this.choices.length == 0) {
        throw "Expected to be handling a choice but uh, wasn't";
      }

      if (this.choices[0][0] != choiceNo) {
        throw (
          "Expected to be in choice " +
          this.choices[0][0] +
          " but instead was in choice " +
          choiceNo);

      }

      var toReturn = this.choices[0][1];
      this.choices.splice(0, 1);

      return toReturn;
    } }]);return TempleChoices;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleHiddenCity.ts
function QuestL11TempleHiddenCity_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleHiddenCity_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11TempleHiddenCity_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleHiddenCity_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleHiddenCity_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleHiddenCity_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL11TempleHiddenCity = /*#__PURE__*/function () {function QuestL11TempleHiddenCity() {QuestL11TempleHiddenCity_classCallCheck(this, QuestL11TempleHiddenCity);QuestL11TempleHiddenCity_defineProperty(this, "wool",
    external_kolmafia_namespaceObject.Item.get("Stone Wool"));QuestL11TempleHiddenCity_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Hidden Temple"));QuestL11TempleHiddenCity_defineProperty(this, "nostril",
    external_kolmafia_namespaceObject.Item.get("The Nostril of the Serpent"));QuestL11TempleHiddenCity_defineProperty(this, "choices", void 0);}QuestL11TempleHiddenCity_createClass(QuestL11TempleHiddenCity, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / Temple / HiddenCity";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || !this.templeFound()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.wool) == 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.nostril) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_namespaceObject.getProperty)("questM16Temple") == "finished";
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.use)(this.wool);

          this.runTempleChoices();

          greyAdv(
          external_kolmafia_namespaceObject.Location.get("The Hidden Temple"),
          null,
          new AdventureSettings().setChoices(this.choices));

        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "runTempleChoices", value:

    function runTempleChoices() {
      this.choices = new QuestL11TempleHiddenCity_TempleChoices();

      this.choices.runChoice(582, 2);
      this.choices.runChoice(580, 2);
      this.choices.runChoice(584, 4);
      this.choices.runChoice(580, 1);
      this.choices.runChoice(123, 2); // Go to puzzle
      // Script should run the banana solver
      this.choices.runChoice(125, 3); // Unlock city
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 4;
    } }]);return QuestL11TempleHiddenCity;}();var


QuestL11TempleHiddenCity_TempleChoices = /*#__PURE__*/function () {function TempleChoices() {QuestL11TempleHiddenCity_classCallCheck(this, TempleChoices);QuestL11TempleHiddenCity_defineProperty(this, "choices",
    []);}QuestL11TempleHiddenCity_createClass(TempleChoices, [{ key: "calledOutOfScopeChoiceBehavior", value:

    function calledOutOfScopeChoiceBehavior(choiceNo) {
      (0,external_kolmafia_namespaceObject.print)("Temple now has choice: " + choiceNo);
      if (choiceNo != 0) {
        return false;
      }

      //   let url = "choice.php?pwd=&whichchoice=" + 123 + "&option=" + 2;
      // visitUrl(url);
      (0,external_kolmafia_namespaceObject.cliExecute)("dvorak"); // Solve puzzle
    } }, { key: "runChoice", value:

    function runChoice(choiceNo, choicePick) {
      this.choices.push([choiceNo, choicePick]);
    } }, { key: "handleChoice", value:

    function handleChoice(choiceNo) {
      if (this.choices.length == 0) {
        throw "Expected to be handling a choice but uh, wasn't";
      }

      if (this.choices[0][0] != choiceNo) {
        throw (
          "Expected to be in choice " +
          this.choices[0][0] +
          " but instead was in choice " +
          choiceNo);

      }

      var toReturn = this.choices[0][1];
      this.choices.splice(0, 1);

      return toReturn;
    } }]);return TempleChoices;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Temple.ts
function QuestL11Temple_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Temple_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11Temple_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Temple_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Temple_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Temple_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


















var QuestL11Temple = /*#__PURE__*/function () {


  function QuestL11Temple() {QuestL11Temple_classCallCheck(this, QuestL11Temple);QuestL11Temple_defineProperty(this, "buildings", []);
    this.buildings.push(new QuestL11Bowling());
    this.buildings.push(new QuestL11Curses());
    this.buildings.push(new QuestL11Business());
    this.buildings.push(new QuestL11Doctor());
    this.buildings.push(new QuestL11HiddenBookMatches());
    this.buildings.push(new QuestL11ShrineVines());
    this.buildings.push(new QuestL11TempleGrabWool());
    this.buildings.push(new QuestL11TempleNostril());
    this.buildings.push(new QuestL11TempleUnlock());
    this.buildings.push(new QuestL11TempleHiddenCity());
    this.buildings.push(new QuestL11HiddenPark());
  }QuestL11Temple_createClass(QuestL11Temple, [{ key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Boss";
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 13;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.buildings;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL11Worship");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11MacGuffin") != "step2") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questM16Temple") == "unstarted" || this.bossReady()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {
      if (this.bossReady()) {
        return this.fightBoss();
      }

      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=woods&action=woods_dakota_anim");
        } };

    } }, { key: "bossReady", value:

    function bossReady() {
      return (0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get("stone triangle")) >= 4;
    } }, { key: "fightBoss", value:

    function fightBoss() {
      return {
        location: external_kolmafia_namespaceObject.Location.get("A Massive Ziggurat"),
        run: () => {
          var props = new PropertyManager();
          props.setChoice(791, 1);

          try {
            greyAdv(external_kolmafia_namespaceObject.Location.get("A Massive Ziggurat"));
          } finally {
            props.resetAll();
          }
        } };

    } }]);return QuestL11Temple;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11VacationAccess.ts
function QuestL11VacationAccess_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11VacationAccess_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11VacationAccess_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11VacationAccess_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11VacationAccess_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}



var QuestL11ShoreAccess = /*#__PURE__*/function () {function QuestL11ShoreAccess() {QuestL11VacationAccess_classCallCheck(this, QuestL11ShoreAccess);}QuestL11VacationAccess_createClass(QuestL11ShoreAccess, [{ key: "getId", value:
    function getId() {
      return "Council / MacGruffin / Shore";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastDesertUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)()) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() < 6000 || (0,external_kolmafia_namespaceObject.knollAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.buy)(external_kolmafia_namespaceObject.Item.get("Desert Bus pass"));

          if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_namespaceObject.myAscensions)()) {
            throw "Expected desert access";
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11ShoreAccess;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL11MacGruffin.ts
function QuestL11MacGruffin_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11MacGruffin_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11MacGruffin_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11MacGruffin_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11MacGruffin_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11MacGruffin_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}














var QuestL11MacGruffin = /*#__PURE__*/function () {





  function QuestL11MacGruffin() {QuestL11MacGruffin_classCallCheck(this, QuestL11MacGruffin);QuestL11MacGruffin_defineProperty(this, "questInfo", []);QuestL11MacGruffin_defineProperty(this, "forged", external_kolmafia_namespaceObject.Item.get("Forged Identification Documents"));QuestL11MacGruffin_defineProperty(this, "diary", external_kolmafia_namespaceObject.Item.get("Your Father's Macguffin Diary"));QuestL11MacGruffin_defineProperty(this, "holidaySale", external_kolmafia_namespaceObject.Item.get("post-holiday sale coupon"));
    // Register the subquests
    this.questInfo.push(new QuestL11ShoreAccess());
    this.questInfo.push(new QuestL11Black());
    this.questInfo.push(new QuestL11Palin());
    this.questInfo.push(new QuestL11Shen());
    this.questInfo.push(new QuestL11Desert());
    this.questInfo.push(new QuestL11Manor());
    this.questInfo.push(new QuestL11Pyramid());
    this.questInfo.push(new QuestL11Ron());
    this.questInfo.push(new QuestL11Temple());
  }QuestL11MacGruffin_createClass(QuestL11MacGruffin, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Black") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("questL11Black") != "step2" ||
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_namespaceObject.myAscensions)())
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() <= 6000) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.questInfo;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Vacation";
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.diary) == 0) {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.forged) == 0) {
              // 10% off coupon from pantsgiving
              if ((0,external_kolmafia_namespaceObject.availableAmount)(this.holidaySale) > 0) {
                (0,external_kolmafia_namespaceObject.use)(this.holidaySale);
              }

              (0,external_kolmafia_namespaceObject.retrieveItem)(this.forged);
            }

            var props = new PropertyManager();

            try {
              props.setChoice(793, 1);

              greyAdv(external_kolmafia_namespaceObject.Location.get("The Shore, Inc. Travel Agency"));
            } finally {
              props.resetAll();
            }
          }

          (0,external_kolmafia_namespaceObject.use)(this.diary);
        } };

    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 3;
    } }]);return QuestL11MacGruffin;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12Battlefield.ts
function QuestL12Battlefield_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12Battlefield_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12Battlefield_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12Battlefield_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12Battlefield_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12Battlefield_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL12Battlefield = /*#__PURE__*/function () {function QuestL12Battlefield() {QuestL12Battlefield_classCallCheck(this, QuestL12Battlefield);QuestL12Battlefield_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Battlefield (Frat Uniform)"));QuestL12Battlefield_defineProperty(this, "pole",
    external_kolmafia_namespaceObject.Item.get("eleven-foot pole"));QuestL12Battlefield_defineProperty(this, "ring",
    external_kolmafia_namespaceObject.Item.get("ring of Detect Boring Doors"));QuestL12Battlefield_defineProperty(this, "picklocks",
    external_kolmafia_namespaceObject.Item.get("Pick-O-Matic lockpicks"));QuestL12Battlefield_defineProperty(this, "gelCube",
    external_kolmafia_namespaceObject.Familiar.get("Gelatinous Cubeling"));QuestL12Battlefield_defineProperty(this, "jellyfish",
    external_kolmafia_namespaceObject.Familiar.get("Space Jellyfish"));QuestL12Battlefield_defineProperty(this, "goose",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestL12Battlefield_defineProperty(this, "orchadAt",
    64);QuestL12Battlefield_defineProperty(this, "nunsAt",
    192);}QuestL12Battlefield_createClass(QuestL12Battlefield, [{ key: "level", value:

    function level() {
      return 12;
    } }, { key: "getDefeatedEachTurn", value:

    function getDefeatedEachTurn() {
      var defeated = 1;

      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestArenaCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestJunkyardCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestJunkyardCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestNunsCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestOrchardCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestFarmCompleted") == "fratboy") {
        defeated *= 2;
      }

      return defeated;
    } }, { key: "status", value:

    function status() {
      if (
      !this.isArenaDone() ||
      !this.isLobsterDone() ||
      !this.isGremlinsDone())
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") == "finished") {
        return QuestStatus.COMPLETED;
      }

      var defeated = this.getHippiesDefeated();

      if (defeated >= 64 && !this.isFilthyDone()) {
        return QuestStatus.NOT_READY;
      }

      if (defeated >= 192 && !this.isNunsDone()) {
        return QuestStatus.NOT_READY;
      }

      if (defeated >= 1000) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Battlefield";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("Beer Helmet"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("distressed denim pants"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("bejeweled pledge pin"));

      var fam = null;

      if (
      (0,external_kolmafia_namespaceObject.haveFamiliar)(this.gelCube) &&
      !GreySettings.shouldAvoidTowerRequirements() && (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.pole) == 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.ring) == 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.picklocks) == 0))
      {
        fam = this.gelCube;
      } else if (
      (0,external_kolmafia_namespaceObject.haveFamiliar)(this.jellyfish) && (
      !GreySettings.greyPrepareLevelingResources ||
      (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 20 ||
      AbsorbsProvider.remainingAdvAbsorbs == null ||
      AbsorbsProvider.remainingAdvAbsorbs.length > 3))
      {
        fam = this.jellyfish;
      }

      return {
        outfit: outfit,
        location: this.loc,
        familiar: fam,
        disableFamOverride: fam == this.gelCube,
        run: () => {
          var burner = DelayBurners.getReadyDelayBurner();

          if (burner != null) {
            burner.doFightSetup();
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(fam);
          }

          greyAdv(this.loc, outfit);

          var turns = Math.ceil(
          (1000 - this.getHippiesDefeated()) / this.getDefeatedEachTurn());


          if (turns > 0) {
            (0,external_kolmafia_namespaceObject.print)("".concat(
            turns, " turn").concat(
            turns == 1 ? "" : "s", " until the battlefield is cleared at current sidequest completion."),

            "blue");

          } else {
            (0,external_kolmafia_namespaceObject.print)(
            "Battlefield has been cleared! Hipster boss spotted eating BBQ'd sushi before it's cool! This enrages you!",
            "blue");

          }
        } };

    } }, { key: "getHippiesDefeated", value:

    function getHippiesDefeated() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hippiesDefeated"));
    } }, { key: "isGremlinsDone", value:

    function isGremlinsDone() {
      return (0,external_kolmafia_namespaceObject.getProperty)("sidequestJunkyardCompleted") != "none";
    } }, { key: "isArenaDone", value:

    function isArenaDone() {
      return (0,external_kolmafia_namespaceObject.getProperty)("sidequestArenaCompleted") != "none";
    } }, { key: "isLobsterDone", value:

    function isLobsterDone() {
      return (0,external_kolmafia_namespaceObject.getProperty)("sidequestLighthouseCompleted") != "none";
    } }, { key: "isFilthyDone", value:

    function isFilthyDone() {
      return (0,external_kolmafia_namespaceObject.getProperty)("sidequestOrchardCompleted") != "none";
    } }, { key: "isNunsDone", value:

    function isNunsDone() {
      return (0,external_kolmafia_namespaceObject.getProperty)("sidequestNunsCompleted") != "none";
    } }]);return QuestL12Battlefield;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12FratOutfit.ts
function QuestL12FratOutfit_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12FratOutfit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL12FratOutfit_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12FratOutfit_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12FratOutfit_arrayLikeToArray(o, minLen);}function QuestL12FratOutfit_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL12FratOutfit_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12FratOutfit_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12FratOutfit_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12FratOutfit_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12FratOutfit_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12FratOutfit_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL12FratOutfit_setPrototypeOf(subClass, superClass);}function QuestL12FratOutfit_setPrototypeOf(o, p) {QuestL12FratOutfit_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL12FratOutfit_setPrototypeOf(o, p);}function QuestL12FratOutfit_createSuper(Derived) {var hasNativeReflectConstruct = QuestL12FratOutfit_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL12FratOutfit_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL12FratOutfit_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL12FratOutfit_possibleConstructorReturn(this, result);};}function QuestL12FratOutfit_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL12FratOutfit_assertThisInitialized(self);}function QuestL12FratOutfit_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL12FratOutfit_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL12FratOutfit_getPrototypeOf(o) {QuestL12FratOutfit_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL12FratOutfit_getPrototypeOf(o);}function QuestL12FratOutfit_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestL12FratOutfit = /*#__PURE__*/function (_TaskInfo) {QuestL12FratOutfit_inherits(QuestL12FratOutfit, _TaskInfo);var _super = QuestL12FratOutfit_createSuper(QuestL12FratOutfit);

















  function QuestL12FratOutfit() {var _this;QuestL12FratOutfit_classCallCheck(this, QuestL12FratOutfit);
    _this = _super.call(this);QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "fratBoySpy", external_kolmafia_namespaceObject.Monster.get("Orcish Frat Boy Spy"));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "hippyDisguise", "Filthy Hippy Disguise");QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "fratDisguise", "Frat Warrior Fatigues");QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "taskFaxYR", new PossiblePath(1).addFax(_this.fratBoySpy).add(ResourceCategory.YELLOW_RAY));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "pullTask", new PossiblePath(0));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "hippiesTask", new PossiblePath(6, 14).add(ResourceCategory.YELLOW_RAY).add(ResourceCategory.YELLOW_RAY));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "hippiesFratTask", new PossiblePath(12, 22).add(ResourceCategory.YELLOW_RAY));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "hippiesTaskManual", new PossiblePath(20));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "hippyCamp", external_kolmafia_namespaceObject.Location.get("Hippy Camp"));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "fratCamp", external_kolmafia_namespaceObject.Location.get("Wartime Frat House (Hippy Disguise)"));return _this;
  }QuestL12FratOutfit_createClass(QuestL12FratOutfit, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.pullTask = new PossiblePath(0);var _iterator = QuestL12FratOutfit_createForOfIteratorHelper(

      (0,external_kolmafia_namespaceObject.outfitPieces)(this.fratDisguise)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var item = _step.value;
          if ((0,external_kolmafia_namespaceObject.availableAmount)(item) > 0 && !assumeUnstarted) {
            continue;
          }

          this.pullTask.addPull(item);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [
      this.taskFaxYR,
      this.pullTask,
      this.hippiesTask,
      this.hippiesTaskManual,
      this.hippiesFratTask];

    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Frat Outfit";
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_namespaceObject.haveOutfit)(this.fratDisguise)) {
        return QuestStatus.COMPLETED;
      }

      if (path == null || path.canUse(ResourceCategory.PULL)) {
        return QuestStatus.READY;
      }

      if (
      path.canUse(ResourceCategory.YELLOW_RAY) &&
      !path.getResource(ResourceCategory.YELLOW_RAY).ready())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      if (path.canUse(ResourceCategory.PULL)) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            GreyPulls.pullFratWarOutfit();
          } };

      }

      var outfit = new GreyOutfit();

      var grabbingFratOutfit = (0,external_kolmafia_namespaceObject.haveOutfit)(this.hippyDisguise);

      if (path.canUse(ResourceCategory.FAXER)) {
        path.getResource(ResourceCategory.FAXER).prepare(outfit);
      } else if (
      !path.canUse(ResourceCategory.CARGO_SHORTS) &&
      grabbingFratOutfit)
      {
        outfit.addBonus("+outfit " + this.hippyDisguise);
        outfit.setPlusCombat(); // Adventuring for it
      }

      var yellowRay = path.getResource(ResourceCategory.YELLOW_RAY);

      if (yellowRay != null) {
        yellowRay.prepare(outfit);
      } else {
        outfit.setItemDrops();
      }

      return {
        location: null,
        outfit: outfit,
        run: () => {
          if (
          path.canUse(ResourceCategory.FAXER) ||
          path.canUse(ResourceCategory.CARGO_SHORTS))
          {
            this.runFaxFight(path);
            return;
          }

          if (grabbingFratOutfit && !(0,external_kolmafia_namespaceObject.isWearingOutfit)(this.hippyDisguise)) {
            throw "Expected to be dressed like a grubby hippy";
          }

          if (!grabbingFratOutfit) {
            greyAdv(this.hippyCamp, outfit);
            return;
          }

          var props = new PropertyManager();
          props.setChoice(143, 3); // Fight
          props.setChoice(144, 3); // Fight
          props.setChoice(145, 2); // Items
          props.setChoice(146, 2); // Items

          try {
            var settings = new AdventureSettings();

            if (yellowRay != null) {
              yellowRay.prepare(null, props);
              settings.setStartOfFightMacro(
              Macro.if_("monstername Hippy", yellowRay.macro()));

              settings.setStartOfFightMacro(
              Macro.if_("monstername War Pledge", yellowRay.macro()));

              settings.setStartOfFightMacro(
              Macro.if_(
              "monstername Frat Warrior drill sergeant",
              yellowRay.macro()));


            }

            greyAdv(this.fratCamp, outfit, settings);
          } catch (_unused) {
            props.resetAll();
          }

          path.addUsed(ResourceCategory.FAXER);
          path.addUsed(ResourceCategory.YELLOW_RAY);
        } };

    } }, { key: "runFaxFight", value:

    function runFaxFight(path) {
      var props = new PropertyManager();

      try {
        var yr = path.getResource(ResourceCategory.YELLOW_RAY);
        yr.prepare(null, props);

        var attackResource = path.getResource(ResourceCategory.FAXER);

        if (attackResource != null) {
          attackResource.fax(this.fratBoySpy);
        } else {
          path.getResource(ResourceCategory.CARGO_SHORTS).pocket(568);
        }

        if ((0,external_kolmafia_namespaceObject.currentRound)() == 0) {
          throw "Expected to be in combat!";
        }

        path.getResource(ResourceCategory.YELLOW_RAY).macro().submit();

        if ((0,external_kolmafia_namespaceObject.currentRound)() != 0 || (0,external_kolmafia_namespaceObject.handlingChoice)()) {
          throw "Expected to have finished combat!";
        }

        if (!(0,external_kolmafia_namespaceObject.haveOutfit)("Frat Warrior Fatigues")) {
          throw "Expected to have outfit!";
        }
      } finally {
        props.resetAll();
      }
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL12FratOutfit;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12Nuns.ts
function QuestL12Nuns_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12Nuns_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12Nuns_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12Nuns_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12Nuns_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12Nuns_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var Quest12WarNuns = /*#__PURE__*/function () {function Quest12WarNuns() {QuestL12Nuns_classCallCheck(this, Quest12WarNuns);QuestL12Nuns_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Themthar Hills"));QuestL12Nuns_defineProperty(this, "lep",
    external_kolmafia_namespaceObject.Familiar.get("Leprechaun"));QuestL12Nuns_defineProperty(this, "hobo",
    external_kolmafia_namespaceObject.Familiar.get("Hobo Monkey"));QuestL12Nuns_defineProperty(this, "robor",
    external_kolmafia_namespaceObject.Familiar.get("Robortender"));QuestL12Nuns_defineProperty(this, "hotness",
    external_kolmafia_namespaceObject.Item.get("Mick's IcyVapoHotness Inhaler"));QuestL12Nuns_defineProperty(this, "effect",
    (0,external_kolmafia_namespaceObject.effectModifier)(this.hotness, "Effect"));QuestL12Nuns_defineProperty(this, "winkles",
    external_kolmafia_namespaceObject.Effect.get("Winklered"));QuestL12Nuns_defineProperty(this, "bowlStraightUp",
    external_kolmafia_namespaceObject.Effect.get("Cosmic Ball in the Air"));QuestL12Nuns_defineProperty(this, "cosmicBall",
    external_kolmafia_namespaceObject.Item.get("Cosmic Bowling Ball"));QuestL12Nuns_defineProperty(this, "asdonMartin",
    external_kolmafia_namespaceObject.Item.get("Asdon Martin keyfob"));QuestL12Nuns_defineProperty(this, "driving",
    external_kolmafia_namespaceObject.Effect.get("Driving Observantly"));QuestL12Nuns_defineProperty(this, "savingsBond",
    external_kolmafia_namespaceObject.Item.get("Savings bond"));QuestL12Nuns_defineProperty(this, "fishHead",

    external_kolmafia_namespaceObject.Item.get("Fish Head"));QuestL12Nuns_defineProperty(this, "boxedWine",
    external_kolmafia_namespaceObject.Item.get("Boxed Wine"));QuestL12Nuns_defineProperty(this, "piscatini",
    external_kolmafia_namespaceObject.Item.get("Piscatini"));QuestL12Nuns_defineProperty(this, "grapefruit",
    external_kolmafia_namespaceObject.Item.get("Grapefruit"));QuestL12Nuns_defineProperty(this, "driveby",
    external_kolmafia_namespaceObject.Item.get("Drive-by shooting"));QuestL12Nuns_defineProperty(this, "grapes",
    external_kolmafia_namespaceObject.Item.get("Bunch of square grapes"));QuestL12Nuns_defineProperty(this, "roborDrinks",

    [this.fishHead, this.piscatini, this.driveby]);}QuestL12Nuns_createClass(Quest12WarNuns, [{ key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "hasMeatBooze", value:

    function hasMeatBooze() {
      return this.roborDrinks.find((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) > 0) != null;
    } }, { key: "hasDrunkMeat", value:

    function hasDrunkMeat() {
      return (0,external_kolmafia_namespaceObject.getProperty)("_roboDrinks").includes("drive-by shooting");
    } }, { key: "getFamiliarToUse", value:

    function getFamiliarToUse(allownNull) {
      if (
      (0,external_kolmafia_namespaceObject.haveFamiliar)(this.robor) && (
      this.hasMeatBooze() || this.hasDrunkMeat()))
      {
        return this.robor;
      }

      if (allownNull) {
        return null;
      }

      return (0,external_kolmafia_namespaceObject.haveFamiliar)(this.hobo) ?
      this.hobo :
      (0,external_kolmafia_namespaceObject.haveFamiliar)(this.lep) ?
      this.lep :
      null;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      var toLevel = this.getFamiliarToUse(true);

      if (toLevel != null && (0,external_kolmafia_namespaceObject.familiarWeight)(toLevel) < 20) {
        return toLevel;
      }

      return null;
    } }, { key: "doRoboDrinks", value:

    function doRoboDrinks() {
      if (
      !(0,external_kolmafia_namespaceObject.haveFamiliar)(this.robor) ||
      this.hasDrunkMeat() ||
      !this.hasMeatBooze())
      {
        return;
      }

      // If no driveby on hand
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.driveby) == 0) {
        // If no way to get grapefruit
        if (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.grapefruit) == 0 &&
        (0,external_kolmafia_namespaceObject.getProperty)("sidequestOrchardCompleted") == "none")
        {
          return;
        }

        // If we need pisc
        if ((0,external_kolmafia_namespaceObject.availableAmount)(this.piscatini) == 0) {
          // If we can't make pisc
          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.fishHead) == 0 ||
          (0,external_kolmafia_namespaceObject.availableAmount)(this.boxedWine) == 0)
          {
            return;
          }
        }
      }

      // Now check if we can make this

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.driveby) == 0) {
        (0,external_kolmafia_namespaceObject.cliExecute)("create " + this.driveby.name);
      }

      (0,external_kolmafia_namespaceObject.useFamiliar)(this.robor);
      (0,external_kolmafia_namespaceObject.cliExecute)("robo drive-by shooting");
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Nuns";
    } }, { key: "isBowlingBallNextCombat", value:

    function isBowlingBallNextCombat() {
      return (
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cosmicBowlingBallReturnCombats")) <= 0 ||
        (0,external_kolmafia_namespaceObject.availableAmount)(this.cosmicBall) > 0);

    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestNunsCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      this.doRoboDrinks();

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("warProgress") != "started" ||
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hippiesDefeated")) < 192)
      {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Financial Spreadsheets"))) {
        return QuestStatus.FASTER_LATER;
      }

      if (
      !this.mustBeDone() &&
      (0,external_kolmafia_namespaceObject.getProperty)("hasCosmicBowlingBall") == "true" &&
      !(0,external_kolmafia_namespaceObject.haveEffect)(this.bowlStraightUp) &&
      !this.isBowlingBallNextCombat())
      {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("Beer Helmet"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("distressed denim pants"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("bejeweled pledge pin"));
      outfit.meatDropWeight = 10;

      return {
        familiar: this.getFamiliarToUse(false),
        location: this.loc,
        outfit: outfit,
        disableFamOverride: this.getFamiliarToUse(false) != null,
        run: () => {
          if (this.getMeat() == 0) {
            this.visitNuns();
            (0,external_kolmafia_namespaceObject.cliExecute)("boombox meat");
          }

          this.tryToBuff();

          var meat = this.getMeat();

          greyAdv(
          this.loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          Macro.trySkill("sing along").trySkill(external_kolmafia_namespaceObject.Skill.get("Bowl Straight Up"))));



          if (meat >= this.getMeat() || this.getMeat() >= 100000) {
            this.visitNuns();

            if (this.status() == QuestStatus.COMPLETED) {
              (0,external_kolmafia_namespaceObject.cliExecute)("boombox food");
            }
          }

          (0,external_kolmafia_namespaceObject.print)("Turns Taken: ".concat(
          this.loc.turnsSpent, ", that's approx ").concat(Math.round(
          this.getMeat() / this.loc.turnsSpent), " meat per adventure!"),

          "blue");

        } };

    } }, { key: "visitNuns", value:

    function visitNuns() {
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=nunnery");
    } }, { key: "getMeat", value:

    function getMeat() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("currentNunneryMeat"));
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_namespaceObject.haveEffect)(this.effect) + (0,external_kolmafia_namespaceObject.haveEffect)(this.winkles) > 0;
    } }, { key: "tryToBuff", value:

    function tryToBuff() {
      if (
      (0,external_kolmafia_namespaceObject.getWorkshed)() == this.asdonMartin &&
      (0,external_kolmafia_namespaceObject.getFuel)() > 37 &&
      (0,external_kolmafia_namespaceObject.haveEffect)(this.driving) == 0)
      {
        (0,external_kolmafia_namespaceObject.cliExecute)("asdonmartin drive Observantly");
      }

      /* if (!this.hasAlreadyPulled()) {
        GreyPulls.pullMeatBuffers();
         use(this.hotness);
      }*/


      if (!(0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("concertVisited"))) {
        (0,external_kolmafia_namespaceObject.cliExecute)("concert 2"); // Feeling wrinkled
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.savingsBond) > 0 &&
      (0,external_kolmafia_namespaceObject.haveEffect)((0,external_kolmafia_namespaceObject.effectModifier)(this.savingsBond, "Effect")) == 0)
      {
        (0,external_kolmafia_namespaceObject.use)(this.savingsBond);
      }
    } }]);return Quest12WarNuns;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12StartWar.ts
function QuestL12StartWar_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12StartWar_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12StartWar_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12StartWar_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12StartWar_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12StartWar_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL12StartWar = /*#__PURE__*/function () {function QuestL12StartWar() {QuestL12StartWar_classCallCheck(this, QuestL12StartWar);QuestL12StartWar_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("Hippy Camp"));QuestL12StartWar_defineProperty(this, "umbrella",
    external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));}QuestL12StartWar_createClass(QuestL12StartWar, [{ key: "level", value:

    function level() {
      return 12;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if (!this.hasBoat() || !this.hasOutfit()) {
        return QuestStatus.NOT_READY;
      }

      if (external_kolmafia_namespaceObject.Stat.all().find((s) => (0,external_kolmafia_namespaceObject.myBasestat)(s) < 70) != null) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady(true)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "hasBoat", value:

    function hasBoat() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastIslandUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "hasOutfit", value:

    function hasOutfit() {
      return (0,external_kolmafia_namespaceObject.haveOutfit)("Frat Warrior Fatigues");
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat();
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("Beer Helmet"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("distressed denim pants"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("bejeweled pledge pin"));

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) > 0 &&
      !DelayBurners.isDelayBurnerReady())
      {
        outfit.addItem(this.umbrella);
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          // If we can cast both NC skills
          if (
          DelayBurners.isDelayBurnerReady() &&
          (0,external_kolmafia_namespaceObject.equippedAmount)(this.umbrella) == 0)
          {
            DelayBurners.tryReplaceCombats();
          }

          var props = new PropertyManager();
          props.setChoice(139, 3);
          props.setChoice(140, 3);
          props.setChoice(141, 3);
          props.setChoice(142, 3);

          try {
            greyAdv(this.loc, outfit);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") != "unstarted") {
            this.visitArena();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Start";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "visitArena", value:

    function visitArena() {
      (0,external_kolmafia_namespaceObject.outfit)("Frat Warrior Fatigues");
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=concert&pwd");
    } }]);return QuestL12StartWar;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarBoss.ts
function QuestL12WarBoss_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12WarBoss_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL12WarBoss_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12WarBoss_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12WarBoss_arrayLikeToArray(o, minLen);}function QuestL12WarBoss_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL12WarBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12WarBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}







var QuestL12WarBoss = /*#__PURE__*/function () {function QuestL12WarBoss() {QuestL12WarBoss_classCallCheck(this, QuestL12WarBoss);}QuestL12WarBoss_createClass(QuestL12WarBoss, [{ key: "getId", value:
    function getId() {
      return "Council / War / Boss";
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hippiesDefeated")) >= 1000) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("Beer Helmet"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("distressed denim pants"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("bejeweled pledge pin"));

      return {
        outfit: outfit,
        location: null,
        run: () => {
          this.sellBuyCrap();

          (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=camp&whichcamp=1");
          (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=camp&whichcamp=2");

          greyAdv(
          "bigisland.php?action=bossfight&pwd",
          null,
          new AdventureSettings().setFinishingBlowMacro(Macro.attack().repeat()));


          (0,external_kolmafia_namespaceObject.council)();
        } };

    } }, { key: "sellBuyCrap", value:

    function sellBuyCrap() {
      var crap = [
      "pink clay bead",
      "purple clay bead",
      "green clay bead",
      "communications windchimes",
      "bullet-proof corduroys",
      "round purple sunglasses",
      "reinforced beaded headband"].
      map((s) => external_kolmafia_namespaceObject.Item.get(s));var _iterator = QuestL12WarBoss_createForOfIteratorHelper(

      crap),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var s = _step.value;
          var keep = (0,external_kolmafia_namespaceObject.toSlot)(s) == (0,external_kolmafia_namespaceObject.toSlot)("none") ? 1 : 0;

          if ((0,external_kolmafia_namespaceObject.itemAmount)(s) <= keep) {
            continue;
          }

          (0,external_kolmafia_namespaceObject.sell)(s.buyer, (0,external_kolmafia_namespaceObject.itemAmount)(s) - keep, s);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      var master = crap[0].buyer;
      var garter = external_kolmafia_namespaceObject.Item.get("gauze garter");
      var gartersHave = (0,external_kolmafia_namespaceObject.itemAmount)(garter);

      if (GreySettings.shouldAvoidTowerRequirements()) {
        gartersHave += (0,external_kolmafia_namespaceObject.storageAmount)(garter);
      }

      var needHealers = 10 - gartersHave;
      needHealers = Math.min(needHealers, Math.floor(master.availableTokens / 2));

      if (needHealers > 0) {
        (0,external_kolmafia_namespaceObject.cliExecute)("make " + needHealers + " gauze garter");
      }

      while (master.availableTokens >= 5) {
        (0,external_kolmafia_namespaceObject.cliExecute)(
        "make " +
        Math.floor(master.availableTokens / 5) +
        " commemorative war stein");

      }

      while (master.availableTokens >= 2) {
        (0,external_kolmafia_namespaceObject.cliExecute)(
        "make " + Math.floor(master.availableTokens / 2) + " gauze garter");

      }

      while (master.availableTokens >= 1) {
        (0,external_kolmafia_namespaceObject.cliExecute)("make " + master.availableTokens + " beer bomb");
      }
    } }]);return QuestL12WarBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarFlyers.ts
function QuestL12WarFlyers_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarFlyers_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12WarFlyers_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarFlyers_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarFlyers_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12WarFlyers_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestL12WarFlyers = /*#__PURE__*/function () {function QuestL12WarFlyers() {QuestL12WarFlyers_classCallCheck(this, QuestL12WarFlyers);QuestL12WarFlyers_defineProperty(this, "flyers",
    external_kolmafia_namespaceObject.Item.get("Rock band flyers"));}QuestL12WarFlyers_createClass(QuestL12WarFlyers, [{ key: "getId", value:

    function getId() {
      return "Council / War / Flyers";
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "status", value:

    function status() {
      if (this.isArenaDone()) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.flyers) == 0) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("flyeredML")) < 10000) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          this.visitArena();
        } };

    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "isArenaDone", value:

    function isArenaDone() {
      return (0,external_kolmafia_namespaceObject.getProperty)("sidequestArenaCompleted") != "none";
    } }, { key: "visitArena", value:

    function visitArena() {
      (0,external_kolmafia_namespaceObject.outfit)("Frat Warrior Fatigues");
      (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=concert&pwd");

      // If something borked, lets just make us flyer another
      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.flyers) > 0 &&
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("flyeredML")) >= 10000)
      {
        (0,external_kolmafia_namespaceObject.setProperty)("flyeredML", "9900");
      }
    } }]);return QuestL12WarFlyers;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarGremlins.ts
function QuestL12WarGremlins_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarGremlins_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12WarGremlins_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarGremlins_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarGremlins_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12WarGremlins_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var WarGremlins = /*#__PURE__*/function () {function WarGremlins() {QuestL12WarGremlins_classCallCheck(this, WarGremlins);QuestL12WarGremlins_defineProperty(this, "magnet",
    external_kolmafia_namespaceObject.Item.get("molybdenum magnet"));QuestL12WarGremlins_defineProperty(this, "flyers",
    external_kolmafia_namespaceObject.Item.get("Rock band flyers"));QuestL12WarGremlins_defineProperty(this, "sealTooth",
    external_kolmafia_namespaceObject.Item.get("Seal Tooth"));QuestL12WarGremlins_defineProperty(this, "locations",
    [
    [
    external_kolmafia_namespaceObject.Location.get("Next to that barrel with something burning in it"),
    external_kolmafia_namespaceObject.Monster.get("batwinged gremlin (tool)"),
    external_kolmafia_namespaceObject.Item.get("molybdenum hammer"),
    "It whips out a hammer"],

    [
    external_kolmafia_namespaceObject.Location.get("Out by that rusted-out car"),
    external_kolmafia_namespaceObject.Monster.get("vegetable gremlin (tool)"),
    external_kolmafia_namespaceObject.Item.get("molybdenum screwdriver"),
    "It whips out a screwdriver"],

    [
    external_kolmafia_namespaceObject.Location.get("over where the old tires are"),
    external_kolmafia_namespaceObject.Monster.get("erudite gremlin (tool)"),
    external_kolmafia_namespaceObject.Item.get("molybdenum crescent wrench"),
    "He whips out a crescent wrench"],

    [
    external_kolmafia_namespaceObject.Location.get("near an abandoned refrigerator"),
    external_kolmafia_namespaceObject.Monster.get("spider gremlin (tool)"),
    external_kolmafia_namespaceObject.Item.get("Molybdenum Pliers"),
    "It whips out a pair of pliers"]]);}QuestL12WarGremlins_createClass(WarGremlins, [{ key: "mustBeDone", value:



    function mustBeDone() {
      return (
        (0,external_kolmafia_namespaceObject.itemAmount)(this.magnet) == 0 ||
        this.locations.filter((l) => (0,external_kolmafia_namespaceObject.itemAmount)(l[2]) == 0)[0] == null);

    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.itemAmount)(this.magnet) == 0) {
        return this.visitJunkman();
      }

      var toVisit = this.locations.filter((l) => (0,external_kolmafia_namespaceObject.itemAmount)(l[2]) == 0)[0];

      if (toVisit == null) {
        return this.visitJunkman();
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.sealTooth) == 0) {
        return this.getSealTooth();
      }

      var loc = toVisit[0];
      var monster = toVisit[1];
      var magnetString = toVisit[3];

      var outfit = new GreyOutfit("-ML +DA +DR +familiar experience");
      outfit.hpWeight = 1;
      outfit.umbrellaSetting = UmbrellaState.DAMAGE_REDUCTION_SHIELD;

      var macro2 = Macro.if_(
      "match " + magnetString,
      Macro.item(this.magnet).step("abort")).
      item(this.sealTooth);

      var macro = new Macro().if_(
      monster,
      Macro.while_("!pastround 25 && !hpbelow 50", macro2));


      return {
        location: loc,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.setDuringFightMacro(macro);

          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("A.M.C Gremlin"));
          // settings.addBanish(Monster.get("vegetable gremlin"));
          // settings.addBanish(Monster.get("batwinged gremlin"));
          // settings.addBanish(Monster.get("spider gremlin"));
          // settings.addBanish(Monster.get("batwinged gremlin"));

          greyAdv(loc, outfit, settings);
        } };

    } }, { key: "getSealTooth", value:

    function getSealTooth() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.retrieveItem)(external_kolmafia_namespaceObject.Item.get("Seal tooth"));
        } };

    } }, { key: "visitJunkman", value:

    function visitJunkman() {
      var outfit = new GreyOutfit();
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("Beer Helmet"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("distressed denim pants"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("bejeweled pledge pin"));
      outfit.addBonus("-tie");

      return {
        outfit: outfit,
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?action=junkman&pwd");
        } };

    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestJunkyardCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Subatomic Hardening"))) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Gremlins";
    } }, { key: "getLocations", value:

    function getLocations() {
      return this.locations.
      filter((g) => (0,external_kolmafia_namespaceObject.availableAmount)(g[2]) == 0).
      map((g) => g[0]);
    } }]);return WarGremlins;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarLobster.ts
function QuestL12WarLobster_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12WarLobster_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL12WarLobster_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12WarLobster_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12WarLobster_arrayLikeToArray(o, minLen);}function QuestL12WarLobster_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL12WarLobster_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarLobster_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12WarLobster_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarLobster_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarLobster_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12WarLobster_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL12WarLobster_setPrototypeOf(subClass, superClass);}function QuestL12WarLobster_setPrototypeOf(o, p) {QuestL12WarLobster_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL12WarLobster_setPrototypeOf(o, p);}function QuestL12WarLobster_createSuper(Derived) {var hasNativeReflectConstruct = QuestL12WarLobster_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL12WarLobster_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL12WarLobster_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL12WarLobster_possibleConstructorReturn(this, result);};}function QuestL12WarLobster_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL12WarLobster_assertThisInitialized(self);}function QuestL12WarLobster_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL12WarLobster_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL12WarLobster_getPrototypeOf(o) {QuestL12WarLobster_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL12WarLobster_getPrototypeOf(o);}function QuestL12WarLobster_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}












var QuestL12Lobster = /*#__PURE__*/function (_TaskInfo) {QuestL12WarLobster_inherits(QuestL12Lobster, _TaskInfo);var _super = QuestL12WarLobster_createSuper(QuestL12Lobster);









  function QuestL12Lobster() {var _this;QuestL12WarLobster_classCallCheck(this, QuestL12Lobster);
    _this = _super.call(this);QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "loc", external_kolmafia_namespaceObject.Location.get("Sonofa Beach"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "item", external_kolmafia_namespaceObject.Item.get("barrel of gunpowder"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "monster", external_kolmafia_namespaceObject.Monster.get("Lobsterfrogman"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "cursedMagnifyingGlass", external_kolmafia_namespaceObject.Item.get("Cursed Magnifying Glass"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "powerfulGlove", external_kolmafia_namespaceObject.Item.get("Powerful Glove"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "backupCamera", external_kolmafia_namespaceObject.Item.get("Backup Camera"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "votedSticker", external_kolmafia_namespaceObject.Item.get("&quot;I Voted!&quot; sticker"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "paths", []);return _this;
  }QuestL12WarLobster_createClass(QuestL12Lobster, [{ key: "level", value:

    function level() {
      return 15;
    } }, { key: "getFriendsRemaining", value:

    function getFriendsRemaining() {
      if ((0,external_kolmafia_namespaceObject.toMonster)((0,external_kolmafia_namespaceObject.getProperty)("_saberForceMonster")) != this.monster) {
        return 0;
      }

      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_saberForceMonsterCount"));
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      var barrelsNeeded =
      5 - (assumeUnstarted ? 0 : (0,external_kolmafia_namespaceObject.availableAmount)(this.item));
      var turnsManual = 8;
      var possibleCombo = [];

      for (
      var i = 0;
      i < barrelsNeeded - (assumeUnstarted ? 0 : this.getFriendsRemaining());
      i++)
      {
        possibleCombo.push("Manual");
        possibleCombo.push(ResourceCategory.COPIER);
        possibleCombo.push(ResourceCategory.OLFACT_COPIER);
      }

      // If we're doing voted, or mag class. Then we can do a replace
      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.votedSticker) +
      (0,external_kolmafia_namespaceObject.availableAmount)(this.cursedMagnifyingGlass) >
      0 && (
      !this.isBackupReady() || this.getFriendsRemaining() == 0))
      {
        possibleCombo.push(ResourceCategory.GLOVE_REPLACE);
      }

      this.paths = [];var _iterator = QuestL12WarLobster_createForOfIteratorHelper(

      getAllCombinations(possibleCombo)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          // If a combo would do something silly, like request a glove replace when its not needed
          if (!assumeUnstarted && combo.includes(ResourceCategory.GLOVE_REPLACE)) {
            // If we'd ask for a replace when we're doing friends.. Or have a void copier
            if (this.getFriendsRemaining() > 0) {
              continue;
            }

            // If we'd ask for a replace when we can do backups
            if (
            this.lastMonster() == this.monster &&
            combo.includes(ResourceCategory.COPIER))
            {
              continue;
            }
          }

          // If a combo would do something silly, like expect lobster without a source
          if (
          !combo.includes("Manual") &&
          !combo.includes(ResourceCategory.GLOVE_REPLACE) && (
          assumeUnstarted ||
          this.getFriendsRemaining() == 0 &&
          !(
          combo.includes(ResourceCategory.COPIER) &&
          this.lastMonster() == this.monster)))

          {
            continue;
          }

          var turnsTaken = 0;
          var barrelsGained = 0;var _iterator2 = QuestL12WarLobster_createForOfIteratorHelper(

          combo),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var type = _step2.value;
              if (type == "Manual") {
                turnsTaken += turnsManual;
                barrelsGained++;
              } else if (type == ResourceCategory.COPIER) {
                // Skip turns taken as we're burning delay as a rule
                // turnsTaken++;
                barrelsGained++;
              } else if (type == ResourceCategory.OLFACT_COPIER) {
                // Each one of these gives us another 2 effectively
                // Since the first fight we'd saber on won't give us a barrel and is pretty much moved to the last fight
                turnsTaken += 2;
                barrelsGained += 2;
              } else if (type == ResourceCategory.GLOVE_REPLACE) {
                turnsTaken++;
                barrelsGained++;
              } else {
                throw "Lobster calcs didn't account for " + type;
              }
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          if (barrelsGained < barrelsNeeded) {
            continue;
          }

          // If we're doing olfact, then doing an extra copy when our saber would do it anyways is a waste
          var extraTurns = combo.filter(
          (c) => c == "Manual" || c == ResourceCategory.COPIER).
          length;
          var extraBarrels = barrelsGained - barrelsNeeded;

          if (extraBarrels > 0 && extraTurns > 1) {
            continue;
          }

          var path = new PossiblePath(turnsTaken);var _iterator3 = QuestL12WarLobster_createForOfIteratorHelper(

          combo),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _type = _step3.value;
              if (typeof _type != "number") {
                continue;
              }

              path.add(_type);
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          this.paths.push(path);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if (barrelsNeeded <= 0) {
        this.paths.push(new PossiblePath(0));
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestLighthouseCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.item) >= 5) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.myAdventures)() < 22 || path == null) {
        return QuestStatus.NOT_READY;
      }

      if (this.getFriendsRemaining() > 0) {
        return QuestStatus.READY;
      }

      if (path.canUse(ResourceCategory.COPIER) && this.shouldDelayForBats()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.backupCamera) > 0 && this.isBackupReady()) {
        return QuestStatus.READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) > 2 &&
      (0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) < 6)
      {
        return QuestStatus.NOT_READY;
      }

      if (
      path.canUse(ResourceCategory.GLOVE_REPLACE) &&
      this.hasForcedMonsterAndGlove())
      {
        if (this.getMonsterReplacer() == null) {
          return QuestStatus.NOT_READY;
        }
      } else if (!hasCombatSkillReady()) {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_namespaceObject.myLevel)() < 16 && (0,external_kolmafia_namespaceObject.getProperty)("sidequestArenaCompleted") == "none") {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "isVoidReady", value:

    function isVoidReady() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cursedMagnifyingGlassCount")) == 13;
    } }, { key: "isVoterReady", value:

    function isVoterReady() {
      return (
        (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() % 11 == 1 &&
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastVoteMonsterTurn")) < (0,external_kolmafia_namespaceObject.totalTurnsPlayed)());

    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Lobsters";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "turnInQuest", value:

    function turnInQuest() {
      var outfit = new GreyOutfit();
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("Beer Helmet"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("distressed denim pants"));
      outfit.addItem(external_kolmafia_namespaceObject.Item.get("bejeweled pledge pin"));

      return {
        location: null,
        outfit: outfit,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=lighthouse&action=pyro&pwd");
          (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=lighthouse&action=pyro&pwd");
          (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=lighthouse&action=pyro&pwd");
        } };

    } }, { key: "getMonsterReplacer", value:

    function getMonsterReplacer() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.votedSticker) > 0 && this.isVoterReady()) {
        return this.votedSticker;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cursedMagnifyingGlass) && this.isVoidReady()) {
        return this.cursedMagnifyingGlass;
      }

      return null;
    } }, { key: "hasForcedMonsterAndGlove", value:

    function hasForcedMonsterAndGlove() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.cursedMagnifyingGlass) +
        (0,external_kolmafia_namespaceObject.availableAmount)(this.votedSticker) >
        0 && (0,external_kolmafia_namespaceObject.availableAmount)(this.powerfulGlove) > 0);

    } }, { key: "hasBackups", value:

    function hasBackups() {
      return 11 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_backUpUses"));
    } }, { key: "lastMonster", value:

    function lastMonster() {
      return (0,external_kolmafia_namespaceObject.getProperty)("lastCopyableMonster") == "" ?
      null :
      (0,external_kolmafia_namespaceObject.toMonster)((0,external_kolmafia_namespaceObject.getProperty)("lastCopyableMonster"));
    } }, { key: "isBackupReady", value:

    function isBackupReady() {
      return this.hasBackups() > 0 && this.lastMonster() == this.monster;
    } }, { key: "shouldDelayForBats", value:

    function shouldDelayForBats() {
      return getQuestStatus("questL04Bat") < 3;
    } }, { key: "isBatsAvailable", value:

    function isBatsAvailable() {
      var status = getQuestStatus("questL04Bat");

      return status >= 3 && status < 100;
    } }, { key: "runBackup", value:

    function runBackup(path) {
      var outfit = new GreyOutfit();
      outfit.addBonus("-ML");

      var copierResource = path.getResource(ResourceCategory.COPIER);
      copierResource.prepare(outfit);

      var loc;

      if (this.isBatsAvailable()) {
        loc = external_kolmafia_namespaceObject.Location.get("The Boss Bat's Lair");
      } else {
        loc = external_kolmafia_namespaceObject.Location.get("The Dire Warren");
      }

      return {
        outfit: outfit,
        location: loc,
        run: () => {
          greyAdv(
          loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          new Macro().ifNot_(this.monster, copierResource.macro())));


        } };

    } }, { key: "runFriends", value:

    function runFriends(path) {
      var copier = path.getResource(ResourceCategory.OLFACT_COPIER);
      var makeMoreFriends =
      this.getFriendsRemaining() == 1 &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.item) < 4 &&
      copier != null;

      var outfit = new GreyOutfit();
      outfit.addBonus("-ML");

      if (makeMoreFriends) {
        copier.prepare(outfit);
      }

      return {
        outfit: outfit,
        location: this.loc,
        run: () => {
          var props = new PropertyManager();
          var macro;

          if (makeMoreFriends) {
            copier.prepare(null, props);
            macro = Macro.if_(this.monster, copier.macro());
          }

          try {
            greyAdv(
            this.loc,
            outfit,
            new AdventureSettings().setStartOfFightMacro(macro));

          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "run", value:

    function run(path) {
      // Try to turn in quest
      if ((0,external_kolmafia_namespaceObject.itemAmount)(this.item) >= 5) {
        return this.turnInQuest();
      }

      if (this.getFriendsRemaining() > 0) {
        return this.runFriends(path);
      }

      if (this.isBackupReady() && path.canUse(ResourceCategory.COPIER)) {
        return this.runBackup(path);
      }

      var outfit = new GreyOutfit();

      var gloveMacro = path.getResource(ResourceCategory.GLOVE_REPLACE);
      var monsterReplacerItem = this.getMonsterReplacer();

      if (
      gloveMacro != null &&
      this.hasForcedMonsterAndGlove() &&
      monsterReplacerItem != null)
      {
        outfit.addItem(monsterReplacerItem);

        gloveMacro.prepare(outfit);
      } else {
        outfit.setPlusCombat();
      }

      outfit.addBonus("-ML");

      var copier = path.getResource(ResourceCategory.OLFACT_COPIER);

      if (copier != null) {
        copier.prepare(outfit);
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var macro;
          var props = new PropertyManager();

          if (copier != null) {
            copier.prepare(null, props);

            if (macro == null) {
              macro = new Macro();
            }

            macro.if_(this.monster, copier.macro());
          }

          try {
            if (
            gloveMacro != null &&
            this.hasForcedMonsterAndGlove() &&
            monsterReplacerItem != null)
            {
              (0,external_kolmafia_namespaceObject.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_namespaceObject.toInt)(this.loc));

              Macro.ifNot_(this.monster, gloveMacro.macro()).submit();
            }

            greyAdv(
            this.loc,
            outfit,
            new AdventureSettings().setStartOfFightMacro(macro));

          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if ((0,external_kolmafia_namespaceObject.itemAmount)(this.item) >= 5) {
        if (
        (0,external_kolmafia_namespaceObject.getProperty)("sidequestLighthouseCompleted") == "none" &&
        (0,external_kolmafia_namespaceObject.getProperty)("warProgress") == "started")
        {
          return true;
        }

        return false;
      }

      if (this.lastMonster() != this.monster) {
        return false;
      }

      if (this.hasBackups() <= 0) {
        return false;
      }

      return true;
    } }]);return QuestL12Lobster;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12Worms.ts
function QuestL12Worms_slicedToArray(arr, i) {return QuestL12Worms_arrayWithHoles(arr) || QuestL12Worms_iterableToArrayLimit(arr, i) || QuestL12Worms_unsupportedIterableToArray(arr, i) || QuestL12Worms_nonIterableRest();}function QuestL12Worms_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL12Worms_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function QuestL12Worms_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL12Worms_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12Worms_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL12Worms_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12Worms_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12Worms_arrayLikeToArray(o, minLen);}function QuestL12Worms_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL12Worms_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12Worms_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12Worms_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12Worms_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12Worms_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12Worms_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL12Worms_setPrototypeOf(subClass, superClass);}function QuestL12Worms_setPrototypeOf(o, p) {QuestL12Worms_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL12Worms_setPrototypeOf(o, p);}function QuestL12Worms_createSuper(Derived) {var hasNativeReflectConstruct = QuestL12Worms_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL12Worms_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL12Worms_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL12Worms_possibleConstructorReturn(this, result);};}function QuestL12Worms_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL12Worms_assertThisInitialized(self);}function QuestL12Worms_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL12Worms_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL12Worms_getPrototypeOf(o) {QuestL12Worms_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL12Worms_getPrototypeOf(o);}function QuestL12Worms_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestL12Worms = /*#__PURE__*/function (_TaskInfo) {QuestL12Worms_inherits(QuestL12Worms, _TaskInfo);var _super = QuestL12Worms_createSuper(QuestL12Worms);





  function QuestL12Worms() {var _this;QuestL12Worms_classCallCheck(this, QuestL12Worms);
    _this = _super.call(this);QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "nanovision", external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "worms", []);QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "heart", external_kolmafia_namespaceObject.Item.get("heart of the filthworm queen"));QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "paths", []);

    _this.worms.push(
    new WormProgress(
    external_kolmafia_namespaceObject.Item.get("filthworm royal guard scent gland"),
    external_kolmafia_namespaceObject.Location.get("The Queen's Chamber")));


    _this.worms.push(
    new WormProgress(
    external_kolmafia_namespaceObject.Item.get("filthworm drone scent gland"),
    external_kolmafia_namespaceObject.Location.get("The Royal Guard Chamber")));


    _this.worms.push(
    new WormProgress(
    external_kolmafia_namespaceObject.Item.get("Filthworm hatchling scent gland"),
    external_kolmafia_namespaceObject.Location.get("The Feeding Chamber")));


    _this.worms.push(
    new WormProgress(null, external_kolmafia_namespaceObject.Location.get("The Hatching Chamber")));return _this;

  }QuestL12Worms_createClass(QuestL12Worms, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this2 = this;
      var wormsToKill = assumeUnstarted ?
      4 :
      this.worms.findIndex((w) => w.isDoable());

      var mixup = [];

      // Skip first cos queen doesn't need special strats
      for (var i = 0; i < wormsToKill; i++) {
        // So we run 300% item drop lets assume
        // That's 30 chance a fight. That's eh, 4 fights? Lets call it 6 cos we're bad luck.
        mixup.push([null, 6]);
        mixup.push([ResourceCategory.POLAR_VORTEX, 1]);
        mixup.push([ResourceCategory.YELLOW_RAY, 1]);
      }

      this.paths = [];

      // At queen!
      if (wormsToKill == 0) {
        this.paths.push(new PossiblePath(1));
      }var _iterator = QuestL12Worms_createForOfIteratorHelper(

      getAllCombinations(mixup)),_step;try {var _loop = function _loop() {var combo = _step.value;
          if (combo.length != wormsToKill) {
            return "continue";
          }

          var path = new PossiblePath(
          combo.map((_ref) => {var _ref2 = QuestL12Worms_slicedToArray(_ref, 2),turns = _ref2[1];return turns;}).reduce((p, n) => p + n, 1));

          path.addIgnored("Cosplay Saber");

          combo.forEach((_ref3) => {var _ref4 = QuestL12Worms_slicedToArray(_ref3, 1),resource = _ref4[0];
            if (resource == null) {
              return;
            }

            path.add(resource);
          });

          _this2.paths.push(path);};for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Filthworms";
    } }, { key: "getLocations", value:

    function getLocations() {
      return this.worms.map((e) => e.location);
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "isHeistReady", value:

    function isHeistReady() {
      return (
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("catBurglarBankHeists")) > 0 ||
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_catBurglarCharge")) >= 10);

    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_namespaceObject.getProperty)("sidequestOrchardCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      // If we can't access this place yet
      if ((0,external_kolmafia_namespaceObject.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      // If we can't turn this in
      if (
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hippiesDefeated")) < 64 &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.heart) > 0)
      {
        return QuestStatus.NOT_READY;
      }

      if (this.isKillingQueen()) {
        return QuestStatus.FASTER_LATER;
      }

      if (path == null) {
        return QuestStatus.READY;
      }

      if (path.canUse(ResourceCategory.YELLOW_RAY)) {
        // If we're going to YR
        if (!path.getResource(ResourceCategory.YELLOW_RAY).ready()) {
          // If we can't afford to YR
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.READY;
      }

      if (
      !path.canUse(ResourceCategory.POLAR_VORTEX) &&
      !(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision))
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "isKillingQueen", value:

    function isKillingQueen() {
      return (
        (0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get("filthworm royal guard scent gland")) > 0 ||
        (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Filthworm Guard Stench")) > 0);

    } }, { key: "run", value:

    function run(path) {
      if ((0,external_kolmafia_namespaceObject.itemAmount)(this.heart) > 0) {
        var _outfit = new GreyOutfit();
        _outfit.addItem(external_kolmafia_namespaceObject.Item.get("Beer Helmet"));
        _outfit.addItem(external_kolmafia_namespaceObject.Item.get("distressed denim pants"));
        _outfit.addItem(external_kolmafia_namespaceObject.Item.get("bejeweled pledge pin"));
        _outfit.addBonus("-tie");

        return {
          outfit: _outfit,
          location: null,
          run: () => {
            (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=orchard&action=stand&pwd=");
            (0,external_kolmafia_namespaceObject.visitUrl)("bigisland.php?place=orchard&action=stand&pwd=");
            (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=hippy");
          } };

      }

      var outfit = new GreyOutfit();

      var resource = path.getResource(ResourceCategory.YELLOW_RAY);

      if (resource == null) {
        resource = path.getResource(ResourceCategory.POLAR_VORTEX);
      }

      if (this.isKillingQueen()) {
        outfit.meatDropWeight = 4;
      } else if (resource != null) {
        resource.prepare(outfit);
      } else {
        outfit.setItemDrops();
      }

      var chamber = this.worms.find((worm) => worm.isDoable());

      return {
        location: chamber.location,
        outfit: outfit,
        run: () => {
          if (chamber.effect != null && (0,external_kolmafia_namespaceObject.haveEffect)(chamber.effect) == 0) {
            (0,external_kolmafia_namespaceObject.use)(chamber.glands);
          }

          var killingBlow;
          var props = new PropertyManager();

          if (resource != null) {
            resource.prepare(null, props);
            killingBlow = resource.macro().skill(this.nanovision).repeat();
          } else {
            killingBlow = Macro.skill(this.nanovision).repeat();
          }

          try {
            greyAdv(
            chamber.location,
            outfit,
            new AdventureSettings().setFinishingBlowMacro(killingBlow));

          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {var _iterator2 = QuestL12Worms_createForOfIteratorHelper(
      this.worms),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var worm = _step2.value;
          if (worm.effect == null) {
            continue;
          }

          // If the gland is in operation
          if ((0,external_kolmafia_namespaceObject.haveEffect)(worm.effect) > 0) {
            return true;
          }

          // If the gland is available
          if ((0,external_kolmafia_namespaceObject.availableAmount)(worm.glands) > 0) {
            return false;
          }
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return false;
    } }]);return QuestL12Worms;}(TaskInfo);var


WormProgress = /*#__PURE__*/function () {




  function WormProgress(item, location) {QuestL12Worms_classCallCheck(this, WormProgress);QuestL12Worms_defineProperty(this, "glands", void 0);QuestL12Worms_defineProperty(this, "effect", void 0);QuestL12Worms_defineProperty(this, "location", void 0);
    this.location = location;
    this.glands = item;

    if (item == null) {
      return;
    }

    this.effect = (0,external_kolmafia_namespaceObject.effectModifier)(item, "Effect");
  }QuestL12Worms_createClass(WormProgress, [{ key: "isDoable", value:

    function isDoable() {
      return (
        this.glands == null ||
        (0,external_kolmafia_namespaceObject.haveEffect)(this.effect) > 0 ||
        (0,external_kolmafia_namespaceObject.availableAmount)(this.glands) > 0);

    } }]);return WormProgress;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL12War.ts
function QuestL12War_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12War_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL12War_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12War_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12War_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12War_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}












var QuestL12War = /*#__PURE__*/function () {function QuestL12War() {QuestL12War_classCallCheck(this, QuestL12War);QuestL12War_defineProperty(this, "children",
    [
    new QuestL12Battlefield(),
    new WarGremlins(),
    new Quest12WarNuns(),
    new QuestL12Worms(),
    new QuestL12StartWar(),
    new QuestL12WarBoss(),
    new QuestL12Lobster(),
    new QuestL12WarFlyers(),
    new QuestL12FratOutfit()]);}QuestL12War_createClass(QuestL12War, [{ key: "getLocations", value:


    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }]);return QuestL12War;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/QuestDigitalKey.ts
function QuestDigitalKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestDigitalKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestDigitalKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestDigitalKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestDigitalKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestDigitalKey_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestDigitalKey = /*#__PURE__*/function () {function QuestDigitalKey() {QuestDigitalKey_classCallCheck(this, QuestDigitalKey);QuestDigitalKey_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("8-Bit Realm"));QuestDigitalKey_defineProperty(this, "wPixel",
    external_kolmafia_namespaceObject.Item.get("White Pixel"));QuestDigitalKey_defineProperty(this, "rPixel",
    external_kolmafia_namespaceObject.Item.get("Red Pixel"));QuestDigitalKey_defineProperty(this, "gPixel",
    external_kolmafia_namespaceObject.Item.get("Green Pixel"));QuestDigitalKey_defineProperty(this, "bPixel",
    external_kolmafia_namespaceObject.Item.get("Blue Pixel"));QuestDigitalKey_defineProperty(this, "transfomer",
    external_kolmafia_namespaceObject.Item.get("continuum transfunctioner"));QuestDigitalKey_defineProperty(this, "key",
    external_kolmafia_namespaceObject.Item.get("Digital key"));}QuestDigitalKey_createClass(QuestDigitalKey, [{ key: "level", value:

    function level() {
      return 4;
    } }, { key: "atDoor", value:

    function atDoor() {
      return getQuestStatus("questL13Final") == 5;
    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.key) > 0 ||
      (0,external_kolmafia_namespaceObject.getProperty)("nsTowerDoorKeysUsed").includes(this.key.name))
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.transfomer) == 0) {
        return QuestStatus.READY;
      }

      var status = getQuestStatus("questL13Final");

      // If we're not at the keys, don't farm yet. We can still hit it from powerful glove
      if (status < 5) {
        return QuestStatus.NOT_READY;
      }

      // If we can make white pixels, or we have enough pixels
      if (this.needPixels() - this.canMakePixelCount() <= 0) {
        return QuestStatus.READY;
      }

      if (GreySettings.shouldAvoidTowerRequirements() && (0,external_kolmafia_namespaceObject.pullsRemaining)() != -1) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "canMakePixels", value:

    function canMakePixels() {
      return this.canMakePixelCount() > 0;
    } }, { key: "canMakePixelCount", value:

    function canMakePixelCount() {
      return Math.min(
      (0,external_kolmafia_namespaceObject.itemAmount)(this.rPixel),
      (0,external_kolmafia_namespaceObject.itemAmount)(this.bPixel),
      (0,external_kolmafia_namespaceObject.itemAmount)(this.gPixel));

    } }, { key: "needPixels", value:

    function needPixels() {
      return Math.max(0, 30 - (0,external_kolmafia_namespaceObject.itemAmount)(this.wPixel));
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.transfomer) == 0) {
        return {
          location: null,
          run: () => {
            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=forestvillage&action=fv_mystic");

            while ((0,external_kolmafia_namespaceObject.handlingChoice)()) {
              (0,external_kolmafia_namespaceObject.runChoice)(1);
            }
          } };

      }

      if (
      this.needPixels() - this.canMakePixelCount() <= 0 &&
      this.needPixels() > 0)
      {
        return {
          location: null,
          run: () => {
            var toMake = Math.min(
            (0,external_kolmafia_namespaceObject.itemAmount)(this.rPixel),
            (0,external_kolmafia_namespaceObject.itemAmount)(this.gPixel),
            (0,external_kolmafia_namespaceObject.itemAmount)(this.bPixel),
            this.needPixels());


            (0,external_kolmafia_namespaceObject.create)(this.wPixel, toMake);
          } };

      }

      if (this.needPixels() <= 0 || (0,external_kolmafia_namespaceObject.pullsRemaining)() == -1) {
        return {
          location: null,
          run: () => {
            (0,external_kolmafia_namespaceObject.cliExecute)("acquire " + this.key);
          } };

      }

      var outfit = new GreyOutfit().setItemDrops();
      outfit.addItem(this.transfomer);
      var settings = new AdventureSettings();
      settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Blooper"));
      settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Buzzy Beetle"));
      settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Goomba"));
      settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Koopa Troopa"));
      settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("Tektite"));

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          greyAdv(this.location, outfit, settings);
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Digital";
    } }, { key: "getLocations", value:

    function getLocations() {
      // Don't hog this location when we're not sure we need to
      if (!this.atDoor()) {
        return [];
      }

      return [this.location];
    } }]);return QuestDigitalKey;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/QuestSkeletonKey.ts
function QuestSkeletonKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkeletonKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSkeletonKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkeletonKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkeletonKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkeletonKey_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestSkeletonKey = /*#__PURE__*/function () {function QuestSkeletonKey() {QuestSkeletonKey_classCallCheck(this, QuestSkeletonKey);QuestSkeletonKey_defineProperty(this, "key",
    external_kolmafia_namespaceObject.Item.get("Skeleton Key"));QuestSkeletonKey_defineProperty(this, "bone",
    external_kolmafia_namespaceObject.Item.get("skeleton bone"));QuestSkeletonKey_defineProperty(this, "teeth",
    external_kolmafia_namespaceObject.Item.get("loose teeth"));QuestSkeletonKey_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get(" The Skeleton Store"));QuestSkeletonKey_defineProperty(this, "priceTag",
    external_kolmafia_namespaceObject.Item.get("bone with a price tag on it"));}QuestSkeletonKey_createClass(QuestSkeletonKey, [{ key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Skeleton";
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.key) > 0 ||
      (0,external_kolmafia_namespaceObject.getProperty)("nsTowerDoorKeysUsed").includes(this.key.name))
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.bone) > 0 && (0,external_kolmafia_namespaceObject.availableAmount)(this.teeth) > 0) {
        if ((0,external_kolmafia_namespaceObject.myMeat)() > 100) {
          return QuestStatus.READY;
        } else {
          return QuestStatus.NOT_READY;
        }
      }

      if (!(0,external_kolmafia_namespaceObject.canAdventure)(this.location)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run() {
      if (
      (0,external_kolmafia_namespaceObject.pullsRemaining)() == -1 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.bone) > 0 && (0,external_kolmafia_namespaceObject.availableAmount)(this.teeth) > 0)
      {
        return this.craft();
      }

      return this.adventure();
    } }, { key: "craft", value:

    function craft() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.retrieveItem)(this.key);
        } };

    } }, { key: "adventure", value:

    function adventure() {
      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          greyAdv(this.location, outfit);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestSkeletonKey;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/QuestStarKey.ts
function QuestStarKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestStarKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestStarKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestStarKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestStarKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestStarKey_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestStarKey = /*#__PURE__*/function () {function QuestStarKey() {QuestStarKey_classCallCheck(this, QuestStarKey);QuestStarKey_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Hole in the sky"));QuestStarKey_defineProperty(this, "rocket",
    external_kolmafia_namespaceObject.Item.get("steam-powered model rocketship"));QuestStarKey_defineProperty(this, "star",
    external_kolmafia_namespaceObject.Item.get("Star"));QuestStarKey_defineProperty(this, "map",
    external_kolmafia_namespaceObject.Item.get("Star Chart"));QuestStarKey_defineProperty(this, "line",
    external_kolmafia_namespaceObject.Item.get("Line"));QuestStarKey_defineProperty(this, "key",
    external_kolmafia_namespaceObject.Item.get("Richard's star key"));QuestStarKey_defineProperty(this, "holeInSky",
    new QuestTowerHoleInSkyUnlock());QuestStarKey_defineProperty(this, "toAbsorb", void 0);}QuestStarKey_createClass(QuestStarKey, [{ key: "getChildren", value:


    function getChildren() {
      return [this.holeInSky];
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.key) > 0 ||
      (0,external_kolmafia_namespaceObject.getProperty)("nsTowerDoorKeysUsed").includes(this.key.name))
      {
        return QuestStatus.COMPLETED;
      }

      if (
      !this.hasEnoughMaterials() &&
      GreySettings.shouldAvoidTowerRequirements())
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.rocket) == 0) {
        return QuestStatus.NOT_READY;
      }

      /*if (getQuestStatus("questL13Final") < 5) {
        return QuestStatus.NOT_READY;
      }*/

      if (
      this.toAbsorb.length == 0 &&
      GreySettings.greyBreakAtTower &&
      (0,external_kolmafia_namespaceObject.getProperty)("_greyReachedTower") != "true")
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "hasEnoughMaterials", value:

    function hasEnoughMaterials() {
      return (
        (0,external_kolmafia_namespaceObject.pullsRemaining)() == -1 ||
        (0,external_kolmafia_namespaceObject.availableAmount)(this.map) > 0 &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.line) >= 7 &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.star) >= 8);

    } }, { key: "run", value:

    function run() {
      if (this.hasEnoughMaterials()) {
        return {
          location: null,
          run: () => {
            (0,external_kolmafia_namespaceObject.retrieveItem)(this.key);
          } };

      }

      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          greyAdv(this.location, outfit);
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Star";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestStarKey;}();


var QuestTowerHoleInSkyUnlock = /*#__PURE__*/function () {function QuestTowerHoleInSkyUnlock() {QuestStarKey_classCallCheck(this, QuestTowerHoleInSkyUnlock);QuestStarKey_defineProperty(this, "topFloor",
    external_kolmafia_namespaceObject.Location.get(
    "The Castle in the Clouds in the Sky (Top Floor)"));QuestStarKey_defineProperty(this, "rocket",

    external_kolmafia_namespaceObject.Item.get("steam-powered model rocketship"));QuestStarKey_defineProperty(this, "copperFeel",
    677);QuestStarKey_defineProperty(this, "flavorOfARaver",
    676);QuestStarKey_defineProperty(this, "yeahPunkRock",
    678);QuestStarKey_defineProperty(this, "gothNC",
    675);}QuestStarKey_createClass(QuestTowerHoleInSkyUnlock, [{ key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / HoleInSkyUnlock";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL10Garbage") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.rocket) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.topFloor,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          props.setChoice(this.copperFeel, 2); // Grab rocket
          props.setChoice(this.gothNC, 4); // Crawl to steam
          props.setChoice(this.yeahPunkRock, 3); // Crawl to steam
          props.setChoice(this.flavorOfARaver, 4); // Crawl to punk

          try {
            greyAdv(this.topFloor, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTowerHoleInSkyUnlock;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestKeyStuffAbstract.ts
function QuestKeyStuffAbstract_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestKeyStuffAbstract_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestKeyStuffAbstract_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestKeyStuffAbstract_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestKeyStuffAbstract_arrayLikeToArray(o, minLen);}function QuestKeyStuffAbstract_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestKeyStuffAbstract_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestKeyStuffAbstract_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestKeyStuffAbstract_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestKeyStuffAbstract_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestKeyStuffAbstract_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestKeyStuffAbstract_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestKeyStuffAbstract_setPrototypeOf(subClass, superClass);}function QuestKeyStuffAbstract_setPrototypeOf(o, p) {QuestKeyStuffAbstract_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestKeyStuffAbstract_setPrototypeOf(o, p);}function QuestKeyStuffAbstract_createSuper(Derived) {var hasNativeReflectConstruct = QuestKeyStuffAbstract_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestKeyStuffAbstract_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestKeyStuffAbstract_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestKeyStuffAbstract_possibleConstructorReturn(this, result);};}function QuestKeyStuffAbstract_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestKeyStuffAbstract_assertThisInitialized(self);}function QuestKeyStuffAbstract_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestKeyStuffAbstract_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestKeyStuffAbstract_getPrototypeOf(o) {QuestKeyStuffAbstract_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestKeyStuffAbstract_getPrototypeOf(o);}function QuestKeyStuffAbstract_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestKeyStuffAbstract = /*#__PURE__*/function (_TaskInfo) {QuestKeyStuffAbstract_inherits(QuestKeyStuffAbstract, _TaskInfo);var _super = QuestKeyStuffAbstract_createSuper(QuestKeyStuffAbstract);function QuestKeyStuffAbstract() {var _this;QuestKeyStuffAbstract_classCallCheck(this, QuestKeyStuffAbstract);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestKeyStuffAbstract_defineProperty(QuestKeyStuffAbstract_assertThisInitialized(_this), "keys",
    ["Boris's key", "Sneaky Pete's key", "Jarlsberg's key"].map(
    (s) => external_kolmafia_namespaceObject.Item.get(s)));QuestKeyStuffAbstract_defineProperty(QuestKeyStuffAbstract_assertThisInitialized(_this), "zappables",

    []);QuestKeyStuffAbstract_defineProperty(QuestKeyStuffAbstract_assertThisInitialized(_this), "token",
    external_kolmafia_namespaceObject.Item.get("Fat loot token"));return _this;}QuestKeyStuffAbstract_createClass(QuestKeyStuffAbstract, [{ key: "getKeysUsed", value:

    function getKeysUsed() {
      return (0,external_kolmafia_namespaceObject.getProperty)("nsTowerDoorKeysUsed").
      split(",").
      filter((s) => s.length > 0).
      map((s) => external_kolmafia_namespaceObject.Item.get(s)).
      filter((k) => this.keys.includes(k));
    } }, { key: "getUnusedKeys", value:



    function getUnusedKeys() {
      var used = this.getKeysUsed();

      return this.keys.filter((i) => !used.includes(i));
    } }, { key: "getKeysUnavailable", value:

    function getKeysUnavailable() {
      var used = this.getKeysUsed();

      return this.keys.filter(
      (k) => !used.includes(k) && (0,external_kolmafia_namespaceObject.availableAmount)(k) == 0);

    } }, { key: "getOwnedZappables", value:

    function getOwnedZappables() {
      var owned = [];var _iterator = QuestKeyStuffAbstract_createForOfIteratorHelper(

      this.getZappableItems()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          for (var a = 0; a < (0,external_kolmafia_namespaceObject.availableAmount)(i); a++) {
            owned.push(i);
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return owned;
    } }, { key: "getOwnedKeys", value:

    function getOwnedKeys() {
      return this.keys.filter((k) => (0,external_kolmafia_namespaceObject.availableAmount)(k) > 0);
    } }, { key: "getViableKeyCount", value:

    function getViableKeyCount() {
      var keys =
      (0,external_kolmafia_namespaceObject.availableAmount)(this.token) +
      this.getKeysUsed().length +
      this.getOwnedKeys().length;

      if ((0,external_kolmafia_namespaceObject.getProperty)("dailyDungeonDone") == "false") {
        keys += 1;

        if (
        !GreySettings.isHardcoreMode() &&
        (0,external_kolmafia_namespaceObject.getProperty)("dailyDungeonMalwareUsed") == "false")
        {
          keys += 1;
        }
      }

      // If we can fight bandit
      if ((0,external_kolmafia_namespaceObject.toInt)("_foughtFantasyRealm") < 5) {
        // If we own fantasyrealm
        if (
        (0,external_kolmafia_namespaceObject.getProperty)("frAlways") == "true" ||
        (0,external_kolmafia_namespaceObject.getProperty)("_frToday") == "true")
        {
          keys++;
        } else if (
        canCombatLocket(external_kolmafia_namespaceObject.Monster.get("Fantasy Bandit")) &&
        11 - (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_backUpUses")) >= 4)
        {
          keys += 1;
        }
      }

      return keys;
    } }, { key: "getZappableItems", value:

    function getZappableItems() {
      if (this.zappables.length == 0) {var _iterator2 = QuestKeyStuffAbstract_createForOfIteratorHelper(
        this.keys),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var i = _step2.value;
            Object.keys((0,external_kolmafia_namespaceObject.getRelated)(i, "zap")).forEach((s) => {
              var i = external_kolmafia_namespaceObject.Item.get(s);

              if (this.zappables.includes(i) || this.keys.includes(i)) {
                return;
              }

              this.zappables.push(i);
            });
          }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
      }

      return this.zappables;
    } }]);return QuestKeyStuffAbstract;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestDailyDungeon.ts
function QuestDailyDungeon_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestDailyDungeon_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestDailyDungeon_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestDailyDungeon_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestDailyDungeon_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestDailyDungeon_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestDailyDungeon_setPrototypeOf(subClass, superClass);}function QuestDailyDungeon_setPrototypeOf(o, p) {QuestDailyDungeon_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestDailyDungeon_setPrototypeOf(o, p);}function QuestDailyDungeon_createSuper(Derived) {var hasNativeReflectConstruct = QuestDailyDungeon_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestDailyDungeon_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestDailyDungeon_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestDailyDungeon_possibleConstructorReturn(this, result);};}function QuestDailyDungeon_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestDailyDungeon_assertThisInitialized(self);}function QuestDailyDungeon_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestDailyDungeon_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestDailyDungeon_getPrototypeOf(o) {QuestDailyDungeon_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestDailyDungeon_getPrototypeOf(o);}function QuestDailyDungeon_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var QuestDailyDungeon = /*#__PURE__*/function (_TaskInfo) {QuestDailyDungeon_inherits(QuestDailyDungeon, _TaskInfo);var _super = QuestDailyDungeon_createSuper(QuestDailyDungeon);function QuestDailyDungeon() {var _this;QuestDailyDungeon_classCallCheck(this, QuestDailyDungeon);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "pole",
    external_kolmafia_namespaceObject.Item.get("eleven-foot pole"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "ring",
    external_kolmafia_namespaceObject.Item.get("ring of Detect Boring Doors"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "picklocks",
    external_kolmafia_namespaceObject.Item.get("Pick-O-Matic lockpicks"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "location",
    external_kolmafia_namespaceObject.Location.get("The Daily Dungeon"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "fam",
    external_kolmafia_namespaceObject.Familiar.get("Gelatinous Cubeling"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "malware",
    external_kolmafia_namespaceObject.Item.get("Daily dungeon malware"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "malwarePath", void 0);QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "noMalware",

    new PossiblePath(4));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "paths", void 0);return _this;}QuestDailyDungeon_createClass(QuestDailyDungeon, [{ key: "getLocations", value:


    function getLocations() {
      return [this.location];
    } }, { key: "isDailyDoneToday", value:

    function isDailyDoneToday() {
      return (0,external_kolmafia_namespaceObject.getProperty)("dailyDungeonDone") == "true";
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      if (
      !assumeUnstarted &&
      GreySettings.shouldAvoidTowerRequirements() &&
      !GreySettings.greyReachedTower)
      {
        this.paths = null;
        return;
      }

      this.paths = [];

      this.malwarePath = new PossiblePath(4).addConsumablePull(this.malware);

      if (GreySettings.greyDailyMalware != "true") {
        this.paths.push(this.noMalware);
      }

      if (
      GreySettings.greyDailyMalware != "false" && (
      assumeUnstarted || !GreySettings.isHardcoreMode()))
      {
        this.paths.push(this.malwarePath);
      }

      if (assumeUnstarted) {
        return;
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.malware) > 0 ||
      (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("_dailyDungeonMalwareUsed")))
      {
        this.malwarePath.addUsed(ResourceCategory.PULL);
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "doMalware", value:

    function doMalware() {
      if (GreySettings.isHardcoreMode()) {
        return false;
      }

      if (GreySettings.greyDailyMalware != null) {
        return (0,external_kolmafia_namespaceObject.toBoolean)(GreySettings.greyDailyMalware);
      }

      var key = GreyPulls.getPullableKeys()[0];
      var itemPrice =
      (0,external_kolmafia_namespaceObject.historicalAge)(key) > 2 ? (0,external_kolmafia_namespaceObject.mallPrice)(key) : (0,external_kolmafia_namespaceObject.historicalPrice)(key);
      var malwarePrice =
      (0,external_kolmafia_namespaceObject.historicalAge)(this.malware) > 2 ?
      (0,external_kolmafia_namespaceObject.mallPrice)(this.malware) :
      (0,external_kolmafia_namespaceObject.historicalPrice)(this.malware);

      return itemPrice > malwarePrice && malwarePrice < 40000;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      if (
      GreySettings.shouldAvoidTowerRequirements() ||
      !(0,external_kolmafia_namespaceObject.haveFamiliar)(this.fam))
      {
        return null;
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.pole) > 0 &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.ring) > 0 &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.picklocks) > 0)
      {
        return null;
      }

      return this.fam;
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if (getQuestStatus("questL13Final") > 5 || this.isDailyDoneToday()) {
        return QuestStatus.COMPLETED;
      }

      if (GreySettings.shouldAvoidTowerRequirements()) {
        if (GreySettings.greyDailyMalware) {
          if (GreySettings.greyReachedTower) {
            return QuestStatus.READY;
          }

          return QuestStatus.NOT_READY;
        }

        return QuestStatus.COMPLETED;
      }

      if (this.hasFamiliarRecommendation() != null) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "isMalwareUsed", value:

    function isMalwareUsed() {
      return (0,external_kolmafia_namespaceObject.getProperty)("_dailyDungeonMalwareUsed") == "true";
    } }, { key: "grabMalware", value:

    function grabMalware(path) {
      if (
      (0,external_kolmafia_namespaceObject.itemAmount)(this.malware) != 0 ||
      this.isMalwareUsed() ||
      !path.canUse(ResourceCategory.PULL))
      {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.pullsRemaining)() == -1) {
        (0,external_kolmafia_namespaceObject.cliExecute)("acquire " + this.malware);
      } else {
        GreyPulls.tryPull(this.malware, 50000);
        path.addUsed(ResourceCategory.PULL);
      }

      if ((0,external_kolmafia_namespaceObject.itemAmount)(this.malware) == 0) {
        throw (
          "Expected to have " +
          this.malware +
          " on hand, something went wrong obviously.");

      }
    } }, { key: "run", value:

    function run(path) {
      var outfit = new GreyOutfit();
      outfit.addItem(this.ring);

      return {
        outfit: outfit,
        location: this.location,
        run: () => {
          var dontHave = [this.ring, this.picklocks, this.pole].filter(
          (i) => (0,external_kolmafia_namespaceObject.itemAmount)(i) + (0,external_kolmafia_namespaceObject.equippedAmount)(i) == 0);


          if ((0,external_kolmafia_namespaceObject.pullsRemaining)() == -1) {
            dontHave.forEach((i) => {
              GreyPulls.tryPull(i, 5000);
              path.addUsed(ResourceCategory.PULL);
            });
          } /*else if (dontHave.length > 0) {
          print("Uh oh! Missing " + dontHave.join(", ") + "!", "red");
          throw "Expected to have dungeon items, didn't.";
          }*/

          this.grabMalware(path);

          var props = new PropertyManager();
          var settings = new AdventureSettings();

          if ((0,external_kolmafia_namespaceObject.itemAmount)(this.malware) > 0 && !this.isMalwareUsed()) {
            settings.setStartOfFightMacro(Macro.item(this.malware));
          }

          props.setChoice(689, 1);
          props.setChoice(690, 2);
          props.setChoice(691, 2);
          props.setChoice(692, 3);
          props.setChoice(693, 2);

          try {
            greyAdv(this.location, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 9;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes / DailyDungeon";
    } }]);return QuestDailyDungeon;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestFantasyBandits.ts
function QuestFantasyBandits_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestFantasyBandits_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestFantasyBandits_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestFantasyBandits_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestFantasyBandits_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestFantasyBandits_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestFantasyBandits_setPrototypeOf(subClass, superClass);}function QuestFantasyBandits_setPrototypeOf(o, p) {QuestFantasyBandits_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestFantasyBandits_setPrototypeOf(o, p);}function QuestFantasyBandits_createSuper(Derived) {var hasNativeReflectConstruct = QuestFantasyBandits_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestFantasyBandits_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestFantasyBandits_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestFantasyBandits_possibleConstructorReturn(this, result);};}function QuestFantasyBandits_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestFantasyBandits_assertThisInitialized(self);}function QuestFantasyBandits_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestFantasyBandits_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestFantasyBandits_getPrototypeOf(o) {QuestFantasyBandits_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestFantasyBandits_getPrototypeOf(o);}function QuestFantasyBandits_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestFantasyBandit = /*#__PURE__*/function (_TaskInfo) {QuestFantasyBandits_inherits(QuestFantasyBandit, _TaskInfo);var _super = QuestFantasyBandits_createSuper(QuestFantasyBandit);function QuestFantasyBandit() {var _this;QuestFantasyBandits_classCallCheck(this, QuestFantasyBandit);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "fought",
    "_foughtFantasyRealm");QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "monster",
    external_kolmafia_namespaceObject.Monster.get("Fantasy Bandit"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "camera",
    external_kolmafia_namespaceObject.Item.get("Backup Camera"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "location",
    external_kolmafia_namespaceObject.Location.get("The Bandit Crossroads"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "equip",
    external_kolmafia_namespaceObject.Item.get("FantasyRealm G. E. M."));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "token",
    external_kolmafia_namespaceObject.Item.get("fat loot token"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "path", void 0);return _this;}QuestFantasyBandits_createClass(QuestFantasyBandit, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      // We copy 4 times, fax 1 time
      // How many copies we want to perform
      var fightsRemaining = 5 - (assumeUnstarted ? 0 : this.getFoughtToday());

      this.path = new PossiblePath(fightsRemaining);

      // If we have realm access, no need for further resources.
      if (this.hasRealmAccess()) {
        return;
      }

      this.path.addFax(this.monster);
      this.path.add(ResourceCategory.COPIER, 4);

      // If we're assuming we've unstarted, no need to add this stuff
      if (assumeUnstarted) {
        return;
      }

      // If the last monster was is a bandit, no need to fax
      // But we still need to fight X more bandits.
      if (this.lastBackup() == this.monster) {
        this.path.addUsed(ResourceCategory.FAXER);
      } else {
        // We need to fax, so one of those copies is a fax and can be removed
        fightsRemaining--;
      }

      // Assuming we're at fought = 1, so 4 bandits remaining.
      // If last monster is sheep, then we'd need to do a fax and 3 copies = 4
      // If last monster is bandit, then we'd need to do 4 copies
      for (var i = fightsRemaining; i < 4; i++) {
        this.path.addUsed(ResourceCategory.COPIER);
      }
    } }, { key: "grabFantasyGem", value:

    function grabFantasyGem() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=realm_fantasy&action=fr_initcenter");
          (0,external_kolmafia_namespaceObject.runChoice)(3);

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.equip) == 0) {
            throw "I unexpectedly didn't acquire the fantasyrealm gem!";
          }
        } };

    } }, { key: "runFantasyRealm", value:

    function runFantasyRealm() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.equip) == 0) {
        return this.grabFantasyGem();
      }

      var outfit = new GreyOutfit();
      // Try avoid exp stuff being added cos we're not running a fam
      outfit.addBonus("-100 familiar exp");
      outfit.addItem(this.equip);

      return {
        location: this.location,
        familiar: external_kolmafia_namespaceObject.Familiar.get("None"),
        disableFamOverride: true,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(1281, 0); // Don't handle

          if ((0,external_kolmafia_namespaceObject.myFamiliar)() != external_kolmafia_namespaceObject.Familiar.get("None")) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("None"));
          }

          var tokens = (0,external_kolmafia_namespaceObject.availableAmount)(this.token);

          try {
            greyAdv(this.location, outfit);
            this.addFought();
          } catch (e) {
            (0,external_kolmafia_namespaceObject.print)(
            "We errored, did we hit crossroads choice? We deliberately should not hit that if we still haven't finished fantasy bandits. You may need to set '_foughtFantasyRealm' to 5",
            "red");

            throw e;
          } finally {
            props.resetAll();
          }

          if (this.hasFoughtEnough() && (0,external_kolmafia_namespaceObject.availableAmount)(this.token) == tokens) {
            throw "Expected to have a fat loot token from fantasyland, didn't!";
          }
        } };

    } }, { key: "hasRealmAccess", value:

    function hasRealmAccess() {
      return (
        (0,external_kolmafia_namespaceObject.getProperty)("frAlways") == "true" || (0,external_kolmafia_namespaceObject.getProperty)("_frToday") == "true");

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.path];
    } }, { key: "getFoughtToday", value:

    function getFoughtToday() {
      var setting = (0,external_kolmafia_namespaceObject.getProperty)(this.fought);

      if (setting == "") {
        return 0;
      }

      return (0,external_kolmafia_namespaceObject.toInt)(setting);
    } }, { key: "addFought", value:

    function addFought() {
      (0,external_kolmafia_namespaceObject.setProperty)(this.fought, (this.getFoughtToday() + 1).toString());
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes / FantasyBandit";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "hasFoughtEnough", value:

    function hasFoughtEnough() {
      return this.getFoughtToday() >= 5;
    } }, { key: "status", value:

    function status() {
      if (this.hasFoughtEnough()) {
        return QuestStatus.COMPLETED;
      }

      if (!GreySettings.greyFantasyBandits) {
        if (
        GreySettings.shouldAvoidTowerRequirements() ||
        GreySettings.isHardcoreMode())
        {
          return QuestStatus.NOT_READY;
        }
      }

      if (getQuestStatus("questL08Trapper") <= 1) {
        return QuestStatus.NOT_READY;
      }

      if (!this.hasRealmAccess() && this.lastBackup() == this.monster) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.myAdventures)() < 30) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "lastBackup", value:

    function lastBackup() {
      return (0,external_kolmafia_namespaceObject.getProperty)("lastCopyableMonster") == "" ?
      null :
      external_kolmafia_namespaceObject.Monster.get((0,external_kolmafia_namespaceObject.getProperty)("lastCopyableMonster"));
    } }, { key: "run", value:

    function run(path) {
      if (this.hasRealmAccess()) {
        return this.runFantasyRealm();
      }

      return this.doFaxingBandits(path);
    } }, { key: "doFaxingBandits", value:

    function doFaxingBandits(path) {
      if (
      !path.canUse(ResourceCategory.FAXER) &&
      this.lastBackup() != this.monster)
      {
        throw "Unable to do fantasy bandits";
      }

      if (
      path.canUse(ResourceCategory.FAXER) &&
      this.lastBackup() != this.monster)
      {
        var _resource = path.getResource(ResourceCategory.FAXER);

        return {
          location: null,
          run: () => {
            _resource.fax(this.monster);

            greyAdv("main.php");

            this.addFought();
            path.addUsed(ResourceCategory.FAXER);
          } };

      }

      var outfit = new GreyOutfit();
      var loc = external_kolmafia_namespaceObject.Location.get("The Dire Warren");
      var resource = path.getResource(ResourceCategory.COPIER);
      resource.prepare(outfit);

      // TODO Backup and ruin other zones delay
      return {
        outfit: outfit,
        location: null,
        run: () => {
          greyAdv(
          loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          new Macro().if_(external_kolmafia_namespaceObject.Monster.get("Fluffy Bunny"), resource.macro())));


          this.addFought();
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 5;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      // TODO Throw error if more than one quest reports this
      return this.getFoughtToday() > 0 && !this.hasFoughtEnough();
    } }]);return QuestFantasyBandit;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestPackOfCardsKey.ts
function QuestPackOfCardsKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestPackOfCardsKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestPackOfCardsKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestPackOfCardsKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestPackOfCardsKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestPackOfCardsKey_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestPackOfCardsKey_setPrototypeOf(subClass, superClass);}function QuestPackOfCardsKey_setPrototypeOf(o, p) {QuestPackOfCardsKey_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestPackOfCardsKey_setPrototypeOf(o, p);}function QuestPackOfCardsKey_createSuper(Derived) {var hasNativeReflectConstruct = QuestPackOfCardsKey_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestPackOfCardsKey_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestPackOfCardsKey_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestPackOfCardsKey_possibleConstructorReturn(this, result);};}function QuestPackOfCardsKey_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestPackOfCardsKey_assertThisInitialized(self);}function QuestPackOfCardsKey_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestPackOfCardsKey_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestPackOfCardsKey_getPrototypeOf(o) {QuestPackOfCardsKey_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestPackOfCardsKey_getPrototypeOf(o);}function QuestPackOfCardsKey_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestPackOfCardsKey = /*#__PURE__*/function (_TaskInfo) {QuestPackOfCardsKey_inherits(QuestPackOfCardsKey, _TaskInfo);var _super = QuestPackOfCardsKey_createSuper(QuestPackOfCardsKey);function QuestPackOfCardsKey() {var _this;QuestPackOfCardsKey_classCallCheck(this, QuestPackOfCardsKey);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestPackOfCardsKey_defineProperty(QuestPackOfCardsKey_assertThisInitialized(_this), "pickCard", void 0);return _this;}QuestPackOfCardsKey_createClass(QuestPackOfCardsKey, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.pickCard = new PossiblePath(0).add(
      ResourceCategory.DECK_OF_EVERY_CARD_CHEAT);


      if (!assumeUnstarted) {
        if ((0,external_kolmafia_namespaceObject.getProperty)("_deckCardsSeen").includes("XVI - The Tower")) {
          this.pickCard.addUsed(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT);
        }
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.pickCard];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes / DeckOfCards";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status(path) {
      if (
      path != null &&
      !path.canUse(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT))
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          path.
          getResource(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT).
          pickCard("XVI - The Tower");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }]);return QuestPackOfCardsKey;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestPullAndZapKeys.ts
function QuestPullAndZapKeys_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestPullAndZapKeys_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestPullAndZapKeys_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestPullAndZapKeys_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestPullAndZapKeys_arrayLikeToArray(o, minLen);}function QuestPullAndZapKeys_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestPullAndZapKeys_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestPullAndZapKeys_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestPullAndZapKeys_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestPullAndZapKeys_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestPullAndZapKeys_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestPullAndZapKeys_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestPullAndZapKeys_setPrototypeOf(subClass, superClass);}function QuestPullAndZapKeys_setPrototypeOf(o, p) {QuestPullAndZapKeys_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestPullAndZapKeys_setPrototypeOf(o, p);}function QuestPullAndZapKeys_createSuper(Derived) {var hasNativeReflectConstruct = QuestPullAndZapKeys_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestPullAndZapKeys_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestPullAndZapKeys_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestPullAndZapKeys_possibleConstructorReturn(this, result);};}function QuestPullAndZapKeys_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestPullAndZapKeys_assertThisInitialized(self);}function QuestPullAndZapKeys_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestPullAndZapKeys_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestPullAndZapKeys_getPrototypeOf(o) {QuestPullAndZapKeys_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestPullAndZapKeys_getPrototypeOf(o);}function QuestPullAndZapKeys_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestPullAndZapKeys = /*#__PURE__*/function (_QuestKeyStuffAbstrac) {QuestPullAndZapKeys_inherits(QuestPullAndZapKeys, _QuestKeyStuffAbstrac);var _super = QuestPullAndZapKeys_createSuper(QuestPullAndZapKeys);function QuestPullAndZapKeys() {var _this;QuestPullAndZapKeys_classCallCheck(this, QuestPullAndZapKeys);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestPullAndZapKeys_defineProperty(QuestPullAndZapKeys_assertThisInitialized(_this), "pullKey", void 0);QuestPullAndZapKeys_defineProperty(QuestPullAndZapKeys_assertThisInitialized(_this), "paths", void 0);return _this;}QuestPullAndZapKeys_createClass(QuestPullAndZapKeys, [{ key: "getId", value:






    function getId() {
      return "Council / Tower / Keys / Heroes / Pull and Zap Keys";
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this2 = this;
      if (!assumeUnstarted && GreySettings.isHardcoreMode()) {
        this.paths = null;
        return;
      }

      var pullableKeys = GreyPulls.getPullableKeys();

      if (!assumeUnstarted) {
        pullableKeys = pullableKeys.filter(
        (i) => !hasPulled(i) || (0,external_kolmafia_namespaceObject.availableAmount)(i) > 0);

      }

      if (pullableKeys.length == 0) {
        this.paths = null;
        return;
      }

      this.paths = [];var _iterator = QuestPullAndZapKeys_createForOfIteratorHelper(

      getAllCombinations(pullableKeys)),_step;try {var _loop = function _loop() {var combination = _step.value;
          var path = new PossibleKeyPath(0);
          path.keys = combination.length;

          combination.forEach((i) => {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(i) == 0) {
              path.addConsumablePull(i);
            }

            path.add(ResourceCategory.ZAP);
          });

          _this2.paths.push(path);};for (_iterator.s(); !(_step = _iterator.n()).done;) {_loop();
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      if (GreySettings.isHardcoreMode()) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL13Final");

      if (status < 5) {
        return QuestStatus.NOT_READY;
      }

      if (status > 5) {
        return QuestStatus.COMPLETED;
      }

      if (this.getViableKeyCount() >= 3) {
        return QuestStatus.COMPLETED;
      }

      if (this.getOwnedZappables().length > 0) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        run: () => {
          var wand = (0,external_kolmafia_namespaceObject.getZapWand)();

          if (wand == external_kolmafia_namespaceObject.Item.get("None")) {
            throw "Expected a wand! What happened!";
          }

          if (this.getOwnedZappables().length == 0) {
            var toPull = path.pulls.find((i) => !hasPulled(i));

            if (toPull == null) {
              throw "Failed to find a zappable key to pull?";
            }

            GreyPulls.tryRetrieve(toPull, 40000);

            if (this.getOwnedZappables().length == 0) {
              throw "Expected to have a zappable key grabbed";
            }
          }

          var toZap = this.getOwnedZappables();
          var zapped = (0,external_kolmafia_namespaceObject.zap)(toZap[0]);

          if (!this.keys.includes(zapped)) {
            throw (
              "Ugh, we failed to zap " +
              toZap[0] +
              " properly. We got " +
              zapped +
              " instead.");

          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestPullAndZapKeys;}(QuestKeyStuffAbstract);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestZapKeys.ts
function QuestZapKeys_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestZapKeys_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestZapKeys_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestZapKeys_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestZapKeys_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestZapKeys_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestZapKeys_setPrototypeOf(subClass, superClass);}function QuestZapKeys_setPrototypeOf(o, p) {QuestZapKeys_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestZapKeys_setPrototypeOf(o, p);}function QuestZapKeys_createSuper(Derived) {var hasNativeReflectConstruct = QuestZapKeys_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestZapKeys_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestZapKeys_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestZapKeys_possibleConstructorReturn(this, result);};}function QuestZapKeys_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestZapKeys_assertThisInitialized(self);}function QuestZapKeys_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestZapKeys_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestZapKeys_getPrototypeOf(o) {QuestZapKeys_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestZapKeys_getPrototypeOf(o);}





var QuestZapKeys = /*#__PURE__*/function (_QuestKeyStuffAbstrac) {QuestZapKeys_inherits(QuestZapKeys, _QuestKeyStuffAbstrac);var _super = QuestZapKeys_createSuper(QuestZapKeys);function QuestZapKeys() {QuestZapKeys_classCallCheck(this, QuestZapKeys);return _super.apply(this, arguments);}QuestZapKeys_createClass(QuestZapKeys, [{ key: "getTimesZapped", value:


    function getTimesZapped() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_zapCount"));
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes / ZapKeys";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.pullsRemaining)() == -1) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL13Final");

      if (status < 5) {
        return QuestStatus.NOT_READY;
      }

      if (status > 5) {
        return QuestStatus.COMPLETED;
      }

      if (this.getKeysUnavailable().length == 0) {
        return QuestStatus.COMPLETED;
      }

      var zappables = this.getOwnedZappables();

      if (zappables.length == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          var wand = (0,external_kolmafia_namespaceObject.getZapWand)();

          if (wand == external_kolmafia_namespaceObject.Item.get("None")) {
            throw "Expected a wand! What happened!";
          }

          var toZap = this.getOwnedZappables();

          if (toZap.length == 0) {
            throw "Expected something to zap! What happened!";
          }

          var zapped = (0,external_kolmafia_namespaceObject.zap)(toZap[0]);

          if (!this.keys.includes(zapped)) {
            throw (
              "Ugh, we failed to zap it properly. We zapped " +
              toZap[0].name +
              " and got " +
              zapped.name);

          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestZapKeys;}(QuestKeyStuffAbstract);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestHeroKeys.ts
function QuestHeroKeys_slicedToArray(arr, i) {return QuestHeroKeys_arrayWithHoles(arr) || QuestHeroKeys_iterableToArrayLimit(arr, i) || QuestHeroKeys_unsupportedIterableToArray(arr, i) || QuestHeroKeys_nonIterableRest();}function QuestHeroKeys_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestHeroKeys_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function QuestHeroKeys_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestHeroKeys_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestHeroKeys_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestHeroKeys_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestHeroKeys_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestHeroKeys_arrayLikeToArray(o, minLen);}function QuestHeroKeys_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestHeroKeys_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestHeroKeys_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestHeroKeys_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestHeroKeys_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestHeroKeys_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestHeroKeys_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestHeroKeys_setPrototypeOf(subClass, superClass);}function QuestHeroKeys_setPrototypeOf(o, p) {QuestHeroKeys_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestHeroKeys_setPrototypeOf(o, p);}function QuestHeroKeys_createSuper(Derived) {var hasNativeReflectConstruct = QuestHeroKeys_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestHeroKeys_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestHeroKeys_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestHeroKeys_possibleConstructorReturn(this, result);};}function QuestHeroKeys_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestHeroKeys_assertThisInitialized(self);}function QuestHeroKeys_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestHeroKeys_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestHeroKeys_getPrototypeOf(o) {QuestHeroKeys_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestHeroKeys_getPrototypeOf(o);}function QuestHeroKeys_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}












var PossibleKeyPath = /*#__PURE__*/function (_PossiblePath) {QuestHeroKeys_inherits(PossibleKeyPath, _PossiblePath);var _super = QuestHeroKeys_createSuper(PossibleKeyPath);function PossibleKeyPath() {var _this;QuestHeroKeys_classCallCheck(this, PossibleKeyPath);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this), "keys", void 0);return _this;}return QuestHeroKeys_createClass(PossibleKeyPath);}(PossiblePath);



var QuestHeroKeys = /*#__PURE__*/function (_TaskInfo) {QuestHeroKeys_inherits(QuestHeroKeys, _TaskInfo);var _super2 = QuestHeroKeys_createSuper(QuestHeroKeys);







  function QuestHeroKeys() {var _this2;QuestHeroKeys_classCallCheck(this, QuestHeroKeys);
    _this2 = _super2.call(this);QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this2), "keys", ["Boris's key", "Sneaky Pete's key", "Jarlsberg's key"].map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this2), "token", external_kolmafia_namespaceObject.Item.get("Fat loot token"));QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this2), "quests", []);QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this2), "paths", void 0);

    _this2.quests.push(new QuestDailyDungeon());
    _this2.quests.push(new QuestFantasyBandit());
    _this2.quests.push(new QuestPackOfCardsKey());
    _this2.quests.push(new QuestPullAndZapKeys());return _this2;
  }QuestHeroKeys_createClass(QuestHeroKeys, [{ key: "getMissingKeys", value:

    function getMissingKeys() {
      return (
        3 - (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.token) +
        this.keys.filter((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) > 0).length));

    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this3 = this;
      // If we're avoiding the tower requirements, and haven't reached tower yet.
      // Don't use our resources on key stuff
      if (
      !assumeUnstarted &&
      GreySettings.shouldAvoidTowerRequirements() &&
      !GreySettings.greyReachedTower)
      {
        this.paths = null;
        return;
      }

      var allPaths = [];var _iterator = QuestHeroKeys_createForOfIteratorHelper(

      this.quests),_step;try {var _loop = function _loop() {var quest = _step.value;
          if (!(quest instanceof TaskInfo)) {
            (0,external_kolmafia_namespaceObject.print)("Unknown key path " + quest.getId(), "red");
            return "continue";
          }

          quest.createPaths(assumeUnstarted);

          var paths = quest.getPossiblePaths();

          // This shouldn't be done at this point
          if (paths == null) {
            (0,external_kolmafia_namespaceObject.print)("Can't do " + quest.getId());
            return "continue";
          }

          if (paths.length == 0) {
            (0,external_kolmafia_namespaceObject.print)("Empty paths found for key path, " + quest.getId(), "red");
            return "continue";
          }

          quest.getPossiblePaths().forEach((path) => {
            allPaths.push([quest, path]);
          });};for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      var keysNeeded = assumeUnstarted ? 3 : this.getMissingKeys();
      var shouldDoDaily =
      GreySettings.greyDailyDungeon && (
      assumeUnstarted || (0,external_kolmafia_namespaceObject.getProperty)("dailyDungeonDone") != "true") && (
      GreySettings.greyDailyMalware != "true" ||
      assumeUnstarted ||
      !GreySettings.isHardcoreMode());

      if (keysNeeded <= 0 && !shouldDoDaily) {
        return;
      }

      this.paths = [];var _iterator2 = QuestHeroKeys_createForOfIteratorHelper(

      getAllCombinations(allPaths)),_step2;try {var _loop2 = function _loop2() {var combination = _step2.value;
          // If we're asking for too many key sources
          if (combination.length > keysNeeded) {
            return "continue";
          }

          // If we're asking to run a quest multiple times
          if (
          combination.find(
          (_ref) => {var _ref2 = QuestHeroKeys_slicedToArray(_ref, 1),c = _ref2[0];return (
              combination.filter((_ref3) => {var _ref4 = QuestHeroKeys_slicedToArray(_ref3, 1),cc = _ref4[0];return cc.getId() === c.getId();}).length > 1);}))

          {
            return "continue";
          }

          var hittingMalware =
          combination.find(
          (_ref5) => {var _path$keys;var _ref6 = QuestHeroKeys_slicedToArray(_ref5, 2),q = _ref6[0],path = _ref6[1];return (
              q.getId() == "Council / Tower / Keys / Heroes / DailyDungeon" &&
              ((_path$keys = path.keys) !== null && _path$keys !== void 0 ? _path$keys : 1) > 1);}) !=
          null;

          var keysGiven =
          combination.length +
          combination.
          map((_ref7) => {var _path$keys2;var _ref8 = QuestHeroKeys_slicedToArray(_ref7, 2),path = _ref8[1];return (_path$keys2 = path.keys) !== null && _path$keys2 !== void 0 ? _path$keys2 : 1;}).
          reduce((p, n) => p + n, 0);

          // If we're not going to get enough keys
          if (keysGiven < keysNeeded) {
            return "continue";
          }

          // Here we know we're definitely going to get enough keys. But what about malware?

          // True means the user always wants to use malware
          // False means the user never wants to use malware
          // Null means we don't care. Which means do an equal check

          // If we're going to hit malware, and it'd give us too many keys, and the user doesn't care..
          if (
          hittingMalware &&
          keysGiven - 1 == keysNeeded &&
          GreySettings.greyDailyMalware == null)
          {
            return "continue";
          }

          // If we need to do daily dungeon as per settings, and this combination doesn't let us do that..
          if (
          shouldDoDaily &&
          combination.find(
          (_ref9) => {var _ref10 = QuestHeroKeys_slicedToArray(_ref9, 1),q = _ref10[0];return q.getId() == "Council / Tower / Keys / Heroes / DailyDungeon";}) ==
          null)
          {
            return "continue";
          }

          var path = new PossibleMultiPath(0);

          combination.forEach((c) => {
            path.addPath(c[0], c[1]);
          });

          _this3.paths.push(path);};for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _ret2 = _loop2();if (_ret2 === "continue") continue;
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
    } }, { key: "getChildren", value:

    function getChildren() {
      return [new QuestZapKeys()];
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status(path) {
      throw new Error("Method not implemented.");
    } }, { key: "run", value:

    function run(path) {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes";
    } }]);return QuestHeroKeys;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerKeys.ts
function QuestTowerKeys_slicedToArray(arr, i) {return QuestTowerKeys_arrayWithHoles(arr) || QuestTowerKeys_iterableToArrayLimit(arr, i) || QuestTowerKeys_unsupportedIterableToArray(arr, i) || QuestTowerKeys_nonIterableRest();}function QuestTowerKeys_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestTowerKeys_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function QuestTowerKeys_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestTowerKeys_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerKeys_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestTowerKeys_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerKeys_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerKeys_arrayLikeToArray(o, minLen);}function QuestTowerKeys_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestTowerKeys_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerKeys_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerKeys_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerKeys_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerKeys_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerKeys_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestTowerKeys_setPrototypeOf(subClass, superClass);}function QuestTowerKeys_setPrototypeOf(o, p) {QuestTowerKeys_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestTowerKeys_setPrototypeOf(o, p);}function QuestTowerKeys_createSuper(Derived) {var hasNativeReflectConstruct = QuestTowerKeys_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestTowerKeys_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestTowerKeys_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestTowerKeys_possibleConstructorReturn(this, result);};}function QuestTowerKeys_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestTowerKeys_assertThisInitialized(self);}function QuestTowerKeys_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestTowerKeys_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestTowerKeys_getPrototypeOf(o) {QuestTowerKeys_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestTowerKeys_getPrototypeOf(o);}function QuestTowerKeys_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestTowerKeys = /*#__PURE__*/function (_QuestKeyStuffAbstrac) {QuestTowerKeys_inherits(QuestTowerKeys, _QuestKeyStuffAbstrac);var _super = QuestTowerKeys_createSuper(QuestTowerKeys);function QuestTowerKeys() {var _this;QuestTowerKeys_classCallCheck(this, QuestTowerKeys);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestTowerKeys_defineProperty(QuestTowerKeys_assertThisInitialized(_this), "keyItems",
    [
    ["ns_lock1", external_kolmafia_namespaceObject.Item.get("Boris's Key")],
    ["ns_lock2", external_kolmafia_namespaceObject.Item.get("Jarlsberg's Key")],
    ["ns_lock3", external_kolmafia_namespaceObject.Item.get("Sneaky Pete's Key")],
    ["ns_lock4", external_kolmafia_namespaceObject.Item.get("Richard's Star Key")],
    ["ns_lock5", external_kolmafia_namespaceObject.Item.get("Digital Key")],
    ["ns_lock6", external_kolmafia_namespaceObject.Item.get("Skeleton Key")]]);QuestTowerKeys_defineProperty(QuestTowerKeys_assertThisInitialized(_this), "children",

    [
    new QuestSkeletonKey(),
    new QuestStarKey(),
    new QuestDigitalKey(),
    new QuestHeroKeys()]);QuestTowerKeys_defineProperty(QuestTowerKeys_assertThisInitialized(_this), "refreshedStorage",

    false);return _this;}QuestTowerKeys_createClass(QuestTowerKeys, [{ key: "getTokensAvailable", value:



    function getTokensAvailable() {
      if ((0,external_kolmafia_namespaceObject.pullsRemaining)() == -1 && !this.refreshedStorage) {
        (0,external_kolmafia_namespaceObject.cliExecute)("refresh storage");
        this.refreshedStorage = true;
      }

      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.token) + (
        (0,external_kolmafia_namespaceObject.pullsRemaining)() == -1 ? (0,external_kolmafia_namespaceObject.storageAmount)(this.token) : 0));

    } }, { key: "isReadyToRedeemTokens", value:

    function isReadyToRedeemTokens() {
      var keysAvailable = this.keys.filter(
      (k) => (0,external_kolmafia_namespaceObject.availableAmount)(k) > 0).
      length;

      if (keysAvailable >= 3) {
        return false;
      }

      return keysAvailable + this.getTokensAvailable() >= 3;
    } }, { key: "redeemKeys", value:

    function redeemKeys() {
      var keys = this.keys.filter((k) => (0,external_kolmafia_namespaceObject.availableAmount)(k) == 0);

      return {
        location: null,
        run: () => {var _iterator = QuestTowerKeys_createForOfIteratorHelper(
          keys),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var k = _step.value;
              (0,external_kolmafia_namespaceObject.retrieveItem)(k);
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / KeyDoor";
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "getNotDone", value:

    function getNotDone() {
      var used = this.getKeysUsed();

      return this.keyItems.filter((k) => !used.includes(k[1]));
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 5) {
        return QuestStatus.NOT_READY;
      }

      if (status > 5) {
        return QuestStatus.COMPLETED;
      }

      if (this.isReadyToRedeemTokens()) {
        return QuestStatus.READY;
      }

      if (this.getNotDone().find((_ref) => {var _ref2 = QuestTowerKeys_slicedToArray(_ref, 2),item = _ref2[1];return (0,external_kolmafia_namespaceObject.itemAmount)(item) == 0;}) != null) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      if (this.isReadyToRedeemTokens()) {
        return this.redeemKeys();
      }

      return {
        location: null,
        run: () => {
          var notDone = this.getNotDone();var _iterator2 = QuestTowerKeys_createForOfIteratorHelper(

          notDone),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var s = _step2.value;
              if ((0,external_kolmafia_namespaceObject.availableAmount)(s[1]) == 0) {
                continue;
              }

              (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=" + s[0]);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door&action=ns_doorknob");
        } };

    } }]);return QuestTowerKeys;}(QuestKeyStuffAbstract);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerContestants.ts
function QuestTowerContestants_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerContestants_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestTowerContestants_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerContestants_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerContestants_arrayLikeToArray(o, minLen);}function QuestTowerContestants_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestTowerContestants_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerContestants_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerContestants_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerContestants_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerContestants_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}







var QuestTowerContestants = /*#__PURE__*/function () {function QuestTowerContestants() {QuestTowerContestants_classCallCheck(this, QuestTowerContestants);}QuestTowerContestants_createClass(QuestTowerContestants, [{ key: "getId", value:
    function getId() {
      return "Council / Tower / Contests";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var status = getQuestStatus("questL13Final");

      if (status == 0) {
        return this.learnAndSetMyPlace();
      }

      if (status == 1) {
        return this.fightContests();
      }

      return this.claimPrize();
    } }, { key: "claimPrize", value:

    function claimPrize() {
      return {
        location: null,
        run: () => {
          var props = new PropertyManager();

          try {
            props.setChoice(1020, 1);
            props.setChoice(1021, 1);
            props.setChoice(1022, 1);
            props.setChoice(1003, 4);

            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
            (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1003&option=4", true);
            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_02_coronation");
            (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1020&option=1", true);
            (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1021&option=1", true);
            (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1022&option=1", true);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "fightContests", value:

    function fightContests() {
      // place.php?whichplace=nstower&action=ns_01_crowd1
      var match = (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower").match(
      /(place.php\?whichplace=nstower&action=ns_01_crowd\d)/);


      return {
        location: null,
        run: () => {
          greyAdv(match[1]);
        } };

    } }, { key: "learnAndSetMyPlace", value:

    function learnAndSetMyPlace() {
      return {
        location: null,
        run: () => {var _iterator = QuestTowerContestants_createForOfIteratorHelper(
          this.getNeededQuests()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var quest = _step.value;
              quest.call(this);
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL13Final") != "step1") {
        return [];
      }

      var locs = [];

      var page = (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower");

      if (page.includes("ns_01_crowd1")) {
        locs.push(external_kolmafia_namespaceObject.Location.get("Fastest Adventurer Contest"));
      }

      if (page.includes("ns_01_crowd2")) {
        switch ((0,external_kolmafia_namespaceObject.getProperty)("nsChallenge1")) {
          case "Mysticality":
            locs.push(external_kolmafia_namespaceObject.Location.get("Smartest Adventurer Contest"));
            break;
          case "Moxie":
            locs.push(external_kolmafia_namespaceObject.Location.get("Smoothest Adventurer Contest"));
            break;
          case "Muscle":
            locs.push(external_kolmafia_namespaceObject.Location.get("Strongest Adventurer Contest"));
            break;}

      }

      if (page.includes("ns_01_crowd3")) {
        switch ((0,external_kolmafia_namespaceObject.getProperty)("nsChallenge2")) {
          case "cold":
            locs.push(external_kolmafia_namespaceObject.Location.get("Coldest Adventurer Contest"));
            break;
          case "hot":
            locs.push(external_kolmafia_namespaceObject.Location.get("Hottest Adventurer Contest"));
            break;
          case "sleaze":
            locs.push(external_kolmafia_namespaceObject.Location.get("Sleaziest Adventurer Contest"));
            break;
          case "spooky":
            locs.push(external_kolmafia_namespaceObject.Location.get("Spookiest Adventurer Contest"));
            break;
          case "stench":
            locs.push(external_kolmafia_namespaceObject.Location.get("Stinkiest Adventurer Contest"));
            break;}

      }

      return locs;
    } }, { key: "turnInQuest", value:

    function turnInQuest(questNo) {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1003&option=" + questNo, true);
      (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
    } }, { key: "getNeededQuests", value:

    function getNeededQuests() {
      if (
      (0,external_kolmafia_namespaceObject.getProperty)("nsChallenge1") == "none" ||
      (0,external_kolmafia_namespaceObject.getProperty)("nsChallenge2") == "none")
      {
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      }

      var quests = [];

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("nsContestants1")) == -1) {
        quests.push(this.doQuest1);
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("nsContestants2")) == -1) {
        quests.push(this.doQuest2);
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("nsContestants3")) == -1) {
        quests.push(this.doQuest3);
      }

      return quests;
    } }, { key: "doQuest1", value:

    function doQuest1() {
      (0,external_kolmafia_namespaceObject.maximize)(
      "init +switch left-hand man +switch Oily woim +switch Xiblaxian Holo-Companion -tie",
      false);

      this.turnInQuest(1);
    } }, { key: "doQuest2", value:

    function doQuest2() {
      (0,external_kolmafia_namespaceObject.maximize)(
      (0,external_kolmafia_namespaceObject.getProperty)("nsChallenge1") + " +switch left-hand man -tie",
      false);

      this.turnInQuest(2);
    } }, { key: "doQuest3", value:

    function doQuest3() {
      var element = (0,external_kolmafia_namespaceObject.getProperty)("nsChallenge2");

      (0,external_kolmafia_namespaceObject.maximize)(
      element + " dmg +" + element + " spell dmg +switch left-hand man -tie",
      false);

      this.turnInQuest(3);
    } }]);return QuestTowerContestants;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerMaze.ts
function QuestTowerMaze_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerMaze_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerMaze_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerMaze_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerMaze_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}




var QuestTowerMaze = /*#__PURE__*/function () {function QuestTowerMaze() {QuestTowerMaze_classCallCheck(this, QuestTowerMaze);}QuestTowerMaze_createClass(QuestTowerMaze, [{ key: "getId", value:
    function getId() {
      return "Council / Tower / Maze";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      if (getQuestStatus("questL13Final") < 4) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL13Final") > 4) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit("+hot res +spooky res +stench res -tie");

      return {
        location: null,
        outfit: outfit,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_03_hedgemaze");
          (0,external_kolmafia_namespaceObject.runChoice)(2);
          (0,external_kolmafia_namespaceObject.runChoice)(2);
          (0,external_kolmafia_namespaceObject.runChoice)(2);
          (0,external_kolmafia_namespaceObject.runChoice)(1);
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower_door");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTowerMaze;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerWallMeat.ts
function QuestTowerWallMeat_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerWallMeat_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerWallMeat_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerWallMeat_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerWallMeat_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}







var QuestTowerWallMeat = /*#__PURE__*/function () {function QuestTowerWallMeat() {QuestTowerWallMeat_classCallCheck(this, QuestTowerWallMeat);}QuestTowerWallMeat_createClass(QuestTowerWallMeat, [{ key: "getId", value:
    function getId() {
      return "Council / Tower / WallOfMeat";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 7) {
        return QuestStatus.NOT_READY;
      }

      if (status > 7) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "hasDrunkMeat", value:

    function hasDrunkMeat() {
      return (0,external_kolmafia_namespaceObject.getProperty)("_roboDrinks").includes("drive-by shooting");
    } }, { key: "run", value:

    function run() {
      return {
        outfit: GreyOutfit.IGNORE_OUTFIT,
        location: null,
        run: () => {
          var robo = external_kolmafia_namespaceObject.Familiar.get("Grey Goose");

          if ((0,external_kolmafia_namespaceObject.haveFamiliar)(robo) && this.hasDrunkMeat()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Robortender"));
          } else if ((0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Hobo Monkey"))) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Hobo Monkey"));
          }

          (0,external_kolmafia_namespaceObject.cliExecute)("maximize +5 meat +0.03 moxie +100 hp 200 min 500 max");

          if ((0,external_kolmafia_namespaceObject.myMaxhp)() < 200) {
            throw "Max HP too low! Run +meat and kill the wall of meat yourself?";
          }

          restoreHPTo(Math.min((0,external_kolmafia_namespaceObject.myMaxhp)(), 600));

          if ((0,external_kolmafia_namespaceObject.myHp)() < 200) {
            throw "HP too low";
          }

          greyAdv(
          "place.php?whichplace=nstower&action=ns_06_monster2",
          null,
          new AdventureSettings().setFinishingBlowMacro(
          Macro.trySkillRepeat(external_kolmafia_namespaceObject.Skill.get("Infinite Loop"))));


        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTowerWallMeat;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerWallBones.ts
function QuestTowerWallBones_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerWallBones_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerWallBones_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerWallBones_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerWallBones_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerWallBones_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestTowerWallBones = /*#__PURE__*/function () {function QuestTowerWallBones() {QuestTowerWallBones_classCallCheck(this, QuestTowerWallBones);QuestTowerWallBones_defineProperty(this, "knife",
    external_kolmafia_namespaceObject.Item.get("Electric Boning Knife"));QuestTowerWallBones_defineProperty(this, "killer",
    new QuestTowerKillBones());QuestTowerWallBones_defineProperty(this, "toAbsorb", void 0);QuestTowerWallBones_defineProperty(this, "groundFloor",

    external_kolmafia_namespaceObject.Location.get(
    "The Castle in the Clouds in the Sky (Ground Floor)"));}QuestTowerWallBones_createClass(QuestTowerWallBones, [{ key: "getId", value:


    function getId() {
      return "Council / Tower / WallOfBones";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 8) {
        return QuestStatus.NOT_READY;
      }

      if (status > 8) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.knife) == 0) {
        if (this.killer.isPossible()) {
          return this.killer.run();
        } else {
          return this.runKnife();
        }
      }

      return {
        location: null,
        run: () => {
          var macro = new Macro().tryItem(this.knife);

          greyAdv(
          "place.php?whichplace=nstower&action=ns_07_monster3",
          null,
          new AdventureSettings().setStartOfFightMacro(macro));

        } };

    } }, { key: "runKnife", value:

    function runKnife() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.groundFloor,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          DelayBurners.tryReplaceCombats();

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          try {
            props.setChoice(672, 1);
            props.setChoice(673, 1);
            props.setChoice(674, 1);
            props.setChoice(1026, 2);

            greyAdv(this.groundFloor, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTowerWallBones;}();


var QuestTowerKillBones = /*#__PURE__*/function () {function QuestTowerKillBones() {QuestTowerWallBones_classCallCheck(this, QuestTowerKillBones);QuestTowerWallBones_defineProperty(this, "damageMultiplier",
    50.5);QuestTowerWallBones_defineProperty(this, "health",
    20000);QuestTowerWallBones_defineProperty(this, "drunkBell",
    external_kolmafia_namespaceObject.Item.get("Drunkula's bell"));QuestTowerWallBones_defineProperty(this, "rocket",
    external_kolmafia_namespaceObject.Item.get("Great Wolf's rocket launcher"));QuestTowerWallBones_defineProperty(this, "property",
    "_triedBossKillingBones");QuestTowerWallBones_defineProperty(this, "possible", void 0);}QuestTowerWallBones_createClass(QuestTowerKillBones, [{ key: "isRocketPossible", value:


    function isRocketPossible() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.rocket) == 0 && (0,external_kolmafia_namespaceObject.storageAmount)(this.rocket) == 0) {
        return false;
      }

      if (
      (0,external_kolmafia_namespaceObject.myPrimestat)() != external_kolmafia_namespaceObject.Stat.get("Moxie") &&
      !(0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Phairly Balanced")) &&
      (0,external_kolmafia_namespaceObject.mallPrice)(external_kolmafia_namespaceObject.Item.get("PH Balancer")) < 1000)
      {
        (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get("PH Balancer"));
      }

      (0,external_kolmafia_namespaceObject.maximize)("moxie +equip " + this.rocket.name, true);

      var moxie = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Buffed Moxie");
      var damage = this.damageMultiplier * (moxie * 0.4);

      (0,external_kolmafia_namespaceObject.print)(
      "Using rocket, we predict " +
      Math.round(damage) +
      " / " +
      this.health +
      " damage (Worst scenario)",
      "blue");


      return damage > this.health;
    } }, { key: "isBellPossible", value:

    function isBellPossible() {
      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.drunkBell) == 0 &&
      (0,external_kolmafia_namespaceObject.storageAmount)(this.drunkBell) == 0)
      {
        return false;
      }

      if (
      (0,external_kolmafia_namespaceObject.myPrimestat)() != external_kolmafia_namespaceObject.Stat.get("Mysticality") &&
      !(0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Phairly Balanced")) &&
      (0,external_kolmafia_namespaceObject.mallPrice)(external_kolmafia_namespaceObject.Item.get("PH Balancer")) < 1000)
      {
        (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get("PH Balancer"));
      }

      (0,external_kolmafia_namespaceObject.maximize)("mys", true);

      var mys = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Buffed Mysticality");
      var damage = this.damageMultiplier * (mys * 0.15);

      (0,external_kolmafia_namespaceObject.print)(
      "Using " +
      this.drunkBell.name +
      ", we predict " +
      Math.round(damage) +
      " / " +
      this.health +
      " damage (Worst scenario)",
      "blue");


      return damage > this.health;
    } }, { key: "isPossible", value:

    function isPossible() {
      if ((0,external_kolmafia_namespaceObject.pullsRemaining)() != -1 || (0,external_kolmafia_namespaceObject.getProperty)(this.property) == "true") {
        return false;
      }

      if (this.possible != null) {
        return this.possible;
      }

      return this.possible = this.isRocketPossible() || this.isBellPossible();
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          var macro;
          (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("None"));

          if (this.isRocketPossible()) {
            (0,external_kolmafia_namespaceObject.maximize)("moxie +equip " + this.rocket.name, false);

            if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.rocket) == 0) {
              throw "We don't have the " + this.rocket.name + " on hand?";
            }

            macro = Macro.skill("Fire Rocket");
          } else {
            if ((0,external_kolmafia_namespaceObject.itemAmount)(this.drunkBell) == 0) {
              (0,external_kolmafia_namespaceObject.retrieveItem)(this.drunkBell);
            }

            if ((0,external_kolmafia_namespaceObject.itemAmount)(this.drunkBell) == 0) {
              throw "We don't have the " + this.drunkBell.name + " on hand?";
            }

            (0,external_kolmafia_namespaceObject.maximize)("mys", false);

            macro = Macro.item(this.drunkBell);
          }

          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower&action=ns_07_monster3");

          if ((0,external_kolmafia_namespaceObject.currentRound)() == 0) {
            throw "Failed to start the bones attack";
          }

          (0,external_kolmafia_namespaceObject.setProperty)(this.property, "true");

          macro.submit();

          if ((0,external_kolmafia_namespaceObject.currentRound)() != 0) {
            throw "Failed to kill the wall of bones in a single hit.";
          }
        } };

    } }]);return QuestTowerKillBones;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerShadow.ts
function QuestTowerShadow_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerShadow_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestTowerShadow_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerShadow_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerShadow_arrayLikeToArray(o, minLen);}function QuestTowerShadow_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestTowerShadow_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerShadow_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerShadow_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerShadow_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerShadow_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerShadow_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestTowerShadow_setPrototypeOf(subClass, superClass);}function QuestTowerShadow_setPrototypeOf(o, p) {QuestTowerShadow_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestTowerShadow_setPrototypeOf(o, p);}function QuestTowerShadow_createSuper(Derived) {var hasNativeReflectConstruct = QuestTowerShadow_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestTowerShadow_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestTowerShadow_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestTowerShadow_possibleConstructorReturn(this, result);};}function QuestTowerShadow_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestTowerShadow_assertThisInitialized(self);}function QuestTowerShadow_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestTowerShadow_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestTowerShadow_getPrototypeOf(o) {QuestTowerShadow_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestTowerShadow_getPrototypeOf(o);}function QuestTowerShadow_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestTowerShadow = /*#__PURE__*/function (_TaskInfo) {QuestTowerShadow_inherits(QuestTowerShadow, _TaskInfo);var _super = QuestTowerShadow_createSuper(QuestTowerShadow);function QuestTowerShadow() {var _this;QuestTowerShadow_classCallCheck(this, QuestTowerShadow);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "badge",
    external_kolmafia_namespaceObject.Item.get("Attorney's badge"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "potato",
    external_kolmafia_namespaceObject.Familiar.get("Levitating Potato"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "guaze",
    external_kolmafia_namespaceObject.Item.get("Gauze garter"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "cape",
    external_kolmafia_namespaceObject.Item.get("Unwrapped knock-off retro superhero cape"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "overclocking",
    external_kolmafia_namespaceObject.Skill.get("Overclocking"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "paths", void 0);return _this;}QuestTowerShadow_createClass(QuestTowerShadow, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [
      new PossiblePath(0).addMeat(1000),
      new PossiblePath(0).add(ResourceCategory.HOT_TUB)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Shadow";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 10) {
        return QuestStatus.NOT_READY;
      }

      if (status > 10) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getBestEquips", value:

    function getBestEquips(modifier) {
      var equips = [];
      var none = (0,external_kolmafia_namespaceObject.toSlot)("none");
      var weapon = external_kolmafia_namespaceObject.Slot.get("weapon");var _iterator = QuestTowerShadow_createForOfIteratorHelper(

      external_kolmafia_namespaceObject.Item.all()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if ((0,external_kolmafia_namespaceObject.availableAmount)(i) == 0) {
            continue;
          }

          var slot = (0,external_kolmafia_namespaceObject.toSlot)(i);

          if (slot == none || !(0,external_kolmafia_namespaceObject.canEquip)(i)) {
            continue;
          }

          if (slot == weapon && (0,external_kolmafia_namespaceObject.weaponHands)(i) > 1) {
            continue;
          }

          var mod = (0,external_kolmafia_namespaceObject.numericModifier)(i, modifier);

          if (mod <= 0) {
            continue;
          }

          equips.push([slot, i, mod]);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      equips.sort((e1, e2) => e2[2] - e1[2]);
      var items = [];
      var toReturn = [];var _iterator2 = QuestTowerShadow_createForOfIteratorHelper(

      [
      "Hat",
      "Weapon",
      "Offhand",
      "Back",
      "Pants",
      "Acc1",
      "Acc2",
      "Acc3"].
      map((s) => external_kolmafia_namespaceObject.Slot.get(s))),_step2;try {var _loop = function _loop() {var slot = _step2.value;
          var lookFor = slot;

          if (slot == external_kolmafia_namespaceObject.Slot.get("acc2") || slot == external_kolmafia_namespaceObject.Slot.get("acc3")) {
            lookFor = external_kolmafia_namespaceObject.Slot.get("acc1");
          }

          var item = equips.reduce((p, i) => {
            if (i[0] != lookFor || items.includes(i[1])) {
              return p;
            }

            if (p != null && p[2] > i[2]) {
              return p;
            }

            return i;
          }, null);

          if (item != null) {
            items.push(item[1]);
            toReturn.push([slot, item[1]]);
          }};for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {_loop();
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return toReturn;
    } }, { key: "run", value:

    function run(path) {
      var map = new Map();

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.badge) > 0) {
        map.set(external_kolmafia_namespaceObject.Slot.get("acc3"), this.badge);
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cape) > 0) {
        map.set(external_kolmafia_namespaceObject.Slot.get("back"), this.cape);
      }

      var outfit = new GreyOutfit();
      outfit.hpWeight = 0;
      outfit.addBonus("+500 init 151 max +100 hp 500 max");

      return {
        familiar: this.potato,
        outfit: outfit,
        location: null,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.cape) > 0) {
            (0,external_kolmafia_namespaceObject.cliExecute)("retrocape heck hold"); // Make sure we stun the shadow
          }

          if ((0,external_kolmafia_namespaceObject.itemAmount)(this.guaze) < 6) {
            if ((0,external_kolmafia_namespaceObject.pullsRemaining)() == -1 && (0,external_kolmafia_namespaceObject.storageAmount)(this.guaze) > 6) {
              (0,external_kolmafia_namespaceObject.cliExecute)(
              "pull " + (0,external_kolmafia_namespaceObject.storageAmount)(this.guaze) + " " + this.guaze.name);

            } else {
              throw (
                "We don't have enough " +
                this.guaze.name +
                " to take on the shadow!");

            }
          }

          if ((0,external_kolmafia_namespaceObject.myHp)() < (0,external_kolmafia_namespaceObject.myMaxhp)()) {
            if (path.canUse(ResourceCategory.HOT_TUB)) {
              (0,external_kolmafia_namespaceObject.cliExecute)("hottub");
              path.addUsed(ResourceCategory.HOT_TUB);
            } else {
              restoreHPTo((0,external_kolmafia_namespaceObject.myMaxhp)());
            }
          }

          if ((0,external_kolmafia_namespaceObject.myHp)() < (0,external_kolmafia_namespaceObject.myMaxhp)()) {
            throw "Expected full health";
          }

          var macro = Macro.item(this.guaze).repeat();

          greyAdv(
          "place.php?whichplace=nstower&action=ns_09_monster5",
          outfit,
          new AdventureSettings().setStartOfFightMacro(macro));

        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTowerShadow;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerMirror.ts
function QuestTowerMirror_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerMirror_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestTowerMirror_slicedToArray(arr, i) {return QuestTowerMirror_arrayWithHoles(arr) || QuestTowerMirror_iterableToArrayLimit(arr, i) || QuestTowerMirror_unsupportedIterableToArray(arr, i) || QuestTowerMirror_nonIterableRest();}function QuestTowerMirror_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestTowerMirror_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerMirror_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerMirror_arrayLikeToArray(o, minLen);}function QuestTowerMirror_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestTowerMirror_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function QuestTowerMirror_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestTowerMirror_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerMirror_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerMirror_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerMirror_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerMirror_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerMirror_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestTowerMirror = /*#__PURE__*/function () {function QuestTowerMirror() {QuestTowerMirror_classCallCheck(this, QuestTowerMirror);QuestTowerMirror_defineProperty(this, "wand",
    external_kolmafia_namespaceObject.Item.get(" Wand of Nagamar"));QuestTowerMirror_defineProperty(this, "lW",
    external_kolmafia_namespaceObject.Item.get("ruby W"));QuestTowerMirror_defineProperty(this, "lA",
    external_kolmafia_namespaceObject.Item.get("metallic A"));QuestTowerMirror_defineProperty(this, "lN",
    external_kolmafia_namespaceObject.Item.get("lowercase N"));QuestTowerMirror_defineProperty(this, "lD",
    external_kolmafia_namespaceObject.Item.get("heavy D"));QuestTowerMirror_defineProperty(this, "wa",
    external_kolmafia_namespaceObject.Item.get("WA"));QuestTowerMirror_defineProperty(this, "nd",
    external_kolmafia_namespaceObject.Item.get("ND"));QuestTowerMirror_defineProperty(this, "locations",
    [
    ["Ruby W", "W imp", "Pandamonium Slums"],
    ["Metallic A", "MagiMechTech MechaMech", "The Penultimate Fantasy Airship"],
    ["lowercase N", "XXX pr0n", "The Valley of Rof L'm Fao"],
    [
    "heavy D",
    "Alphabet Giant",
    "The Castle in the Clouds in the Sky (Basement)"]].

    map((s) => [external_kolmafia_namespaceObject.Item.get(s[0]), external_kolmafia_namespaceObject.Monster.get(s[1]), external_kolmafia_namespaceObject.Location.get(s[2])]));QuestTowerMirror_defineProperty(this, "clover",
    external_kolmafia_namespaceObject.Item.get("11-leaf Clover"));}QuestTowerMirror_createClass(QuestTowerMirror, [{ key: "getId", value:

    function getId() {
      return "Council / Tower / Mirror";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 9) {
        return QuestStatus.NOT_READY;
      }

      if (status > 9) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "tryClover", value:

    function tryClover() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.use)(this.clover);
          greyAdv(external_kolmafia_namespaceObject.Location.get("The Castle in the Clouds in the Sky (Basement)"));
        } };

    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.wand) == 0) {
        return this.createWand();
      }

      // Equip outfit early to try save some hp
      var outfit = GreyOutfit.IGNORE_OUTFIT;

      return {
        location: null,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(1015, 2); // Break mirror

          try {
            greyAdv("place.php?whichplace=nstower&action=ns_08_monster4", outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "createWand", value:

    function createWand() {var _this = this;
      var toGrab = this.locations.filter((_ref) => {var _ref2 = QuestTowerMirror_slicedToArray(_ref, 1),i = _ref2[0];return (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0;});

      if (
      toGrab.length > 0 && (
      GreySettings.isHardcoreMode() || (0,external_kolmafia_namespaceObject.pullsRemaining)() != -1))
      {var _iterator = QuestTowerMirror_createForOfIteratorHelper(
        toGrab),_step;try {var _loop = function _loop() {var _step$value = QuestTowerMirror_slicedToArray(_step.value, 3),monster = _step$value[1],loc = _step$value[2];
            if ((0,external_kolmafia_namespaceObject.availableAmount)(_this.clover) > 0) {
              return { v: _this.tryClover() };
            }

            var outfit = new GreyOutfit().setItemDrops();

            return { v: {
                location: loc,
                outfit: outfit,
                run: () => {
                  var settings = new AdventureSettings();
                  settings.addNoBanish(monster);

                  greyAdv(loc, outfit, settings);
                } } };};for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (typeof _ret === "object") return _ret.v;

          }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.retrieveItem)(this.wand);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTowerMirror;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerKillWitch.ts
function QuestTowerKillWitch_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerKillWitch_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestTowerKillWitch_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerKillWitch_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerKillWitch_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}








var QuestTowerKillWitch = /*#__PURE__*/function () {function QuestTowerKillWitch() {QuestTowerKillWitch_classCallCheck(this, QuestTowerKillWitch);}QuestTowerKillWitch_createClass(QuestTowerKillWitch, [{ key: "getId", value:
    function getId() {
      return "Council / Tower / NaughtyBoss";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 11) {
        return QuestStatus.NOT_READY;
      }

      if (status > 11) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return this.doBoss();
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "doBoss", value:

    function doBoss() {
      return {
        location: null,
        run: () => {
          for (var i = 0; i < 2; i++) {
            try {
              greyAdv(
              "place.php?whichplace=nstower&action=ns_10_sorcfight",
              null,
              new AdventureSettings().setFinishingBlowMacro(
              Macro.attack().repeat()));


              (0,external_kolmafia_namespaceObject.visitUrl)("choice.php");
            } catch (e) {}
          }

          greyAdv("choice.php"); // Final fight
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower");
          (0,external_kolmafia_namespaceObject.print)("Should be all done", "blue");

          printEndOfRun();
        } };

    } }]);return QuestTowerKillWitch;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL13Tower.ts
function QuestL13Tower_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL13Tower_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL13Tower_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL13Tower_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL13Tower_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL13Tower_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





















var QuestL13 = /*#__PURE__*/function () {function QuestL13() {QuestL13Tower_classCallCheck(this, QuestL13);QuestL13Tower_defineProperty(this, "sideQuests",




    [
    new QuestTowerKeys(),
    new QuestTowerContestants(),
    new QuestTowerMaze(),
    new QuestTowerWallSkin(),
    new QuestTowerWallMeat(),
    new QuestTowerWallBones(),
    new QuestTowerMirror(),
    new QuestTowerShadow(),
    new QuestTowerKillWitch()]);}QuestL13Tower_createClass(QuestL13, [{ key: "getLocations", value: function getLocations() {return [];} }, { key: "getChildren", value:


    function getChildren() {
      return this.sideQuests;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;

      // Unstarted = Obvious
      // started= We've visited the booth? Not sure whats up there.
      // Step1 = We're fighting the contestants
      // Step2 = We've defeated the contestants
      // Step3 = Just got sash
      // Step4 = We're going into the maze
      // Step4 = We're in the maze
      // Step5 = We left the maze
      // Step6 = We've used all our keys
      // Step7 = Just killed wall of skin
      // Step8 = Just killed wall of meat
      // Step9 = Just killed wall of bones
      // Step10 = Just killed the shadow
      // Step11 = Just shattered the mirror, or didn't
      // Step12 = We've advanced to the 3rd stage of the witch and if you see this, you lost and can now find the wand NC
      // Step13 = Just killed the witch
    } }, { key: "run", value:

    function run() {
      throw "Not supported";
    } }]);return QuestL13;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL1Toot.ts
function QuestL1Toot_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL1Toot_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL1Toot_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL1Toot_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL1Toot_arrayLikeToArray(o, minLen);}function QuestL1Toot_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL1Toot_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL1Toot_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL1Toot_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL1Toot_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL1Toot_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL1Toot_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestL1Toot = /*#__PURE__*/function () {function QuestL1Toot() {QuestL1Toot_classCallCheck(this, QuestL1Toot);QuestL1Toot_defineProperty(this, "toSell",
    ["hamethyst", "baconstone", "porquoise"].map((s) =>
    external_kolmafia_namespaceObject.Item.get(s)));}QuestL1Toot_createClass(QuestL1Toot, [{ key: "level", value:


    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM05Toot") == "finished") {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")); // Force it to be leveled up if we happen to have short order cook
          (0,external_kolmafia_namespaceObject.council)();
          (0,external_kolmafia_namespaceObject.visitUrl)("tutorial.php?action=toot");
          (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get("Letter from King Ralph XI"));
          (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get("pork elf goodies sack"));var _iterator = QuestL1Toot_createForOfIteratorHelper(

          this.toSell),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
              if ((0,external_kolmafia_namespaceObject.availableAmount)(i) > 0) {
                (0,external_kolmafia_namespaceObject.autosell)(i, (0,external_kolmafia_namespaceObject.availableAmount)(i));
              }
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

          (0,external_kolmafia_namespaceObject.council)();
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Toot";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL1Toot;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL2Larva.ts
function QuestL2Larva_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL2Larva_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL2Larva_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL2Larva_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL2Larva_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL2Larva_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var QuestL2SpookyLarva = /*#__PURE__*/function () {function QuestL2SpookyLarva() {QuestL2Larva_classCallCheck(this, QuestL2SpookyLarva);QuestL2Larva_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Spooky Forest"));QuestL2Larva_defineProperty(this, "latte",
    external_kolmafia_namespaceObject.Item.get("Latte lovers member's mug"));QuestL2Larva_defineProperty(this, "toAbsorb", void 0);}QuestL2Larva_createClass(QuestL2SpookyLarva, [{ key: "shouldWearLatte", value:


    function shouldWearLatte() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.FAMILIAR_WEIGHT));

    } }, { key: "level", value:

    function level() {
      return 2;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Larva";
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL02Larva");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (isGhostBustingTime(this.location)) {
        if (shouldAvoidGhosts()) {
          return QuestStatus.NOT_READY;
        }
      } else if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      } else if (
      this.location.turnsSpent >= 5 &&
      !hasNonCombatSkillsReady(false) &&
      (0,external_kolmafia_namespaceObject.myLevel)() >= 5)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "isDelayBurning", value:

    function isDelayBurning() {
      return this.location.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "run", value:

    function run() {
      var outfit = isGhostBustingTime(this.location) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      if (this.shouldWearLatte()) {
        outfit.addItem(this.latte);
      }

      if (this.location.turnsSpent >= 5) {
        outfit.setNoCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          var settings = new AdventureSettings();

          props.setChoice(502, 2);
          props.setChoice(505, 1);

          if (isGhostBustingTime(this.location)) {
            settings.setStartOfFightMacro(getGhostBustingMacro());
          } else if (!this.shouldWearLatte() && this.toAbsorb.length == 0) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            } else if (hasNonCombatSkillsReady()) {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (
          this.toAbsorb.length == 0 &&
          DelayBurners.isTryingForDupeableGoblin())
          {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          try {
            greyAdv(this.location, outfit, settings);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("mosquito larva")) > 0) {
            (0,external_kolmafia_namespaceObject.council)();
          }
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return isGhostBustingTime(this.location);
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL2SpookyLarva;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL3Tavern.ts
function QuestL3Tavern_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL3Tavern_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL3Tavern_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL3Tavern_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL3Tavern_arrayLikeToArray(o, minLen);}function QuestL3Tavern_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL3Tavern_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL3Tavern_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL3Tavern_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL3Tavern_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL3Tavern_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL3Tavern_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL3Tavern = /*#__PURE__*/function () {function QuestL3Tavern() {QuestL3Tavern_classCallCheck(this, QuestL3Tavern);QuestL3Tavern_defineProperty(this, "layout",
    new TavernLayout());QuestL3Tavern_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Typical Tavern Cellar"));QuestL3Tavern_defineProperty(this, "tangle",
    external_kolmafia_namespaceObject.Item.get("tangle of rat tails"));QuestL3Tavern_defineProperty(this, "teleportis",
    external_kolmafia_namespaceObject.Effect.get("Teleportitis"));QuestL3Tavern_defineProperty(this, "umbrella",
    external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));}QuestL3Tavern_createClass(QuestL3Tavern, [{ key: "level", value:

    function level() {
      return 3;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tavern";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL03Rat");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("questL02Larva") != "finished" ||
      (0,external_kolmafia_namespaceObject.myLevel)() < 13 && (0,external_kolmafia_namespaceObject.haveEffect)(this.teleportis) == 0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myLevel)() < 20) {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("middleChamberUnlock") == "true") {
        return QuestStatus.READY;
      }

      // Always put this off as long as possible, aka until every quest wants to delay
      return QuestStatus.FASTER_LATER;
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return getQuestStatus("questL03Rat") > 1 ? 0 : 1;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (getQuestStatus("questL03Rat") > 1) {
        return true;
      }

      if (
      (0,external_kolmafia_namespaceObject.haveEffect)(this.teleportis) == 0 ||
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastPlusSignUnlock")) != (0,external_kolmafia_namespaceObject.myAscensions)())
      {
        return false;
      }

      return true;
    } }, { key: "run", value:

    function run() {
      var advTime = getQuestStatus("questL03Rat") == 1;

      var outfit;

      if (!advTime) {
        outfit = GreyOutfit.IGNORE_OUTFIT;
      } else {
        outfit = new GreyOutfit();

        if ((0,external_kolmafia_namespaceObject.getProperty)("pyramidBombUsed") != "true") {
          outfit.setPlusCombat();
          outfit.plusMonsterLevelWeight = 10;
          outfit.addBonus("-offhand");

          // Boost our damage
          if ((0,external_kolmafia_namespaceObject.myLevel)() < 16) {
            outfit.addBonus("+mox");
          }
        } else {
          outfit.setNoCombat();
          outfit.addBonus(
          "+hot dmg +hot spell dmg +cold dmg +cold spell dmg +spooky dmg +spooky spell dmg +stench dmg +stench spell dmg");

        }
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          if (!advTime) {
            (0,external_kolmafia_namespaceObject.visitUrl)("tavern.php?place=barkeep");
            (0,external_kolmafia_namespaceObject.visitUrl)("cellar.php");
            (0,external_kolmafia_namespaceObject.council)();
            return;
          }

          var props = new PropertyManager();
          var eles = [
          ["Cold", 513],
          ["Hot", 496],
          ["Spooky", 515],
          ["Stench", 514]];


          for (var _i = 0, _eles = eles; _i < _eles.length; _i++) {var e = _eles[_i];
            var choice = (0,external_kolmafia_namespaceObject.numericModifier)(e[0] + " Damage") >= 20 ? 2 : 1;

            props.setChoice(e[1], choice);
          }

          props.setChoice(509, 1);
          props.setChoice(510, 1);

          try {
            if (
            outfit.plusMonsterLevelWeight >= 10 &&
            (0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) > 0)
            {
              setUmbrella(UmbrellaState.MONSTER_LEVEL);
              (0,external_kolmafia_namespaceObject.equip)(this.umbrella);
            }

            var layout = (0,external_kolmafia_namespaceObject.getProperty)("tavernLayout");
            var turns = (0,external_kolmafia_namespaceObject.turnsPlayed)();

            (0,external_kolmafia_namespaceObject.changeMcd)(10);
            greyAdv(this.layout.getLocation(), outfit);
            (0,external_kolmafia_namespaceObject.changeMcd)(0);

            if (getQuestStatus("questL03Rat") != 1 && (0,external_kolmafia_namespaceObject.turnsPlayed)() == turns) {
              (0,external_kolmafia_namespaceObject.visitUrl)("cellar.php");

              if (layout == (0,external_kolmafia_namespaceObject.getProperty)("tavernLayout")) {
                (0,external_kolmafia_namespaceObject.print)(
                "Something went wrong with Tavern, resetting the layout. You may see a bunch of attempts to adventure that do nothing.",
                "blue");

                (0,external_kolmafia_namespaceObject.setProperty)("tavernLayout", "0000000000000000000000000");
              }
            }
          } finally {
            props.resetAll();
          }
        } };

    } }]);return QuestL3Tavern;}();var


TavernLayout = /*#__PURE__*/function () {function TavernLayout() {QuestL3Tavern_classCallCheck(this, TavernLayout);QuestL3Tavern_defineProperty(this, "locations",
    [3, 2, 1, 0, 5, 10, 15, 20, 16, 21]);}QuestL3Tavern_createClass(TavernLayout, [{ key: "getLocation", value:

    function getLocation() {
      var prop = (0,external_kolmafia_namespaceObject.getProperty)("tavernLayout");

      if (prop == "0000000000000000000000000") {
        (0,external_kolmafia_namespaceObject.visitUrl)("cellar.php");
      }var _iterator = QuestL3Tavern_createForOfIteratorHelper(

      this.locations),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if (prop.charAt(i) != "0") {
            continue;
          }

          return "cellar.php?action=explore&whichspot=" + (i + 1);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }]);return TavernLayout;}();
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsBoss.ts
function QuestL4BatsBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL4BatsBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsBoss_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL4BatsBoss = /*#__PURE__*/function () {function QuestL4BatsBoss() {QuestL4BatsBoss_classCallCheck(this, QuestL4BatsBoss);QuestL4BatsBoss_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Boss Bat's Lair"));QuestL4BatsBoss_defineProperty(this, "camera",
    external_kolmafia_namespaceObject.Item.get("Backup Camera"));}QuestL4BatsBoss_createClass(QuestL4BatsBoss, [{ key: "getId", value:

    function getId() {
      return "Council / Bats / Boss";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "shouldWaitForLobsters", value:

    function shouldWaitForLobsters() {
      return (
        (0,external_kolmafia_namespaceObject.getProperty)("sidequestLighthouseCompleted") == "none" &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.camera) > 0 &&
        getBackupsRemaining() > 0);

    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL04Bat");

      if (status < 3 || this.shouldWaitForLobsters()) {
        return QuestStatus.NOT_READY;
      }

      if (status == 100) {
        return QuestStatus.COMPLETED;
      }

      // TODO If lobster needs a backup

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      outfit.meatDropWeight = 2;

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          greyAdv(this.loc, outfit);

          if ((0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Grey Noise"))) {
            (0,external_kolmafia_namespaceObject.council)();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL4BatsBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsCenter.ts
function QuestL4BatsCenter_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsCenter_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL4BatsCenter_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsCenter_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsCenter_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsCenter_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL4BatsCenter_setPrototypeOf(subClass, superClass);}function QuestL4BatsCenter_setPrototypeOf(o, p) {QuestL4BatsCenter_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL4BatsCenter_setPrototypeOf(o, p);}function QuestL4BatsCenter_createSuper(Derived) {var hasNativeReflectConstruct = QuestL4BatsCenter_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL4BatsCenter_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL4BatsCenter_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL4BatsCenter_possibleConstructorReturn(this, result);};}function QuestL4BatsCenter_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL4BatsCenter_assertThisInitialized(self);}function QuestL4BatsCenter_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL4BatsCenter_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL4BatsCenter_getPrototypeOf(o) {QuestL4BatsCenter_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL4BatsCenter_getPrototypeOf(o);}function QuestL4BatsCenter_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL4BatsCenter = /*#__PURE__*/function (_TaskInfo) {QuestL4BatsCenter_inherits(QuestL4BatsCenter, _TaskInfo);var _super = QuestL4BatsCenter_createSuper(QuestL4BatsCenter);function QuestL4BatsCenter() {var _this;QuestL4BatsCenter_classCallCheck(this, QuestL4BatsCenter);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "loc",
    external_kolmafia_namespaceObject.Location.get("Guano Junction"));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "sonar",
    external_kolmafia_namespaceObject.Item.get("sonar-in-a-biscuit"));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "task",
    new PossiblePath(1).add(
    ResourceCategory.FIRE_EXTINGUSHER_ZONE));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "taskManual",

    new PossiblePath(3, 8));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "goose",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "paths",
    []);return _this;}QuestL4BatsCenter_createClass(QuestL4BatsCenter, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];
      this.taskManual = new PossiblePath(3, Math.max(3, 8 - this.loc.turnsSpent));

      this.paths.push(this.taskManual);

      if (
      assumeUnstarted ||
      (0,external_kolmafia_namespaceObject.getProperty)("fireExtinguisherBatHoleUsed") != "true")
      {
        this.paths.push(this.task);
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Bats / UnlockLeft";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL04Bat");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 6) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      var outfit = new GreyOutfit();

      var resource = path.getResource(ResourceCategory.FIRE_EXTINGUSHER_ZONE);

      if (resource != null) {
        resource.prepare(outfit);
      } else {
        outfit.setItemDrops();
      }

      return {
        outfit: outfit,
        location: this.loc,
        run: () => {
          var settings = new AdventureSettings();

          if (resource != null) {
            settings.setStartOfFightMacro(
            resource.macro().trySkill(external_kolmafia_namespaceObject.Skill.get("Infinite Loop")).attack());

          }

          greyAdv(this.loc, outfit, settings);

          this.doSonars();
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "doSonars", value:

    function doSonars() {
      while (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.sonar) > 0 &&
      getQuestStatus("questL04Bat") < 3)
      {
        (0,external_kolmafia_namespaceObject.use)(this.sonar);
      }
    } }]);return QuestL4BatsCenter;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsLeft.ts
function QuestL4BatsLeft_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsLeft_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL4BatsLeft_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsLeft_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsLeft_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsLeft_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestL4BatsLeft = /*#__PURE__*/function () {function QuestL4BatsLeft() {QuestL4BatsLeft_classCallCheck(this, QuestL4BatsLeft);QuestL4BatsLeft_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Batrat and Ratbat Burrow"));}QuestL4BatsLeft_createClass(QuestL4BatsLeft, [{ key: "getId", value:

    function getId() {
      return "Council / Bats / UnlockRight";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL04Bat");

      // If right has been unlocked
      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      var statusShen = getQuestStatus("questL11Shen");

      if (statusShen <= 1) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.location,
        run: () => {
          greyAdv(this.location);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL4BatsLeft;}();
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsRight.ts
function QuestL4BatsRight_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsRight_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL4BatsRight_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsRight_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsRight_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsRight_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestL4BatsRight = /*#__PURE__*/function () {function QuestL4BatsRight() {QuestL4BatsRight_classCallCheck(this, QuestL4BatsRight);QuestL4BatsRight_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Beanbat Chamber"));QuestL4BatsRight_defineProperty(this, "bean",
    external_kolmafia_namespaceObject.Item.get("Enchanted Bean"));}QuestL4BatsRight_createClass(QuestL4BatsRight, [{ key: "getId", value:

    function getId() {
      return "Council / Bats / UnlockBoss";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status() {
      var giantStatus = getQuestStatus("questL10Garbage");

      if (
      getQuestStatus("questL04Bat") > 2 && (
      giantStatus > 0 || (0,external_kolmafia_namespaceObject.availableAmount)(this.bean) > 0))
      {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL04Bat") < 2) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          greyAdv(this.loc, outfit);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL4BatsRight;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL4Bats.ts
function QuestL4Bats_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4Bats_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL4Bats_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4Bats_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4Bats_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4Bats_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestL4Bats = /*#__PURE__*/function () {



  function QuestL4Bats() {QuestL4Bats_classCallCheck(this, QuestL4Bats);QuestL4Bats_defineProperty(this, "sonar", external_kolmafia_namespaceObject.Item.get("sonar-in-a-biscuit"));QuestL4Bats_defineProperty(this, "children", []);
    this.children.push(new QuestL4BatsCenter());
    this.children.push(new QuestL4BatsLeft());
    this.children.push(new QuestL4BatsRight());
    this.children.push(new QuestL4BatsBoss());
  }QuestL4Bats_createClass(QuestL4Bats, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL04Bat");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status >= 3) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.sonar) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          while (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.sonar) > 0 &&
          getQuestStatus("questL04Bat") < 3)
          {
            (0,external_kolmafia_namespaceObject.use)(this.sonar);
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Bats / Sonars";
    } }]);return QuestL4Bats;}();var


BatStatus;(function (BatStatus) {BatStatus[BatStatus["unstarted"] = -1] = "unstarted";BatStatus[BatStatus["started"] = 0] = "started";BatStatus[BatStatus["LEFT_SMASHED"] = 1] = "LEFT_SMASHED";BatStatus[BatStatus["RIGHT_SMASHED"] = 2] = "RIGHT_SMASHED";BatStatus[BatStatus["BOTTOM_SMASHED"] = 3] = "BOTTOM_SMASHED";BatStatus[BatStatus["BOSS_MURDERED"] = 4] = "BOSS_MURDERED";BatStatus[BatStatus["finished"] = 100] = "finished";})(BatStatus || (BatStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/goblins/QuestL5GoblinOutskirts.ts
function QuestL5GoblinOutskirts_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL5GoblinOutskirts_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL5GoblinOutskirts_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL5GoblinOutskirts_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL5GoblinOutskirts_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL5GoblinOutskirts_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL5GoblinOutskirts = /*#__PURE__*/function () {function QuestL5GoblinOutskirts() {QuestL5GoblinOutskirts_classCallCheck(this, QuestL5GoblinOutskirts);QuestL5GoblinOutskirts_defineProperty(this, "map",
    external_kolmafia_namespaceObject.Item.get("Cobb's Knob map"));QuestL5GoblinOutskirts_defineProperty(this, "key",
    external_kolmafia_namespaceObject.Item.get("knob goblin encryption key"));QuestL5GoblinOutskirts_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("the outskirts of cobb's knob"));}QuestL5GoblinOutskirts_createClass(QuestL5GoblinOutskirts, [{ key: "getId", value:

    function getId() {
      return "Council / Goblins / Outskirts";
    } }, { key: "level", value:

    function level() {
      return this.location.turnsSpent < 10 ? 4 : 5;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL05Goblin");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (this.location.turnsSpent < 10) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.location,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.map) > 0 && (0,external_kolmafia_namespaceObject.availableAmount)(this.key)) {
            (0,external_kolmafia_namespaceObject.use)(this.map);
          } else {
            var ready = DelayBurners.getReadyDelayBurner();

            if (ready != null) {
              ready.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }

            var props = new PropertyManager();
            props.setChoice(113, 2);
            props.setChoice(111, 3);
            props.setChoice(118, 2);

            try {
              greyAdv(this.location);
            } finally {
              props.resetAll();
            }
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL5GoblinOutskirts;}();
;// CONCATENATED MODULE: ./src/quests/council/goblins/QuestL5GoblinHarem.ts
function QuestL5GoblinHarem_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL5GoblinHarem_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL5GoblinHarem_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL5GoblinHarem_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL5GoblinHarem_arrayLikeToArray(o, minLen);}function QuestL5GoblinHarem_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL5GoblinHarem_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL5GoblinHarem_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL5GoblinHarem_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL5GoblinHarem_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL5GoblinHarem_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL5GoblinHarem_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL5GoblinHarem_setPrototypeOf(subClass, superClass);}function QuestL5GoblinHarem_setPrototypeOf(o, p) {QuestL5GoblinHarem_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL5GoblinHarem_setPrototypeOf(o, p);}function QuestL5GoblinHarem_createSuper(Derived) {var hasNativeReflectConstruct = QuestL5GoblinHarem_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL5GoblinHarem_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL5GoblinHarem_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL5GoblinHarem_possibleConstructorReturn(this, result);};}function QuestL5GoblinHarem_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL5GoblinHarem_assertThisInitialized(self);}function QuestL5GoblinHarem_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL5GoblinHarem_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL5GoblinHarem_getPrototypeOf(o) {QuestL5GoblinHarem_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL5GoblinHarem_getPrototypeOf(o);}function QuestL5GoblinHarem_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL5GoblinHarem = /*#__PURE__*/function (_TaskInfo) {QuestL5GoblinHarem_inherits(QuestL5GoblinHarem, _TaskInfo);var _super = QuestL5GoblinHarem_createSuper(QuestL5GoblinHarem);function QuestL5GoblinHarem() {var _this;QuestL5GoblinHarem_classCallCheck(this, QuestL5GoblinHarem);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "harem",
    external_kolmafia_namespaceObject.Location.get("Cobb's Knob Harem"));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "toAbsorb", void 0);QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "polarVortex",

    new PossiblePath(0).add(
    ResourceCategory.FIRE_EXTINGUSHER_ZONE));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "taskYR",

    new PossiblePath(2, 5).add(
    ResourceCategory.YELLOW_RAY));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "taskManual",

    new PossiblePath(6, 10));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "haremGirl",
    external_kolmafia_namespaceObject.Monster.get("Knob Goblin Harem Girl"));return _this;}QuestL5GoblinHarem_createClass(QuestL5GoblinHarem, [{ key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.taskManual, this.taskYR, this.polarVortex];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Goblins / HaremOutfit";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.haveOutfit)("knob Goblin Harem Girl Disguise")) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL05Goblin");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.canAdventure)(this.harem)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      var outfit = new GreyOutfit();
      var resource = path.getResource(ResourceCategory.FIRE_EXTINGUSHER_ZONE);

      if (resource == null) {
        resource = path.getResource(ResourceCategory.YELLOW_RAY);
      }

      if (resource != null) {
        resource.prepare(outfit);
      } else {
        outfit.setItemDrops();
      }

      return {
        location: this.harem,
        outfit: outfit,
        run: () => {
          // When we have access to the harem, blast it down
          var macro = new Macro();
          var props = new PropertyManager();

          try {
            if (resource != null) {
              resource.prepare(null, props);

              if (resource.type == ResourceCategory.FIRE_EXTINGUSHER_ZONE) {
                macro = resource.macro();

                // If its a monster we want to absorb, don't blast it down
                var _iterator = QuestL5GoblinHarem_createForOfIteratorHelper(this.toAbsorb),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var absorb = _step.value;
                    macro = Macro.ifNot_(absorb, macro);
                  }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

                macro = Macro.ifNot_(external_kolmafia_namespaceObject.Monster.get("Sausage Goblin"), macro);
              } else if (resource.type == ResourceCategory.YELLOW_RAY) {
                macro = Macro.if_(this.haremGirl, resource.macro());
              }
            }

            greyAdv(
            this.harem,
            outfit,
            new AdventureSettings().setStartOfFightMacro(macro));

          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.harem];
    } }]);return QuestL5GoblinHarem;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/QuestL5Goblins.ts
function QuestL5Goblins_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL5Goblins_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL5Goblins_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL5Goblins_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL5Goblins_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL5Goblins_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL5Goblin = /*#__PURE__*/function () {function QuestL5Goblin() {QuestL5Goblins_classCallCheck(this, QuestL5Goblin);QuestL5Goblins_defineProperty(this, "perfume",
    external_kolmafia_namespaceObject.Item.get("knob goblin perfume"));QuestL5Goblins_defineProperty(this, "effect",
    external_kolmafia_namespaceObject.Effect.get("knob Goblin Perfume"));QuestL5Goblins_defineProperty(this, "harem",
    external_kolmafia_namespaceObject.Location.get("Cobb's Knob Harem"));QuestL5Goblins_defineProperty(this, "outskirts",
    new QuestL5GoblinOutskirts());QuestL5Goblins_defineProperty(this, "qHarem",
    new QuestL5GoblinHarem());}QuestL5Goblins_createClass(QuestL5Goblin, [{ key: "getId", value:

    function getId() {
      return "Council / Goblins / King";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 2;
    } }, { key: "getChildren", value:

    function getChildren() {
      return [this.outskirts, this.qHarem];
    } }, { key: "getLocations", value:

    function getLocations() {
      return [external_kolmafia_namespaceObject.Location.get("Throne Room")];
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL05Goblin");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status != "step1" || !(0,external_kolmafia_namespaceObject.haveOutfit)("knob Goblin Harem Girl Disguise")) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().
      addItem(external_kolmafia_namespaceObject.Item.get("Knob Goblin harem pants")).
      addItem(external_kolmafia_namespaceObject.Item.get("Knob Goblin harem veil"));

      return {
        location: external_kolmafia_namespaceObject.Location.get("Throne Room"),
        outfit: outfit,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.haveEffect)(this.effect) == 0) {
            if ((0,external_kolmafia_namespaceObject.itemAmount)(this.perfume) > 0) {
              (0,external_kolmafia_namespaceObject.use)(this.perfume);
            } else {
              greyAdv(this.harem, outfit);
            }
          }

          greyAdv("cobbsknob.php?action=throneroom", outfit);
          (0,external_kolmafia_namespaceObject.autosell)(external_kolmafia_namespaceObject.Item.get("Dense Meat Stack"), 2);
          (0,external_kolmafia_namespaceObject.council)();
        } };

    } }]);return QuestL5Goblin;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarElbow.ts
function QuestL6FriarElbow_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarElbow_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL6FriarElbow_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarElbow_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarElbow_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarElbow_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL6FriarElbow = /*#__PURE__*/function () {function QuestL6FriarElbow() {QuestL6FriarElbow_classCallCheck(this, QuestL6FriarElbow);QuestL6FriarElbow_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("Eldritch butterknife"));QuestL6FriarElbow_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("Dark Elbow of the Woods"));QuestL6FriarElbow_defineProperty(this, "absorbs",
    [external_kolmafia_namespaceObject.Monster.get("G imp"), external_kolmafia_namespaceObject.Monster.get("L imp")]);QuestL6FriarElbow_defineProperty(this, "latte",
    external_kolmafia_namespaceObject.Item.get("Latte lovers member's mug"));QuestL6FriarElbow_defineProperty(this, "umbrella",
    external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));QuestL6FriarElbow_defineProperty(this, "toAbsorb", void 0);QuestL6FriarElbow_defineProperty(this, "skill1",

    external_kolmafia_namespaceObject.Skill.get("Phase Shift"));QuestL6FriarElbow_defineProperty(this, "skill2",
    external_kolmafia_namespaceObject.Skill.get("Photonic Shroud"));}QuestL6FriarElbow_createClass(QuestL6FriarElbow, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.FAM_EXP));

    } }, { key: "isAllAbsorbed", value:

    function isAllAbsorbed() {
      var absorbed = AbsorbsProvider.getReabsorbedMonsters();

      return this.absorbs.find((a) => !absorbed.includes(a)) == null;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL06Friar") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("questL06Friar") == "finished" ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.item) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (
      this.shouldWearLatte() &&
      getCurrentLatteFlavors().includes(LatteFlavor.MEAT_DROP))
      {
        return QuestStatus.READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.skill1) || !(0,external_kolmafia_namespaceObject.haveSkill)(this.skill2)) {
        return QuestStatus.NOT_READY;
      }

      if (
      !hasNonCombatSkillsReady((0,external_kolmafia_namespaceObject.myLevel)() >= 11 && !hasNonCombatSkillActive()))
      {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat().setNoCombat();

      if (this.shouldWearLatte()) {
        outfit.addItem(this.latte);
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          if (this.isAllAbsorbed() && !this.shouldWearLatte()) {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) == 0) {
              DelayBurners.tryReplaceCombats();
            } else {
              var burner = DelayBurners.getReadyDelayBurner();

              if (burner != null) {
                burner.doFightSetup();
              }
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          greyAdv(this.location, outfit);
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / Elbow";
    } }]);return QuestL6FriarElbow;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarExp.ts
function QuestL6FriarExp_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarExp_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL6FriarExp_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarExp_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarExp_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarExp_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestL6FriarExp = /*#__PURE__*/function () {function QuestL6FriarExp() {QuestL6FriarExp_classCallCheck(this, QuestL6FriarExp);QuestL6FriarExp_defineProperty(this, "fam",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));}QuestL6FriarExp_createClass(QuestL6FriarExp, [{ key: "getId", value:

    function getId() {
      return "Misc / FriarExp";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("friarsBlessingReceived"))) {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.friarsAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myFamiliar)() != this.fam) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.fam) > 2) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.cliExecute)("friars familiar");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL6FriarExp;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarHeart.ts
function QuestL6FriarHeart_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarHeart_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL6FriarHeart_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarHeart_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarHeart_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarHeart_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL6FriarHeart = /*#__PURE__*/function () {function QuestL6FriarHeart() {QuestL6FriarHeart_classCallCheck(this, QuestL6FriarHeart);QuestL6FriarHeart_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("box of birthday candles"));QuestL6FriarHeart_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("Dark Heart of the Woods"));QuestL6FriarHeart_defineProperty(this, "absorbs",
    [external_kolmafia_namespaceObject.Monster.get("G imp"), external_kolmafia_namespaceObject.Monster.get("P imp")]);QuestL6FriarHeart_defineProperty(this, "latte",
    external_kolmafia_namespaceObject.Item.get("Latte lovers member's mug"));QuestL6FriarHeart_defineProperty(this, "umbrella",
    external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));QuestL6FriarHeart_defineProperty(this, "toAbsorb", void 0);QuestL6FriarHeart_defineProperty(this, "skill1",

    external_kolmafia_namespaceObject.Skill.get("Phase Shift"));QuestL6FriarHeart_defineProperty(this, "skill2",
    external_kolmafia_namespaceObject.Skill.get("Photonic Shroud"));}QuestL6FriarHeart_createClass(QuestL6FriarHeart, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.PLUS_COMBAT));

    } }, { key: "isAllAbsorbed", value:

    function isAllAbsorbed() {
      var absorbed = AbsorbsProvider.getReabsorbedMonsters();

      return this.absorbs.find((a) => !absorbed.includes(a)) == null;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL06Friar") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("questL06Friar") == "finished" ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.item) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (
      !hasNonCombatSkillsReady((0,external_kolmafia_namespaceObject.myLevel)() >= 11 && !hasNonCombatSkillActive()))
      {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.skill1) || !(0,external_kolmafia_namespaceObject.haveSkill)(this.skill2)) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat().setNoCombat();

      if (this.shouldWearLatte()) {
        outfit.addItem(this.latte);
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          if (this.isAllAbsorbed() && !this.shouldWearLatte()) {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) == 0) {
              DelayBurners.tryReplaceCombats();
            } else {
              var burner = DelayBurners.getReadyDelayBurner();

              if (burner != null) {
                burner.doFightSetup();
              }
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          greyAdv(this.location, outfit);
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / Heart";
    } }]);return QuestL6FriarHeart;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarNeck.ts
function QuestL6FriarNeck_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarNeck_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL6FriarNeck_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarNeck_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarNeck_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarNeck_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestL6FriarNeck = /*#__PURE__*/function () {function QuestL6FriarNeck() {QuestL6FriarNeck_classCallCheck(this, QuestL6FriarNeck);QuestL6FriarNeck_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("dodecagram"));QuestL6FriarNeck_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("Dark Neck of the Woods"));QuestL6FriarNeck_defineProperty(this, "absorbs",
    [external_kolmafia_namespaceObject.Monster.get("P imp"), external_kolmafia_namespaceObject.Monster.get("W imp")]);QuestL6FriarNeck_defineProperty(this, "latte",
    external_kolmafia_namespaceObject.Item.get("Latte lovers member's mug"));QuestL6FriarNeck_defineProperty(this, "umbrella",
    external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));QuestL6FriarNeck_defineProperty(this, "toAbsorb", void 0);QuestL6FriarNeck_defineProperty(this, "skill1",

    external_kolmafia_namespaceObject.Skill.get("Phase Shift"));QuestL6FriarNeck_defineProperty(this, "skill2",
    external_kolmafia_namespaceObject.Skill.get("Photonic Shroud"));}QuestL6FriarNeck_createClass(QuestL6FriarNeck, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_namespaceObject.hippyStoneBroken)() &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.PVP_FIGHTS));

    } }, { key: "isAllAbsorbed", value:

    function isAllAbsorbed() {
      var absorbed = AbsorbsProvider.getReabsorbedMonsters();

      return this.absorbs.find((a) => !absorbed.includes(a)) == null;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL06Friar") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("questL06Friar") == "finished" ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.item) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.skill1) || !(0,external_kolmafia_namespaceObject.haveSkill)(this.skill2)) {
        return QuestStatus.NOT_READY;
      }

      if (
      !hasNonCombatSkillsReady((0,external_kolmafia_namespaceObject.myLevel)() >= 11 && !hasNonCombatSkillActive()))
      {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat().setNoCombat();

      if (this.shouldWearLatte()) {
        outfit.addItem(this.latte);
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          if (this.isAllAbsorbed() && !this.shouldWearLatte()) {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) == 0) {
              DelayBurners.tryReplaceCombats();
            } else {
              var burner = DelayBurners.getReadyDelayBurner();

              if (burner != null) {
                burner.doFightSetup();
              }
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          greyAdv(this.location, outfit);
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / Neck";
    } }]);return QuestL6FriarNeck;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL6Friars.ts
function QuestL6Friars_toConsumableArray(arr) {return QuestL6Friars_arrayWithoutHoles(arr) || QuestL6Friars_iterableToArray(arr) || QuestL6Friars_unsupportedIterableToArray(arr) || QuestL6Friars_nonIterableSpread();}function QuestL6Friars_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL6Friars_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL6Friars_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL6Friars_arrayLikeToArray(o, minLen);}function QuestL6Friars_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestL6Friars_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestL6Friars_arrayLikeToArray(arr);}function QuestL6Friars_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL6Friars_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6Friars_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL6Friars_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6Friars_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6Friars_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6Friars_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL6Friar = /*#__PURE__*/function () {function QuestL6Friar() {QuestL6Friars_classCallCheck(this, QuestL6Friar);QuestL6Friars_defineProperty(this, "woods",
    [
    new QuestL6FriarElbow(),
    new QuestL6FriarHeart(),
    new QuestL6FriarNeck()]);QuestL6Friars_defineProperty(this, "exp",

    new QuestL6FriarExp());}QuestL6Friars_createClass(QuestL6Friar, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / TurnIn";
    } }, { key: "getChildren", value:

    function getChildren() {
      return [this.exp].concat(QuestL6Friars_toConsumableArray(this.woods));
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL06Friar");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (
      this.woods.filter((c) => c.status() != QuestStatus.COMPLETED).length > 0)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("friars.php?action=ritual&pwd");
          (0,external_kolmafia_namespaceObject.visitUrl)("pandamonium.php");
          (0,external_kolmafia_namespaceObject.council)();
        } };

    } }]);return QuestL6Friar;}();
;// CONCATENATED MODULE: ./src/quests/council/crypts/CryptTemplate.ts
function CryptTemplate_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function CryptTemplate_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function CryptTemplate_createClass(Constructor, protoProps, staticProps) {if (protoProps) CryptTemplate_defineProperties(Constructor.prototype, protoProps);if (staticProps) CryptTemplate_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function CryptTemplate_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var CryptL7Template = /*#__PURE__*/function () {function CryptL7Template() {CryptTemplate_classCallCheck(this, CryptL7Template);CryptTemplate_defineProperty(this, "swords",
    [
    "ebony epee",
    "antique machete",
    "black sword",
    "broken sword",
    "cardboard katana",
    "cardboard wakizashi",
    "knob goblin deluxe scimitar",
    "knob goblin scimitar",
    "lupine sword",
    "muculent machete",
    "serpentine sword",
    "vorpal blade",
    "white sword",
    "sweet ninja sword"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));CryptTemplate_defineProperty(this, "cape",
    external_kolmafia_namespaceObject.Item.get("Unwrapped knock-off retro superhero cape"));CryptTemplate_defineProperty(this, "gravyboat",
    external_kolmafia_namespaceObject.Item.get("Gravy Boat"));}CryptTemplate_createClass(CryptL7Template, [{ key: "getSword", value:

    function getSword() {
      var items = this.swords.filter((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) > 0);

      if (items.length == 0) {
        (0,external_kolmafia_namespaceObject.retrieveItem)(external_kolmafia_namespaceObject.Item.get("sweet ninja sword"));

        return this.getSword();
      }

      return items[0];
    } }, { key: "level", value:

    function level() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.cape) > 0 ? 7 : 9;
    } }, { key: "addRetroSword", value:



    function addRetroSword() {var outfit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new GreyOutfit();
      outfit.addItem(this.gravyboat, 99999);

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cape) > 0) {
        outfit.addItem(this.getSword(), 99999);
        outfit.addBonus("-back");
      }

      return outfit;
    } }, { key: "adjustRetroCape", value:

    function adjustRetroCape() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cape) == 0) {
        return;
      }

      (0,external_kolmafia_namespaceObject.equip)(this.cape);

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("retroCapeSuperhero") == "vampire" &&
      (0,external_kolmafia_namespaceObject.getProperty)("retroCapeWashingInstructions") == "kill")
      {
        return;
      }

      (0,external_kolmafia_namespaceObject.cliExecute)("retrocape vampire kill");
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL07Cyrptic") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (this.getStatus() == CryptStatus.FINISHED) {
        return QuestStatus.COMPLETED;
      }

      if (this.getSword() == null && (0,external_kolmafia_namespaceObject.myMeat)() < 300) {
        return QuestStatus.NOT_READY;
      }

      return this.cryptStatus();
    } }, { key: "getStatus", value:









    function getStatus() {
      var num = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)(this.getProperty()));

      if (num > 25) {
        return CryptStatus.FIGHT;
      }

      if (num <= 0) {
        return CryptStatus.FINISHED;
      }

      return CryptStatus.BOSS;
    } }]);return CryptL7Template;}();
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptDirtyMan.ts
function QuestL7CryptDirtyMan_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptDirtyMan_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL7CryptDirtyMan_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptDirtyMan_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptDirtyMan_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptDirtyMan_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptDirtyMan_setPrototypeOf(subClass, superClass);}function QuestL7CryptDirtyMan_setPrototypeOf(o, p) {QuestL7CryptDirtyMan_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptDirtyMan_setPrototypeOf(o, p);}function QuestL7CryptDirtyMan_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptDirtyMan_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptDirtyMan_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptDirtyMan_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptDirtyMan_possibleConstructorReturn(this, result);};}function QuestL7CryptDirtyMan_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptDirtyMan_assertThisInitialized(self);}function QuestL7CryptDirtyMan_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptDirtyMan_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptDirtyMan_getPrototypeOf(o) {QuestL7CryptDirtyMan_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptDirtyMan_getPrototypeOf(o);}function QuestL7CryptDirtyMan_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var CryptL7DirtyMan = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptDirtyMan_inherits(CryptL7DirtyMan, _CryptL7Template);var _super = QuestL7CryptDirtyMan_createSuper(CryptL7DirtyMan);function CryptL7DirtyMan() {var _this;QuestL7CryptDirtyMan_classCallCheck(this, CryptL7DirtyMan);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "loc",
    external_kolmafia_namespaceObject.Location.get("The Defiled Niche"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "sniffer",
    external_kolmafia_namespaceObject.Familiar.get("Nosy Nose"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "dirty",
    external_kolmafia_namespaceObject.Monster.get("dirty old lihc"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "sniff",
    external_kolmafia_namespaceObject.Skill.get("Get a Good Whiff of This Guy"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "banisher",
    external_kolmafia_namespaceObject.Skill.get("System Sweep"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "spray",
    new PossiblePath(8).add(
    ResourceCategory.FIRE_EXTINGUSHER_ZONE));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "nonSpray",

    new PossiblePath(16));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "paths",
    []);QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "advsAbsorb",
    external_kolmafia_namespaceObject.Monster.get("basic lihc"));return _this;}QuestL7CryptDirtyMan_createClass(CryptL7DirtyMan, [{ key: "createPaths", value:

    function createPaths(assumeUnused) {
      this.paths = [];

      var evilRemaining =
      (assumeUnused || (0,external_kolmafia_namespaceObject.getProperty)("questL07Cyrptic") == "unstarted" ?
      50 :
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)(this.getProperty()))) - 25;

      // Need to do this better, with actual math for retro/gravy
      this.nonSpray = new PossiblePath(Math.ceil(evilRemaining / 2));

      if (assumeUnused || (0,external_kolmafia_namespaceObject.getProperty)("fireExtinguisherCyrptUsed") != "true") {
        this.spray = new PossiblePath(Math.ceil((evilRemaining - 10) / 2)).add(
        ResourceCategory.FIRE_EXTINGUSHER_ZONE);


        this.paths.push(this.spray);
      }

      this.paths.push(this.nonSpray);
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "run", value:

    function run(path) {
      var outfit = this.addRetroSword();

      if (path.canUse(ResourceCategory.FIRE_EXTINGUSHER_ZONE)) {
        path.getResource(ResourceCategory.FIRE_EXTINGUSHER_ZONE).prepare(outfit);
      }

      var fam = null;
      /*  toInt(getProperty(this.getProperty())) >
        (getProperty("nosyNoseMonster") != "dirty old lihc" ? 31 : 27)
          ? this.sniffer
          : null;*/

      return {
        familiar: fam,
        location: this.loc,
        outfit: outfit,
        run: () => {
          this.adjustRetroCape();

          var avoid;

          if (path.canUse(ResourceCategory.FIRE_EXTINGUSHER_ZONE)) {
            // If its a dirty lich, don't spray down
            avoid = Macro.ifNot_(
            this.dirty,
            path.getResource(ResourceCategory.FIRE_EXTINGUSHER_ZONE).macro());


            if (
            !AbsorbsProvider.getReabsorbedMonsters().includes(this.advsAbsorb))
            {
              avoid = Macro.ifNot_(this.advsAbsorb, avoid);
            }
          }

          var start;

          if (
          (0,external_kolmafia_namespaceObject.myFamiliar)() == fam &&
          (0,external_kolmafia_namespaceObject.getProperty)("nosyNoseMonster") != "dirty old lihc")
          {
            start = Macro.step("if monsterid 1071;skill 7166;endif");

            if (avoid != null) {
              start = start.step(avoid);
            }
          } else if (avoid != null) {
            start = avoid;
          }

          var props = new PropertyManager();
          props.setChoice(157, 4);

          try {
            greyAdv(
            this.loc,
            outfit,
            new AdventureSettings().
            addNoBanish(this.dirty).
            setStartOfFightMacro(start));

          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptNicheEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.banisher)) {
        // return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / DirtyMan";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7DirtyMan;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptEyes.ts
function QuestL7CryptEyes_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptEyes_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL7CryptEyes_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptEyes_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptEyes_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptEyes_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptEyes_setPrototypeOf(subClass, superClass);}function QuestL7CryptEyes_setPrototypeOf(o, p) {QuestL7CryptEyes_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptEyes_setPrototypeOf(o, p);}function QuestL7CryptEyes_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptEyes_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptEyes_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptEyes_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptEyes_possibleConstructorReturn(this, result);};}function QuestL7CryptEyes_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptEyes_assertThisInitialized(self);}function QuestL7CryptEyes_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptEyes_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptEyes_getPrototypeOf(o) {QuestL7CryptEyes_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptEyes_getPrototypeOf(o);}function QuestL7CryptEyes_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var CryptL7Eyes = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptEyes_inherits(CryptL7Eyes, _CryptL7Template);var _super = QuestL7CryptEyes_createSuper(CryptL7Eyes);function CryptL7Eyes() {var _this;QuestL7CryptEyes_classCallCheck(this, CryptL7Eyes);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptEyes_defineProperty(QuestL7CryptEyes_assertThisInitialized(_this), "loc",
    external_kolmafia_namespaceObject.Location.get("The Defiled Nook"));return _this;}QuestL7CryptEyes_createClass(CryptL7Eyes, [{ key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops().setChampagneBottle();
      this.addRetroSword(outfit);

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          this.adjustRetroCape();

          var props = new PropertyManager();
          props.setChoice(155, 5);

          try {
            greyAdv(
            this.loc,
            outfit,
            new AdventureSettings().addBanish(external_kolmafia_namespaceObject.Monster.get("party skelteon")));

          } finally {
            props.resetAll();
          }

          (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");

          var item = external_kolmafia_namespaceObject.Item.get("Evil Eye");

          if ((0,external_kolmafia_namespaceObject.availableAmount)(item) > 0) {
            (0,external_kolmafia_namespaceObject.use)(item, (0,external_kolmafia_namespaceObject.availableAmount)(item));
          }
        } };

    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptNookEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Eyes";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7Eyes;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptRattling.ts
function QuestL7CryptRattling_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptRattling_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL7CryptRattling_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptRattling_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptRattling_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptRattling_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptRattling_setPrototypeOf(subClass, superClass);}function QuestL7CryptRattling_setPrototypeOf(o, p) {QuestL7CryptRattling_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptRattling_setPrototypeOf(o, p);}function QuestL7CryptRattling_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptRattling_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptRattling_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptRattling_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptRattling_possibleConstructorReturn(this, result);};}function QuestL7CryptRattling_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptRattling_assertThisInitialized(self);}function QuestL7CryptRattling_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptRattling_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptRattling_getPrototypeOf(o) {QuestL7CryptRattling_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptRattling_getPrototypeOf(o);}function QuestL7CryptRattling_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var CryptL7Rattling = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptRattling_inherits(CryptL7Rattling, _CryptL7Template);var _super = QuestL7CryptRattling_createSuper(CryptL7Rattling);function CryptL7Rattling() {var _this;QuestL7CryptRattling_classCallCheck(this, CryptL7Rattling);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "loc",
    external_kolmafia_namespaceObject.Location.get("The Defiled Cranny"));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "beatenUp",
    external_kolmafia_namespaceObject.Effect.get("Beaten Up"));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "kramco",
    external_kolmafia_namespaceObject.Item.get("Kramco Sausage-o-Matic&trade;"));return _this;}QuestL7CryptRattling_createClass(CryptL7Rattling, [{ key: "level", value:

    function level() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.cape) > 0 ? 7 : 16;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      this.addRetroSword(outfit);

      if (this.getStatus() == CryptStatus.BOSS) {
        outfit.meatDropWeight = 5;
      } else {
        outfit.setNoCombat();
        outfit.plusMonsterLevelWeight = 4;
        outfit.addBonus("-equip " + this.kramco.name);
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          this.adjustRetroCape();
          (0,external_kolmafia_namespaceObject.changeMcd)(10);

          var props = new PropertyManager();
          props.setChoice(523, 4);

          try {
            greyAdv(this.loc, outfit);
          } finally {
            props.resetAll();
          }

          (0,external_kolmafia_namespaceObject.changeMcd)(0);
        } };

    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptCrannyEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cape) == 0 && (0,external_kolmafia_namespaceObject.haveEffect)(this.beatenUp) > 0) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Rattling";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7Rattling;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptSprinters.ts
function QuestL7CryptSprinters_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptSprinters_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL7CryptSprinters_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptSprinters_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptSprinters_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptSprinters_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptSprinters_setPrototypeOf(subClass, superClass);}function QuestL7CryptSprinters_setPrototypeOf(o, p) {QuestL7CryptSprinters_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptSprinters_setPrototypeOf(o, p);}function QuestL7CryptSprinters_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptSprinters_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptSprinters_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptSprinters_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptSprinters_possibleConstructorReturn(this, result);};}function QuestL7CryptSprinters_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptSprinters_assertThisInitialized(self);}function QuestL7CryptSprinters_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptSprinters_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptSprinters_getPrototypeOf(o) {QuestL7CryptSprinters_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptSprinters_getPrototypeOf(o);}function QuestL7CryptSprinters_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var CryptL7Sprinters = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptSprinters_inherits(CryptL7Sprinters, _CryptL7Template);var _super = QuestL7CryptSprinters_createSuper(CryptL7Sprinters);function CryptL7Sprinters() {var _this;QuestL7CryptSprinters_classCallCheck(this, CryptL7Sprinters);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptSprinters_defineProperty(QuestL7CryptSprinters_assertThisInitialized(_this), "loc",
    external_kolmafia_namespaceObject.Location.get("The Defiled Alcove"));return _this;}QuestL7CryptSprinters_createClass(CryptL7Sprinters, [{ key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      this.addRetroSword(outfit);

      if (this.getStatus() == CryptStatus.BOSS) {
        outfit.meatDropWeight = 5;
      } else {
        outfit.initWeight = 2;
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          this.adjustRetroCape();

          var props = new PropertyManager();
          props.setChoice(153, 4);

          try {
            greyAdv(this.loc, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptAlcoveEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Sprinters";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7Sprinters;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/QuestL7Crypt.ts
function QuestL7Crypt_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7Crypt_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL7Crypt_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7Crypt_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7Crypt_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7Crypt_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var QuestL7Crypt = /*#__PURE__*/function () {function QuestL7Crypt() {QuestL7Crypt_classCallCheck(this, QuestL7Crypt);QuestL7Crypt_defineProperty(this, "children",
    [
    new CryptL7DirtyMan(),
    new CryptL7Eyes(),
    new CryptL7Rattling(),
    new CryptL7Sprinters()]);QuestL7Crypt_defineProperty(this, "chest",

    external_kolmafia_namespaceObject.Item.get("Chest of the Bonerdagon"));}QuestL7Crypt_createClass(QuestL7Crypt, [{ key: "getLocations", value:

    function getLocations() {
      return [external_kolmafia_namespaceObject.Location.get("Haert of the Cyrpt")];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_namespaceObject.getProperty)("questL07Cyrptic");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      // If we're too poor to buy a sword, too lazy to do more checks
      if ((0,external_kolmafia_namespaceObject.myMeat)() < 300) {
        return QuestStatus.NOT_READY;
      }

      // If we're ready for boss
      if (
      this.children.filter((c) => c.status() != QuestStatus.COMPLETED).length ==
      0)
      {
        return QuestStatus.READY;
      }
      // Equip sword and retrocape
      // Then we gotta handle each zone specially. Item drop, ML, init and eh

      return QuestStatus.NOT_READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Boss";
    } }, { key: "run", value:

    function run() {
      return {
        location: external_kolmafia_namespaceObject.Location.get("Haert of the Cyrpt"),
        run: () => {
          var props = new PropertyManager();
          props.setChoice(527, 1);

          try {
            greyAdv("crypt.php?action=heart");
          } finally {
            props.resetAll();
          }

          (0,external_kolmafia_namespaceObject.council)();

          if (
          !GreySettings.greyPrepareLevelingResources &&
          (0,external_kolmafia_namespaceObject.availableAmount)(this.chest) > 0 &&
          (0,external_kolmafia_namespaceObject.myMeat)() < 6000)
          {
            (0,external_kolmafia_namespaceObject.use)(this.chest);
          }
        } };

    } }]);return QuestL7Crypt;}();


var CryptStatus;(function (CryptStatus) {CryptStatus[CryptStatus["FIGHT"] = 0] = "FIGHT";CryptStatus[CryptStatus["BOSS"] = 1] = "BOSS";CryptStatus[CryptStatus["FINISHED"] = 2] = "FINISHED";})(CryptStatus || (CryptStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainBoss.ts
function QuestL8MountainBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL8MountainBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainBoss_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL8MountainBoss = /*#__PURE__*/function () {function QuestL8MountainBoss() {QuestL8MountainBoss_classCallCheck(this, QuestL8MountainBoss);QuestL8MountainBoss_defineProperty(this, "peak",
    external_kolmafia_namespaceObject.Location.get("Mist-shrouded Peak"));}QuestL8MountainBoss_createClass(QuestL8MountainBoss, [{ key: "getId", value:

    function getId() {
      return "Council / Ice / Boss";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = this.getStatus();

      if (status == MountainStatus.finished) {
        return QuestStatus.COMPLETED;
      }

      if (status < MountainStatus.UNLOCKED_PEAK) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().addBonus("+10 cold res 5 min 5 max");

      return {
        location: this.peak,
        outfit: outfit,
        run: () => {
          greyAdv("place.php?whichplace=mclargehuge&action=cloudypeak2", outfit);

          if (this.getStatus() == MountainStatus.DEFEATED_BOAR) {
            this.talkTrapper();
            (0,external_kolmafia_namespaceObject.council)();
          }
        } };

    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.peak];
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }]);return QuestL8MountainBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainGoats.ts
function QuestL8MountainGoats_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainGoats_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL8MountainGoats_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainGoats_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainGoats_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainGoats_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestL8MountainGoats = /*#__PURE__*/function () {function QuestL8MountainGoats() {QuestL8MountainGoats_classCallCheck(this, QuestL8MountainGoats);QuestL8MountainGoats_defineProperty(this, "goats",
    external_kolmafia_namespaceObject.Location.get("The Goatlet"));QuestL8MountainGoats_defineProperty(this, "cheese",
    external_kolmafia_namespaceObject.Item.get("Goat Cheese"));QuestL8MountainGoats_defineProperty(this, "dairy",
    external_kolmafia_namespaceObject.Monster.get("Dairy Goat"));QuestL8MountainGoats_defineProperty(this, "elementalSkill",
    external_kolmafia_namespaceObject.Skill.get("Secondary Fermentation"));QuestL8MountainGoats_defineProperty(this, "drunk",
    external_kolmafia_namespaceObject.Monster.get("Drunk Goat"));QuestL8MountainGoats_defineProperty(this, "sysSweep",
    external_kolmafia_namespaceObject.Skill.get("System Sweep"));}QuestL8MountainGoats_createClass(QuestL8MountainGoats, [{ key: "getId", value:

    function getId() {
      return "Council / Ice / Goats";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = this.getStatus();

      if (status < MountainStatus.TRAPPER_DEMANDS) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.haveSkill)(this.elementalSkill)) {
        if (status > MountainStatus.TRAPPER_DEMANDS) {
          return QuestStatus.COMPLETED;
        }

        // If we have our cheese but not the ores
        if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cheese) >= 3 && this.getOreRemaining() > 0) {
          return QuestStatus.COMPLETED;
        }
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.sysSweep)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        this.hasEverything() && this.getStatus() == MountainStatus.TRAPPER_DEMANDS);

    } }, { key: "getOreRemaining", value:

    function getOreRemaining() {
      return 3 - (0,external_kolmafia_namespaceObject.availableAmount)(this.neededOre());
    } }, { key: "neededOre", value:

    function neededOre() {
      return external_kolmafia_namespaceObject.Item.get((0,external_kolmafia_namespaceObject.getProperty)("trapperOre") || "asbestos ore");
    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }, { key: "hasEverything", value:

    function hasEverything() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.cheese) >= 3 && this.getOreRemaining() <= 0;
    } }, { key: "run", value:

    function run() {
      if (this.hasEverything()) {
        return {
          location: null,
          run: () => {
            this.talkTrapper();
          } };

      }

      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.goats,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();

          if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.elementalSkill)) {
            settings.addNoBanish(this.drunk);
          }

          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.cheese) < 3 &&
          this.getStatus() <= MountainStatus.TRAPPER_DEMANDS)
          {
            settings.addNoBanish(this.dairy);
          }

          greyAdv(this.goats, outfit, settings);

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cheese) >= 3 && this.getOreRemaining() <= 0) {
            this.talkTrapper();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.goats];
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }]);return QuestL8MountainGoats;}();
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainNinja.ts
function QuestL8MountainNinja_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainNinja_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL8MountainNinja_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainNinja_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainNinja_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainNinja_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL8MountainNinja = /*#__PURE__*/function () {function QuestL8MountainNinja() {QuestL8MountainNinja_classCallCheck(this, QuestL8MountainNinja);QuestL8MountainNinja_defineProperty(this, "ninja",
    external_kolmafia_namespaceObject.Location.get("Lair of the Ninja Snowmen"));}QuestL8MountainNinja_createClass(QuestL8MountainNinja, [{ key: "getId", value:
    // TODO Once we've got the absorbs, try replace combats if assassins isnt done cos we're really just stacking +combat

    function getId() {
      return "Council / Ice / Ninjas";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = this.getStatus();

      if (status > MountainStatus.GET_OUTFIT) {
        return QuestStatus.COMPLETED;
      }

      if (status < MountainStatus.GET_OUTFIT) {
        return QuestStatus.NOT_READY;
      }

      // If we've reached snowman time but don't have the skill
      if (!hasCombatSkillReady()) {
        if ((0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Piezoelectric Honk"))) {
          return QuestStatus.FASTER_LATER;
        }

        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }, { key: "run", value:

    function run() {
      // See if we can unlock peak yet
      if (this.getOutfit().find((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0) == null) {
        return {
          location: null,
          run: () => {
            if ((0,external_kolmafia_namespaceObject.numericModifier)("Cold Resistance") < 5) {
              (0,external_kolmafia_namespaceObject.maximize)("cold res -tie", false);
            }

            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=cloudypeak");
          } };

      }

      var outfit = new GreyOutfit().setPlusCombat();

      return {
        location: this.ninja,
        outfit: outfit,
        run: () => {
          greyAdv(this.ninja, outfit);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.ninja];
    } }, { key: "getOutfit", value:

    function getOutfit() {
      return ["Ninja rope", "Ninja Crampons", "Ninja Carabiner"].map((i) =>
      external_kolmafia_namespaceObject.Item.get(i));

    } }]);return QuestL8MountainNinja;}();
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainOre.ts
function QuestL8MountainOre_toConsumableArray(arr) {return QuestL8MountainOre_arrayWithoutHoles(arr) || QuestL8MountainOre_iterableToArray(arr) || QuestL8MountainOre_unsupportedIterableToArray(arr) || QuestL8MountainOre_nonIterableSpread();}function QuestL8MountainOre_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL8MountainOre_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestL8MountainOre_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestL8MountainOre_arrayLikeToArray(arr);}function QuestL8MountainOre_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL8MountainOre_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL8MountainOre_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL8MountainOre_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL8MountainOre_arrayLikeToArray(o, minLen);}function QuestL8MountainOre_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL8MountainOre_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainOre_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL8MountainOre_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainOre_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainOre_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainOre_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL8MountainOre_setPrototypeOf(subClass, superClass);}function QuestL8MountainOre_setPrototypeOf(o, p) {QuestL8MountainOre_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL8MountainOre_setPrototypeOf(o, p);}function QuestL8MountainOre_createSuper(Derived) {var hasNativeReflectConstruct = QuestL8MountainOre_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL8MountainOre_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL8MountainOre_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL8MountainOre_possibleConstructorReturn(this, result);};}function QuestL8MountainOre_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL8MountainOre_assertThisInitialized(self);}function QuestL8MountainOre_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL8MountainOre_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL8MountainOre_getPrototypeOf(o) {QuestL8MountainOre_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL8MountainOre_getPrototypeOf(o);}function QuestL8MountainOre_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}












var QuestL8MountainOre = /*#__PURE__*/function (_TaskInfo) {QuestL8MountainOre_inherits(QuestL8MountainOre, _TaskInfo);var _super = QuestL8MountainOre_createSuper(QuestL8MountainOre);function QuestL8MountainOre() {var _this;QuestL8MountainOre_classCallCheck(this, QuestL8MountainOre);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "mountainMan",
    external_kolmafia_namespaceObject.Monster.get("Mountain Man"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "goose",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "wish",
    external_kolmafia_namespaceObject.Item.get("Pocket Wish"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "mines",
    external_kolmafia_namespaceObject.Location.get("Itznotyerzitz Mine"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "recreatedPath", void 0);QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "burglar",

    external_kolmafia_namespaceObject.Familiar.get("Cat Burglar"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "faxAndGooseDupe",
    new PossiblePath(1).
    add(ResourceCategory.YELLOW_RAY).
    addFax(_this.mountainMan));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "failsafeBackup",
    new PossiblePath(1).add(
    ResourceCategory.COPIER));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "faxAndHeist",

    new PossiblePath(1).
    add(ResourceCategory.CAT_HEIST).
    addFax(_this.mountainMan));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "paths",
    []);QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "asbestos",
    external_kolmafia_namespaceObject.Item.get("asbestos ore"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "linoleum",
    external_kolmafia_namespaceObject.Item.get("linoleum ore"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "chrome",
    external_kolmafia_namespaceObject.Item.get("chrome ore"));return _this;}QuestL8MountainOre_createClass(QuestL8MountainOre, [{ key: "getId", value:

    function getId() {
      return "Council / Ice / Ore";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "getOreRemaining", value:

    function getOreRemaining() {
      return 3 - (0,external_kolmafia_namespaceObject.availableAmount)(this.neededOre());
    } }, { key: "neededOre", value:

    function neededOre() {
      return external_kolmafia_namespaceObject.Item.get((0,external_kolmafia_namespaceObject.getProperty)("trapperOre") || "linoleum ore");
    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }, { key: "canPull", value:

    function canPull() {
      return (
        (0,external_kolmafia_namespaceObject.pullsRemaining)() != 0 &&
        !(0,external_kolmafia_namespaceObject.getProperty)("_roninStoragePulls").
        split(",").
        includes((0,external_kolmafia_namespaceObject.toInt)(this.neededOre()).toString()));

    } }, { key: "isHeistReady", value:

    function isHeistReady() {
      return (
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("catBurglarBankHeists")) > 0 ||
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_catBurglarCharge")) >= 10);

    } }, { key: "hasHeistedAlready", value:

    function hasHeistedAlready() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_catBurglarHeistsComplete")) > 0;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      if (!(0,external_kolmafia_namespaceObject.haveFamiliar)(this.burglar)) {
        return null;
      }

      if (this.isHeistReady() || this.hasHeistedAlready()) {
        return null;
      }

      return this.burglar;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.recreatedPath = this.getStatus() >= MountainStatus.TRAPPER_DEMANDS;
      this.paths = [];

      var resourceTypes = [];
      var needOres = assumeUnstarted ? 3 : this.getOreRemaining();

      for (var i = 0; i < needOres; i++) {
        resourceTypes.push(ResourceCategory.CLOVER);
        resourceTypes.push(ResourceCategory.POLAR_VORTEX);
      }

      resourceTypes.push(ResourceCategory.FAXER);
      resourceTypes.push(ResourceCategory.YELLOW_RAY);
      resourceTypes.push(ResourceCategory.COPIER);
      resourceTypes.push(ResourceCategory.CAT_HEIST);
      resourceTypes.push(ResourceCategory.PULL);

      resourceTypes.push(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT);

      var allCombinations = getAllCombinations(resourceTypes);var _iterator = QuestL8MountainOre_createForOfIteratorHelper(

      allCombinations),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          var oresExpected = combo.
          map((res) =>
          res == ResourceCategory.YELLOW_RAY ?
          2 :
          res == ResourceCategory.PULL ||
          res == ResourceCategory.COPIER ||
          res == ResourceCategory.CLOVER ||
          res == ResourceCategory.CAT_HEIST ?
          1 :
          0).

          reduce((p, n) => p + n, 0);

          // If this doesn't use a fax
          if (!combo.includes(ResourceCategory.FAXER)) {
            // Remove combinations that require a mountain man
            if (
            combo.includes(ResourceCategory.CAT_HEIST) ||
            combo.includes(ResourceCategory.COPIER) ||
            combo.includes(ResourceCategory.POLAR_VORTEX) ||
            combo.includes(ResourceCategory.YELLOW_RAY))
            {
              continue;
            }
          }

          // If this combination wouldn't give enough ores
          if (oresExpected < needOres || oresExpected > needOres) {
            continue;
          }

          var advs = combo.filter(
          (res) =>
          res == ResourceCategory.CLOVER ||
          res == ResourceCategory.FAXER ||
          res == ResourceCategory.COPIER).
          length;

          var path = new PossiblePath(advs);
          var addedPolar = false;var _iterator3 = QuestL8MountainOre_createForOfIteratorHelper(

          combo),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var res = _step3.value;
              // If this is a polar and we already did a polar and doing a yellow ray, or this is something we're doing after the mountain man
              var doMaybe =
              combo.includes(ResourceCategory.YELLOW_RAY) &&
              combo.includes(ResourceCategory.POLAR_VORTEX) && (
              res == ResourceCategory.POLAR_VORTEX ?
              addedPolar :
              res != ResourceCategory.FAXER &&
              res != ResourceCategory.YELLOW_RAY) ?
              0.33 :
              1;

              if (res == ResourceCategory.PULL) {
                path.addConsumablePull(this.neededOre());
              } else if (res == ResourceCategory.FAXER) {
                path.addFax(this.mountainMan, doMaybe ? 0.33 : 1);
              } else {
                path.addMaybe(res, doMaybe ? 0.33 : 1);
                addedPolar = addedPolar || res == ResourceCategory.POLAR_VORTEX;
              }
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          this.paths.push(path);

          // If this is a fax, and we're not doing a heist or a copier
          if (
          combo.includes(ResourceCategory.FAXER) &&
          !combo.includes(ResourceCategory.COPIER) &&
          !combo.includes(ResourceCategory.CAT_HEIST))
          {
            var cargoShorts = path.clone();

            cargoShorts.resourcesNeeded.forEach((res) => {
              if (res[0] == ResourceCategory.FAXER) {
                res[0] = ResourceCategory.CARGO_SHORTS;
              }
            });

            if (!cargoShorts.ignoreResources.includes("Cosplay Saber")) {
              cargoShorts.addIgnored("Cosplay Saber");
            }

            this.paths.push(cargoShorts);
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if (assumeUnstarted || !this.hasHeistedAlready()) {
        this.paths.push(this.faxAndHeist);
      }

      // Ignore cosplay saber for any path that requires a proper fight finishing blow
      var _iterator2 = QuestL8MountainOre_createForOfIteratorHelper(this.paths),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _path = _step2.value;
          if (
          _path.canUse(ResourceCategory.CAT_HEIST) == 0 &&
          _path.canUse(ResourceCategory.COPIER) == 0)
          {
            continue;
          }

          _path.addIgnored("Cosplay Saber");
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      var paths = QuestL8MountainOre_toConsumableArray(this.paths);

      if (this.doDuping()) {
        paths.push(this.faxAndGooseDupe);
      }

      if (this.canBackup()) {
        paths.push(this.failsafeBackup);
      }

      return paths;
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }, { key: "status", value:

    function status(path) {
      var status = this.getStatus();

      if (status < MountainStatus.TRAPPER_DEMANDS) {
        if (path != null) {
          //   throw "Status should only be called when we've finished getting the ore needed. This way we can correctly predict a path.";
        }

        return QuestStatus.NOT_READY;
      }

      if (status > MountainStatus.TRAPPER_DEMANDS) {
        return QuestStatus.COMPLETED;
      }

      if (this.getOreRemaining() <= 0) {
        return QuestStatus.COMPLETED;
      }

      if (!this.recreatedPath) {
        this.createPaths(false);
      }

      if (path == null) {
        return QuestStatus.READY;
      }

      if (
      !this.doDuping() &&
      path.canUse(ResourceCategory.CAT_HEIST) &&
      (0,external_kolmafia_namespaceObject.haveFamiliar)(this.burglar) &&
      !this.isHeistReady() &&
      !this.hasHeistedAlready())
      {
        return QuestStatus.NOT_READY;
      }

      if (
      this.lastBackup() == this.mountainMan && (
      path.canUse(ResourceCategory.COPIER) ||
      path.canUse(ResourceCategory.CAT_HEIST)))
      {
        return QuestStatus.READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Brother Corsican's Blessing")) +
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("A Girl Named Sue")) >
      0)
      {
        return QuestStatus.NOT_READY;
      }

      // If we haven't started this yet
      if (path.canUse(ResourceCategory.YELLOW_RAY)) {
        // If we have yellow ray active, or can't afford it
        if (!path.getResource(ResourceCategory.YELLOW_RAY).ready()) {
          return QuestStatus.NOT_READY;
        }

        // If we're doing a goose dupe
        if (this.doDuping()) {
          // If goose couldn't dupe
          if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) < 6) {
            return QuestStatus.NOT_READY;
          }
        } else if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
          // If we don't have nanovision, and this will want to maybe do a backup, better delay.
          if (path.canUse(ResourceCategory.COPIER)) {
            return QuestStatus.NOT_READY;
          }
        }
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (this.canBackup()) {
        return true;
      }

      if (this.getOreRemaining() < 3) {
        return true;
      }

      if ((0,external_kolmafia_namespaceObject.myLevel)() < 12) {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.myAdventures)() < 40) {
        return false;
      }

      if (this.isHeistReady() && this.isHeistable()) {
        return true;
      }

      if (
      this.doDuping() &&
      (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= this.famWeightToDupe())
      {
        return true;
      }

      return true;
    } }, { key: "lastBackup", value:

    function lastBackup() {
      return (0,external_kolmafia_namespaceObject.getProperty)("lastCopyableMonster") == "" ?
      null :
      external_kolmafia_namespaceObject.Monster.get((0,external_kolmafia_namespaceObject.getProperty)("lastCopyableMonster"));
    } }, { key: "canBackup", value:

    function canBackup() {
      return this.hasBackups() && this.lastBackup() == this.mountainMan;
    } }, { key: "hasBackups", value:

    function hasBackups() {
      return getBackupsRemaining() > 0;
    } }, { key: "doPull", value:

    function doPull(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          GreyPulls.pullOre();

          path.addUsed(ResourceCategory.PULL);
        } };

    } }, { key: "doPackOfCardsCheat", value:

    function doPackOfCardsCheat(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          path.
          getResource(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT).
          pickCard("Mine");
          path.addUsed(ResourceCategory.PULL);
        } };

    } }, { key: "doCopier", value:

    function doCopier(path) {
      var outfit = new GreyOutfit().setItemDrops();
      var loc = external_kolmafia_namespaceObject.Location.get("The Dire Warren");

      var resource = path.getResource(ResourceCategory.COPIER);

      resource.prepare(outfit);

      return {
        location: loc,
        outfit: outfit,
        run: () => {
          greyAdv(
          loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          new Macro().if_(
          external_kolmafia_namespaceObject.Monster.get("Fluffy Bunny"),
          path.getResource(ResourceCategory.COPIER).macro())));




          path.addUsed(ResourceCategory.COPIER);
        } };

    } }, { key: "isHeistable", value:

    function isHeistable() {
      return (
        Object.keys((0,external_kolmafia_namespaceObject.heistTargets)()).find(
        (k) => k.toLowerCase() == "mountain man") !=
        null);

    } }, { key: "run", value:

    function run(path) {
      if (
      this.getOreRemaining() < 3 &&
      path.canUse(ResourceCategory.CAT_HEIST) &&
      this.isHeistable())
      {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            path.
            getResource(ResourceCategory.CAT_HEIST).
            doHeist(this.neededOre());
          } };

      }

      if (
      path.canUse(ResourceCategory.FAXER) ||
      path.canUse(ResourceCategory.CARGO_SHORTS))
      {
        return this.doFaxers(path);
      }

      if (path.canUse(ResourceCategory.CLOVER)) {
        return this.doClover(path);
      }

      if (path.canUse(ResourceCategory.PULL) > 0) {
        return this.doPull(path);
      }

      if (path.canUse(ResourceCategory.COPIER)) {
        return this.doCopier(path);
      }

      if (path.canUse(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT)) {
        return this.doPackOfCardsCheat(path);
      }

      throw "Not sure what we should be doing";
    } }, { key: "doClover", value:

    function doClover(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          while (path.canUse(ResourceCategory.CLOVER)) {
            GreyClovers.doOres();
            greyAdv(this.mines);
            path.addUsed(ResourceCategory.CLOVER);
          }
        } };

    } }, { key: "doFaxers", value:

    function doFaxers(path) {
      var outfit = new GreyOutfit();
      outfit.addBonus("+DA +DR -ML");

      if (path.canUse(ResourceCategory.POLAR_VORTEX) > 0) {
        path.getResource(ResourceCategory.POLAR_VORTEX).prepare(outfit);
      }

      if (path.canUse(ResourceCategory.YELLOW_RAY)) {
        path.getResource(ResourceCategory.YELLOW_RAY).prepare(outfit);
      }

      return {
        location: null,
        outfit: outfit,
        run: () => {
          if (this.doDuping()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(this.goose);
          } else if (path.canUse(ResourceCategory.CAT_HEIST)) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(this.burglar);
          }

          if (path.canUse(ResourceCategory.FAXER)) {
            path.getResource(ResourceCategory.FAXER).fax(this.mountainMan);
            path.addUsed(ResourceCategory.FAXER);
          } else if (path.canUse(ResourceCategory.CARGO_SHORTS)) {
            path.getResource(ResourceCategory.CARGO_SHORTS).pocket(565);
            path.addUsed(ResourceCategory.CARGO_SHORTS);
          } else {
            throw "No way to start a mountain man combat!";
          }

          if ((0,external_kolmafia_namespaceObject.currentRound)() == 0) {
            throw "I should be in combat!";
          }

          var macro = new Macro();

          if (this.doDuping()) {
            macro = macro.skill(external_kolmafia_namespaceObject.Skill.get("Emit Matter Duplicating Drones"));
          } else if (path.canUse(ResourceCategory.POLAR_VORTEX)) {
            while (
            path.canUse(ResourceCategory.POLAR_VORTEX) &&
            this.getOreRemaining() > 2)
            {
              (0,external_kolmafia_namespaceObject.print)("Drop my ore dammit!", "red");
              path.getResource(ResourceCategory.POLAR_VORTEX).macro().submit();
              path.addUsed(ResourceCategory.POLAR_VORTEX);
            }

            if (this.getOreRemaining() > 2) {
              (0,external_kolmafia_namespaceObject.print)(
              "Drat. We're going to have to get the last ore another way.",
              "red");

            }
          }

          var props = new PropertyManager();

          try {
            if (path.canUse(ResourceCategory.YELLOW_RAY)) {
              path.getResource(ResourceCategory.YELLOW_RAY).prepare(null, props);
              macro.step(path.getResource(ResourceCategory.YELLOW_RAY).macro());
            }

            greyAdv(
            "main.php",
            outfit,
            new AdventureSettings().setStartOfFightMacro(macro));

          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_namespaceObject.currentRound)() != 0 || (0,external_kolmafia_namespaceObject.handlingChoice)()) {
            throw "Expected to have fight finished!";
          }
        } };

    } }, { key: "doDuping", value:

    function doDuping() {
      return (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= this.famWeightToDupe();
    } }, { key: "famWeightToDupe", value:

    function famWeightToDupe() {
      if (this.neededOre() == this.asbestos) {
        return 6;
      } else if (this.neededOre() == this.linoleum) {
        return 8;
      } else if (this.neededOre() == this.chrome) {
        return 10;
      }
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 3;
    } }]);return QuestL8MountainOre;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/QuestL8IcePeak.ts
function QuestL8IcePeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8IcePeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL8IcePeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8IcePeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8IcePeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8IcePeak_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL8IcePeak = /*#__PURE__*/function () {


  function QuestL8IcePeak() {QuestL8IcePeak_classCallCheck(this, QuestL8IcePeak);QuestL8IcePeak_defineProperty(this, "children", []);
    this.children.push(new QuestL8MountainGoats());
    this.children.push(new QuestL8MountainOre());
    this.children.push(new QuestL8MountainNinja());
    this.children.push(new QuestL8MountainBoss());
  }QuestL8IcePeak_createClass(QuestL8IcePeak, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL08Trapper");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "getAdventuresToComplete", value:

    function getAdventuresToComplete() {
      return 0;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Ice / Trapper";
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          this.talkTrapper();
        } };

    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }]);return QuestL8IcePeak;}();


var MountainStatus;(function (MountainStatus) {MountainStatus[MountainStatus["started"] = 0] = "started";MountainStatus[MountainStatus["TRAPPER_DEMANDS"] = 1] = "TRAPPER_DEMANDS";MountainStatus[MountainStatus["GET_OUTFIT"] = 2] = "GET_OUTFIT";MountainStatus[MountainStatus["UNLOCKED_PEAK"] = 3] = "UNLOCKED_PEAK";MountainStatus[MountainStatus["FIGHTING_YETI"] = 4] = "FIGHTING_YETI";MountainStatus[MountainStatus["DEFEATED_BOAR"] = 5] = "DEFEATED_BOAR";MountainStatus[MountainStatus["finished"] = 100] = "finished";})(MountainStatus || (MountainStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9MurderPeak.ts
function QuestL9MurderPeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9MurderPeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL9MurderPeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9MurderPeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9MurderPeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9MurderPeak_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var MurderHandler = /*#__PURE__*/function () {function MurderHandler() {QuestL9MurderPeak_classCallCheck(this, MurderHandler);QuestL9MurderPeak_defineProperty(this, "crude",
    external_kolmafia_namespaceObject.Item.get("Bubblin' Crude"));QuestL9MurderPeak_defineProperty(this, "jar",
    external_kolmafia_namespaceObject.Item.get("Jar of Oil"));QuestL9MurderPeak_defineProperty(this, "rusty",
    external_kolmafia_namespaceObject.Item.get("Rusty Hedge Trimmers"));QuestL9MurderPeak_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("Twin Peak"));}QuestL9MurderPeak_createClass(MurderHandler, [{ key: "getId", value:

    function getId() {
      return "Council / Peaks / TwinPeak";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if (getQuestStatus("questL09Topping") < 1) {
        return QuestStatus.NOT_READY;
      }

      if (this.isComplete()) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      if (this.needsStench() && (0,external_kolmafia_namespaceObject.elementalResistance)(external_kolmafia_namespaceObject.Element.get("stench")) >= 4) {
        return QuestStatus.READY;
      }

      if (this.needsFood() && (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Gravitational Compression"))) {
        return QuestStatus.READY;
      }

      if (this.needsJar()) {
        this.createJar();

        if (this.hasJar()) {
          return QuestStatus.READY;
        }
      }

      if (this.needsInit()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.rusty) == 0) {
        outfit.setNoCombat();
        outfit.setItemDrops();
      }

      if (this.needsInit() && !(0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Overclocking"))) {
        outfit.addItem(external_kolmafia_namespaceObject.Item.get("Backup Camera")).addBonus("+init");
      }

      if (this.needsFood()) {
        outfit.itemDropWeight = 4;
      }

      this.createJar();

      if (this.needsStench()) {
        outfit.addItem(external_kolmafia_namespaceObject.Item.get("Unwrapped knock-off retro superhero cape"));
        outfit.addBonus("+2 stench res");
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          //cliExecute("retrocape vampire hold");
          if ((0,external_kolmafia_namespaceObject.getProperty)("backupCameraMode") != "init") {
            (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera init");
          }

          props.setChoice(1056, 1);
          props.setChoice(604, 1);
          props.setChoice(607, 1);
          props.setChoice(608, 1);
          props.setChoice(609, 1);
          props.setChoice(610, 1);
          props.setChoice(616, 1);

          try {
            if (this.needsInit() && (0,external_kolmafia_namespaceObject.numericModifier)("initiative") >= 40) {
              props.setChoice(606, 4);
            } else if (this.needsFood() && (0,external_kolmafia_namespaceObject.itemDropModifier)() >= 50) {
              props.setChoice(606, 2);
            } else if (
            this.needsStench() &&
            (0,external_kolmafia_namespaceObject.elementalResistance)(external_kolmafia_namespaceObject.Element.get("stench")) >= 4)
            {
              props.setChoice(606, 1);
            } else if (this.needsJar() && this.hasJar()) {
              props.setChoice(606, 3);
            } else {
              throw "Eh??";
            }

            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.rusty) > 0) {
              greyAdv(
              "inv_use.php?pwd=&which=3&whichitem=" +
              (0,external_kolmafia_namespaceObject.toInt)(this.rusty) +
              "&ajax=1");

            } else {
              var settings = new AdventureSettings();

              settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("bearpig topiary animal"));
              settings.addNoBanish(
              external_kolmafia_namespaceObject.Monster.get("elephant (meatcar?) topiary animal"));

              settings.addNoBanish(external_kolmafia_namespaceObject.Monster.get("spider (duck?) topiary animal"));

              greyAdv(this.loc, outfit);
            }
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "isComplete", value:

    function isComplete() {
      return this.getMurderStatus() >= 15;
    } }, { key: "hasJar", value:

    function hasJar() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.jar) > 0;
    } }, { key: "createJar", value:

    function createJar() {
      if (this.hasJar() || !this.needsJar() || (0,external_kolmafia_namespaceObject.availableAmount)(this.crude) < 12) {
        return;
      }

      (0,external_kolmafia_namespaceObject.create)(this.jar);
    } }, { key: "getMurderStatus", value:

    function getMurderStatus() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("twinPeakProgress"));
    } }, { key: "needsStench", value:

    function needsStench() {
      return (this.getMurderStatus() & 1) == 0;
    } }, { key: "needsFood", value:

    function needsFood() {
      return (this.getMurderStatus() & 2) == 0;
    } }, { key: "needsJar", value:

    function needsJar() {
      return (this.getMurderStatus() & 4) == 0;
    } }, { key: "needsInit", value:

    function needsInit() {
      return this.getMurderStatus() == 7;
    } }]);return MurderHandler;}();
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestSmutOrcsCargoShorts.ts
function QuestSmutOrcsCargoShorts_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSmutOrcsCargoShorts_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSmutOrcsCargoShorts_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSmutOrcsCargoShorts_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSmutOrcsCargoShorts_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSmutOrcsCargoShorts_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestSmutOrcsCargoShorts_setPrototypeOf(subClass, superClass);}function QuestSmutOrcsCargoShorts_setPrototypeOf(o, p) {QuestSmutOrcsCargoShorts_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestSmutOrcsCargoShorts_setPrototypeOf(o, p);}function QuestSmutOrcsCargoShorts_createSuper(Derived) {var hasNativeReflectConstruct = QuestSmutOrcsCargoShorts_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestSmutOrcsCargoShorts_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestSmutOrcsCargoShorts_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestSmutOrcsCargoShorts_possibleConstructorReturn(this, result);};}function QuestSmutOrcsCargoShorts_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestSmutOrcsCargoShorts_assertThisInitialized(self);}function QuestSmutOrcsCargoShorts_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestSmutOrcsCargoShorts_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestSmutOrcsCargoShorts_getPrototypeOf(o) {QuestSmutOrcsCargoShorts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestSmutOrcsCargoShorts_getPrototypeOf(o);}function QuestSmutOrcsCargoShorts_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL9SmutOrcsCargoShorts = /*#__PURE__*/function (_TaskInfo) {QuestSmutOrcsCargoShorts_inherits(QuestL9SmutOrcsCargoShorts, _TaskInfo);var _super = QuestSmutOrcsCargoShorts_createSuper(QuestL9SmutOrcsCargoShorts);function QuestL9SmutOrcsCargoShorts() {var _this;QuestSmutOrcsCargoShorts_classCallCheck(this, QuestL9SmutOrcsCargoShorts);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestSmutOrcsCargoShorts_defineProperty(QuestSmutOrcsCargoShorts_assertThisInitialized(_this), "shorts",
    external_kolmafia_namespaceObject.Item.get("Cargo Cultist Shorts"));QuestSmutOrcsCargoShorts_defineProperty(QuestSmutOrcsCargoShorts_assertThisInitialized(_this), "pathShorts",
    new PossiblePath(-5).add(
    ResourceCategory.CARGO_SHORTS));QuestSmutOrcsCargoShorts_defineProperty(QuestSmutOrcsCargoShorts_assertThisInitialized(_this), "pathNoShorts",

    new PossiblePath(0));QuestSmutOrcsCargoShorts_defineProperty(QuestSmutOrcsCargoShorts_assertThisInitialized(_this), "paths", void 0);return _this;}QuestSmutOrcsCargoShorts_createClass(QuestL9SmutOrcsCargoShorts, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.shorts) == 0) {
        this.paths = [this.pathNoShorts];
        return;
      }

      this.paths = [this.pathNoShorts, this.pathShorts];
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.pathShorts, this.pathNoShorts];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / CargoShortsSmut";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status(path) {
      if (path != null && !path.canUse(ResourceCategory.CARGO_SHORTS)) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL09Topping");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || (0,external_kolmafia_namespaceObject.myAdventures)() < 40) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) < 6) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        familiar: external_kolmafia_namespaceObject.Familiar.get("Grey Goose"),
        disableFamOverride: true,
        run: () => {
          path.getResource(ResourceCategory.CARGO_SHORTS).pocket(666);

          var macro = Macro.skill(
          external_kolmafia_namespaceObject.Skill.get("Emit Matter Duplicating Drones")).
          step(greyKillingBlow(new GreyOutfit()));
          (0,external_kolmafia_namespaceObject.print)("Macro: " + macro.toString());

          macro.submit();
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if ((0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) >= 6) {
        return true;
      }

      return false;
    } }]);return QuestL9SmutOrcsCargoShorts;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9SmutOrcs.ts
function QuestL9SmutOrcs_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL9SmutOrcs_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestL9SmutOrcs_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL9SmutOrcs_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL9SmutOrcs_arrayLikeToArray(o, minLen);}function QuestL9SmutOrcs_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestL9SmutOrcs_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9SmutOrcs_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL9SmutOrcs_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9SmutOrcs_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9SmutOrcs_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9SmutOrcs_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var SmutOrcs = /*#__PURE__*/function () {function SmutOrcs() {QuestL9SmutOrcs_classCallCheck(this, SmutOrcs);QuestL9SmutOrcs_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("The Smut Orc Logging Camp"));QuestL9SmutOrcs_defineProperty(this, "shorts",
    new QuestL9SmutOrcsCargoShorts());QuestL9SmutOrcs_defineProperty(this, "hoaReg",
    external_kolmafia_namespaceObject.Item.get("HOA regulation book"));QuestL9SmutOrcs_defineProperty(this, "spaceTrip",
    external_kolmafia_namespaceObject.Item.get("Space Trip safety headphones"));QuestL9SmutOrcs_defineProperty(this, "canOfPaint",
    external_kolmafia_namespaceObject.Item.get("Can of black paint"));QuestL9SmutOrcs_defineProperty(this, "paintRes",
    (0,external_kolmafia_namespaceObject.effectModifier)(this.canOfPaint, "Effect"));QuestL9SmutOrcs_defineProperty(this, "asdonMartin",
    external_kolmafia_namespaceObject.Item.get("Asdon Martin keyfob"));QuestL9SmutOrcs_defineProperty(this, "driveSafe",
    external_kolmafia_namespaceObject.Effect.get("Driving Safely"));QuestL9SmutOrcs_defineProperty(this, "lastColdCheck",
    0);QuestL9SmutOrcs_defineProperty(this, "hasEnoughCold",
    false);QuestL9SmutOrcs_defineProperty(this, "lastColdMaximize", void 0);QuestL9SmutOrcs_defineProperty(this, "damagingEquips",

    [
    "Muscle band",
    "Ant Hoe",
    "Ant Pick",
    "Ant Pitchfork",
    "Ant Rake",
    "Ant Sickle",
    "Tiny bowler"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestL9SmutOrcs_defineProperty(this, "plastered",
    external_kolmafia_namespaceObject.Monster.get("plastered frat orc"));}QuestL9SmutOrcs_createClass(SmutOrcs, [{ key: "level", value:

    function level() {
      return 7;
    } }, { key: "getChildren", value:

    function getChildren() {
      return [this.shorts];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return isGhostBustingTime(this.loc);
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL09Topping");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (isGhostBustingTime(this.loc) && !this.isNCTime()) {
        return QuestStatus.NOT_READY;
      }

      if (
      status < 0 ||
      !(0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Grey Noise")) ||
      (0,external_kolmafia_namespaceObject.myMp)() < 15 ||
      !AbsorbsProvider.getAbsorbedMonsters().includes(this.plastered))
      {
        return QuestStatus.NOT_READY;
      }

      if (!this.isNCTime()) {
        if (this.lastColdCheck < (0,external_kolmafia_namespaceObject.turnsPlayed)() - 5) {
          this.lastColdCheck = (0,external_kolmafia_namespaceObject.turnsPlayed)();

          (0,external_kolmafia_namespaceObject.maximize)("cold dmg 10 min -ML 70 min -tie", true);
          var melee = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Cold Damage");

          (0,external_kolmafia_namespaceObject.maximize)("cold spell dmg 10 min -ML 70 min -tie", true);
          var spell = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Cold Spell Damage");

          this.hasEnoughCold = Math.max(melee, spell) >= 5;
          this.lastColdMaximize = spell > melee ? "cold spell dmg" : "cold dmg";
        }

        if (!this.hasEnoughCold) {
          return QuestStatus.NOT_READY;
        }
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Shen") != "finished") {
        return QuestStatus.FASTER_LATER;
      }

      if (this.isNCTime() && (0,external_kolmafia_namespaceObject.myMeat)() <= 1000) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / Orcs";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getFastenersHave", value:

    function getFastenersHave() {
      return ["Thick Caulk", "Long Hard Screw", "Messy Butt Joint"].reduce(
      (s, v) => s + (0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get(v)),
      0);

    } }, { key: "getLumberHave", value:

    function getLumberHave() {
      return [
      "Morningwood Plank",
      "Raging Hardwood Plank",
      "Weirdwood Plank"].
      reduce((s, v) => s + (0,external_kolmafia_namespaceObject.itemAmount)(external_kolmafia_namespaceObject.Item.get(v)), 0);
    } }, { key: "getChasmBuilt", value:

    function getChasmBuilt() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("chasmBridgeProgress"));
    } }, { key: "getChasmRemaining", value:

    function getChasmRemaining() {
      var remaining = 30 - this.getChasmBuilt();

      return remaining - Math.min(this.getFastenersHave(), this.getLumberHave());
    } }, { key: "run", value:

    function run() {
      if (this.isNCTime()) {
        return this.tryNC();
      }

      return this.tryCombat();
    } }, { key: "tryCombat", value:

    function tryCombat() {
      // max -ml, max cold dmg, raise item drop finally
      var outfit = new GreyOutfit();
      outfit.minusMonsterLevelWeight = 5;
      outfit.setItemDrops();

      if (
      this.getLumberHave() <= this.getFastenersHave() &&
      this.getChasmRemaining() > this.getLumberHave())
      {
        var quest = this.tryHatchet();

        if (quest != null) {
          return quest;
        }

        if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Logging Hatchet")) > 0) {
          outfit.addItem(external_kolmafia_namespaceObject.Item.get("Logging Hatchet"));
        }
      }

      if (
      this.getLumberHave() >= this.getFastenersHave() &&
      this.getChasmRemaining() > this.getFastenersHave())
      {
        if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Loadstone")) > 0) {
          outfit.addItem(external_kolmafia_namespaceObject.Item.get("Loadstone"));
        }
      }

      outfit.addBonus("+100 " + this.lastColdMaximize + " 5 min 5 max");

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          var attack;

          var meleeDmg = (0,external_kolmafia_namespaceObject.numericModifier)("Cold Damage");
          var spellDmg = (0,external_kolmafia_namespaceObject.numericModifier)("Cold Spell Damage");

          if (meleeDmg <= 0 && spellDmg <= 0) {
            throw "Not enough cold damage to do smut orcs!";
          }

          if (meleeDmg > spellDmg) {
            attack = Macro.attack();
          } else {
            attack = Macro.skill("Grey Noise");
          }var _iterator = QuestL9SmutOrcs_createForOfIteratorHelper(

          this.damagingEquips),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
              if ((0,external_kolmafia_namespaceObject.equippedAmount)(i) > 0) {
                (0,external_kolmafia_namespaceObject.equip)(external_kolmafia_namespaceObject.Slot.get("familiar"), external_kolmafia_namespaceObject.Item.get("None"));
              }
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

          greyAdv(
          this.loc,
          outfit,
          new AdventureSettings().setFinishingBlowMacro(attack.repeat()));

          this.tryBuild();
        } };

    } }, { key: "tryNC", value:

    function tryNC() {
      return {
        location: null,
        run: () => {
          var props = new PropertyManager();
          var outfits = this.getBestBlechOutfit();

          if (outfits[0][2] < 14) {
            var mox = outfits.find((o) => o[0] == 3);
            var extraRes =
            ((0,external_kolmafia_namespaceObject.haveEffect)(this.paintRes) == 0 ? 1 : 0) + (
            (0,external_kolmafia_namespaceObject.getWorkshed)() == this.asdonMartin &&
            (0,external_kolmafia_namespaceObject.haveEffect)(this.driveSafe) == 0 &&
            (0,external_kolmafia_namespaceObject.getFuel)() >= 37 ?
            1 :
            0);

            if (
            extraRes > 0 && (
            mox == outfits[0] || mox[2] + extraRes > outfits[0][2]))
            {
              if ((0,external_kolmafia_namespaceObject.myMeat)() >= 1000 && (0,external_kolmafia_namespaceObject.haveEffect)(this.paintRes) == 0) {
                (0,external_kolmafia_namespaceObject.cliExecute)("retrieve " + this.canOfPaint);
                (0,external_kolmafia_namespaceObject.use)(this.canOfPaint);
              }

              if (
              (0,external_kolmafia_namespaceObject.getWorkshed)() == this.asdonMartin &&
              (0,external_kolmafia_namespaceObject.haveEffect)(this.driveSafe) == 0 &&
              (0,external_kolmafia_namespaceObject.getFuel)() >= 37)
              {
                (0,external_kolmafia_namespaceObject.cliExecute)("asdonmartin drive safely");
              }

              outfits = this.getBestBlechOutfit();
            }
          }

          var best = outfits[0];

          (0,external_kolmafia_namespaceObject.maximize)(best[1], false);

          try {
            props.setChoice(1345, best[0]);
            greyAdv(this.loc);
            this.tryBuild();
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "tryExtraRes", value:

    function tryExtraRes() {} }, { key: "isNCTime", value:

    function isNCTime() {
      var progress = (0,external_kolmafia_namespaceObject.getProperty)("smutOrcNoncombatProgress");

      if (progress == "") {
        return false;
      }

      return (0,external_kolmafia_namespaceObject.toInt)(progress) >= 15;
    } }, { key: "tryBuild", value:

    function tryBuild() {
      var box = external_kolmafia_namespaceObject.Item.get("Smut Orc Keepsake Box");

      if ((0,external_kolmafia_namespaceObject.itemAmount)(box) > 0) {
        (0,external_kolmafia_namespaceObject.use)(box, (0,external_kolmafia_namespaceObject.itemAmount)(box));
      }

      (0,external_kolmafia_namespaceObject.visitUrl)(
      "place.php?whichplace=orc_chasm&action=bridge" +
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("chasmBridgeProgress")));

    } }, { key: "tryHatchet", value:

    function tryHatchet() {
      if (!(0,external_kolmafia_namespaceObject.canadiaAvailable)()) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Logging Hatchet")) > 0) {
        return;
      }

      var loc = external_kolmafia_namespaceObject.Location.get("Camp Logging Camp");

      if (
      loc.turnsSpent > 0 ||
      loc.combatQueue != "" ||
      loc.noncombatQueue != "")
      {
        return;
      }

      return {
        location: null,
        run: () => {
          greyAdv(loc);
        } };

    }

    // getChildren(): QuestInfo[] {
    //   return [this.shorts];
    // }
  }, { key: "simMax", value:
    function simMax(ma) {
      var sim = (0,external_kolmafia_namespaceObject.maximize)(ma, 0, 0, true, true);
      var score = 0;var _iterator2 = QuestL9SmutOrcs_createForOfIteratorHelper(

      sim),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var e = _step2.value;
          score += e.score;
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return score;
    } }, { key: "getBestBlechOutfit", value:

    function getBestBlechOutfit() {
      // Stolen from autoscend
      // floor(sqrt((mus+flat_weapon_damage)/15*(1+percent_weapon_damage/100)))
      var musMaximizer =
      "100muscle,100weapon damage,1000weapon damage percent +switch left-hand man";
      var mysMaximizer =
      "100mysticality,100spell damage,1000 spell damage percent +switch left-hand man";
      var moxMaximizer = "100moxie,1000sleaze resistance +switch left-hand man";

      this.simMax(musMaximizer);
      var musmus = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Buffed Muscle");
      var musflat = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Weapon Damage");
      var musperc = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Weapon Damage Percent");
      var muscleScore = Math.floor(
      Math.sqrt((musmus + musflat) / 15 * (1 + musperc / 100)));


      this.simMax(mysMaximizer);
      var mysmys = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Buffed Mysticality");
      var mysflat = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Spell Damage");
      var mysperc = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Spell Damage Percent");
      var mystScore = Math.floor(
      Math.sqrt((mysmys + mysflat) / 15 * (1 + mysperc / 100)));


      this.simMax(moxMaximizer);
      var moxmox = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Buffed Moxie");
      var moxres = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Sleaze Resistance");
      var moxScore = Math.floor(Math.sqrt(moxmox / 30 * (1 + moxres * 0.69)));

      (0,external_kolmafia_namespaceObject.print)("Mus Score: " + muscleScore, "blue");
      (0,external_kolmafia_namespaceObject.print)("Myst Score: " + mystScore, "blue");
      (0,external_kolmafia_namespaceObject.print)("Moxie Score: " + moxScore, "blue");

      var mus = [1, musMaximizer, muscleScore];
      var mys = [2, mysMaximizer, mystScore];
      var mox = [3, moxMaximizer, moxScore];

      return [mus, mys, mox].sort((m1, m2) => m2[2] - m1[2]);
    } }]);return SmutOrcs;}();
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9AbooPeak.ts
function QuestL9AbooPeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9AbooPeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL9AbooPeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9AbooPeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9AbooPeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9AbooPeak_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var ABooHandler = /*#__PURE__*/function () {function ABooHandler() {QuestL9AbooPeak_classCallCheck(this, ABooHandler);QuestL9AbooPeak_defineProperty(this, "clue",
    external_kolmafia_namespaceObject.Item.get("A-Boo Clue"));QuestL9AbooPeak_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("A-Boo Peak"));QuestL9AbooPeak_defineProperty(this, "damageLevels",
    [13, 25, 50, 125, 250]);QuestL9AbooPeak_defineProperty(this, "canOfPaint",
    external_kolmafia_namespaceObject.Item.get("Can of black paint"));QuestL9AbooPeak_defineProperty(this, "asdonMartin",
    external_kolmafia_namespaceObject.Item.get("Asdon Martin keyfob"));QuestL9AbooPeak_defineProperty(this, "driveSafe",
    external_kolmafia_namespaceObject.Effect.get("Driving Safely"));}QuestL9AbooPeak_createClass(ABooHandler, [{ key: "level", value:

    function level() {
      return 9;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / AbooPeak";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.clue) > 0) {
        return this.runClue();
      }

      return this.runCombat();
    } }, { key: "runClue", value:

    function runClue() {
      var outfit = this.createOutfit();

      return {
        location: null,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          if ((0,external_kolmafia_namespaceObject.haveEffect)((0,external_kolmafia_namespaceObject.effectModifier)(this.canOfPaint, "Effect")) == 0) {
            (0,external_kolmafia_namespaceObject.cliExecute)("acquire 1 " + this.canOfPaint.name);
            (0,external_kolmafia_namespaceObject.use)(this.canOfPaint);
          }

          if (
          (0,external_kolmafia_namespaceObject.getWorkshed)() == this.asdonMartin &&
          (0,external_kolmafia_namespaceObject.haveEffect)(this.driveSafe) == 0 &&
          (0,external_kolmafia_namespaceObject.getFuel)() >= 37)
          {
            (0,external_kolmafia_namespaceObject.cliExecute)("asdonmartin drive safely");
          }

          try {
            props.setChoice(611, 1);
            (0,external_kolmafia_namespaceObject.use)(this.clue);

            var settings = new AdventureSettings();
            var turn = 0;

            settings.setChoices({
              calledOutOfScopeChoiceBehavior: (choice) => {
                return false;
              },

              handleChoice: (choice) => {
                var dmgTaken = this.damageTaken(turn++);

                if (dmgTaken >= (0,external_kolmafia_namespaceObject.myHp)() || this.getProgress() <= 0) {
                  return 2;
                }

                (0,external_kolmafia_namespaceObject.print)("Prediction a-boo damage of " + dmgTaken);

                return 1;
              } });


            greyAdv(this.loc, null, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "damageTaken", value:

    function damageTaken(turn) {
      var dmg = this.damageLevels[turn];

      var sDmg = this.damageTakenByElement(dmg, external_kolmafia_namespaceObject.Element.get("spooky"));
      var cDmg = this.damageTakenByElement(dmg, external_kolmafia_namespaceObject.Element.get("cold"));

      return sDmg + cDmg;
    } }, { key: "turnsSurvived", value:

    function turnsSurvived() {
      var totalDamage = 2;
      var reducedBy = 0;

      for (var i = 0; i < this.damageLevels.length; i++) {
        if (this.getProgress() <= reducedBy) {
          return i;
        }

        totalDamage += this.damageTaken(i);

        if (totalDamage >= (0,external_kolmafia_namespaceObject.myHp)()) {
          return i;
        }

        reducedBy += (i + 1) * 2;
      }

      return 5;
    } }, { key: "wouldSurviveClue", value:

    function wouldSurviveClue() {
      var damageLevels = [13, 25, 50, 125, 250];
      var totalDamage = 2;
      var reducedBy = 0;

      for (var i = 0; i < damageLevels.length; i++) {
        if (this.getProgress() <= reducedBy) {
          return true;
        }

        var dmg = damageLevels[i];

        var sDmg = this.damageTakenByElement(dmg, external_kolmafia_namespaceObject.Element.get("spooky"));
        var cDmg = this.damageTakenByElement(dmg, external_kolmafia_namespaceObject.Element.get("cold"));

        totalDamage += cDmg + sDmg;

        if (totalDamage >= (0,external_kolmafia_namespaceObject.myHp)()) {
          return false;
        }

        reducedBy += (i + 1) * 2;
      }

      return true;
    } }, { key: "damageTakenByElement", value:

    function damageTakenByElement(base_damage, element) {
      if (base_damage < 0) {
        return 1;
      }

      var resist = (0,external_kolmafia_namespaceObject.elementalResistance)(element) / 100.0;

      var effective_base_damage = Math.max(30, base_damage);

      var damage = Math.max(
      1,
      Math.ceil(base_damage - effective_base_damage * resist));


      return damage;
    } }, { key: "createOutfit", value:

    function createOutfit() {
      var outfit = new GreyOutfit().addBonus(
      "+40 cold res +40 spooky res -10 ML");

      outfit.hpWeight = 2;

      return outfit;
    } }, { key: "runCombat", value:

    function runCombat() {
      var outfit = this.createOutfit();

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          greyAdv(this.loc, outfit);
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return this.canUseClue();
    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL09Topping") < 1 ||
      getQuestStatus("questL11Black") < 2)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("booPeakLit") == "true") {
        return QuestStatus.COMPLETED;
      }

      if (this.getProgress() <= 0) {
        return QuestStatus.READY;
      }

      if (this.canUseClue()) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.myLevel)() >= 20) {
        return QuestStatus.READY;
      }

      // We always want to do this as late as we can
      return QuestStatus.FASTER_LATER;
    } }, { key: "canUseClue", value:

    function canUseClue() {
      return this.getProgress() > 0 && (0,external_kolmafia_namespaceObject.availableAmount)(this.clue) > 0;
    } }, { key: "getProgress", value:

    function getProgress() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("booPeakProgress"));
    } }]);return ABooHandler;}();
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9OilPeak.ts
function QuestL9OilPeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9OilPeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL9OilPeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9OilPeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9OilPeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9OilPeak_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var OilHandler = /*#__PURE__*/function () {function OilHandler() {QuestL9OilPeak_classCallCheck(this, OilHandler);QuestL9OilPeak_defineProperty(this, "loc",
    external_kolmafia_namespaceObject.Location.get("Oil Peak"));QuestL9OilPeak_defineProperty(this, "crude",
    external_kolmafia_namespaceObject.Item.get("Bubblin' Crude"));QuestL9OilPeak_defineProperty(this, "umbrella",
    external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));}QuestL9OilPeak_createClass(OilHandler, [{ key: "getId", value:

    function getId() {
      return "Council / Peaks / OilPeak";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "needsJar", value:

    function needsJar() {
      return (
        ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("twinPeakProgress")) & 4) == 0 &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.crude) < 12 &&
        (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Jar of Oil")) == 0);

    } }, { key: "level", value:

    function level() {
      return 9;
    } }, { key: "status", value:

    function status() {
      if (
      !this.needsJar() &&
      this.getStatus() <= 0 &&
      (0,external_kolmafia_namespaceObject.getProperty)("oilPeakLit") == "true")
      {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL09Topping") < 1) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myHp)() < 140) {
        return QuestStatus.NOT_READY;
      }

      if (this.needsAbsorb()) {
        if ((0,external_kolmafia_namespaceObject.familiarWeight)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose")) < 6) {
          var effects = Object.keys((0,external_kolmafia_namespaceObject.myEffects)()).
          map((e) => external_kolmafia_namespaceObject.Effect.get(e)).
          reduce((p, e) => (0,external_kolmafia_namespaceObject.numericModifier)(e, "Monster Level") + p, 0);

          if (effects != 0) {
            return QuestStatus.NOT_READY;
          }
        }
      }

      return QuestStatus.READY;
    } }, { key: "needsAbsorb", value:

    function needsAbsorb() {
      return !AbsorbsProvider.getReabsorbedMonsters().includes(
      external_kolmafia_namespaceObject.Monster.get("Oil Baron"));

    } }, { key: "isReady", value:

    function isReady() {
      return this.needsJar() || this.getStatus() > 0;
    } }, { key: "getStatus", value:

    function getStatus() {
      return (0,external_kolmafia_namespaceObject.toFloat)((0,external_kolmafia_namespaceObject.getProperty)("oilPeakProgress"));
    } }, { key: "doAbsorb", value:

    function doAbsorb() {
      return {
        location: this.loc,
        run: () => {
          this.doMonsterLevel();
          greyAdv(this.loc);
        } };

    } }, { key: "doMonsterLevel", value:

    function doMonsterLevel() {
      var level = (0,external_kolmafia_namespaceObject.numericModifier)("Monster Level");

      if (level >= 100) {
        throw "Need to lower your monster level, TODO!";
      }

      if (level <= 50) {
        if ((0,external_kolmafia_namespaceObject.getProperty)("backupCameraMode") != "ml") {
          (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera ml");
        }

        var item = external_kolmafia_namespaceObject.Item.get("Backup Camera");

        if ((0,external_kolmafia_namespaceObject.equippedAmount)(item) == 0) {
          (0,external_kolmafia_namespaceObject.equip)(item, external_kolmafia_namespaceObject.Slot.get("acc3"));
        }

        if ((0,external_kolmafia_namespaceObject.numericModifier)("Monster Level") < 50) {
          throw "Need to raise your monster level, TODO!";
        }
      }
    } }, { key: "run", value:

    function run() {
      if (this.needsAbsorb()) {
        return this.doAbsorb();
      }

      var outfit = new GreyOutfit().setItemDrops();
      outfit.plusMonsterLevelWeight = 2;
      //    outfit.addItem(Item.get("Unbreakable Umbrella"));
      outfit.addBonus("-offhand");

      return {
        location: this.loc,
        outfit: outfit,
        run: () => {
          (0,external_kolmafia_namespaceObject.changeMcd)(10);

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.umbrella) > 0) {
            setUmbrella(UmbrellaState.MONSTER_LEVEL);
            (0,external_kolmafia_namespaceObject.equip)(external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella"));
          }

          greyAdv(this.loc, outfit);
          (0,external_kolmafia_namespaceObject.changeMcd)(0);
        } };

    } }]);return OilHandler;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL9OrcsAndPeaks.ts
function QuestL9OrcsAndPeaks_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9OrcsAndPeaks_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL9OrcsAndPeaks_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9OrcsAndPeaks_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9OrcsAndPeaks_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9OrcsAndPeaks_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestL9Smut = /*#__PURE__*/function () {function QuestL9Smut() {QuestL9OrcsAndPeaks_classCallCheck(this, QuestL9Smut);QuestL9OrcsAndPeaks_defineProperty(this, "peaks",
    [
    new SmutOrcs(),
    new ABooHandler(),
    new MurderHandler(),
    new OilHandler()]);}QuestL9OrcsAndPeaks_createClass(QuestL9Smut, [{ key: "level", value:


    function level() {
      return 9;
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.peaks;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      var status = this.getStatus();

      if (status == PeakStatus.finished) {
        return QuestStatus.COMPLETED;
      }

      if (
      status == PeakStatus.step1 ||
      status == PeakStatus.step3 ||
      (0,external_kolmafia_namespaceObject.getProperty)("booPeakLit") == "true" &&
      (0,external_kolmafia_namespaceObject.getProperty)("oilPeakLit") == "true" &&
      (0,external_kolmafia_namespaceObject.getProperty)("twinPeakProgress") == "15")
      {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "getStatus", value:

    function getStatus() {
      return PeakStatus[(0,external_kolmafia_namespaceObject.getProperty)("questL09Topping")];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / Lord";
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          this.visitMiLord();
          (0,external_kolmafia_namespaceObject.council)();
        } };

    } }, { key: "visitMiLord", value:

    function visitMiLord() {
      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=highlands&action=highlands_dude");
    } }]);return QuestL9Smut;}();var


PeakStatus;(function (PeakStatus) {PeakStatus["unstarted"] = "unstarted";PeakStatus["started"] = "CHASM";PeakStatus["step1"] = "INTRODUCE_PEAKS";PeakStatus["step2"] = "BURN_MY_PEAKS";PeakStatus["step3"] = "BURNED_PEAKS_DOWN";PeakStatus["finished"] = "finished";})(PeakStatus || (PeakStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/QuestCouncil.ts
function QuestCouncil_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestCouncil_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestCouncil_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestCouncil_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestCouncil_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestCouncil_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

















var QuestCouncil = /*#__PURE__*/function () {


  function QuestCouncil() {QuestCouncil_classCallCheck(this, QuestCouncil);QuestCouncil_defineProperty(this, "quests", []);
    this.quests.push(new QuestL1Toot());
    this.quests.push(new QuestL2SpookyLarva());
    this.quests.push(new QuestL3Tavern());
    this.quests.push(new QuestL4Bats());
    this.quests.push(new QuestL5Goblin());
    this.quests.push(new QuestL6Friar());
    this.quests.push(new QuestL7Crypt());
    this.quests.push(new QuestL7CryptPull());
    this.quests.push(new QuestL8IcePeak());
    this.quests.push(new QuestL9Smut());
    this.quests.push(new QuestL10Beanstalk());
    this.quests.push(new QuestL11MacGruffin());
    this.quests.push(new QuestL12War());
    this.quests.push(new QuestL13());
  }QuestCouncil_createClass(QuestCouncil, [{ key: "getId", value:

    function getId() {
      return "Quests / Council";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw "Not implemented";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.quests;
    } }]);return QuestCouncil;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorBathroom.ts
function QuestManorBathroom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorBathroom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManorBathroom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorBathroom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorBathroom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorBathroom_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var ManorBathroom = /*#__PURE__*/function () {function ManorBathroom() {QuestManorBathroom_classCallCheck(this, ManorBathroom);QuestManorBathroom_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Haunted Bathroom"));QuestManorBathroom_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("Lady Spookyraven's powder puff"));QuestManorBathroom_defineProperty(this, "toAbsorb", void 0);}QuestManorBathroom_createClass(ManorBathroom, [{ key: "level", value:


    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questM21Dance");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1 || (0,external_kolmafia_namespaceObject.availableAmount)(this.item) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      if (this.hasDelay()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasDelay", value:

    function hasDelay() {
      return this.location.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (!this.hasDelay()) {
        outfit.setNoCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(882, 1);
          props.setChoice(881, 1);

          if (this.toAbsorb.length == 0) {
            DelayBurners.tryReplaceCombats();
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
          }

          try {
            greyAdv(this.location, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Manor / Bathroom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return ManorBathroom;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorBedroom.ts
function QuestManorBedroom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorBedroom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManorBedroom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorBedroom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorBedroom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorBedroom_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}












var ManorBedroom = /*#__PURE__*/function () {function ManorBedroom() {QuestManorBedroom_classCallCheck(this, ManorBedroom);QuestManorBedroom_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Haunted Bedroom"));QuestManorBedroom_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("Lady Spookyraven's finest gown"));QuestManorBedroom_defineProperty(this, "spectacles",
    external_kolmafia_namespaceObject.Item.get("Lord Spookyraven's spectacles"));QuestManorBedroom_defineProperty(this, "disposableCamera",
    external_kolmafia_namespaceObject.Item.get("disposable instant camera"));QuestManorBedroom_defineProperty(this, "dontLike",
    [
    "Animated Mahogany Nightstand",
    "Animated Rustic Nightstand",
    "Wardrob nightstand"].
    map((m) => external_kolmafia_namespaceObject.Monster.get(m)));QuestManorBedroom_defineProperty(this, "toAbsorb", void 0);}QuestManorBedroom_createClass(ManorBedroom, [{ key: "needCamera", value:


    function needCamera() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.disposableCamera) == 0 &&
        (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("photograph of a dog")) == 0 &&
        getQuestStatus("questL11Palindome") <= 1);

    } }, { key: "needGlasses", value:

    function needGlasses() {
      return (0,external_kolmafia_namespaceObject.availableAmount)(this.spectacles) == 0;
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "needDress", value:

    function needDress() {
      return (
        getQuestStatus("questM21Dance") <= 2 && (0,external_kolmafia_namespaceObject.availableAmount)(this.item) == 0);

    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questM21Dance");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.spectacles) > 0 && !this.needCamera()) {
        if (status > 1 || (0,external_kolmafia_namespaceObject.availableAmount)(this.item) > 0) {
          return QuestStatus.COMPLETED;
        }
      }

      if (this.hasDelay()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasDelay", value:

    function hasDelay() {
      return (
        this.toAbsorb.length == 0 &&
        this.location.turnsSpent < 5 &&
        !this.needCamera() &&
        !this.needGlasses() &&
        this.needDress());

    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          try {
            props.setChoice(876, 1);
            props.setChoice(877, 1);
            props.setChoice(879, 4); // Grab engorged sausages if we can
            props.setChoice(879, 2); // Otherwise just grab an item which is 50/50 but better than others
            props.setChoice(876, 1);

            if (this.needDress()) {
              props.setChoice(880, 1);
            } else {
              props.setChoice(880, 2);
            }

            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.spectacles) == 0) {
              props.setChoice(878, 3);
            } else if (this.needCamera()) {
              props.setChoice(878, 4);
            } else {
              props.setChoice(878, 1);
            }

            var settings = new AdventureSettings();

            this.dontLike.forEach((m) => settings.addBanish(m));

            if (this.hasDelay()) {
              var delay = DelayBurners.getReadyDelayBurner();

              if (delay != null) {
                delay.doFightSetup();
              }
            }

            try {
              greyAdv(this.location, outfit, settings);
            } catch (_unused) {}

            (0,external_kolmafia_namespaceObject.visitUrl)("choice.php");

            if ((0,external_kolmafia_namespaceObject.handlingChoice)()) {
              greyAdv(this.location, outfit, settings);
            }
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Manor / Bedroom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return ManorBedroom;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorBillards.ts
function QuestManorBillards_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorBillards_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManorBillards_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorBillards_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorBillards_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorBillards_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestManorBillards = /*#__PURE__*/function () {function QuestManorBillards() {QuestManorBillards_classCallCheck(this, QuestManorBillards);QuestManorBillards_defineProperty(this, "billards",
    external_kolmafia_namespaceObject.Location.get("The Haunted Billiards Room"));QuestManorBillards_defineProperty(this, "chalk",
    external_kolmafia_namespaceObject.Item.get("Handful of hand chalk"));QuestManorBillards_defineProperty(this, "chalkEffect",
    external_kolmafia_namespaceObject.Effect.get("Chalky Hand"));QuestManorBillards_defineProperty(this, "invis",
    external_kolmafia_namespaceObject.Effect.get("Invisible Avatar"));QuestManorBillards_defineProperty(this, "invisSkill",
    external_kolmafia_namespaceObject.Skill.get("CHEAT CODE: Invisible Avatar"));QuestManorBillards_defineProperty(this, "key",
    external_kolmafia_namespaceObject.Item.get("[7302]Spookyraven library key"));QuestManorBillards_defineProperty(this, "cue",
    external_kolmafia_namespaceObject.Item.get("pool cue"));QuestManorBillards_defineProperty(this, "poolgeist",
    external_kolmafia_namespaceObject.Monster.get("pooltergeist"));QuestManorBillards_defineProperty(this, "toAbsorb", void 0);}QuestManorBillards_createClass(QuestManorBillards, [{ key: "getId", value:


    function getId() {
      return "Manor / Billards";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questM20Necklace");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 2 || (0,external_kolmafia_namespaceObject.availableAmount)(this.key) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.cue) == 0 ||
      (0,external_kolmafia_namespaceObject.haveEffect)(this.chalkEffect) > 0 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.chalk) > 0 ||
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("poolSkill")) < 2)
      {
        outfit.setNoCombat();
      }

      outfit.addItem(this.cue);
      outfit.addBonus("+10 elemental dmg 1 min 1 max");

      return {
        outfit: outfit,
        location: this.billards,
        run: () => {
          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.cue) > 0 &&
          (0,external_kolmafia_namespaceObject.haveEffect)(this.chalkEffect) == 0 &&
          (0,external_kolmafia_namespaceObject.availableAmount)(this.chalk) > 0)
          {
            (0,external_kolmafia_namespaceObject.use)(this.chalk);
          }

          var settings = new AdventureSettings();

          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.chalk) == 0 &&
          (0,external_kolmafia_namespaceObject.haveEffect)(this.chalkEffect) <= 1 &&
          !this.toAbsorb.includes(this.poolgeist))
          {
            settings.addBanish(this.poolgeist);
          }

          var props = new PropertyManager();
          var poolSkill =
          (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("poolSkill")) + (0,external_kolmafia_namespaceObject.numericModifier)("pool skill") + 10;

          try {
            props.setChoice(
            875,
            poolSkill >= 14 || (0,external_kolmafia_namespaceObject.haveEffect)(this.chalkEffect) == 0 ? 1 : 2);
            //Fight or train
            greyAdv(this.billards, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.billards];
    } }]);return QuestManorBillards;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorGallery.ts
function QuestManorGallery_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorGallery_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManorGallery_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorGallery_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorGallery_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorGallery_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}










var ManorGallery = /*#__PURE__*/function () {function ManorGallery() {QuestManorGallery_classCallCheck(this, ManorGallery);QuestManorGallery_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Haunted Gallery"));QuestManorGallery_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("Lady Spookyraven's dancing shoes"));QuestManorGallery_defineProperty(this, "sword",
    external_kolmafia_namespaceObject.Item.get("serpentine sword"));QuestManorGallery_defineProperty(this, "toAbsorb", void 0);}QuestManorGallery_createClass(ManorGallery, [{ key: "level", value:


    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questM21Dance");

      if (
      status < 1 ||
      isGhostBustingTime(this.location) && shouldAvoidGhosts())
      {
        return QuestStatus.NOT_READY;
      }

      if (status > 1 || (0,external_kolmafia_namespaceObject.availableAmount)(this.item) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      if (this.hasDelay()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasDelay", value:

    function hasDelay() {
      return this.location.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "run", value:

    function run() {
      var outfit = isGhostBustingTime(this.location) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      outfit.setNoCombat();

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          var settings = new AdventureSettings();

          if (isGhostBustingTime(this.location)) {
            settings.setStartOfFightMacro(getGhostBustingMacro());
          } else if (this.hasDelay()) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            }
          } else if (this.toAbsorb.length == 0) {
            DelayBurners.tryReplaceCombats();
          }

          /* if (availableAmount(this.sword) == 0) {
            props.setChoice(89, 2);
          } else*/{
            props.setChoice(89, 4);
          }

          props.setChoice(914, 1);

          if ((0,external_kolmafia_namespaceObject.getProperty)("louvreDesiredGoal") != "7") {
            props.setProperty("louvreDesiredGoal", "7");
          }

          try {
            greyAdv(this.location, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Manor / Gallery";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return isGhostBustingTime(this.location);
    } }]);return ManorGallery;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorKitchen.ts
function QuestManorKitchen_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorKitchen_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManorKitchen_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorKitchen_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorKitchen_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorKitchen_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestManorKitchen = /*#__PURE__*/function () {function QuestManorKitchen() {QuestManorKitchen_classCallCheck(this, QuestManorKitchen);QuestManorKitchen_defineProperty(this, "kitchen",
    external_kolmafia_namespaceObject.Location.get("The Haunted Kitchen"));QuestManorKitchen_defineProperty(this, "stenchResist",
    external_kolmafia_namespaceObject.Skill.get("Conifer Polymers"));QuestManorKitchen_defineProperty(this, "albinoBat",
    external_kolmafia_namespaceObject.Monster.get("Albino Bat"));QuestManorKitchen_defineProperty(this, "enoughRes",
    false);QuestManorKitchen_defineProperty(this, "lastResistTurnCheck",
    0);QuestManorKitchen_defineProperty(this, "canOfPaint",
    external_kolmafia_namespaceObject.Item.get("Can of black paint"));QuestManorKitchen_defineProperty(this, "asdonMartin",
    external_kolmafia_namespaceObject.Item.get("Asdon Martin keyfob"));QuestManorKitchen_defineProperty(this, "driveSafe",
    external_kolmafia_namespaceObject.Effect.get("Driving Safely"));QuestManorKitchen_defineProperty(this, "torso",
    external_kolmafia_namespaceObject.Skill.get("Torso Awareness"));QuestManorKitchen_defineProperty(this, "spoon",
    external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon"));QuestManorKitchen_defineProperty(this, "scaleShirt",
    external_kolmafia_namespaceObject.Item.get("blessed rustproof +2 gray dragon scale mail"));QuestManorKitchen_defineProperty(this, "telegram",
    external_kolmafia_namespaceObject.Item.get("Telegram from Lady Spookyraven"));}QuestManorKitchen_createClass(QuestManorKitchen, [{ key: "getId", value:

    function getId() {
      return "Manor / Kitchen";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "hasEnoughRes", value:

    function hasEnoughRes() {
      if (
      this.lastResistTurnCheck + (this.enoughRes ? 3 : 10) >
      (0,external_kolmafia_namespaceObject.totalTurnsPlayed)())
      {
        return this.enoughRes;
      }

      this.lastResistTurnCheck = (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();

      (0,external_kolmafia_namespaceObject.maximize)("hot res 9 max, stench res 9 max -tie", true);
      var hotRes = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Hot Resistance");
      var stenchRes = (0,external_kolmafia_namespaceObject.numericModifier)("Generated:_spec", "Stench Resistance");

      this.enoughRes = hotRes >= 9 && stenchRes >= 9;

      return this.enoughRes;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.telegram) > 0) {
        (0,external_kolmafia_namespaceObject.use)(this.telegram);
      }

      // Each 3 resist in each element is another drawer searched.
      // 21 drawers searched.
      // Max of 9 total res
      var status = getQuestStatus("questM20Necklace");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      // If we haven't purchased our vacation pass yet, don't even think about it.
      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (
      !(0,external_kolmafia_namespaceObject.haveSkill)(this.torso) &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.scaleShirt) > 0 && (
      (0,external_kolmafia_namespaceObject.gnomadsAvailable)() ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.spoon) > 0 &&
      getMoonZone(GreySettings.greyTuneMoonSpoon) == "Gnomad" &&
      (0,external_kolmafia_namespaceObject.getProperty)("moonTuned") != "true"))
      {
        return QuestStatus.NOT_READY;
      }

      if (
      (getQuestStatus("questL11Black") <= 2 || (0,external_kolmafia_namespaceObject.myMeat)() < 1200) &&
      !this.hasEnoughRes())
      {
        return QuestStatus.FASTER_LATER;
      }

      if (
      !(0,external_kolmafia_namespaceObject.haveSkill)(this.stenchResist) &&
      !AbsorbsProvider.getReabsorbedMonsters().includes(this.albinoBat))
      {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("manorDrawerCount")) < 20) {
        outfit.addBonus("+10 hot res 9 max").addBonus("+10 stench res 9 max");
      }

      return {
        outfit: outfit,
        location: this.kitchen,
        run: () => {
          if (
          (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("manorDrawerCount")) < 20 &&
          !this.hasEnoughRes())
          {
            if ((0,external_kolmafia_namespaceObject.haveEffect)((0,external_kolmafia_namespaceObject.effectModifier)(this.canOfPaint, "Effect")) == 0) {
              (0,external_kolmafia_namespaceObject.cliExecute)("acquire 1 " + this.canOfPaint.name);
              (0,external_kolmafia_namespaceObject.use)(this.canOfPaint);
            }

            if (
            (0,external_kolmafia_namespaceObject.getWorkshed)() == this.asdonMartin &&
            (0,external_kolmafia_namespaceObject.haveEffect)(this.driveSafe) == 0 &&
            (0,external_kolmafia_namespaceObject.getFuel)() >= 37)
            {
              (0,external_kolmafia_namespaceObject.cliExecute)("asdonmartin drive safely");
            }
          }

          greyAdv(this.kitchen, outfit);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.kitchen];
    } }]);return QuestManorKitchen;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorLibrary.ts
function QuestManorLibrary_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorLibrary_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManorLibrary_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorLibrary_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorLibrary_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorLibrary_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestManorLibrary_setPrototypeOf(subClass, superClass);}function QuestManorLibrary_setPrototypeOf(o, p) {QuestManorLibrary_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestManorLibrary_setPrototypeOf(o, p);}function QuestManorLibrary_createSuper(Derived) {var hasNativeReflectConstruct = QuestManorLibrary_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestManorLibrary_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestManorLibrary_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestManorLibrary_possibleConstructorReturn(this, result);};}function QuestManorLibrary_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestManorLibrary_assertThisInitialized(self);}function QuestManorLibrary_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestManorLibrary_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestManorLibrary_getPrototypeOf(o) {QuestManorLibrary_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestManorLibrary_getPrototypeOf(o);}function QuestManorLibrary_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestManorLibrary = /*#__PURE__*/function (_TaskInfo) {QuestManorLibrary_inherits(QuestManorLibrary, _TaskInfo);var _super = QuestManorLibrary_createSuper(QuestManorLibrary);function QuestManorLibrary() {var _this;QuestManorLibrary_classCallCheck(this, QuestManorLibrary);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "library",
    external_kolmafia_namespaceObject.Location.get("The Haunted Library"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "killingJar",
    external_kolmafia_namespaceObject.Item.get("Killing Jar"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "key",
    external_kolmafia_namespaceObject.Item.get("[7302]Spookyraven library key"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "librarian",
    external_kolmafia_namespaceObject.Monster.get("Banshee Librarian"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "sweep",
    external_kolmafia_namespaceObject.Skill.get("System Sweep"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "nano",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "pathYR",
    new PossiblePath(10).add(ResourceCategory.YELLOW_RAY));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "path",
    new PossiblePath(10, 20));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "paths",
    []);return _this;}QuestManorLibrary_createClass(QuestManorLibrary, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      var wantJar =
      this.wantsGnomeKillingJar() && (0,external_kolmafia_namespaceObject.availableAmount)(this.killingJar) == 0;
      var desksLeft =
      5 - (assumeUnstarted ? 0 : (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("writingDesksDefeated")));

      this.paths = [];
      this.path = new PossiblePath(desksLeft * 3, desksLeft * 4);
      this.pathYR = new PossiblePath(desksLeft * 2, desksLeft * 3).add(
      ResourceCategory.YELLOW_RAY);


      if (wantJar || assumeUnstarted) {
        this.paths.push(this.pathYR);
      }

      this.paths.push(this.path);
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Library";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeKillingJar", value:

    function wantsGnomeKillingJar() {
      return (this.getGnome() & 4) != 4;
    } }, { key: "status", value:

    function status(path) {
      var status = getQuestStatus("questM20Necklace");

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.key) == 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questM21Dance") >= 0) {
        return QuestStatus.COMPLETED;
      }

      if (
      path != null &&
      path.canUse(ResourceCategory.YELLOW_RAY) > 0 &&
      !path.getResource(ResourceCategory.YELLOW_RAY).ready())
      {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.sweep) || !(0,external_kolmafia_namespaceObject.haveSkill)(this.nano)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      var outfit = new GreyOutfit();
      var wantJar =
      this.wantsGnomeKillingJar() && (0,external_kolmafia_namespaceObject.availableAmount)(this.killingJar) == 0;
      var banishLibrarian = !wantJar && !(0,external_kolmafia_namespaceObject.isBanished)(this.librarian);
      var resource = wantJar ?
      path.getResource(ResourceCategory.YELLOW_RAY) :
      null;

      if (wantJar) {
        if (resource != null) {
          resource.prepare(outfit);
        } else {
          outfit.setItemDrops().setChampagneBottle();
        }
      }

      return {
        location: this.library,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          var props = new PropertyManager();

          settings.addBanish(external_kolmafia_namespaceObject.Monster.get("bookbat"));

          if (banishLibrarian) {
            settings.addBanish(this.librarian);
          } else if (resource != null) {
            resource.prepare(null, props);

            settings.setFinishingBlowMacro(
            Macro.if_(this.librarian, resource.macro()).skill(
            external_kolmafia_namespaceObject.Skill.get("Infinite Loop")));


          }

          props.setChoice(163, 3); // Rare adv that gives an item with 2k autosell, and worth 4-5k in mall
          props.setChoice(888, 4); // Skip
          props.setChoice(889, 5); // Skip

          try {
            greyAdv(this.library, outfit, settings);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.library];
    } }]);return QuestManorLibrary;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/QuestManor.ts
function QuestManor_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManor_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManor_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManor_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManor_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManor_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var QuestManor = /*#__PURE__*/function () {function QuestManor() {QuestManor_classCallCheck(this, QuestManor);QuestManor_defineProperty(this, "quests",
    [
    new ManorBathroom(),
    new ManorBedroom(),
    new ManorGallery(),
    new QuestManorLibrary(),
    new QuestManorKitchen(),
    new QuestManorBillards()]);QuestManor_defineProperty(this, "puff",


    external_kolmafia_namespaceObject.Item.get("Lady Spookyraven's powder puff"));QuestManor_defineProperty(this, "gown",
    external_kolmafia_namespaceObject.Item.get("Lady Spookyraven's finest gown"));QuestManor_defineProperty(this, "shoes",
    external_kolmafia_namespaceObject.Item.get("Lady Spookyraven's dancing shoes"));QuestManor_defineProperty(this, "ballroom",
    external_kolmafia_namespaceObject.Location.get("The Haunted Ballroom"));}QuestManor_createClass(QuestManor, [{ key: "level", value:

    function level() {
      return 8;
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Chat";
    } }, { key: "getManorStatus", value:

    function getManorStatus() {
      return getQuestStatus("questM20Necklace");
    } }, { key: "getDanceStatus", value:

    function getDanceStatus() {
      return getQuestStatus("questM21Dance");
    } }, { key: "status", value:

    function status() {
      var danceStatus = this.getDanceStatus();

      if (danceStatus == DanceStatus.finished) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questM20Necklace") < 4) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questM20Necklace") != 100) {
        return QuestStatus.READY;
      }

      if (danceStatus == DanceStatus.readyToDance) {
        return QuestStatus.READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.puff) +
      (0,external_kolmafia_namespaceObject.availableAmount)(this.gown) +
      (0,external_kolmafia_namespaceObject.availableAmount)(this.shoes) !=
      3)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "run", value:

    function run() {
      if (getQuestStatus("questM20Necklace") < 100) {
        return this.doUpstairs();
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor2&action=manor2_ladys");
          greyAdv(this.ballroom);
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor3&action=manor3_ladys");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.quests;
    } }, { key: "doUpstairs", value:

    function doUpstairs() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.print)("Lets chat up the old lady");
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor1&action=manor1_ladys");
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=manor2&action=manor2_ladys");
        } };

    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }]);return QuestManor;}();var


QuestManor_ManorStatus;(function (ManorStatus) {ManorStatus[ManorStatus["unstarted"] = -1] = "unstarted";ManorStatus[ManorStatus["DOING_KITCHEN"] = 0] = "DOING_KITCHEN";ManorStatus[ManorStatus["HAVE_POOL_KEY"] = 1] = "HAVE_POOL_KEY";ManorStatus[ManorStatus["HAVE_POOL_CUE"] = 2] = "HAVE_POOL_CUE";ManorStatus[ManorStatus["HAVE_LIBRARY_KEY"] = 3] = "HAVE_LIBRARY_KEY";ManorStatus[ManorStatus["HAVE_UPSTAIRS_KEY"] = 4] = "HAVE_UPSTAIRS_KEY";ManorStatus[ManorStatus["GOING_UPSTAIRS"] = 5] = "GOING_UPSTAIRS";ManorStatus[ManorStatus["finished"] = 100] = "finished";})(QuestManor_ManorStatus || (QuestManor_ManorStatus = {}));var










DanceStatus;(function (DanceStatus) {DanceStatus[DanceStatus["unstarted"] = -1] = "unstarted";DanceStatus[DanceStatus["started"] = 0] = "started";DanceStatus[DanceStatus["wantsToDance"] = 1] = "wantsToDance";DanceStatus[DanceStatus["hasAllThreeItems"] = 2] = "hasAllThreeItems";DanceStatus[DanceStatus["readyToDance"] = 3] = "readyToDance";DanceStatus[DanceStatus["finished"] = 100] = "finished";})(DanceStatus || (DanceStatus = {}));
;// CONCATENATED MODULE: ./src/quests/custom/QuestCar.ts
function QuestCar_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestCar_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestCar_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestCar_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestCar_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestCar_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestCar = /*#__PURE__*/function () {function QuestCar() {QuestCar_classCallCheck(this, QuestCar);QuestCar_defineProperty(this, "tinkersThingy",
    external_kolmafia_namespaceObject.Location.get("The Degrassi Knoll Garage"));QuestCar_defineProperty(this, "bitchCar",
    external_kolmafia_namespaceObject.Item.get("Bitchin' meatcar"));QuestCar_defineProperty(this, "toolbox",
    external_kolmafia_namespaceObject.Item.get("Gnollish toolbox"));QuestCar_defineProperty(this, "sweetRims",
    external_kolmafia_namespaceObject.Item.get("Sweet Rims"));QuestCar_defineProperty(this, "dopeWheels",
    external_kolmafia_namespaceObject.Item.get("Dope Wheels"));QuestCar_defineProperty(this, "bugbear",
    external_kolmafia_namespaceObject.Monster.get("Guard Bugbear"));}QuestCar_createClass(QuestCar, [{ key: "level", value:

    function level() {
      return (0,external_kolmafia_namespaceObject.knollAvailable)() ? 7 : 11;
    } }, { key: "tryMakeBitchCar", value:

    function tryMakeBitchCar() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.toolbox) > 0) {
        (0,external_kolmafia_namespaceObject.use)(this.toolbox, (0,external_kolmafia_namespaceObject.availableAmount)(this.toolbox));
      }

      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.dopeWheels) + (0,external_kolmafia_namespaceObject.availableAmount)(this.sweetRims) ==
      0)
      {
        (0,external_kolmafia_namespaceObject.retrieveItem)(this.sweetRims);
      }

      (0,external_kolmafia_namespaceObject.create)(this.bitchCar);
    } }, { key: "hasBoat", value:

    function hasBoat() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastIslandUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastDesertUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)()) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() < 700 || !(0,external_kolmafia_namespaceObject.knollAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.knollAvailable)()) {
        return QuestStatus.READY;
      }

      /*if (
        myLevel() < 11 ||
        !GreySettings.isHippyMode() ||
        (this.hasBoat() && getQuestStatus("questL11Black") <= 1)
      ) {
        return QuestStatus.FASTER_LATER;
      }*/

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      //if (knollAvailable()) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          this.tryMakeBitchCar();
        } };

      /*}
       let outfit = new GreyOutfit().setItemDrops();
       return {
        outfit: outfit,
        location: this.tinkersThingy,
        run: () => {
          greyAdv(
            this.tinkersThingy,
            outfit,
            new AdventureSettings().addBanish(this.bugbear)
          );
           this.tryMakeBitchCar();
        },
      };*/



    } }, { key: "getId", value:

    function getId() {
      return "Misc / MeatCar";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.tinkersThingy];
    } }]);return QuestCar;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestManorLights.ts
function QuestManorLights_slicedToArray(arr, i) {return QuestManorLights_arrayWithHoles(arr) || QuestManorLights_iterableToArrayLimit(arr, i) || QuestManorLights_unsupportedIterableToArray(arr, i) || QuestManorLights_nonIterableRest();}function QuestManorLights_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestManorLights_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function QuestManorLights_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestManorLights_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestManorLights_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestManorLights_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestManorLights_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestManorLights_arrayLikeToArray(o, minLen);}function QuestManorLights_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestManorLights_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorLights_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestManorLights_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorLights_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorLights_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorLights_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestManorLights = /*#__PURE__*/function () {


































  function QuestManorLights() {QuestManorLights_classCallCheck(this, QuestManorLights);QuestManorLights_defineProperty(this, "choices", [890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903]);QuestManorLights_defineProperty(this, "elizibeth", [[external_kolmafia_namespaceObject.Location.get("The Haunted Storage Room"), 3], [external_kolmafia_namespaceObject.Location.get("The Haunted Laundry Room"), 3], [external_kolmafia_namespaceObject.Location.get("The Haunted Bathroom"), 3], [external_kolmafia_namespaceObject.Location.get("The Haunted Kitchen"), 4], [external_kolmafia_namespaceObject.Location.get("The Haunted Library"), 2], [external_kolmafia_namespaceObject.Location.get("The Haunted Ballroom"), 2], [external_kolmafia_namespaceObject.Location.get("The Haunted Gallery"), 4]]);QuestManorLights_defineProperty(this, "stephen", [[external_kolmafia_namespaceObject.Location.get("The Haunted Bedroom"), [1, 3, 1]], [external_kolmafia_namespaceObject.Location.get("The Haunted Nursery"), [1, 2, 2, 1, 1]], [external_kolmafia_namespaceObject.Location.get("The Haunted Conservatory"), [1, 2, 2]], [external_kolmafia_namespaceObject.Location.get("The Haunted Billiards"), [1, 2, 2]], [external_kolmafia_namespaceObject.Location.get("The Haunted Wine Cellar"), [1, 2, 2, 3]], [external_kolmafia_namespaceObject.Location.get("The Haunted Boiler Room"), [1, 2, 2]], [external_kolmafia_namespaceObject.Location.get("The Haunted Laboratory"), [1, 1, 3, 1, 1]]]);QuestManorLights_defineProperty(this, "elizabethRewards", [external_kolmafia_namespaceObject.Item.get("Elizabeth's Dollie"), external_kolmafia_namespaceObject.Item.get("Elizabeth's paintbrush")]);QuestManorLights_defineProperty(this, "stephsRewards", [external_kolmafia_namespaceObject.Item.get("Stephen's lab coat"), external_kolmafia_namespaceObject.Item.get("Stephen's secret formula")]);QuestManorLights_defineProperty(this, "goose", external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestManorLights_defineProperty(this, "teleportis", external_kolmafia_namespaceObject.Effect.get("Teleportitis"));QuestManorLights_defineProperty(this, "finishLights", (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("greyFinishManorLights")));var _iterator = QuestManorLights_createForOfIteratorHelper(
    this.choices),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var choice = _step.value;
        var prop = "choiceAdventure" + choice;

        if ((0,external_kolmafia_namespaceObject.getProperty)(prop) != "") {
          continue;
        }

        // Make sure we don't halt on any of the NC
        (0,external_kolmafia_namespaceObject.setProperty)(prop, "1");
      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }QuestManorLights_createClass(QuestManorLights, [{ key: "level", value:

    function level() {
      return 5;
    } }, { key: "isElizaReady", value:

    function isElizaReady() {
      return (0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenElizabethRoom") != "none";
    } }, { key: "isSteveReady", value:

    function isSteveReady() {
      return (0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenStephenRoom") != "none";
    } }, { key: "isElizaFight", value:

    function isElizaFight() {
      return (0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenElizabethRoom") == "The Haunted Gallery";
    } }, { key: "isSteveFight", value:

    function isSteveFight() {
      return (
        (0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenStephenRoom") == "The Haunted Laboratory");

    } }, { key: "getSteveLeft", value:

    function getSteveLeft() {
      var loc = external_kolmafia_namespaceObject.Location.get((0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenStephenRoom"));

      var index = this.stephen.findIndex((_ref) => {var _ref2 = QuestManorLights_slicedToArray(_ref, 1),l = _ref2[0];return loc == l;});

      return index;
    } }, { key: "getElizaLeft", value:

    function getElizaLeft() {
      var loc = external_kolmafia_namespaceObject.Location.get((0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenElizabethRoom"));

      var index = this.elizibeth.findIndex((_ref3) => {var _ref4 = QuestManorLights_slicedToArray(_ref3, 1),l = _ref4[0];return loc == l;});

      return index;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      if (
      !this.isSteveFight() ||
      (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 7 ||
      !this.finishLights)
      {
        return null;
      }

      return this.goose;
    } }, { key: "shouldDoSteve", value:

    function shouldDoSteve() {
      return (
        this.isSteveReady() && (
        !this.isSteveFight() || (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 7));

    } }, { key: "getSteve", value:

    function getSteve() {
      var loc = external_kolmafia_namespaceObject.Location.get((0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenStephenRoom"));

      return this.stephen.find((s) => s[0] == loc);
    } }, { key: "getEliza", value:

    function getEliza() {
      var loc = external_kolmafia_namespaceObject.Location.get((0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenElizabethRoom"));

      return this.elizibeth.find((s) => s[0] == loc);
    } }, { key: "isTime", value:

    function isTime() {
      var last = this.getLastLightsOut();

      if (last >= (0,external_kolmafia_namespaceObject.totalTurnsPlayed)()) {
        return false;
      }

      return (0,external_kolmafia_namespaceObject.totalTurnsPlayed)() % 37 == 0;
    } }, { key: "getLastLightsOut", value:

    function getLastLightsOut() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastLightsOutTurn"));
    } }, { key: "status", value:

    function status() {
      if (!this.isTime() || (0,external_kolmafia_namespaceObject.haveEffect)(this.teleportis) > 0) {
        return QuestStatus.NOT_READY;
      }

      if (!this.isElizaReady() && !this.shouldDoSteve()) {
        return QuestStatus.COMPLETED;
      }

      if (this.isElizaFight() && this.isSteveFight() && !this.finishLights) {
        return QuestStatus.COMPLETED;
      }

      if (!this.mustBeDone()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getBoth", value:

    function getBoth() {
      return (
        (0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenStephenRoom") +
        (0,external_kolmafia_namespaceObject.getProperty)("nextSpookyravenElizabethRoom"));

    } }, { key: "doSteve", value:

    function doSteve() {
      var steve = this.getSteve();
      var fight = this.isSteveFight();
      var outfit = fight ?
      new GreyOutfit() :
      GreyOutfit.IGNORE_OUTFIT;

      if (this.isSteveFight()) {
        outfit.meatDropWeight = 2;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("_juneCleaverFightsLeft") == "0") {
        if (fight) {
          outfit.addBonus("-equip june cleaver");
        } else {
          (0,external_kolmafia_namespaceObject.equip)(external_kolmafia_namespaceObject.Slot.get("weapon"), external_kolmafia_namespaceObject.Item.get("None"));
        }
      }

      return {
        location: null,
        familiar: fight ? this.goose : null,
        outfit: outfit,
        run: () => {
          var both = this.getBoth();

          (0,external_kolmafia_namespaceObject.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_namespaceObject.toInt)(steve[0]));

          if (!(0,external_kolmafia_namespaceObject.handlingChoice)() && (0,external_kolmafia_namespaceObject.currentRound)() == 0) {
            return;
          }var _iterator2 = QuestManorLights_createForOfIteratorHelper(

          steve[1]),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var i = _step2.value;
              var url =
              "choice.php?pwd=&whichchoice=" + (0,external_kolmafia_namespaceObject.lastChoice)() + "&option=" + i;

              (0,external_kolmafia_namespaceObject.visitUrl)(url);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          if ((0,external_kolmafia_namespaceObject.currentRound)() != 0) {
            greyAdv(
            null,
            outfit,
            new AdventureSettings().setStartOfFightMacro(
            Macro.skill(external_kolmafia_namespaceObject.Skill.get("Emit Matter Duplicating Drones"))));


          }

          this.printStatus();

          var both2 = this.getBoth();

          if (both == both2) {
            throw "No progress was made in steve..";
          }
        } };

    } }, { key: "printStatus", value:

    function printStatus() {
      if (this.isSteveReady()) {
        (0,external_kolmafia_namespaceObject.print)(
        "Lights Out: Stephen rooms explored: " +
        this.getSteveLeft() +
        " / " +
        this.stephen.length,
        "blue");

      }

      if (this.isElizaReady()) {
        (0,external_kolmafia_namespaceObject.print)(
        "Lights Out: Elizabeth rooms explored: " +
        this.getElizaLeft() +
        " / " +
        this.elizibeth.length,
        "blue");

      }
    } }, { key: "run", value:

    function run() {
      if (this.shouldDoSteve() && (!this.isSteveFight() || this.finishLights)) {
        var steve = this.getSteve();

        if ((0,external_kolmafia_namespaceObject.canAdventure)(steve[0])) {
          return this.doSteve();
        }
      }

      if (this.isElizaReady() && (!this.isElizaFight() || this.finishLights)) {
        var eliza = this.getEliza();

        if ((0,external_kolmafia_namespaceObject.canAdventure)(eliza[0])) {
          return this.doEliza();
        }
      }

      throw "Neither steve or eliza were ready!";
    } }, { key: "doEliza", value:

    function doEliza() {
      var eliza = this.getEliza();
      var fight = this.isElizaFight();
      var outfit = !fight ? GreyOutfit.IGNORE_OUTFIT : new GreyOutfit();

      if ((0,external_kolmafia_namespaceObject.getProperty)("_juneCleaverFightsLeft") == "0") {
        if (fight) {
          outfit.addBonus("-equip june cleaver");
        } else {
          (0,external_kolmafia_namespaceObject.equip)(external_kolmafia_namespaceObject.Slot.get("weapon"), external_kolmafia_namespaceObject.Item.get("None"));
        }
      }

      return {
        location: null,
        outfit: outfit,
        run: () => {
          var both = this.getBoth();
          (0,external_kolmafia_namespaceObject.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_namespaceObject.toInt)(eliza[0]));

          if (!(0,external_kolmafia_namespaceObject.handlingChoice)() && (0,external_kolmafia_namespaceObject.currentRound)() == 0) {
            return;
          }

          var url =
          "choice.php?pwd=&whichchoice=" + (0,external_kolmafia_namespaceObject.lastChoice)() + "&option=" + eliza[1];

          (0,external_kolmafia_namespaceObject.visitUrl)(url);

          if ((0,external_kolmafia_namespaceObject.currentRound)() != 0) {
            greyAdv(null);
          }

          this.printStatus();

          var both2 = this.getBoth();

          if (both == both2) {
            throw "No progress was made in eliza..";
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Misc / ManorLights";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (!this.isTime()) {
        return false;
      }

      if (this.isElizaReady()) {
        var eliza = this.getEliza();

        if ((0,external_kolmafia_namespaceObject.canAdventure)(eliza[0])) {
          return true;
        }
      }

      if (this.shouldDoSteve()) {
        var steve = this.getSteve();

        if ((0,external_kolmafia_namespaceObject.canAdventure)(steve[0])) {
          return true;
        }
      }

      return false;
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }]);return QuestManorLights;}();
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestMoonSignAbsorb.ts
function QuestMoonSignAbsorb_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestMoonSignAbsorb_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestMoonSignAbsorb_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestMoonSignAbsorb_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestMoonSignAbsorb_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestMoonSignAbsorb_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestMoonSignAbsorb_setPrototypeOf(subClass, superClass);}function QuestMoonSignAbsorb_setPrototypeOf(o, p) {QuestMoonSignAbsorb_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestMoonSignAbsorb_setPrototypeOf(o, p);}function QuestMoonSignAbsorb_createSuper(Derived) {var hasNativeReflectConstruct = QuestMoonSignAbsorb_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestMoonSignAbsorb_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestMoonSignAbsorb_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestMoonSignAbsorb_possibleConstructorReturn(this, result);};}function QuestMoonSignAbsorb_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestMoonSignAbsorb_assertThisInitialized(self);}function QuestMoonSignAbsorb_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestMoonSignAbsorb_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestMoonSignAbsorb_getPrototypeOf(o) {QuestMoonSignAbsorb_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestMoonSignAbsorb_getPrototypeOf(o);}function QuestMoonSignAbsorb_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestMoonSignAbsorb = /*#__PURE__*/function (_TaskInfo) {QuestMoonSignAbsorb_inherits(QuestMoonSignAbsorb, _TaskInfo);var _super = QuestMoonSignAbsorb_createSuper(QuestMoonSignAbsorb);function QuestMoonSignAbsorb() {var _this;QuestMoonSignAbsorb_classCallCheck(this, QuestMoonSignAbsorb);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "spoon",



    external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon"));QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "toAbsorb", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "goose",

    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "faxing", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "ignore",

    new PossiblePath(14));QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "paths", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "monster", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "location", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "moonZone", void 0);return _this;}QuestMoonSignAbsorb_createClass(QuestMoonSignAbsorb, [{ key: "level", value:







    function level() {
      return this.isInSign() ? 10 : 18;
    } }, { key: "getAbsorbs", value:

    function getAbsorbs() {
      return [this.monster];
    } }, { key: "status", value:

    function status(path) {
      if (path == null) {
        return QuestStatus.NOT_READY;
      }

      if (this.toAbsorb.length == 0 || !path.canUse(ResourceCategory.FAXER)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) < 6) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run(path) {
      if (path != null && path.canUse(ResourceCategory.FAXER)) {
        var resource = path.getResource(ResourceCategory.FAXER);

        return {
          location: null,
          outfit: null,
          familiar: this.goose,
          disableFamOverride: true,
          run: () => {
            resource.fax(this.monster);

            Macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Re-Process Matter")).
            trySkillRepeat(external_kolmafia_namespaceObject.Skill.get("Infinite Loop")).
            submit();

            if ((0,external_kolmafia_namespaceObject.handlingChoice)() || (0,external_kolmafia_namespaceObject.currentRound)() != 0) {
              throw "We're supposed to be done with this fax fight!";
            }
          } };

      }

      return {
        location: this.location,
        run: () => {
          greyAdv(this.location);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      if (this.isInSign() || this.willMoonTune(assumeUnstarted)) {
        this.paths = null;
        return;
      }

      this.paths = [];
      this.faxing = new PossiblePath(1).addFax(this.monster);

      if (
      !assumeUnstarted &&
      AbsorbsProvider.getReabsorbedMonsters().includes(this.monster))
      {
        this.faxing.addUsed(ResourceCategory.FAXER);
      }

      this.paths.push(this.faxing, this.ignore);
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "isInSign", value:

    function isInSign() {
      if ((0,external_kolmafia_namespaceObject.knollAvailable)()) {
        return this.moonZone == "Knoll";
      }

      if ((0,external_kolmafia_namespaceObject.gnomadsAvailable)()) {
        return this.moonZone == "Gnomad";
      }

      return this.moonZone == "Canadia";
    } }, { key: "willMoonTune", value:

    function willMoonTune(assumeUnstarted) {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.spoon) == 0) {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("moonTuned") == "true" && !assumeUnstarted) {
        return false;
      }

      return getMoonZone(GreySettings.greyTuneMoonSpoon) == this.moonZone;
    } }]);return QuestMoonSignAbsorb;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbCanadia.ts
function QuestAbsorbCanadia_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbCanadia_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestAbsorbCanadia_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbCanadia_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbCanadia_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbCanadia_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbCanadia_setPrototypeOf(subClass, superClass);}function QuestAbsorbCanadia_setPrototypeOf(o, p) {QuestAbsorbCanadia_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbCanadia_setPrototypeOf(o, p);}function QuestAbsorbCanadia_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbCanadia_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbCanadia_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbCanadia_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbCanadia_possibleConstructorReturn(this, result);};}function QuestAbsorbCanadia_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbCanadia_assertThisInitialized(self);}function QuestAbsorbCanadia_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbCanadia_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbCanadia_getPrototypeOf(o) {QuestAbsorbCanadia_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbCanadia_getPrototypeOf(o);}function QuestAbsorbCanadia_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestAbsorbCanadia = /*#__PURE__*/function (_QuestMoonSignAbsorb) {QuestAbsorbCanadia_inherits(QuestAbsorbCanadia, _QuestMoonSignAbsorb);var _super = QuestAbsorbCanadia_createSuper(QuestAbsorbCanadia);function QuestAbsorbCanadia() {var _this;QuestAbsorbCanadia_classCallCheck(this, QuestAbsorbCanadia);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbCanadia_defineProperty(QuestAbsorbCanadia_assertThisInitialized(_this), "monster",
    external_kolmafia_namespaceObject.Monster.get("cloud of disembodied whiskers"));QuestAbsorbCanadia_defineProperty(QuestAbsorbCanadia_assertThisInitialized(_this), "location",
    external_kolmafia_namespaceObject.Location.get("Outskirts of Camp Logging Camp"));QuestAbsorbCanadia_defineProperty(QuestAbsorbCanadia_assertThisInitialized(_this), "moonZone",
    "Canadia");return _this;}QuestAbsorbCanadia_createClass(QuestAbsorbCanadia, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Canadia";
    } }]);return QuestAbsorbCanadia;}(QuestMoonSignAbsorb);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbStarMonster.ts
function QuestAbsorbStarMonster_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbStarMonster_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestAbsorbStarMonster_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbStarMonster_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbStarMonster_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbStarMonster_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbStarMonster_setPrototypeOf(subClass, superClass);}function QuestAbsorbStarMonster_setPrototypeOf(o, p) {QuestAbsorbStarMonster_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbStarMonster_setPrototypeOf(o, p);}function QuestAbsorbStarMonster_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbStarMonster_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbStarMonster_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbStarMonster_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbStarMonster_possibleConstructorReturn(this, result);};}function QuestAbsorbStarMonster_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbStarMonster_assertThisInitialized(self);}function QuestAbsorbStarMonster_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbStarMonster_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbStarMonster_getPrototypeOf(o) {QuestAbsorbStarMonster_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbStarMonster_getPrototypeOf(o);}function QuestAbsorbStarMonster_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestAbsorbStarMonster = /*#__PURE__*/function (_TaskInfo) {QuestAbsorbStarMonster_inherits(QuestAbsorbStarMonster, _TaskInfo);var _super = QuestAbsorbStarMonster_createSuper(QuestAbsorbStarMonster);function QuestAbsorbStarMonster() {var _this;QuestAbsorbStarMonster_classCallCheck(this, QuestAbsorbStarMonster);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "evenMonster",
    external_kolmafia_namespaceObject.Monster.get("One-Eyed Willie"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "oddMonster",
    external_kolmafia_namespaceObject.Monster.get("Little Man in the Canoe"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "familiar",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "fax",
    new PossiblePath(1));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "avoid",
    new PossiblePath(20));return _this;}QuestAbsorbStarMonster_createClass(QuestAbsorbStarMonster, [{ key: "createPaths", value:

    function createPaths() {
      this.fax.addFax(this.getMonster());
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.fax, this.avoid];
    } }, { key: "getMonster", value:

    function getMonster() {
      return (0,external_kolmafia_namespaceObject.myAscensions)() % 2 != 0 ? this.evenMonster : this.oddMonster;
    } }, { key: "getId", value:

    function getId() {
      return "Absorbs / Hole in Sky";
    } }, { key: "level", value:

    function level() {
      return 18;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status(path) {
      if (AbsorbsProvider.getReabsorbedMonsters().includes(this.getMonster())) {
        return QuestStatus.COMPLETED;
      }

      if (path == null) {
        return QuestStatus.NOT_READY;
      }

      if (!path.canUse(ResourceCategory.FAXER)) {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) < 6) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run(path) {
      var resource = path.getResource(ResourceCategory.FAXER);

      return {
        location: null,
        outfit: null,
        familiar: this.familiar,
        disableFamOverride: true,
        run: () => {
          resource.fax(this.getMonster());

          var macro = Macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Re-Process Matter"));

          if ((0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
            macro.trySkillRepeat(this.nanovision);
          } else {
            macro.trySkillRepeat(external_kolmafia_namespaceObject.Skill.get("Infinite Loop"));
          }

          macro.submit();

          if ((0,external_kolmafia_namespaceObject.handlingChoice)() || (0,external_kolmafia_namespaceObject.currentRound)() != 0) {
            throw "We're supposed to be done with this fight!";
          }
        } };

    } }, { key: "getAbsorbs", value:

    function getAbsorbs() {
      return [this.getMonster()];
    } }]);return QuestAbsorbStarMonster;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbKnoll.ts
function QuestAbsorbKnoll_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbKnoll_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestAbsorbKnoll_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbKnoll_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbKnoll_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbKnoll_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbKnoll_setPrototypeOf(subClass, superClass);}function QuestAbsorbKnoll_setPrototypeOf(o, p) {QuestAbsorbKnoll_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbKnoll_setPrototypeOf(o, p);}function QuestAbsorbKnoll_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbKnoll_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbKnoll_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbKnoll_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbKnoll_possibleConstructorReturn(this, result);};}function QuestAbsorbKnoll_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbKnoll_assertThisInitialized(self);}function QuestAbsorbKnoll_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbKnoll_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbKnoll_getPrototypeOf(o) {QuestAbsorbKnoll_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbKnoll_getPrototypeOf(o);}function QuestAbsorbKnoll_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestAbsorbKnoll = /*#__PURE__*/function (_QuestMoonSignAbsorb) {QuestAbsorbKnoll_inherits(QuestAbsorbKnoll, _QuestMoonSignAbsorb);var _super = QuestAbsorbKnoll_createSuper(QuestAbsorbKnoll);function QuestAbsorbKnoll() {var _this;QuestAbsorbKnoll_classCallCheck(this, QuestAbsorbKnoll);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbKnoll_defineProperty(QuestAbsorbKnoll_assertThisInitialized(_this), "location",
    external_kolmafia_namespaceObject.Location.get("The Bugbear Pen"));QuestAbsorbKnoll_defineProperty(QuestAbsorbKnoll_assertThisInitialized(_this), "monster",
    external_kolmafia_namespaceObject.Monster.get("Revolving Bugbear"));QuestAbsorbKnoll_defineProperty(QuestAbsorbKnoll_assertThisInitialized(_this), "moonZone",
    "Knoll");return _this;}QuestAbsorbKnoll_createClass(QuestAbsorbKnoll, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Knoll";
    } }]);return QuestAbsorbKnoll;}(QuestMoonSignAbsorb);
;// CONCATENATED MODULE: ./src/quests/custom/goblin/QuestGoblinTortureHarem.ts
function QuestGoblinTortureHarem_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGoblinTortureHarem_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestGoblinTortureHarem_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGoblinTortureHarem_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGoblinTortureHarem_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGoblinTortureHarem_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestGoblinTortureHarem = /*#__PURE__*/function () {function QuestGoblinTortureHarem() {QuestGoblinTortureHarem_classCallCheck(this, QuestGoblinTortureHarem);QuestGoblinTortureHarem_defineProperty(this, "harem",
    external_kolmafia_namespaceObject.Location.get("Cobb's Knob Harem"));QuestGoblinTortureHarem_defineProperty(this, "lab",
    external_kolmafia_namespaceObject.Location.get("Cobb's Knob Laboratory"));}QuestGoblinTortureHarem_createClass(QuestGoblinTortureHarem, [{ key: "getId", value:

    function getId() {
      return "GoblinLabs / LabUnlock";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.canAdventure)(this.lab)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL05Goblin") != "finished") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.harem,
        run: () => {
          greyAdv(this.harem, outfit);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.harem];
    } }]);return QuestGoblinTortureHarem;}();
;// CONCATENATED MODULE: ./src/quests/custom/goblin/QuestGoblinTortureLab.ts
function QuestGoblinTortureLab_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGoblinTortureLab_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestGoblinTortureLab_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGoblinTortureLab_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGoblinTortureLab_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGoblinTortureLab_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestGoblinTortureLab = /*#__PURE__*/function () {function QuestGoblinTortureLab() {QuestGoblinTortureLab_classCallCheck(this, QuestGoblinTortureLab);QuestGoblinTortureLab_defineProperty(this, "lab",
    external_kolmafia_namespaceObject.Location.get("Cobb's Knob Laboratory"));QuestGoblinTortureLab_defineProperty(this, "megL3",
    external_kolmafia_namespaceObject.Location.get("Menagerie Level 3"));}QuestGoblinTortureLab_createClass(QuestGoblinTortureLab, [{ key: "getLocations", value:

    function getLocations() {
      return [this.lab];
    } }, { key: "getId", value:

    function getId() {
      return "GoblinLabs / MegUnlock";
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.canAdventure)(this.megL3)) {
        return QuestStatus.COMPLETED;
      }

      if (
      !(0,external_kolmafia_namespaceObject.canAdventure)(this.lab) ||
      (0,external_kolmafia_namespaceObject.getProperty)("questL05Goblin") != "finished")
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setItemDrops();

      return {
        outfit: outfit,
        location: this.lab,
        run: () => {
          greyAdv(this.lab, outfit);
        } };

    } }, { key: "level", value:

    function level() {
      return 5;
    } }]);return QuestGoblinTortureLab;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestBugbearBakery.ts
function QuestBugbearBakery_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestBugbearBakery_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestBugbearBakery_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestBugbearBakery_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestBugbearBakery_arrayLikeToArray(o, minLen);}function QuestBugbearBakery_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestBugbearBakery_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestBugbearBakery_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestBugbearBakery_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestBugbearBakery_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestBugbearBakery_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestBugbearBakery_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestBugbearBakery = /*#__PURE__*/function () {function QuestBugbearBakery() {QuestBugbearBakery_classCallCheck(this, QuestBugbearBakery);QuestBugbearBakery_defineProperty(this, "asdon",
    external_kolmafia_namespaceObject.Item.get("Asdon Martin keyfob"));QuestBugbearBakery_defineProperty(this, "garage",
    external_kolmafia_namespaceObject.Location.get("The Degrassi Knoll Garage"));QuestBugbearBakery_defineProperty(this, "guard",
    external_kolmafia_namespaceObject.Monster.get("Guard Bugbear"));QuestBugbearBakery_defineProperty(this, "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));}QuestBugbearBakery_createClass(QuestBugbearBakery, [{ key: "getId", value:

    function getId() {
      return "Misc / BugbearBakery";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_namespaceObject.haveOutfit)("Bugbear Costume") ||
      !(0,external_kolmafia_namespaceObject.knollAvailable)() ||
      (0,external_kolmafia_namespaceObject.getWorkshed)() != this.asdon)
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() < 200 || (0,external_kolmafia_namespaceObject.isBanished)(this.guard)) {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.knollAvailable)() && !(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.knollAvailable)()) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {var _iterator = QuestBugbearBakery_createForOfIteratorHelper(
            (0,external_kolmafia_namespaceObject.outfitPieces)("Bugbear Costume")),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var item = _step.value;
                (0,external_kolmafia_namespaceObject.cliExecute)("acquire " + item.name);
              }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
          } };

      }

      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.garage,
        outfit: outfit,
        run: () => {
          greyAdv(
          this.garage,
          outfit,
          new AdventureSettings().addNoBanish(this.guard));

        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.garage];
    } }]);return QuestBugbearBakery;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestCustomPurchases.ts
function QuestCustomPurchases_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestCustomPurchases_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestCustomPurchases_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestCustomPurchases_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestCustomPurchases_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestCustomPurchases_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestCustomPurchases = /*#__PURE__*/function () {function QuestCustomPurchases() {QuestCustomPurchases_classCallCheck(this, QuestCustomPurchases);QuestCustomPurchases_defineProperty(this, "popper",
    external_kolmafia_namespaceObject.Item.get("Porkpie-mounted popper"));QuestCustomPurchases_defineProperty(this, "silent",
    external_kolmafia_namespaceObject.Item.get("Silent Beret"));QuestCustomPurchases_defineProperty(this, "stealth",
    external_kolmafia_namespaceObject.Item.get("Xiblaxian stealth cowl"));QuestCustomPurchases_defineProperty(this, "firePlusCombat",
    external_kolmafia_namespaceObject.Item.get("sombrero-mounted sparkler"));QuestCustomPurchases_defineProperty(this, "pack",
    external_kolmafia_namespaceObject.Item.get("protonic accelerator pack"));QuestCustomPurchases_defineProperty(this, "fireworksClan", void 0);}QuestCustomPurchases_createClass(QuestCustomPurchases, [{ key: "getId", value:


    function getId() {
      return "Misc / Purchases";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("_fireworksShopHatBought") == "true") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() <= 3000) {
        return QuestStatus.NOT_READY;
      }

      if (this.fireworksClan == null) {
        (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php");
        var page = (0,external_kolmafia_namespaceObject.visitUrl)("clan_viplounge.php?action=fwshop&whichfloor=2");

        this.fireworksClan = page.includes("<b>A Furtive Fireworks Fellow</b>");
      }

      if (!this.fireworksClan) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          var toBuy = this.popper;

          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.stealth) > 0 ||
          (0,external_kolmafia_namespaceObject.availableAmount)(this.silent) > 0 ||
          (0,external_kolmafia_namespaceObject.availableAmount)(this.pack) > 0)
          {
            toBuy = this.firePlusCombat;
          }

          (0,external_kolmafia_namespaceObject.print)("Now trying to buy " + toBuy);
          (0,external_kolmafia_namespaceObject.retrieveItem)(toBuy);
          //          buy(item);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestCustomPurchases;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestDungeonsOfDoom.ts
function QuestDungeonsOfDoom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestDungeonsOfDoom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestDungeonsOfDoom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestDungeonsOfDoom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestDungeonsOfDoom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestDungeonsOfDoom_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestDungeonsOfDoom = /*#__PURE__*/function () {function QuestDungeonsOfDoom() {QuestDungeonsOfDoom_classCallCheck(this, QuestDungeonsOfDoom);QuestDungeonsOfDoom_defineProperty(this, "bend",
    external_kolmafia_namespaceObject.Location.get("The Enormous Greater-Than Sign"));QuestDungeonsOfDoom_defineProperty(this, "plusSign",
    external_kolmafia_namespaceObject.Item.get("plus sign"));QuestDungeonsOfDoom_defineProperty(this, "teleportis",
    external_kolmafia_namespaceObject.Effect.get("Teleportitis"));QuestDungeonsOfDoom_defineProperty(this, "beatenUp",
    external_kolmafia_namespaceObject.Effect.get("Beaten Up"));}QuestDungeonsOfDoom_createClass(QuestDungeonsOfDoom, [{ key: "getId", value:

    // TODO Once we have the absorb, do replace combats

    function getId() {
      return "Misc / UnlockDungeonsOfDoom";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "isDoomUnlocked", value:

    function isDoomUnlocked() {
      return (
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)() &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) == 0);

    } }, { key: "status", value:

    function status() {
      if (this.isDoomUnlocked()) {
        return QuestStatus.COMPLETED;
      }

      // Due to poison, we don't want to get into the rare state where we are double nerfed
      if ((0,external_kolmafia_namespaceObject.myMeat)() < 1300 || (0,external_kolmafia_namespaceObject.haveEffect)(this.beatenUp) > 0) {
        return QuestStatus.NOT_READY;
      }

      // If we have not purchased the 5k forged documents yet, or the tavern is not available yet
      if (
      ((0,external_kolmafia_namespaceObject.myMeat)() < 7000 && (0,external_kolmafia_namespaceObject.getProperty)("questL11Black") != "finished" ||
      (0,external_kolmafia_namespaceObject.getProperty)("questL02Larva") != "finished") &&
      (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) > 0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myLevel)() < 12 && (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) == 0) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) > 0 && (0,external_kolmafia_namespaceObject.myLevel)() < 16) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.bend,
        run: () => {
          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) > 0 &&
          (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)())
          {
            (0,external_kolmafia_namespaceObject.use)(this.plusSign);
            return;
          }

          var settings = new AdventureSettings();
          settings.setChoices({
            handleChoice: (choiceNo) => {
              if (choiceNo == 3) {
                return 3;
              } else if (choiceNo == 451) {
                return (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) > 0 ? 5 : 3;
              }

              return null;
            },

            calledOutOfScopeChoiceBehavior: (choiceNo) => {
              return false;
            } });


          greyAdv(this.bend, outfit, settings);

          if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)()) {
            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) == 0) {
              (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");
            }

            (0,external_kolmafia_namespaceObject.use)(this.plusSign);
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.bend];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 5;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        (0,external_kolmafia_namespaceObject.haveEffect)(this.teleportis) > 0 && (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) > 0);

    } }]);return QuestDungeonsOfDoom;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestFamiliarEquip.ts
function QuestFamiliarEquip_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestFamiliarEquip_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestFamiliarEquip_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestFamiliarEquip_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestFamiliarEquip_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestFamiliarEquip_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var QuestFamiliarEquip = /*#__PURE__*/function () {function QuestFamiliarEquip() {QuestFamiliarEquip_classCallCheck(this, QuestFamiliarEquip);QuestFamiliarEquip_defineProperty(this, "familiar",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestFamiliarEquip_defineProperty(this, "equip",
    external_kolmafia_namespaceObject.Item.get("Grey Down Vest"));}QuestFamiliarEquip_createClass(QuestFamiliarEquip, [{ key: "getId", value:

    function getId() {
      return "Misc / FamEquip";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.equip) > 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) >= 6 || (0,external_kolmafia_namespaceObject.myMeat)() < 100) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.useFamiliar)(this.familiar);
          (0,external_kolmafia_namespaceObject.maximize)("familiar experience +familiar weight -tie", false);

          while (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.equip) == 0 &&
          (0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) < 6 &&
          (0,external_kolmafia_namespaceObject.myMeat)() >= 100)
          {
            var exp = this.familiar.experience;
            (0,external_kolmafia_namespaceObject.cliExecute)("train turns 1");

            if (exp >= this.familiar.experience) {
              throw "We attempted to train your familiar in the cake arena, but they gained no experience. Something is likely wrong. You may need to acquire a grey goose vest yourself.";
            }
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestFamiliarEquip;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestFortuneExp.ts
function QuestFortuneExp_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestFortuneExp_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestFortuneExp_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestFortuneExp_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestFortuneExp_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestFortuneExp_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




var QuestFortuneExp = /*#__PURE__*/function () {function QuestFortuneExp() {QuestFortuneExp_classCallCheck(this, QuestFortuneExp);QuestFortuneExp_defineProperty(this, "fam",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestFortuneExp_defineProperty(this, "equip",
    (0,external_kolmafia_namespaceObject.familiarEquipment)(this.fam));}QuestFortuneExp_createClass(QuestFortuneExp, [{ key: "getId", value:

    function getId() {
      return "Misc / FortuneExp";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("_clanFortuneBuffUsed") == "true") {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_namespaceObject.familiarWeight)(this.fam) > 2 ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.equip) == 0 ||
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_namespaceObject.myAscensions)())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.cliExecute)("fortune buff familiar");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }]);return QuestFortuneExp;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestGetZapWand.ts
function QuestGetZapWand_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGetZapWand_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestGetZapWand_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGetZapWand_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGetZapWand_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGetZapWand_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestGetZapWand = /*#__PURE__*/function () {function QuestGetZapWand() {QuestGetZapWand_classCallCheck(this, QuestGetZapWand);QuestGetZapWand_defineProperty(this, "realDung",
    external_kolmafia_namespaceObject.Location.get("The Dungeons of Doom"));QuestGetZapWand_defineProperty(this, "deadMimic",
    external_kolmafia_namespaceObject.Item.get("dead mimic"));QuestGetZapWand_defineProperty(this, "plusSign",
    external_kolmafia_namespaceObject.Item.get("plus sign"));QuestGetZapWand_defineProperty(this, "toAbsorb", void 0);}QuestGetZapWand_createClass(QuestGetZapWand, [{ key: "getId", value:


    function getId() {
      return "Misc / GrabZapWand";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "shouldHaveWand", value:

    function shouldHaveWand() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastZapperWand")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "isDoomUnlocked", value:

    function isDoomUnlocked() {
      return (
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)() &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) == 0);

    } }, { key: "getTimesZapped", value:

    function getTimesZapped() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_zapCount"));
    } }, { key: "status", value:

    function status() {
      if (this.shouldHaveWand() || this.getWand() != null) {
        return QuestStatus.COMPLETED;
      }

      var meatOnHand = 6000;

      if (getQuestStatus("questL11Black") < 3) {
        meatOnHand += 3000;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() < meatOnHand || !this.isDoomUnlocked()) {
        return QuestStatus.NOT_READY;
      }

      // Only be very requirement if we have the MP regen skill
      if (!hasNonCombatSkillsReady(this.toAbsorb.length == 0 ? true : false)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getWand", value:

    function getWand() {
      var wand = (0,external_kolmafia_namespaceObject.getZapWand)();

      return wand == external_kolmafia_namespaceObject.Item.get("None") ? null : wand;
    } }, { key: "hasWandExploded", value:

    function hasWandExploded() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastZapperWandExplosionDay")) == (0,external_kolmafia_namespaceObject.myDaycount)();
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.realDung,
        run: () => {
          var props = new PropertyManager();

          props.setChoice(25, 2);

          try {
            greyAdv(this.realDung, outfit);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.deadMimic) > 0) {
            (0,external_kolmafia_namespaceObject.use)(this.deadMimic);

            if (this.getWand() == null) {
              (0,external_kolmafia_namespaceObject.print)(
              "Something has gone wrong. We used a dead mimic but didn't get a wand.");

            }
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.realDung];
    } }]);return QuestGetZapWand;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestGrabBoatJunkyard.ts
function QuestGrabBoatJunkyard_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGrabBoatJunkyard_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestGrabBoatJunkyard_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGrabBoatJunkyard_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGrabBoatJunkyard_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGrabBoatJunkyard_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestGrabBoatJunkyard = /*#__PURE__*/function () {function QuestGrabBoatJunkyard() {QuestGrabBoatJunkyard_classCallCheck(this, QuestGrabBoatJunkyard);QuestGrabBoatJunkyard_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Old Landfill"));QuestGrabBoatJunkyard_defineProperty(this, "junkKey",
    external_kolmafia_namespaceObject.Item.get("funky junk key"));QuestGrabBoatJunkyard_defineProperty(this, "boatParts",
    [
    "old claw-foot bathtub",
    "old clothesline pole",
    "antique cigar sign"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestGrabBoatJunkyard_defineProperty(this, "magazine",
    external_kolmafia_namespaceObject.Item.get("Worse Homes and Gardens"));QuestGrabBoatJunkyard_defineProperty(this, "toAbsorb", void 0);QuestGrabBoatJunkyard_defineProperty(this, "nanovision",

    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));}QuestGrabBoatJunkyard_createClass(QuestGrabBoatJunkyard, [{ key: "getId", value:

    function getId() {
      return "Boat / Junkyard";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM19Hippy") == "unstarted") {
        return QuestStatus.READY;
      }

      if (this.hasBoat()) {
        return QuestStatus.COMPLETED;
      }

      if (!isJunkYardBoatApproach()) {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.myLevel)() < 11 ||
      !GreySettings.isHardcoreMode() && !(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision))
      {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "doHippyJunk", value:

    function doHippyJunk() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=woods&action=woods_smokesignals");
          (0,external_kolmafia_namespaceObject.runChoice)(1);
          (0,external_kolmafia_namespaceObject.runChoice)(2);
        } };

    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM19Hippy") == "unstarted") {
        return this.doHippyJunk();
      }

      var outfit = new GreyOutfit();
      outfit.setItemDrops();

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();

          if (this.needParts()) {
            if ((0,external_kolmafia_namespaceObject.closetAmount)(this.junkKey) > 0 && this.toAbsorb.length == 0) {
              (0,external_kolmafia_namespaceObject.takeCloset)(this.junkKey);
            } else {
              // We immediately try to replace combats because the key drops the longer we spend
              DelayBurners.tryReplaceCombats();
            }

            if (DelayBurners.isTryingForDupeableGoblin()) {
              (0,external_kolmafia_namespaceObject.useFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));
            }

            props.setChoice(795, 1);
            props.setChoice(796, 2);
            props.setChoice(797, 3);

            for (var i = 0; i < 3; i++) {
              if ((0,external_kolmafia_namespaceObject.availableAmount)(this.boatParts[i]) > 0) {
                continue;
              }

              props.setChoice(794, i + 1);
              break;
            }
          }

          try {
            greyAdv(this.location, outfit);
          } finally {
            props.resetAll();
          }

          this.createBoat();
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (!GreySettings.isHippyMode()) {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.myLevel)() == 11 && isJunkYardBoatApproach()) {
        return true;
      }

      return false;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "hasBoat", value:

    function hasBoat() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastIslandUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "needParts", value:

    function needParts() {
      return this.boatParts.filter((s) => (0,external_kolmafia_namespaceObject.availableAmount)(s)).length < 3;
    } }, { key: "createBoat", value:

    function createBoat() {
      if (this.needParts()) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.magazine) == 0) {
        return;
      }

      (0,external_kolmafia_namespaceObject.cliExecute)("acquire junk junk");

      if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Junk Junk")) == 0) {
        throw "Expected boat, didn't have boat!";
      }

      (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=woods&action=woods_hippy");

      if (!this.hasBoat()) {
        throw "We should've had a boat!";
      }
    } }]);return QuestGrabBoatJunkyard;}();


function isJunkYardBoatApproach() {
  var junkKey = external_kolmafia_namespaceObject.Item.get("funky junk key");
  var boatParts = [
  "old claw-foot bathtub",
  "old clothesline pole",
  "antique cigar sign"].
  map((s) => external_kolmafia_namespaceObject.Item.get(s));

  // If we haven't absorbed sharpener yet
  if (
  !AbsorbsProvider.getReabsorbedMonsters().includes(
  external_kolmafia_namespaceObject.Monster.get("junksprite sharpener")))

  {
    return true;
  }

  // Else if we have made some decentish progress
  return (
    (0,external_kolmafia_namespaceObject.itemAmount)(junkKey) +
    (0,external_kolmafia_namespaceObject.closetAmount)(junkKey) +
    boatParts.reduce((i, p) => (0,external_kolmafia_namespaceObject.availableAmount)(p) + i, 0) >=
    3);

}
;// CONCATENATED MODULE: ./src/quests/custom/QuestGrabBoatVacation.ts
function QuestGrabBoatVacation_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGrabBoatVacation_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestGrabBoatVacation_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGrabBoatVacation_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGrabBoatVacation_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGrabBoatVacation_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestGrabBoatVacation = /*#__PURE__*/function () {function QuestGrabBoatVacation() {QuestGrabBoatVacation_classCallCheck(this, QuestGrabBoatVacation);QuestGrabBoatVacation_defineProperty(this, "junkKey",
    external_kolmafia_namespaceObject.Item.get("funky junk key"));QuestGrabBoatVacation_defineProperty(this, "boatParts",
    [
    "old claw-foot bathtub",
    "old clothesline pole",
    "antique cigar sign"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));QuestGrabBoatVacation_defineProperty(this, "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));}QuestGrabBoatVacation_createClass(QuestGrabBoatVacation, [{ key: "getId", value:

    function getId() {
      return "Boat / Vacation";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "hasDesertAccess", value:

    function hasDesertAccess() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastDesertUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM19Hippy") == "unstarted") {
        return QuestStatus.READY;
      }

      if (this.hasBoat()) {
        return QuestStatus.COMPLETED;
      }

      if (isJunkYardBoatApproach()) {
        //    return QuestStatus.NOT_READY;
      }

      if (!this.hasDesertAccess()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() < 2000) {
        return QuestStatus.NOT_READY;
      }

      if (
      !GreySettings.isHippyMode() &&
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Brother Corsican's Blessing")) +
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("A Girl Named Sue")) >
      0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myAdventures)() < ((0,external_kolmafia_namespaceObject.myLevel)() < 11 ? 35 : 20)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "doHippyJunk", value:

    function doHippyJunk() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=woods&action=woods_smokesignals");
          (0,external_kolmafia_namespaceObject.runChoice)(1);
          (0,external_kolmafia_namespaceObject.runChoice)(2);
        } };

    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM19Hippy") == "unstarted") {
        return this.doHippyJunk();
      }

      return {
        location: null,
        run: () => {
          var scriptAvailable = (0,external_kolmafia_namespaceObject.availableAmount)(
          external_kolmafia_namespaceObject.Item.get("Shore Inc. Ship Trip Scrip"));


          var props = new PropertyManager();
          props.setChoice(793, 1);

          try {
            for (var i = 0; i < 3 - scriptAvailable; i++) {
              greyAdv(external_kolmafia_namespaceObject.Location.get("The Shore, Inc. Travel Agency"));
            }
          } finally {
            props.resetAll();
          }

          var planks = external_kolmafia_namespaceObject.Item.get("Dingy Planks");

          if ((0,external_kolmafia_namespaceObject.availableAmount)(planks) == 0) {
            (0,external_kolmafia_namespaceObject.retrieveItem)(planks);
          }

          (0,external_kolmafia_namespaceObject.cliExecute)("make dinghy plans");
          (0,external_kolmafia_namespaceObject.use)(external_kolmafia_namespaceObject.Item.get("Dinghy plans"));

          if (!this.hasBoat()) {
            throw "We should've had a boat!";
          }
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (!GreySettings.isHippyMode()) {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.myLevel)() == 11 && !isJunkYardBoatApproach()) {
        return true;
      }

      return false;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 9;
    } }, { key: "hasBoat", value:

    function hasBoat() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastIslandUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }]);return QuestGrabBoatVacation;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestInitialPulls.ts
function QuestInitialPulls_toConsumableArray(arr) {return QuestInitialPulls_arrayWithoutHoles(arr) || QuestInitialPulls_iterableToArray(arr) || QuestInitialPulls_unsupportedIterableToArray(arr) || QuestInitialPulls_nonIterableSpread();}function QuestInitialPulls_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestInitialPulls_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestInitialPulls_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestInitialPulls_arrayLikeToArray(arr);}function QuestInitialPulls_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestInitialPulls_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestInitialPulls_slicedToArray(arr, i) {return QuestInitialPulls_arrayWithHoles(arr) || QuestInitialPulls_iterableToArrayLimit(arr, i) || QuestInitialPulls_unsupportedIterableToArray(arr, i) || QuestInitialPulls_nonIterableRest();}function QuestInitialPulls_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestInitialPulls_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestInitialPulls_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestInitialPulls_arrayLikeToArray(o, minLen);}function QuestInitialPulls_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestInitialPulls_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function QuestInitialPulls_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestInitialPulls_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestInitialPulls_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestInitialPulls_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestInitialPulls_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestInitialPulls_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestInitialPulls_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestInitialPulls_setPrototypeOf(subClass, superClass);}function QuestInitialPulls_setPrototypeOf(o, p) {QuestInitialPulls_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestInitialPulls_setPrototypeOf(o, p);}function QuestInitialPulls_createSuper(Derived) {var hasNativeReflectConstruct = QuestInitialPulls_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestInitialPulls_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestInitialPulls_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestInitialPulls_possibleConstructorReturn(this, result);};}function QuestInitialPulls_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestInitialPulls_assertThisInitialized(self);}function QuestInitialPulls_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestInitialPulls_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestInitialPulls_getPrototypeOf(o) {QuestInitialPulls_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestInitialPulls_getPrototypeOf(o);}function QuestInitialPulls_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestInitialPulls = /*#__PURE__*/function (_TaskInfo) {QuestInitialPulls_inherits(QuestInitialPulls, _TaskInfo);var _super = QuestInitialPulls_createSuper(QuestInitialPulls);function QuestInitialPulls() {var _this;QuestInitialPulls_classCallCheck(this, QuestInitialPulls);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "requiredPulls",
    [
    [external_kolmafia_namespaceObject.Item.get("Yule Hatchet"), -150],
    [external_kolmafia_namespaceObject.Item.get("Teacher's Pen"), -70]]);QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "possiblePulls",

    [
    [external_kolmafia_namespaceObject.Item.get("Giant Yellow Hat"), -35],
    [external_kolmafia_namespaceObject.Item.get("Mafia Thumb Ring"), -30],
    [external_kolmafia_namespaceObject.Item.get("Portable cassette player"), -20],
    [external_kolmafia_namespaceObject.Item.get("Pantsgiving"), -20]]);QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "paths", void 0);QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "donePulls", void 0);return _this;}QuestInitialPulls_createClass(QuestInitialPulls, [{ key: "createPaths", value:




    function createPaths(assumeUnstarted) {
      var mlItem = ["HOA regulation book", "Space Trip safety headphones"].
      map((s) => external_kolmafia_namespaceObject.Item.get(s)).
      filter((i) => (0,external_kolmafia_namespaceObject.availableAmount)(i) + (0,external_kolmafia_namespaceObject.storageAmount)(i) > 0);

      if (mlItem.length > 0) {
        this.requiredPulls.push([mlItem[0], -30]);
      }

      this.paths = [];
      this.paths.push(new PossiblePath(0));

      // If we're not assuming we're unstarted, then filter all the pulls we already have
      if (!assumeUnstarted) {
        this.requiredPulls = this.requiredPulls.filter(
        (_ref) => {var _ref2 = QuestInitialPulls_slicedToArray(_ref, 1),i = _ref2[0];return (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0;});

        this.possiblePulls = this.possiblePulls.filter(
        (_ref3) => {var _ref4 = QuestInitialPulls_slicedToArray(_ref3, 1),i = _ref4[0];return (
            (0,external_kolmafia_namespaceObject.availableAmount)(i) == 0 && (
            (0,external_kolmafia_namespaceObject.historicalPrice)(i) < 50000 || (0,external_kolmafia_namespaceObject.storageAmount)(i) > 0));});

      }

      this.paths.push(this.getTotals(this.requiredPulls));

      // Need to make this better.. Its a real laugh.
      var _iterator = QuestInitialPulls_createForOfIteratorHelper(getAllCombinations(this.possiblePulls)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combination = _step.value;
          this.paths.push(this.getTotals([].concat(QuestInitialPulls_toConsumableArray(this.requiredPulls), QuestInitialPulls_toConsumableArray(combination))));
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getId", value:

    function getId() {
      return "Misc / Initial Pulls";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getTotals", value:

    function getTotals(items) {
      /*items = items.filter(
        ([i]) => storageAmount(i) > 0 || historicalPrice(i) < 50000
      );*/

      var advs = items.map((_ref5) => {var _ref6 = QuestInitialPulls_slicedToArray(_ref5, 2),amount = _ref6[1];return amount;}).reduce((p, n) => p + n, 0);

      var path = new PossiblePath(advs);

      items.forEach((_ref7) => {var _ref8 = QuestInitialPulls_slicedToArray(_ref7, 1),i = _ref8[0];return path.addPull(i);});

      return path;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status(path) {
      if (
      this.donePulls ||
      (0,external_kolmafia_namespaceObject.pullsRemaining)() <= 0 ||
      GreySettings.isHardcoreMode() ||
      path != null && !path.canUse(ResourceCategory.PULL))
      {
        this.donePulls = true;
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          this.donePulls = true;var _iterator2 = QuestInitialPulls_createForOfIteratorHelper(

          path.pulls),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var item = _step2.value;
              if (hasPulled(item)) {
                continue;
              }

              GreyPulls.tryPull(item, 25000);
              path.addUsed(ResourceCategory.PULL);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          var failedPulls = path.pulls.filter((i) => (0,external_kolmafia_namespaceObject.itemAmount)(i) == 0);

          if (failedPulls.length > 0) {
            throw "Failed to pull the items " + failedPulls.join(", ");
          }
        } };

    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }]);return QuestInitialPulls;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/custom/QuestInitialStart.ts
function QuestInitialStart_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestInitialStart_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestInitialStart_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestInitialStart_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestInitialStart_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestInitialStart_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestInitialStart_setPrototypeOf(subClass, superClass);}function QuestInitialStart_setPrototypeOf(o, p) {QuestInitialStart_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestInitialStart_setPrototypeOf(o, p);}function QuestInitialStart_createSuper(Derived) {var hasNativeReflectConstruct = QuestInitialStart_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestInitialStart_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestInitialStart_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestInitialStart_possibleConstructorReturn(this, result);};}function QuestInitialStart_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestInitialStart_assertThisInitialized(self);}function QuestInitialStart_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestInitialStart_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestInitialStart_getPrototypeOf(o) {QuestInitialStart_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestInitialStart_getPrototypeOf(o);}function QuestInitialStart_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestInitialStart = /*#__PURE__*/function (_TaskInfo) {QuestInitialStart_inherits(QuestInitialStart, _TaskInfo);var _super = QuestInitialStart_createSuper(QuestInitialStart);function QuestInitialStart() {var _this;QuestInitialStart_classCallCheck(this, QuestInitialStart);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "familiar",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "equip",
    external_kolmafia_namespaceObject.Item.get("Grey Down Vest"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "desiredLevel", void 0);QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "weightRequired", void 0);QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "spaceBlanket",


    external_kolmafia_namespaceObject.Item.get("Space Blanket"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "mayday",
    external_kolmafia_namespaceObject.Item.get("MayDay supply package"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "saber",
    external_kolmafia_namespaceObject.Item.get("Fourth of May Cosplay Saber"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "flimsyScraps",
    external_kolmafia_namespaceObject.Item.get("Flimsy hardwood scraps"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "birchBattery",
    external_kolmafia_namespaceObject.Item.get("Birch battery"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "mummingTrunk",
    external_kolmafia_namespaceObject.Item.get("mumming trunk"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "mickyCard",
    external_kolmafia_namespaceObject.Item.get("1952 Mickey Mantle card"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "paths", void 0);return _this;}QuestInitialStart_createClass(QuestInitialStart, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [];
      this.paths.push(new PossiblePath(0));

      if (!assumeUnstarted) {
        if ((0,external_kolmafia_namespaceObject.getProperty)("_deckCardsSeen").includes("Mickey")) {
          return;
        }
      }

      var cardPath = new PossiblePath(0);
      cardPath.addMeat(-30000); // Say the initial meat is worth 20k of boombox profit with special seasoning, then 10k for the card worth,

      this.paths.push(cardPath);
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.mayday) > 0) {
        return QuestStatus.READY;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("hasMaydayContract") == "true" &&
      (0,external_kolmafia_namespaceObject.getProperty)("_maydayDropped") == "false")
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("breakfastCompleted") == "false") {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.saber) > 0 && (0,external_kolmafia_namespaceObject.getProperty)("_saberMod") == "0") {
        return QuestStatus.READY;
      }

      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        run: () => {
          if (!(0,external_kolmafia_namespaceObject.hippyStoneBroken)() && (0,external_kolmafia_namespaceObject.toBoolean)((0,external_kolmafia_namespaceObject.getProperty)("greyEnablePvP"))) {
            (0,external_kolmafia_namespaceObject.print)("Enabling pvp as defined by 'greyEnablePvP'", "blue");
            (0,external_kolmafia_namespaceObject.visitUrl)("peevpee.php?action=smashstone&pwd&confirm=on", true);
            (0,external_kolmafia_namespaceObject.visitUrl)("peevpee.php?place=fight");
          }

          if (
          (0,external_kolmafia_namespaceObject.getProperty)("backupCameraReverserEnabled") != "true" &&
          (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Backup Camera")) > 0)
          {
            (0,external_kolmafia_namespaceObject.print)("Now reversing the backup camera..", "blue");
            (0,external_kolmafia_namespaceObject.cliExecute)("backupcamera reverser on");
          }

          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.saber) > 0 &&
          (0,external_kolmafia_namespaceObject.getProperty)("_saberMod") == "0")
          {
            (0,external_kolmafia_namespaceObject.cliExecute)("saber resistance");
          }

          if (
          GreySettings.greyUseMummery &&
          (0,external_kolmafia_namespaceObject.getProperty)("_mummeryUses") == "" &&
          (0,external_kolmafia_namespaceObject.availableAmount)(this.mummingTrunk) > 0)
          {
            (0,external_kolmafia_namespaceObject.useFamiliar)(this.familiar);

            if ((0,external_kolmafia_namespaceObject.myFamiliar)() == this.familiar) {
              (0,external_kolmafia_namespaceObject.cliExecute)("mummery mp");
            } else {
              (0,external_kolmafia_namespaceObject.print)("Unable to apply mp regen on goose", "Red");
            }
          }

          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("SongBoom&trade; BoomBox")) > 0 &&
          (0,external_kolmafia_namespaceObject.getProperty)("_boomBoxSongsLeft") == "11")
          {
            (0,external_kolmafia_namespaceObject.cliExecute)("boombox meat");
          }

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.mayday) > 0) {
            (0,external_kolmafia_namespaceObject.use)(this.mayday);

            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.spaceBlanket) > 0) {
              (0,external_kolmafia_namespaceObject.autosell)(this.spaceBlanket, 1);
            }
          }

          if ((0,external_kolmafia_namespaceObject.getProperty)("breakfastCompleted") == "false") {
            var breakfastScript = (0,external_kolmafia_namespaceObject.getProperty)("breakfastScript");
            var cloverProp =
            "grabClovers" + ((0,external_kolmafia_namespaceObject.inHardcore)() ? "Hardcore" : "Softcore");
            var propValue = (0,external_kolmafia_namespaceObject.getProperty)(cloverProp);

            try {
              (0,external_kolmafia_namespaceObject.setProperty)(cloverProp, "true");

              if (breakfastScript == "") {
                breakfastScript = "breakfast";
              }

              (0,external_kolmafia_namespaceObject.cliExecute)(breakfastScript);
            } finally {
              (0,external_kolmafia_namespaceObject.setProperty)(cloverProp, propValue);
            }
          }

          if (
          (0,external_kolmafia_namespaceObject.availableAmount)(this.flimsyScraps) > 0 &&
          (0,external_kolmafia_namespaceObject.availableAmount)(this.birchBattery) == 0)
          {
            (0,external_kolmafia_namespaceObject.cliExecute)("acquire " + this.birchBattery.name);
          }

          if (path.canUse(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT)) {
            path.
            getResource(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT).
            pickCard("Mickey");

            if ((0,external_kolmafia_namespaceObject.availableAmount)(this.mickyCard) > 0) {
              path.addUsed(ResourceCategory.DECK_OF_EVERY_CARD_CHEAT);
              (0,external_kolmafia_namespaceObject.autosell)(this.mickyCard, 1);
            } else {
              throw "Expected to have sold a " + this.mickyCard;
            }
          }

          if ((0,external_kolmafia_namespaceObject.getProperty)("breakfastCompleted") == "false") {
            throw "Failed to complete breakfast! Did you set something that doesn't call breakfast, to `breakfastScript`?";
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Misc / InitialStart";
    } }]);return QuestInitialStart;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/custom/QuestJuneCleaver.ts
function QuestJuneCleaver_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestJuneCleaver_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestJuneCleaver_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestJuneCleaver_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestJuneCleaver_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestJuneCleaver_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestJuneCleaver = /*#__PURE__*/function () {function QuestJuneCleaver() {QuestJuneCleaver_classCallCheck(this, QuestJuneCleaver);QuestJuneCleaver_defineProperty(this, "warren",
    external_kolmafia_namespaceObject.Location.get("The Dire Warren"));QuestJuneCleaver_defineProperty(this, "cleaver",
    external_kolmafia_namespaceObject.Item.get("June Cleaver"));}QuestJuneCleaver_createClass(QuestJuneCleaver, [{ key: "getId", value:

    function getId() {
      return "Misc / JuneCleaver";
    } }, { key: "level", value:

    function level() {
      return 3;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.cleaver) == 0) {
        return QuestStatus.COMPLETED;
      }

      var fightsLeft = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_juneCleaverFightsLeft"));

      if (fightsLeft > 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.warren,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.maximize)("+equip " + this.cleaver.name + " -tie", false);

          if ((0,external_kolmafia_namespaceObject.equippedAmount)(this.cleaver) == 0) {
            throw "Something went wrong. Expected to be holding the june cleaver";
          }

          var turn = (0,external_kolmafia_namespaceObject.turnsPlayed)();

          greyAdv(this.warren);

          if (turn != (0,external_kolmafia_namespaceObject.turnsPlayed)()) {
            throw "Something went wrong, expected to hit a june cleaver NC but instead spent a turn.";
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestJuneCleaver;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestMoonSign.ts
function QuestMoonSign_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestMoonSign_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestMoonSign_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestMoonSign_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestMoonSign_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestMoonSign_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}






var QuestMoonSign = /*#__PURE__*/function () {function QuestMoonSign() {QuestMoonSign_classCallCheck(this, QuestMoonSign);QuestMoonSign_defineProperty(this, "spoon",
    external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon"));QuestMoonSign_defineProperty(this, "asdon",
    external_kolmafia_namespaceObject.Item.get("Asdon Martin keyfob"));QuestMoonSign_defineProperty(this, "knollAbsorb",
    external_kolmafia_namespaceObject.Monster.get("revolving bugbear"));QuestMoonSign_defineProperty(this, "gnomeAbsorb",
    external_kolmafia_namespaceObject.Monster.get("vicious gnauga"));QuestMoonSign_defineProperty(this, "canadiaAbsorb",
    external_kolmafia_namespaceObject.Monster.get("Cloud of disembodied whiskers"));QuestMoonSign_defineProperty(this, "gnomeSkills",
    [
    "Powers of Observatiogn",
    "Torso Awareness",
    "Gnefarious Pickpocketing "].
    map((s) => external_kolmafia_namespaceObject.Skill.get(s)));}QuestMoonSign_createClass(QuestMoonSign, [{ key: "getId", value:

    function getId() {
      return "Misc / Moonsign";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_namespaceObject.getProperty)("moonTuned") != "false" ||
      (0,external_kolmafia_namespaceObject.availableAmount)(this.spoon) == 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (
      moonSigns.find(
      (s) => {var _GreySettings$greyTun;return s.toLowerCase() == ((_GreySettings$greyTun = GreySettings.greyTuneMoonSpoon) === null || _GreySettings$greyTun === void 0 ? void 0 : _GreySettings$greyTun.toLowerCase());}) ==
      null)
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.knollAvailable)() && this.isKnollDone()) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.gnomadsAvailable)() && this.isGnomesDone()) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.canadiaAvailable)() && this.isCanadaDone()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          /*let confirm = userConfirm("Ready to change moon signs?");
           if (!confirm) {
            throw "User wasn't ready";
          }*/


          (0,external_kolmafia_namespaceObject.cliExecute)("spoon " + GreySettings.greyTuneMoonSpoon);

          if ((0,external_kolmafia_namespaceObject.getProperty)("moonTuned") != "true") {
            throw "Something went wrong when trying to moon spoon tune!";
          }

          (0,external_kolmafia_namespaceObject.cliExecute)("refresh all");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "isKnollDone", value:

    function isKnollDone() {
      // We can get costume from here
      if ((0,external_kolmafia_namespaceObject.getWorkshed)() == this.asdon && !(0,external_kolmafia_namespaceObject.haveOutfit)("Bugbear Costume")) {
        return false;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questM01Untinker") != "finished") {
        return false;
      }

      // We can make car from here
      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_namespaceObject.myAscensions)()) {
        return false;
      }

      if (!AbsorbsProvider.getReabsorbedMonsters().includes(this.knollAbsorb)) {
        return false;
      }

      return true;
    } }, { key: "isGnomesDone", value:

    function isGnomesDone() {
      if (this.gnomeSkills.find((s) => !(0,external_kolmafia_namespaceObject.haveSkill)(s)) != null) {
        return false;
      }

      if (!AbsorbsProvider.getReabsorbedMonsters().includes(this.gnomeAbsorb)) {
        return false;
      }

      return true;
    } }, { key: "isCanadaDone", value:

    function isCanadaDone() {
      if (!AbsorbsProvider.getReabsorbedMonsters().includes(this.canadiaAbsorb)) {
        return false;
      }

      return true;
    } }]);return QuestMoonSign;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestNpcStuff.ts
function QuestNpcStuff_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestNpcStuff_setPrototypeOf(subClass, superClass);}function QuestNpcStuff_setPrototypeOf(o, p) {QuestNpcStuff_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestNpcStuff_setPrototypeOf(o, p);}function QuestNpcStuff_createSuper(Derived) {var hasNativeReflectConstruct = QuestNpcStuff_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestNpcStuff_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestNpcStuff_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestNpcStuff_possibleConstructorReturn(this, result);};}function QuestNpcStuff_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestNpcStuff_assertThisInitialized(self);}function QuestNpcStuff_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestNpcStuff_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestNpcStuff_getPrototypeOf(o) {QuestNpcStuff_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestNpcStuff_getPrototypeOf(o);}function QuestNpcStuff_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestNpcStuff_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestNpcStuff_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestNpcStuff_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestNpcStuff_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestNpcStuff_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestNPCStuff = /*#__PURE__*/function () {function QuestNPCStuff() {QuestNpcStuff_classCallCheck(this, QuestNPCStuff);QuestNpcStuff_defineProperty(this, "children",
    [
    new QuestMeatSmith(),
    new QuestArtist(),
    new QuestGnomeTrainer(),
    new QuestMadBaker(),
    new QuestUntinker(),
    new QuestDruggie(),
    new QuestKnollMayor(),
    new QuestDoctor()]);}QuestNpcStuff_createClass(QuestNPCStuff, [{ key: "getId", value:


    function getId() {
      return "NPC / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }]);return QuestNPCStuff;}();var


QuestDoctor = /*#__PURE__*/function () {function QuestDoctor() {QuestNpcStuff_classCallCheck(this, QuestDoctor);}QuestNpcStuff_createClass(QuestDoctor, [{ key: "getId", value:
    function getId() {
      return "NPC / Doctor";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM24Doc") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=doc&action=talk");
          (0,external_kolmafia_namespaceObject.runChoice)(1);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestDoctor;}();var


QuestKnollMayor = /*#__PURE__*/function () {function QuestKnollMayor() {QuestNpcStuff_classCallCheck(this, QuestKnollMayor);QuestNpcStuff_defineProperty(this, "spoon",
    external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon"));}QuestNpcStuff_createClass(QuestKnollMayor, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Knoll Mayor";
    } }, { key: "level", value:

    function level() {
      return 2;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM03Bugbear") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.knollAvailable)()) {
        if (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.spoon) > 0 &&
        (0,external_kolmafia_namespaceObject.getProperty)("moonTuned") == "false" &&
        getMoonZone(GreySettings.greyTuneMoonSpoon) == "Knoll")
        {
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL02Larva") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        outfit: GreyOutfit.IGNORE_OUTFIT,
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=knoll_friendly&action=dk_mayor");
        } };

    } }]);return QuestKnollMayor;}();var


QuestDruggie = /*#__PURE__*/function () {function QuestDruggie() {QuestNpcStuff_classCallCheck(this, QuestDruggie);}QuestNpcStuff_createClass(QuestDruggie, [{ key: "getId", value:
    function getId() {
      return "NPC / Druggie";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastGoofballBuy")) == (0,external_kolmafia_namespaceObject.myAscensions)()) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL03Rat") < 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=woods");
          (0,external_kolmafia_namespaceObject.visitUrl)("tavern.php?place=susguy&action=buygoofballs", true);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestDruggie;}();var


QuestGnomeTrainer = /*#__PURE__*/function (_TaskInfo) {QuestNpcStuff_inherits(QuestGnomeTrainer, _TaskInfo);var _super = QuestNpcStuff_createSuper(QuestGnomeTrainer);function QuestGnomeTrainer() {var _this;QuestNpcStuff_classCallCheck(this, QuestGnomeTrainer);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "skills",
    [
    "Torso Awareness",
    "Powers of Observatiogn",
    "Gnefarious Pickpocketing"].
    map((s) => external_kolmafia_namespaceObject.Skill.get(s)));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "letter",
    external_kolmafia_namespaceObject.Item.get("Letter for Melvign the Gnome"));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "shirt",
    external_kolmafia_namespaceObject.Item.get('"Remember the Trees" Shirt'));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "shirtPull",
    new PossiblePath(0).addPull(_this.shirt));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "shirtlessPull",
    new PossiblePath(10));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "torso",
    external_kolmafia_namespaceObject.Skill.get("Torso Awareness"));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "spoon",
    external_kolmafia_namespaceObject.Item.get("hewn moon-rune spoon"));return _this;}QuestNpcStuff_createClass(QuestGnomeTrainer, [{ key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.shirtPull, this.shirtlessPull];
    } }, { key: "getId", value:

    function getId() {
      return "NPC / GnomeSkills";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.letter) > 0) {
        //  return QuestStatus.READY;
      }

      if (
      getQuestStatus("questL13Final") >= 0 ||
      this.getSkillLacking() == null)
      {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.gnomadsAvailable)()) {
        if (
        getMoonZone(GreySettings.greyTuneMoonSpoon) == "Gnomad" &&
        (0,external_kolmafia_namespaceObject.getProperty)("moonTuned") != "true")
        {
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.COMPLETED;
      }

      var meat = 10000 + ((0,external_kolmafia_namespaceObject.haveSkill)(this.skills[0]) ? 5000 : 0);

      if ((0,external_kolmafia_namespaceObject.myMeat)() < meat) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getSkillLacking", value:

    function getSkillLacking() {
      return this.skills.find((s) => !(0,external_kolmafia_namespaceObject.haveSkill)(s));
    } }, { key: "run", value:

    function run(path) {
      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.letter) > 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: () => {
            (0,external_kolmafia_namespaceObject.use)(this.letter);
          } };

      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: () => {
          var skill = this.getSkillLacking();

          (0,external_kolmafia_namespaceObject.visitUrl)("gnomes.php?action=trainskill&whichskill=" + (0,external_kolmafia_namespaceObject.toInt)(skill));

          if (
          path.canUse(ResourceCategory.PULL) &&
          (0,external_kolmafia_namespaceObject.haveSkill)(skill) &&
          skill == this.torso)
          {
            GreyPulls.tryPull(this.shirt);
            path.addUsed(ResourceCategory.PULL);
          }
        } };

    } }]);return QuestGnomeTrainer;}(TaskInfo);var


QuestArtist = /*#__PURE__*/function () {function QuestArtist() {QuestNpcStuff_classCallCheck(this, QuestArtist);QuestNpcStuff_defineProperty(this, "paintbrush",
    external_kolmafia_namespaceObject.Item.get("Pretentious Paintbrush"));QuestNpcStuff_defineProperty(this, "palette",
    external_kolmafia_namespaceObject.Item.get("Pretentious Palette"));QuestNpcStuff_defineProperty(this, "pail",
    external_kolmafia_namespaceObject.Item.get("Pail of Pretentious Paint"));}QuestNpcStuff_createClass(QuestArtist, [{ key: "level", value:

    function level() {
      return 1;
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Painter";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM02Artist") == "finished") {
        return QuestStatus.COMPLETED;
      }

      // Don't start it since it's not a free turn
      // User has to start it.
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM02Artist") == "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if (this.hasAllItems()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "startQuest", value:

    function startQuest() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_noquest");

          (0,external_kolmafia_namespaceObject.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_noquest&getquest=1");

          (0,external_kolmafia_namespaceObject.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_quest");

        } };

    } }, { key: "turnInQuest", value:

    function turnInQuest() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_quest");

        } };

    } }, { key: "run", value:

    function run() {
      if (this.hasAllItems()) {
        return this.turnInQuest();
      }

      return this.startQuest();
    } }, { key: "hasAllItems", value:

    function hasAllItems() {
      return (
        (0,external_kolmafia_namespaceObject.availableAmount)(this.paintbrush) > 0 &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.pail) > 0 &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.palette) > 0);

    } }]);return QuestArtist;}();var


QuestMadBaker = /*#__PURE__*/function () {function QuestMadBaker() {QuestNpcStuff_classCallCheck(this, QuestMadBaker);}QuestNpcStuff_createClass(QuestMadBaker, [{ key: "level", value:
    function level() {
      return 1;
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Baker";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM25Armorer") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questM25Armorer") == "step4") {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questM25Armorer") != "unstarted") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "turnInPie", value:

    function turnInPie() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=armory");
          (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=" + (0,external_kolmafia_namespaceObject.lastChoice)() + "&option=2&pwd=");
        } };

    } }, { key: "startQuest", value:

    function startQuest() {
      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=armory");
          (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=armory&action=talk");
          (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?pwd=&whichchoice=1065&option=1");

          if ((0,external_kolmafia_namespaceObject.getProperty)("choiceAdventure1061") == "0") {
            (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1061", "1");
          }
        } };

    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM25Armorer") == "unstarted") {
        return this.startQuest();
      }

      return this.turnInPie();
    } }]);return QuestMadBaker;}();var


QuestUntinker = /*#__PURE__*/function () {function QuestUntinker() {QuestNpcStuff_classCallCheck(this, QuestUntinker);QuestNpcStuff_defineProperty(this, "item",
    external_kolmafia_namespaceObject.Item.get("Rusty screwdriver"));}QuestNpcStuff_createClass(QuestUntinker, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Untinkerer";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM01Untinker") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questM01Untinker") == "unstarted") {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.item) == 0 && !(0,external_kolmafia_namespaceObject.knollAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM01Untinker") == "unstarted") {
        return {
          location: null,
          run: () => {
            (0,external_kolmafia_namespaceObject.visitUrl)(
            "place.php?whichplace=forestvillage&preaction=screwquest&action=fv_untinker_quest");

            (0,external_kolmafia_namespaceObject.setProperty)("questM01Untinker", "started");
          } };

      }

      if ((0,external_kolmafia_namespaceObject.knollAvailable)() && (0,external_kolmafia_namespaceObject.availableAmount)(this.item) == 0) {
        return {
          location: null,
          run: () => {
            (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=knoll_friendly&action=dk_innabox");
          } };

      }

      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=forestvillage&action=fv_untinker");
        } };

    } }]);return QuestUntinker;}();var


QuestMeatSmith = /*#__PURE__*/function () {function QuestMeatSmith() {QuestNpcStuff_classCallCheck(this, QuestMeatSmith);}QuestNpcStuff_createClass(QuestMeatSmith, [{ key: "getId", value:
    function getId() {
      return "NPC / Meatsmith";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM23Meatsmith") == "unstarted") {
        return {
          location: null,
          run: () => {
            (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=meatsmith");
            (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=meatsmith&action=talk");
            (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=1059&option=1&pwd=");
          } };

      }

      return {
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.visitUrl)("shop.php?whichshop=meatsmith");
          (0,external_kolmafia_namespaceObject.visitUrl)("choice.php?whichchoice=" + (0,external_kolmafia_namespaceObject.lastChoice)() + "&option=2&pwd=");
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questM23Meatsmith") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questM23Meatsmith") == "started") {
        return QuestStatus.NOT_READY; // Manual complete or not at all
      }

      return QuestStatus.READY;
    } }]);return QuestMeatSmith;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestPowerLeveling.ts
function QuestPowerLeveling_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestPowerLeveling_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestPowerLeveling_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestPowerLeveling_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestPowerLeveling_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestPowerLeveling_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestPowerLeveling = /*#__PURE__*/function () {







  function QuestPowerLeveling(desiredLevel) {QuestPowerLeveling_classCallCheck(this, QuestPowerLeveling);QuestPowerLeveling_defineProperty(this, "property", "greyYouLastPowerLeveled");QuestPowerLeveling_defineProperty(this, "familiar", external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestPowerLeveling_defineProperty(this, "equip", external_kolmafia_namespaceObject.Item.get("Grey Down Vest"));QuestPowerLeveling_defineProperty(this, "skill", external_kolmafia_namespaceObject.Skill.get("Infinite Loop"));QuestPowerLeveling_defineProperty(this, "desiredLevel", void 0);QuestPowerLeveling_defineProperty(this, "weightRequired", void 0);
    this.desiredLevel = desiredLevel;

    this.weightRequired = this.getWeightNeededToReachLevel(desiredLevel);

    if (this.weightRequired > 20) {
      throw (
        "You want to reach level " +
        desiredLevel +
        " but to do that, the goose would have to weigh " +
        this.weightRequired +
        "...");

    }

    var expNeeded = this.weightRequired ^ 2;

    if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) <= 1) {
      expNeeded -= 81; // Short order cook
    } else {
      expNeeded -= this.familiar.experience;
    }

    var turns = expNeeded / 5; // Expect to gain 5 exp per arena fight

    if (turns > 20) {
      throw (
        "Sorry, I can't let you do this. That'd burn more than 20 turns to a total of est " +
        turns);

    }
  }QuestPowerLeveling_createClass(QuestPowerLeveling, [{ key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_namespaceObject.myLevel)() < 5 && (0,external_kolmafia_namespaceObject.myMeat)() >= 100;
    } }, { key: "getWeightNeededToReachLevel", value:

    function getWeightNeededToReachLevel(level) {
      var statsNeeded = this.getStatsRequired(level);

      return 5 + Math.ceil((0,external_kolmafia_namespaceObject.squareRoot)(statsNeeded));
    } }, { key: "getStatsRequired", value:

    function getStatsRequired(level) {
      return (level - 1 ^ 2) + 4 ^ 2;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_namespaceObject.myLevel)() >= this.desiredLevel ||
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)(this.property)) == (0,external_kolmafia_namespaceObject.myAscensions)())
      {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        outfit: new GreyOutfit("familiar experience -tie"),
        location: null,
        run: () => {
          (0,external_kolmafia_namespaceObject.useFamiliar)(this.familiar);
          (0,external_kolmafia_namespaceObject.maximize)("familiar experience", false);

          var weightNeeded = this.getWeightNeededToReachLevel(
          this.desiredLevel);


          while (
          (0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) < weightNeeded &&
          (0,external_kolmafia_namespaceObject.myAdventures)() > 20 &&
          (0,external_kolmafia_namespaceObject.myMeat)() >= 100)
          {
            if (
            (0,external_kolmafia_namespaceObject.equippedAmount)(this.equip) == 0 &&
            (0,external_kolmafia_namespaceObject.availableAmount)(this.equip) > 0)
            {
              (0,external_kolmafia_namespaceObject.equip)(this.equip);
            }

            (0,external_kolmafia_namespaceObject.cliExecute)("train turns 1");
          }

          (0,external_kolmafia_namespaceObject.setProperty)(this.property, (0,external_kolmafia_namespaceObject.myAscensions)() + "");

          if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) < weightNeeded) {
            throw (
              "Oh god! You are a disappointment Mr Goose! You only weigh " +
              (0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) +
              " of the " +
              weightNeeded +
              " we wanted!");

            return;
          }

          if ((0,external_kolmafia_namespaceObject.myLevel)() < 4) {
            (0,external_kolmafia_namespaceObject.print)("Now we just need to travel somewhere to burn this exp");

            (0,external_kolmafia_namespaceObject.maximize)(new GreyOutfit().createString(), false);
            greyAdv(
            external_kolmafia_namespaceObject.Location.get("The Dire Warren"),
            null,
            new AdventureSettings().setFinishingBlowMacro(
            Macro.trySkill(external_kolmafia_namespaceObject.Skill.get("Convert Matter to Pomade")).step(
            greyKillingBlow(new GreyOutfit()))));



          }
          // Eh, just burn it in knob as delay.
          // TODO
        } };

    } }, { key: "getId", value:

    function getId() {
      return "Misc / PowerLeveling";
    } }]);return QuestPowerLeveling;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestLocketInfiniteLoop.ts
function QuestLocketInfiniteLoop_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestLocketInfiniteLoop_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestLocketInfiniteLoop_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestLocketInfiniteLoop_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestLocketInfiniteLoop_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestLocketInfiniteLoop_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestLocketInfiniteLoop_setPrototypeOf(subClass, superClass);}function QuestLocketInfiniteLoop_setPrototypeOf(o, p) {QuestLocketInfiniteLoop_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestLocketInfiniteLoop_setPrototypeOf(o, p);}function QuestLocketInfiniteLoop_createSuper(Derived) {var hasNativeReflectConstruct = QuestLocketInfiniteLoop_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestLocketInfiniteLoop_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestLocketInfiniteLoop_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestLocketInfiniteLoop_possibleConstructorReturn(this, result);};}function QuestLocketInfiniteLoop_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestLocketInfiniteLoop_assertThisInitialized(self);}function QuestLocketInfiniteLoop_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestLocketInfiniteLoop_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestLocketInfiniteLoop_getPrototypeOf(o) {QuestLocketInfiniteLoop_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestLocketInfiniteLoop_getPrototypeOf(o);}function QuestLocketInfiniteLoop_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestLocketInfiniteLoop = /*#__PURE__*/function (_TaskInfo) {QuestLocketInfiniteLoop_inherits(QuestLocketInfiniteLoop, _TaskInfo);var _super = QuestLocketInfiniteLoop_createSuper(QuestLocketInfiniteLoop);function QuestLocketInfiniteLoop() {var _this;QuestLocketInfiniteLoop_classCallCheck(this, QuestLocketInfiniteLoop);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "monster",
    external_kolmafia_namespaceObject.Monster.get("Pygmy witch lawyer"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "skill",
    external_kolmafia_namespaceObject.Skill.get("Infinite Loop"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "effect",
    external_kolmafia_namespaceObject.Effect.get("Everything Looks Yellow"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "instantKill",
    external_kolmafia_namespaceObject.Item.get("Flame orb"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "wish",
    external_kolmafia_namespaceObject.Item.get("Pocket Wish"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "fax",
    new PossiblePath(1).
    addFax(_this.monster).
    add(ResourceCategory.YELLOW_RAY).
    addIgnored("Cosplay Saber"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "pullWish",
    new PossiblePath(1).
    addConsumablePull(_this.wish).
    addConsumablePull(_this.instantKill));return _this;}QuestLocketInfiniteLoop_createClass(QuestLocketInfiniteLoop, [{ key: "level", value:

    function level() {
      return 1;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.fax, this.pullWish];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.haveEffect)(this.effect) > 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.myMeat)() < 350 || (0,external_kolmafia_namespaceObject.myLevel)() < 4) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      var outfit = new GreyOutfit();
      outfit.addBonus("+10 init");
      outfit.addBonus("-ml");
      outfit.hpRegenWeight = 1;
      outfit.mpRegenWeight = 1;

      if (path.canUse(ResourceCategory.YELLOW_RAY)) {
        path.getResource(ResourceCategory.YELLOW_RAY).prepare(outfit);
      }

      return {
        location: null,
        outfit: outfit,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.numericModifier)("Initiative") <= 40) {
            throw "Initiative is 40 or less, aborting to be safe as we can't be sure you'd get the jump.";
          }

          var props = new PropertyManager();
          var macro;
          var faxResource = path.getResource(ResourceCategory.FAXER);
          var yrResource = path.getResource(ResourceCategory.YELLOW_RAY);

          if (faxResource != null) {
            yrResource.prepare(null, props);
            macro = yrResource.macro();
          } else {
            macro = Macro.item(this.instantKill);
          }

          if (path.canUse(ResourceCategory.PULL)) {
            GreyPulls.tryPull(this.wish, 51000);

            if ((0,external_kolmafia_namespaceObject.itemAmount)(this.wish) == 0) {
              throw "Expected to have pulled a wish!";
            }

            GreyPulls.tryPull(this.instantKill, 10000);

            if ((0,external_kolmafia_namespaceObject.itemAmount)(this.instantKill) == 0) {
              throw "Expected to have pulled an instant kill source!";
            }

            path.addUsed(ResourceCategory.PULL);
            path.addUsed(ResourceCategory.PULL);
            faxResource = getResources().find((r) => r.id == "Wish");
          }

          faxResource.fax(this.monster);

          macro.submit();

          if ((0,external_kolmafia_namespaceObject.handlingChoice)() || (0,external_kolmafia_namespaceObject.currentRound)() != 0) {
            throw "We're supposed to be done with this infinite loop fight!";
          }

          if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) {
            throw "Expected to have Infinite Loop skill!";
          }
        } };

    } }, { key: "getId", value:

    function getId() {
      return "CombatLocket / InfiniteLoop";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestLocketInfiniteLoop;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/skills/QuestMPRegen.ts
function QuestMPRegen_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestMPRegen_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestMPRegen_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestMPRegen_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestMPRegen_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestMPRegen_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var QuestMPRegen = /*#__PURE__*/function () {function QuestMPRegen() {QuestMPRegen_classCallCheck(this, QuestMPRegen);QuestMPRegen_defineProperty(this, "realDung",
    external_kolmafia_namespaceObject.Location.get("The Dungeons of Doom"));QuestMPRegen_defineProperty(this, "none",
    external_kolmafia_namespaceObject.Item.get("None"));QuestMPRegen_defineProperty(this, "deadMimic",
    external_kolmafia_namespaceObject.Item.get("dead mimic"));QuestMPRegen_defineProperty(this, "skill",
    external_kolmafia_namespaceObject.Skill.get("Hivemindedness"));QuestMPRegen_defineProperty(this, "plusSign",
    external_kolmafia_namespaceObject.Item.get("plus sign"));}QuestMPRegen_createClass(QuestMPRegen, [{ key: "getId", value:

    function getId() {
      return "Skills / MPRegen";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "shouldHaveWand", value:

    function shouldHaveWand() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastZapperWand")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "getTimesZapped", value:

    function getTimesZapped() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_zapCount"));
    } }, { key: "isDoomUnlocked", value:

    function isDoomUnlocked() {
      return (
        (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)() &&
        (0,external_kolmafia_namespaceObject.availableAmount)(this.plusSign) == 0);

    } }, { key: "getWand", value:

    function getWand() {
      var wand = (0,external_kolmafia_namespaceObject.getZapWand)();

      if (wand == this.none) {
        return null;
      }

      return wand;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (!this.isDoomUnlocked()) {
        return QuestStatus.NOT_READY;
      }

      if (this.getWand() == null) {
        if ((0,external_kolmafia_namespaceObject.myMeat)() < 6000 || getQuestStatus("questL11Black") < 3) {
          return QuestStatus.NOT_READY;
        }

        if (!hasNonCombatSkillsReady()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasWandExploded", value:

    function hasWandExploded() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastZapperWandExplosionDay")) == (0,external_kolmafia_namespaceObject.myDaycount)();
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      var seekingWand = this.getWand() == null && (0,external_kolmafia_namespaceObject.myMeat)() >= 5000;

      if (this.getWand() == null) {
        outfit.setNoCombat();
      } else {
        outfit.plusCombatWeight = 1;
      }

      return {
        outfit: outfit,
        location: this.realDung,
        run: () => {
          var props = new PropertyManager();

          props.setChoice(25, seekingWand ? 2 : 3);

          try {
            greyAdv(this.realDung, outfit);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_namespaceObject.availableAmount)(this.deadMimic) > 0) {
            (0,external_kolmafia_namespaceObject.use)(this.deadMimic);

            if (this.getWand() == null) {
              (0,external_kolmafia_namespaceObject.print)(
              "Something has gone wrong. We used a dead mimic but didn't get a wand.");

            }
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.realDung];
    } }]);return QuestMPRegen;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillAbstract.ts
function QuestSkillAbstract_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillAbstract_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSkillAbstract_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillAbstract_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillAbstract_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillAbstract_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestSkillAbstract = /*#__PURE__*/function () {






  function QuestSkillAbstract(
  level,
  location,
  monster,
  skill,
  questName)
  {QuestSkillAbstract_classCallCheck(this, QuestSkillAbstract);QuestSkillAbstract_defineProperty(this, "requiredLevel", void 0);QuestSkillAbstract_defineProperty(this, "location", void 0);QuestSkillAbstract_defineProperty(this, "monster", void 0);QuestSkillAbstract_defineProperty(this, "skill", void 0);QuestSkillAbstract_defineProperty(this, "questName", void 0);
    this.requiredLevel = level;
    this.location = location;
    this.monster = monster;
    this.skill = skill;
    this.questName = questName;
  }QuestSkillAbstract_createClass(QuestSkillAbstract, [{ key: "getId", value:

    function getId() {
      return this.questName;
    } }, { key: "level", value:

    function level() {
      return this.requiredLevel;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.canAdventure)(this.location)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (this.location.combatPercent < 100) {
        outfit.setPlusCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(this.monster);

          greyAdv(this.location, outfit, settings);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillAbstract;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillColdDamage.ts
function QuestSkillColdDamage_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillColdDamage_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSkillColdDamage_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillColdDamage_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillColdDamage_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillColdDamage_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestSkillColdDamage15 = /*#__PURE__*/function () {function QuestSkillColdDamage15() {QuestSkillColdDamage_classCallCheck(this, QuestSkillColdDamage15);QuestSkillColdDamage_defineProperty(this, "skill",
    external_kolmafia_namespaceObject.Skill.get("Snow-Cooling System"));QuestSkillColdDamage_defineProperty(this, "monster",
    external_kolmafia_namespaceObject.Monster.get("Snow Queen"));QuestSkillColdDamage_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Icy Peak"));}QuestSkillColdDamage_createClass(QuestSkillColdDamage15, [{ key: "getId", value:

    function getId() {
      return "Skills / ColdDamage15";
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_namespaceObject.haveSkill)(this.skill) ||
      getQuestStatus("questL09Topping") > 0 ||
      !GreySettings.isHardcoreMode())
      {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("questL08Trapper") != "finished" ||
      !(0,external_kolmafia_namespaceObject.canAdventure)(this.location))
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.location,
        run: () => {
          var settings = new AdventureSettings().addNoBanish(this.monster);

          greyAdv(this.location, null, settings);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillColdDamage15;}();


var QuestSkillColdDamage10 = /*#__PURE__*/function () {function QuestSkillColdDamage10() {QuestSkillColdDamage_classCallCheck(this, QuestSkillColdDamage10);QuestSkillColdDamage_defineProperty(this, "skill",
    external_kolmafia_namespaceObject.Skill.get("Cooling Tubules"));QuestSkillColdDamage_defineProperty(this, "monster",
    external_kolmafia_namespaceObject.Monster.get("Ninja Snowman Weaponmaster"));QuestSkillColdDamage_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("Lair of the Ninja Snowmen"));}QuestSkillColdDamage_createClass(QuestSkillColdDamage10, [{ key: "getId", value:

    function getId() {
      return "Skills / ColdDamage10";
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.haveSkill)(this.skill) || getQuestStatus("questL09Topping") > 0) {
        return QuestStatus.COMPLETED;
      }

      if (
      getQuestStatus("questL08Trapper") < 3 ||
      !(0,external_kolmafia_namespaceObject.canAdventure)(this.location) ||
      !GreySettings.isHardcoreMode())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.location,
        run: () => {
          var settings = new AdventureSettings().addNoBanish(this.monster);

          greyAdv(this.location, null, settings);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillColdDamage10;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillConiferPolymers.ts
function QuestSkillConiferPolymers_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillConiferPolymers_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSkillConiferPolymers_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillConiferPolymers_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillConiferPolymers_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillConiferPolymers_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestSkillConiferPolymers = /*#__PURE__*/function () {function QuestSkillConiferPolymers() {QuestSkillConiferPolymers_classCallCheck(this, QuestSkillConiferPolymers);QuestSkillConiferPolymers_defineProperty(this, "location",
    external_kolmafia_namespaceObject.Location.get("The Bat Hole Entrance"));QuestSkillConiferPolymers_defineProperty(this, "monster",
    external_kolmafia_namespaceObject.Monster.get("Pine Bat"));QuestSkillConiferPolymers_defineProperty(this, "skill",
    external_kolmafia_namespaceObject.Skill.get("Conifer Polymers"));}QuestSkillConiferPolymers_createClass(QuestSkillConiferPolymers, [{ key: "getId", value:

    function getId() {
      return "Skills / Conifer Polymers";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status() {
      //if (haveSkill(this.skill))
      {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questM20Necklace") > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_namespaceObject.canAdventure)(this.location)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();

      if (this.location.combatPercent < 100) {
        outfit.setPlusCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        run: () => {
          var settings = new AdventureSettings();
          settings.addNoBanish(this.monster);

          greyAdv(this.location, outfit, settings);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillConiferPolymers;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillDoubleNanovision.ts
function QuestSkillDoubleNanovision_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillDoubleNanovision_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSkillDoubleNanovision_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillDoubleNanovision_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillDoubleNanovision_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillDoubleNanovision_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestSkillDoubleNanovision = /*#__PURE__*/function () {function QuestSkillDoubleNanovision() {QuestSkillDoubleNanovision_classCallCheck(this, QuestSkillDoubleNanovision);QuestSkillDoubleNanovision_defineProperty(this, "bowling",
    external_kolmafia_namespaceObject.Location.get("The Hidden Bowling Alley"));QuestSkillDoubleNanovision_defineProperty(this, "skill",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestSkillDoubleNanovision_defineProperty(this, "ball",
    external_kolmafia_namespaceObject.Item.get("Bowling Ball"));QuestSkillDoubleNanovision_defineProperty(this, "drunk",
    external_kolmafia_namespaceObject.Monster.get("Drunk pygmy"));}QuestSkillDoubleNanovision_createClass(QuestSkillDoubleNanovision, [{ key: "getId", value:

    function getId() {
      return "Skills / DoubleNanovision";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("questL11Spare") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_namespaceObject.isBanished)(this.drunk)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.bowling,
        run: () => {
          if ((0,external_kolmafia_namespaceObject.itemAmount)(this.ball) > 0) {
            (0,external_kolmafia_namespaceObject.putCloset)(this.ball, (0,external_kolmafia_namespaceObject.itemAmount)(this.ball));
          }

          greyAdv(this.bowling);
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.bowling];
    } }]);return QuestSkillDoubleNanovision;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillSystemSweep.ts
function QuestSkillSystemSweep_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillSystemSweep_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSkillSystemSweep_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillSystemSweep_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillSystemSweep_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillSystemSweep_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





var QuestSkillSystemSweep = /*#__PURE__*/function () {function QuestSkillSystemSweep() {QuestSkillSystemSweep_classCallCheck(this, QuestSkillSystemSweep);QuestSkillSystemSweep_defineProperty(this, "park",
    external_kolmafia_namespaceObject.Location.get("The Hidden Park"));QuestSkillSystemSweep_defineProperty(this, "skill",
    external_kolmafia_namespaceObject.Skill.get("System Sweep"));QuestSkillSystemSweep_defineProperty(this, "sword",
    external_kolmafia_namespaceObject.Item.get("Antique Machete"));QuestSkillSystemSweep_defineProperty(this, "nanovision",
    external_kolmafia_namespaceObject.Skill.get("Double Nanovision"));QuestSkillSystemSweep_defineProperty(this, "book",
    external_kolmafia_namespaceObject.Item.get("Book of matches"));}QuestSkillSystemSweep_createClass(QuestSkillSystemSweep, [{ key: "getId", value:

    function getId() {
      return "Skills / System Sweep";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_namespaceObject.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (!this.hasRelocated() || (0,external_kolmafia_namespaceObject.availableAmount)(this.sword) == 0) {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.nanovision) && this.wantBook()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      outfit.setPlusCombat().setItemDrops();

      return {
        location: this.park,
        outfit: outfit,
        run: () => {
          greyAdv(this.park, outfit);
        } };

    } }, { key: "hasRelocated", value:

    function hasRelocated() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("relocatePygmyJanitor")) == (0,external_kolmafia_namespaceObject.myAscensions)();
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "wantBook", value:

    function wantBook() {
      if (
      (0,external_kolmafia_namespaceObject.availableAmount)(this.book) > 0 ||
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_namespaceObject.myAscensions)() ||
      (0,external_kolmafia_namespaceObject.getProperty)("questL11Spare") == "finished")
      {
        return false;
      }

      return true;
    } }]);return QuestSkillSystemSweep;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillRegistry.ts
function QuestSkillRegistry_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestSkillRegistry_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestSkillRegistry_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestSkillRegistry_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestSkillRegistry_arrayLikeToArray(o, minLen);}function QuestSkillRegistry_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestSkillRegistry_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillRegistry_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestSkillRegistry_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillRegistry_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillRegistry_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillRegistry_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}











var QuestSkillRegistry = /*#__PURE__*/function () {


  function QuestSkillRegistry() {QuestSkillRegistry_classCallCheck(this, QuestSkillRegistry);QuestSkillRegistry_defineProperty(this, "children", []);
    /*
    | "Skills / MPRegen"
    | "Skills / HPRegen"
    | "Skills / ScalingItem"
    | "Skills / ScalingDR"
    | "Skills / InfiniteLoop"
    | "Skills / Shroud"
    | "Skills / Hoonk"
    | "Skills / PhaseShift"
    | "Skills / ConiferPolymers";
    */

    this.addSkill("Skills / Phase Shift");
    this.addSkill("Skills / Photonic Shroud");
    this.addSkill("Skills / Piezoelectric Honk");
    this.addSkill(
    "Skills / ScalingItem",
    external_kolmafia_namespaceObject.Skill.get("Gravitational Compression"));

    this.addSkill("Skills / HPRegen", external_kolmafia_namespaceObject.Skill.get("Fluid Dynamics Simulation"));
    this.addSkill("Skills / ScalingDR", external_kolmafia_namespaceObject.Skill.get("Subatomic Hardening"));
    this.addSkill("Skills / ScalingMeat", external_kolmafia_namespaceObject.Skill.get("Ponzi Apparatus"));

    this.children.push(new QuestMPRegen());
    this.children.push(new QuestSkillSystemSweep());
    this.children.push(
    new QuestSkillAbstract(
    11,
    external_kolmafia_namespaceObject.Location.get("The Hidden Park"),
    external_kolmafia_namespaceObject.Monster.get("pygmy witch lawyer"),
    external_kolmafia_namespaceObject.Skill.get("Infinite Loop"),
    "Skills / Infinite Loop"));


    this.children.push(new QuestSkillColdDamage15());
    this.children.push(new QuestSkillColdDamage10());
    this.children.push(new QuestSkillDoubleNanovision());
    this.children.push(new QuestSkillConiferPolymers());
  }QuestSkillRegistry_createClass(QuestSkillRegistry, [{ key: "addSkill", value:

    function addSkill(questType, skill) {
      if (skill == null) {
        skill = external_kolmafia_namespaceObject.Skill.get(
        questType.substring(questType.lastIndexOf("/") + 1).trim());

      }

      if (skill == external_kolmafia_namespaceObject.Skill.get("None")) {
        throw "There's no skill found for " + questType;
      }

      var location;
      var monster;var _iterator = QuestSkillRegistry_createForOfIteratorHelper(

      AbsorbsProvider.loadAbsorbs()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var absorb = _step.value;
          if (absorb.skill != skill) {
            continue;
          }

          var locs = getLocations(absorb.monster);

          if (locs.length != 1) {
            throw (
              "Expected to find only one location, instead received multiple when trying to handle " +
              questType);

          }

          location = locs[0];
          monster = absorb.monster;
          break;
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if (location == null) {
        throw (
          "No location / monster found for the skill " +
          skill.name +
          " and type " +
          questType);

      }

      var level = Math.max(5, Math.sqrt(location.recommendedStat) * 1.35);

      this.children.push(
      new QuestSkillAbstract(level, location, monster, skill, questType));

    } }, { key: "getId", value:

    function getId() {
      return "Skills / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }]);return QuestSkillRegistry;}();
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbGnomads.ts
function QuestAbsorbGnomads_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbGnomads_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestAbsorbGnomads_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbGnomads_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbGnomads_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbGnomads_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbGnomads_setPrototypeOf(subClass, superClass);}function QuestAbsorbGnomads_setPrototypeOf(o, p) {QuestAbsorbGnomads_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbGnomads_setPrototypeOf(o, p);}function QuestAbsorbGnomads_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbGnomads_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbGnomads_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbGnomads_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbGnomads_possibleConstructorReturn(this, result);};}function QuestAbsorbGnomads_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbGnomads_assertThisInitialized(self);}function QuestAbsorbGnomads_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbGnomads_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbGnomads_getPrototypeOf(o) {QuestAbsorbGnomads_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbGnomads_getPrototypeOf(o);}function QuestAbsorbGnomads_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}









var QuestAbsorbGnomads = /*#__PURE__*/function (_QuestMoonSignAbsorb) {QuestAbsorbGnomads_inherits(QuestAbsorbGnomads, _QuestMoonSignAbsorb);var _super = QuestAbsorbGnomads_createSuper(QuestAbsorbGnomads);function QuestAbsorbGnomads() {var _this;QuestAbsorbGnomads_classCallCheck(this, QuestAbsorbGnomads);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbGnomads_defineProperty(QuestAbsorbGnomads_assertThisInitialized(_this), "location",
    external_kolmafia_namespaceObject.Location.get("Thugnderdome"));QuestAbsorbGnomads_defineProperty(QuestAbsorbGnomads_assertThisInitialized(_this), "monster",
    external_kolmafia_namespaceObject.Monster.get("Vicious gnauga"));QuestAbsorbGnomads_defineProperty(QuestAbsorbGnomads_assertThisInitialized(_this), "moonZone",
    "Gnomad");return _this;}QuestAbsorbGnomads_createClass(QuestAbsorbGnomads, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Gnomads";
    } }]);return QuestAbsorbGnomads;}(QuestMoonSignAbsorb);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestL11PalinAbsorbs.ts
function QuestL11PalinAbsorbs_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PalinAbsorbs_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestL11PalinAbsorbs_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PalinAbsorbs_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PalinAbsorbs_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PalinAbsorbs_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestL11PalinAbsorbs = /*#__PURE__*/function () {function QuestL11PalinAbsorbs() {QuestL11PalinAbsorbs_classCallCheck(this, QuestL11PalinAbsorbs);QuestL11PalinAbsorbs_defineProperty(this, "talisman",
    external_kolmafia_namespaceObject.Item.get("Talisman o' Namsilat"));QuestL11PalinAbsorbs_defineProperty(this, "palindome",
    external_kolmafia_namespaceObject.Location.get("Inside the Palindome"));QuestL11PalinAbsorbs_defineProperty(this, "toAbsorb", void 0);QuestL11PalinAbsorbs_defineProperty(this, "goose",

    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));}QuestL11PalinAbsorbs_createClass(QuestL11PalinAbsorbs, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Palin";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if (GreySettings.greySkipPalindome) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL11Palindome");

      if (status < 100 || (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) < 6) {
        return QuestStatus.NOT_READY;
      }

      if (this.toAbsorb.length == 0) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit();
      outfit.addItem(this.talisman);

      return {
        location: this.palindome,
        outfit: outfit,
        run: () => {
          var props = new PropertyManager();
          props.setChoice(127, 1);
          props.setChoice(126, 1);
          props.setChoice(180, 2);
          props.setChoice(2, 2);

          try {
            greyAdv(this.palindome, outfit);
          } finally {
            props.resetAll();
          }
        } };

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.palindome];
    } }]);return QuestL11PalinAbsorbs;}();
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbIrateMariachi.ts
function QuestAbsorbIrateMariachi_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbIrateMariachi_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestAbsorbIrateMariachi_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbIrateMariachi_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbIrateMariachi_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbIrateMariachi_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbIrateMariachi_setPrototypeOf(subClass, superClass);}function QuestAbsorbIrateMariachi_setPrototypeOf(o, p) {QuestAbsorbIrateMariachi_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbIrateMariachi_setPrototypeOf(o, p);}function QuestAbsorbIrateMariachi_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbIrateMariachi_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbIrateMariachi_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbIrateMariachi_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbIrateMariachi_possibleConstructorReturn(this, result);};}function QuestAbsorbIrateMariachi_possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbIrateMariachi_assertThisInitialized(self);}function QuestAbsorbIrateMariachi_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbIrateMariachi_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbIrateMariachi_getPrototypeOf(o) {QuestAbsorbIrateMariachi_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbIrateMariachi_getPrototypeOf(o);}function QuestAbsorbIrateMariachi_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}







var QuestAbsorbIrateMariachi = /*#__PURE__*/function (_TaskInfo) {QuestAbsorbIrateMariachi_inherits(QuestAbsorbIrateMariachi, _TaskInfo);var _super = QuestAbsorbIrateMariachi_createSuper(QuestAbsorbIrateMariachi);function QuestAbsorbIrateMariachi() {var _this;QuestAbsorbIrateMariachi_classCallCheck(this, QuestAbsorbIrateMariachi);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "irateMariachi",
    external_kolmafia_namespaceObject.Monster.get("Irate Mariachi"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "familiar",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "fax",
    new PossiblePath(1).addFax(_this.irateMariachi));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "avoid",
    new PossiblePath(10));return _this;}QuestAbsorbIrateMariachi_createClass(QuestAbsorbIrateMariachi, [{ key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.fax, this.avoid];
    } }, { key: "getId", value:

    function getId() {
      return "Absorbs / Irate Mariachi";
    } }, { key: "level", value:

    function level() {
      return 18;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status(path) {
      if (AbsorbsProvider.getReabsorbedMonsters().includes(this.irateMariachi)) {
        return QuestStatus.COMPLETED;
      }

      if (path == null) {
        return QuestStatus.NOT_READY;
      }

      if (!path.canUse(ResourceCategory.FAXER)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_namespaceObject.familiarWeight)(this.familiar) < 6) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run(path) {
      var resource = path.getResource(ResourceCategory.FAXER);

      return {
        location: null,
        outfit: null,
        familiar: this.familiar,
        disableFamOverride: true,
        run: () => {
          resource.fax(this.irateMariachi);

          greyAdv(null);

          if ((0,external_kolmafia_namespaceObject.handlingChoice)() || (0,external_kolmafia_namespaceObject.currentRound)() != 0) {
            throw "We're supposed to be done with this fight!";
          }
        } };

    } }, { key: "getAbsorbs", value:

    function getAbsorbs() {
      return [this.irateMariachi];
    } }]);return QuestAbsorbIrateMariachi;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/QuestsCustom.ts
function QuestsCustom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestsCustom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestsCustom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestsCustom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestsCustom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestsCustom_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




























var QuestsCustom = /*#__PURE__*/function () {
  // This is a wrapper class around some of our custom routing goals. Like combat locket or so.



  function QuestsCustom() {QuestsCustom_classCallCheck(this, QuestsCustom);QuestsCustom_defineProperty(this, "quests", []);
    this.quests.push(new QuestInitialStart());
    this.quests.push(new QuestInitialPulls());
    this.quests.push(new QuestLocketInfiniteLoop());
    //this.quests.push(new QuestLocketSystemSweep());
    this.quests.push(new QuestGoblinTortureHarem());
    this.quests.push(new QuestGoblinTortureLab());
    this.quests.push(new QuestDungeonsOfDoom());
    this.quests.push(new QuestGetZapWand());
    this.quests.push(new QuestNPCStuff());
    this.quests.push(new QuestCustomPurchases());
    this.quests.push(new QuestGrabBoatVacation());
    this.quests.push(new QuestGrabBoatJunkyard());
    this.quests.push(new QuestSkillRegistry());
    this.quests.push(new QuestFamiliarEquip());
    this.quests.push(new QuestFortuneExp());
    this.quests.push(new QuestPowerLeveling(4));
    this.quests.push(new QuestBugbearBakery());
    this.quests.push(new QuestAbsorbStarMonster());
    this.quests.push(new QuestMoonSign());
    this.quests.push(new QuestAbsorbCanadia());
    this.quests.push(new QuestAbsorbKnoll());
    this.quests.push(new QuestAbsorbGnomads());
    this.quests.push(new QuestL11PalinAbsorbs());
    this.quests.push(new QuestAbsorbIrateMariachi());
    this.quests.push(new QuestJuneCleaver());
    this.quests.push(new QuestTrapGhost());
  }QuestsCustom_createClass(QuestsCustom, [{ key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getId", value:

    function getId() {
      return "Misc / Custom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.quests;
    } }]);return QuestsCustom;}();
;// CONCATENATED MODULE: ./src/quests/QuestTypes.ts
function QuestTypes_toConsumableArray(arr) {return QuestTypes_arrayWithoutHoles(arr) || QuestTypes_iterableToArray(arr) || QuestTypes_unsupportedIterableToArray(arr) || QuestTypes_nonIterableSpread();}function QuestTypes_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestTypes_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTypes_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTypes_arrayLikeToArray(o, minLen);}function QuestTypes_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestTypes_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestTypes_arrayLikeToArray(arr);}function QuestTypes_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}var QuestToot = ["Council / Toot"];
var QuestLarva = ["Council / Larva"];
var QuestTavern = ["Council / Tavern"];
var QuestBats = [
"Council / Bats / Sonars",
"Council / Bats / UnlockLeft",
"Council / Bats / UnlockRight",
"Council / Bats / UnlockBoss",
"Council / Bats / Boss"];

var QuestGoblins = [
"Council / Goblins / Outskirts",
"Council / Goblins / HaremOutfit",
"Council / Goblins / King"];

var QuestFriars = [
"Council / Friars / Heart",
"Council / Friars / Elbow",
"Council / Friars / Neck",
"Council / Friars / TurnIn"];

var QuestCrypt = [
"Council / Crypt / Sprinters",
"Council / Crypt / Gravy Boat Pull",
"Council / Crypt / Eyes",
"Council / Crypt / Rattling",
"Council / Crypt / DirtyMan",
"Council / Crypt / Boss"];

var QuestIcePeak = [
"Council / Ice / Trapper",
"Council / Ice / Goats",
"Council / Ice / Ore",
"Council / Ice / Ninjas",
"Council / Ice / Boss"];

var QuestTriplePeaks = [
"Council / Peaks / Orcs",
"Council / Peaks / CargoShortsSmut",
"Council / Peaks / AbooPeak",
"Council / Peaks / TwinPeak",
"Council / Peaks / OilPeak",
"Council / Peaks / Lord"];

var QuestBeanStalk = [
"Council / Beanstalk / EnchantedBean",
"Council / Beanstalk / Ship",
"Council / Beanstalk / Basement",
"Council / Beanstalk / Ground",
"Council / Beanstalk / Top"];


var QuestPalin = [
"Council / MacGruffin / Palin / Book",
"Council / MacGruffin / Palin / WetStew",
"Council / MacGruffin / Palin / Boss"];

var QuestPyamid = [
"Council / MacGruffin / Pyramid / Top",
"Council / MacGruffin / Pyramid / Middle",
"Council / MacGruffin / Pyramid / Wheel",
"Council / MacGruffin / Pyramid / EdUndying"];

var QuestRon = [
"Council / MacGruffin / Ron / Crowd",
"Council / MacGruffin / Ron / Zepp",
"Council / MacGruffin / Ron / Parent"];

var QuestShen = [
"Council / MacGruffin / Shen / Meet",
"Council / MacGruffin / Shen / Bats",
"Council / MacGruffin / Shen / TurnIn",
"Council / MacGruffin / Shen / Ninjas",
"Council / MacGruffin / Shen / Giants"];

var QuestTemple = [
"Council / MacGruffin / Temple / Unlock",
"Council / MacGruffin / Temple / GrabWool",
"Council / MacGruffin / Temple / Nostril",
"Council / MacGruffin / Temple / HiddenCity"];

var QuestHiddenCity = [
"Council / MacGruffin / HiddenCity / Vines",
"Council / MacGruffin / HiddenCity / Accountants",
"Council / MacGruffin / HiddenCity / Curses",
"Council / MacGruffin / HiddenCity / Doctor",
"Council / MacGruffin / HiddenCity / Bowling",
"Council / MacGruffin / HiddenCity / BookOfMatches",
"Council / MacGruffin / HiddenCity / HiddenPark",
"Council / MacGruffin / HiddenCity / Boss"];

var QuestBlack = ["Council / MacGruffin / Black"];
var QuestDesert = [
"Council / MacGruffin / Desert / Parent",
"Council / MacGruffin / Desert / Explore",
"Council / MacGruffin / Desert / StoneRose",
"Council / MacGruffin / Desert / Gnome",
"Council / MacGruffin / Desert / Compass",
"Council / MacGruffin / Desert / WormRide"];

var QuestManorMacGruffin = [
"Council / MacGruffin / Manor / Ballroom",
"Council / MacGruffin / Manor / Recipe",
"Council / MacGruffin / Manor / Soda",
"Council / MacGruffin / Manor / Wine",
"Council / MacGruffin / Manor / Bomb",
"Council / MacGruffin / Manor / Boss"];

var QuestMacGruffin = [
"Council / MacGruffin / Vacation",
"Council / MacGruffin / Shore"].concat(
QuestPalin,
QuestPyamid,
QuestDesert,
QuestRon,
QuestShen,
QuestTemple,
QuestHiddenCity,
QuestBlack,
QuestManorMacGruffin);

var QuestIslandWar = [
"Council / War / Parent",
"Council / War / Frat Outfit",
"Council / War / Start",
"Council / War / Gremlins",
"Council / War / Lobsters",
"Council / War / Flyers",
"Council / War / Battlefield",
"Council / War / Filthworms",
"Council / War / Nuns",
"Council / War / Boss"];

var QuestKeys = [
"Council / Tower / Keys / Heroes",
"Council / Tower / Keys / Heroes / DailyDungeon",
"Council / Tower / Keys / Heroes / FantasyBandit",
"Council / Tower / Keys / Heroes / ZapKeys",
"Council / Tower / Keys / Heroes / Pull and Zap Keys",
"Council / Tower / Keys / Heroes / DeckOfCards",
"Council / Tower / Keys / Digital",
"Council / Tower / Keys / HoleInSkyUnlock",
"Council / Tower / Keys / Star",
"Council / Tower / Keys / Skeleton"];

var QuestTower = [
"Council / Tower / Contests",
"Council / Tower / Maze",
"Council / Tower / KeyDoor",
"Council / Tower / WallOfSkin",
"Council / Tower / WallOfMeat",
"Council / Tower / WallOfBones",
"Council / Tower / Shadow",
"Council / Tower / Mirror",
"Council / Tower / NaughtyBoss",
"Council / Tower / Parent"].concat(
QuestKeys);

var QuestTypes_QuestManor = [
"Manor / Chat",
"Manor / Kitchen",
"Manor / Billards",
"Manor / Library",
"Manor / Bathroom",
"Manor / Gallery",
"Manor / Bedroom"];

var QuestSkills = [
"Skills / Parent",
"Skills / MPRegen",
"Skills / HPRegen",
"Skills / ScalingItem",
"Skills / ScalingMeat",
"Skills / ScalingDR",
"Skills / Infinite Loop",
"Skills / Photonic Shroud",
"Skills / Piezoelectric Honk",
"Skills / Phase Shift",
"Skills / Conifer Polymers",
"Skills / System Sweep",
"Skills / ColdDamage15",
"Skills / ColdDamage10",
"Skills / DoubleNanovision"];

var QuestMisc = [
"Misc / Custom",
"Misc / Initial Pulls",
"Misc / FamEquip",
"Misc / MeatCar",
"Misc / ManorLights",
"Misc / UnlockDungeonsOfDoom",
"Misc / GrabZapWand",
"Misc / InitialStart",
"Misc / PowerLeveling",
"Misc / FortuneExp",
"Misc / Purchases",
"Misc / FriarExp",
"Misc / BugbearBakery",
"Misc / Moonsign",
"Misc / JuneCleaver",
"Misc / Ghost Buster"];

var QuestCombatLocket = [
"CombatLocket / SystemSweep",
"CombatLocket / InfiniteLoop"];

var QuestIslandUnlock = ["Boat / Junkyard", "Boat / Vacation"];
var QuestTypes_QuestCouncil = [
"Quests / Council"].concat(
QuestToot,
QuestLarva,
QuestTavern,
QuestBats,
QuestGoblins,
QuestFriars,
QuestCrypt,
QuestIcePeak,
QuestTriplePeaks,
QuestBeanStalk, QuestTypes_toConsumableArray(
QuestMacGruffin),
QuestIslandWar, QuestTypes_toConsumableArray(
QuestTower));

var QuestNPCs = [
"NPC / Parent",
"NPC / Meatsmith",
"NPC / GnomeSkills",
"NPC / Untinkerer",
"NPC / Baker",
"NPC / Druggie",
"NPC / Knoll Mayor",
"NPC / Doctor",
"NPC / Painter"];

var QuestGoblinsExperiments = [
"GoblinLabs / LabUnlock",
"GoblinLabs / MegUnlock"];

var QuestAbsorbs = [
"Absorbs / Hole in Sky",
"Absorbs / Canadia",
"Absorbs / Knoll",
"Absorbs / Gnomads",
"Absorbs / Palin",
"Absorbs / Irate Mariachi"];

var QuestTypeArray = [].concat(QuestTypes_toConsumableArray(
QuestTypes_QuestCouncil),
QuestMisc,
QuestGoblinsExperiments,
QuestTypes_QuestManor,
QuestNPCs,
QuestSkills,
QuestCombatLocket,
QuestIslandUnlock,
QuestAbsorbs);
;// CONCATENATED MODULE: ./src/quests/QuestRegistry.ts
function QuestRegistry_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestRegistry_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function QuestRegistry_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestRegistry_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestRegistry_arrayLikeToArray(o, minLen);}function QuestRegistry_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function QuestRegistry_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestRegistry_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function QuestRegistry_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestRegistry_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestRegistry_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestRegistry_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}




















var QuestRegistry = /*#__PURE__*/function () {


  function QuestRegistry() {QuestRegistry_classCallCheck(this, QuestRegistry);QuestRegistry_defineProperty(this, "map", new Map());
    this.addInfo(new QuestCouncil());
    this.addInfo(new QuestCar());
    this.addInfo(new QuestManorLights());
    this.addInfo(new QuestsCustom());
    this.addInfo(new QuestManor());

    var ordered = this.getQuestOrder();var _iterator = QuestRegistry_createForOfIteratorHelper(

    this.map.keys()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var type = _step.value;
        if (ordered.includes(type)) {
          continue;
        }

        if (this.map.get(type).level() == -1) {
          continue;
        }

        (0,external_kolmafia_namespaceObject.print)(
        "DEBUG: Quests registry priority order does not contain: " + type,
        "gray");

      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = QuestRegistry_createForOfIteratorHelper(

    QuestTypeArray),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _type = _step2.value;
        if (this.map.has(_type) || !GreySettings.greyDebug) {
          continue;
        }

        (0,external_kolmafia_namespaceObject.print)(
        "ERROR! No quest registered for the quest id '" + _type + "'",
        "red");

      }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
  }QuestRegistry_createClass(QuestRegistry, [{ key: "addInfo", value:

    function addInfo(questInfo) {
      var id = questInfo.getId();

      if (id == null) {
        throw "Null quest id found!";
      }

      if (this.map.has(id)) {
        throw "Map already contains the quest '" + id + "'";
      }

      this.map.set(id, questInfo);
      // TODO Add to map

      if (questInfo.getChildren != null) {var _iterator3 = QuestRegistry_createForOfIteratorHelper(
        questInfo.getChildren()),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var child = _step3.value;
            this.addInfo(child);
          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
      }
    } }, { key: "getQuestOrder", value:

    function getQuestOrder() {
      // We get one non-combat at goblin basement from jellyfish
      // Another non-combat at Black panther
      // Goblin only has one -combat to speak of, and its not really worth much?
      // Black is Car > Desert > Forest
      var order = [
      { id: "Quests / Council" },

      { id: "Council / Toot" },
      { id: "Misc / Initial Pulls" },
      { id: "Misc / InitialStart" },
      { id: "Misc / PowerLeveling" },
      { id: "Misc / FortuneExp" },
      { id: "Misc / Ghost Buster" },

      { id: "CombatLocket / SystemSweep" },
      { id: "CombatLocket / InfiniteLoop" },
      { id: "Misc / FamEquip" },
      { id: "Misc / JuneCleaver" },

      { id: "NPC / Meatsmith" },
      { id: "NPC / GnomeSkills" },
      { id: "NPC / Painter" }, // Takes up to 3 advs so meh, not quest relevant either. Only supported if user starts it
      { id: "NPC / Untinkerer" },
      { id: "NPC / Baker" },
      { id: "NPC / Druggie" },
      { id: "NPC / Knoll Mayor" },
      { id: "NPC / Doctor" },
      { id: "Misc / Purchases" },
      { id: "Misc / FriarExp" },
      { id: "Misc / Moonsign" },
      // These just make the absorbs prioritized higher
      {
        id: "Absorbs / Knoll",
        testValid: () =>
        (0,external_kolmafia_namespaceObject.knollAvailable)() && GreySettings.greyTuneMoonSpoon != null },

      {
        id: "Absorbs / Canadia",
        testValid: () =>
        (0,external_kolmafia_namespaceObject.canadiaAvailable)() && GreySettings.greyTuneMoonSpoon != null },

      {
        id: "Absorbs / Gnomads",
        testValid: () =>
        (0,external_kolmafia_namespaceObject.gnomadsAvailable)() && GreySettings.greyTuneMoonSpoon != null },


      // We might want system sweep after all! This needs to be cleaned
      { id: "Council / MacGruffin / HiddenCity / HiddenPark" },

      { id: "Skills / Infinite Loop" },
      { id: "Skills / System Sweep" },
      { id: "Skills / Phase Shift" },
      { id: "Skills / HPRegen" },
      { id: "Skills / ScalingItem" },
      { id: "Skills / ScalingMeat" },
      { id: "Skills / DoubleNanovision" },

      {
        id: "Skills / ScalingDR",
        testValid: () => getQuestStatus("questM20Necklace") > 2 },

      { id: "Skills / Conifer Polymers" },

      // Vines are free kills, why not prioritize them to unlock zones
      { id: "Council / MacGruffin / HiddenCity / Vines" },

      { id: "Misc / ManorLights" },
      { id: "Misc / UnlockDungeonsOfDoom" },
      { id: "Skills / MPRegen" },

      // We do this early so we can grab our hippy outfit asap
      { id: "Boat / Junkyard" },
      { id: "Boat / Vacation" },

      // Always try to buy access to the shore, 8-9 adventures spent trying to farm stuff up?
      { id: "Council / MacGruffin / Shore" },
      { id: "Misc / MeatCar" },
      { id: "Misc / BugbearBakery" },

      // Get goblin done early so we can grab our first -combat skill
      { id: "Council / Goblins / Outskirts" },
      { id: "Council / Goblins / HaremOutfit" },

      { id: "GoblinLabs / LabUnlock" },
      { id: "GoblinLabs / MegUnlock" },

      { id: "Council / MacGruffin / Vacation" },

      { id: "Council / Larva" },

      // We get +3 hot resist from raging bull
      // +3 stench resist from pine bat
      // And the other two skills are manor located
      { id: "Manor / Chat" },
      { id: "Manor / Kitchen" },
      { id: "Manor / Billards" },
      { id: "Manor / Bathroom" },
      { id: "Manor / Gallery" },
      { id: "Manor / Bedroom" },

      // Do the king cos he's lonely, also has 2k meat
      { id: "Council / Goblins / King" },

      // Register these here, because we want to burn their backups in delay zones
      { id: "Council / Tower / Keys / Heroes / FantasyBandit" },
      { id: "Council / War / Lobsters" },

      // Get friars done early so we can grab stuff from hell
      { id: "Council / Friars / Heart" },
      { id: "Council / Friars / Elbow" },
      { id: "Council / Friars / Neck" },
      { id: "Council / Friars / TurnIn" },

      // Get this done early so we can start flyering
      { id: "Council / War / Frat Outfit" },
      { id: "Council / War / Start" },
      { id: "Council / War / Flyers" },

      // If we have the skill, then this doesn't need prioritizing as such
      {
        id: "Council / MacGruffin / Black" },


      { id: "Skills / Photonic Shroud" },
      { id: "Misc / GrabZapWand" },

      // Meh
      { id: "Council / MacGruffin / HiddenCity / Boss" },
      { id: "Council / MacGruffin / Temple / Unlock" },
      { id: "Council / MacGruffin / Temple / GrabWool" },
      { id: "Council / MacGruffin / Temple / Nostril" },
      { id: "Council / MacGruffin / Temple / HiddenCity" },

      // Now we do our bowling, we prioritize this because of special code that has the bowling ball with combat turns = 0
      // We also prioritize it for double nanovision
      { id: "Council / MacGruffin / HiddenCity / BookOfMatches" },
      { id: "Council / MacGruffin / HiddenCity / Bowling" },

      // Do library after we should have system sweep stuff
      { id: "Manor / Library" },

      // Crypt does give us meat hmm
      { id: "Council / Crypt / Gravy Boat Pull" },
      { id: "Council / Crypt / Sprinters" },
      { id: "Council / Crypt / Eyes" },

      { id: "Council / Bats / Sonars" },
      { id: "Council / Bats / UnlockLeft" },

      // We've unlocked the left way, just do shen and hopefully we unlock right without actually burning extra turns
      { id: "Council / MacGruffin / Shen / Meet" },
      { id: "Council / MacGruffin / Shen / Bats" },
      { id: "Council / MacGruffin / Shen / TurnIn" },

      // Unlock ninja tower
      { id: "Council / Ice / Trapper" },
      { id: "Council / Ice / Goats" },
      { id: "Council / Ice / Ore" },

      // Ninja power!
      { id: "Council / MacGruffin / Shen / Ninjas" },

      // Try unlock right bats if not unlocked
      { id: "Council / Bats / UnlockRight" },

      // Hunt for enchanted beans
      { id: "Council / Beanstalk / EnchantedBean" },
      { id: "Council / Beanstalk / Ship" },
      { id: "Council / Beanstalk / Basement" },
      { id: "Council / Beanstalk / Ground" },
      // We're now trying to do the top stuff yay
      { id: "Council / Beanstalk / Top" },

      // If we still haven't unlocked from doing our top castle, lets try unlock our hole in sky
      { id: "Council / Tower / Keys / HoleInSkyUnlock" },
      // Oh wow, hole in sky unlocked but still no boss. Lets just do it manually.
      { id: "Council / MacGruffin / Shen / Giants" },
      { id: "Council / Tower / Keys / Star" },

      { id: "Council / MacGruffin / Ron / Crowd" },
      { id: "Council / MacGruffin / Ron / Zepp" },

      // Palin needs Ron and Shen done
      { id: "Council / MacGruffin / Palin / Book" },
      { id: "Council / MacGruffin / Palin / WetStew" },
      { id: "Council / MacGruffin / Palin / Boss" },
      { id: "Skills / Piezoelectric Honk" },

      // Ninja needs +combat, so delay it until we've finished Shen and grabbed our +combat skill from Palin
      { id: "Council / Ice / Ninjas" },
      // We earn a cold damage skill, so may as well. We also get meats
      { id: "Council / Ice / Boss" },

      // Given we earn nothing but meat, delays for days
      { id: "Council / Bats / UnlockBoss" },
      { id: "Council / Bats / Boss" },

      // We do shaman first to potentially grab extra accountant stuff
      { id: "Council / MacGruffin / HiddenCity / Curses" },

      { id: "Council / MacGruffin / HiddenCity / Accountants" },

      // Meh
      { id: "Council / MacGruffin / HiddenCity / Doctor" },

      // Nothing interesting from desert and pyramid yawn
      { id: "Council / MacGruffin / Desert / Compass" },

      { id: "Council / MacGruffin / Desert / WormRide" },
      { id: "Council / MacGruffin / Desert / Gnome" },
      {
        id: "Council / MacGruffin / Desert / StoneRose" },

      {
        id: "Council / MacGruffin / Desert / Explore" },


      // Unlock cellar
      { id: "Council / MacGruffin / Manor / Ballroom" },
      { id: "Council / MacGruffin / Manor / Recipe" },
      { id: "Council / MacGruffin / Manor / Soda" },
      { id: "Council / MacGruffin / Manor / Wine" },
      { id: "Council / MacGruffin / Manor / Bomb" },
      { id: "Council / MacGruffin / Manor / Boss" },

      // Nothing special from the top of the pyramid, but burn some turns here anyways
      { id: "Council / MacGruffin / Pyramid / Top" },

      // Alright, unlock the control room and the undying man. And keep going until you have enough rats
      { id: "Council / MacGruffin / Pyramid / Middle" },
      { id: "Council / MacGruffin / Pyramid / Wheel" },

      // Given we earn nothing from crypt..
      { id: "Council / Crypt / Rattling" },
      { id: "Council / Crypt / DirtyMan" },
      { id: "Council / Crypt / Boss" },

      { id: "Skills / ColdDamage15" },
      { id: "Skills / ColdDamage10" },

      // Given that we earn nothing from peaks, just delay it until we should've hit our max +cold damage
      { id: "Council / Peaks / CargoShortsSmut" },
      { id: "Council / Peaks / Orcs" },
      { id: "Council / Peaks / OilPeak" },
      { id: "Council / Peaks / TwinPeak" },
      { id: "Council / Peaks / AbooPeak" },
      { id: "Council / Peaks / Lord" },

      // OMG who cares about your stupid war
      {
        id: "Council / War / Filthworms" },

      { id: "Council / War / Gremlins" },

      { id: "Council / War / Boss" },

      // Tavern needs Larva done
      { id: "Council / Tavern" },

      { id: "Council / War / Battlefield" },

      { id: "Council / MacGruffin / Pyramid / EdUndying" },

      // Alright, this run is just about over kids. Lets finish it.
      { id: "Council / Tower / Contests" },
      { id: "Council / Tower / Maze" },

      { id: "Council / Tower / Keys / Heroes / Pull and Zap Keys" },
      { id: "Council / Tower / Keys / Heroes / ZapKeys" },
      { id: "Council / Tower / Keys / Heroes / DailyDungeon" },
      { id: "Council / Tower / Keys / Digital" },
      { id: "Council / Tower / Keys / Skeleton" },

      { id: "Council / War / Nuns" },

      // By the time we hit this, we should 100% have our keys
      { id: "Council / Tower / KeyDoor" },

      { id: "Council / Tower / WallOfSkin" },

      { id: "Council / Tower / WallOfMeat" },

      { id: "Council / Tower / WallOfBones" },

      { id: "Council / Tower / Shadow" },
      { id: "Council / Tower / Mirror" },
      { id: "Council / Tower / NaughtyBoss" },

      { id: "Absorbs / Hole in Sky" },
      { id: "Absorbs / Canadia" },
      { id: "Absorbs / Knoll" },
      { id: "Absorbs / Gnomads" },
      { id: "Absorbs / Palin" },
      { id: "Absorbs / Irate Mariachi" },
      { id: "Council / Tower / Keys / Heroes" }];


      return order.
      filter((order) => order.testValid == null || order.testValid()).
      map((order) => order.id);
    } }, { key: "getQuestsInOrder", value:

    function getQuestsInOrder() {
      var quests = [];var _iterator4 = QuestRegistry_createForOfIteratorHelper(

      this.getQuestOrder()),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var questType = _step4.value;
          var info = this.map.get(questType);

          if (info == null) {
            continue;
          }

          quests.push(info);
        }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

      return quests;
    } }]);return QuestRegistry;}();
;// CONCATENATED MODULE: ./src/GreyChooser.ts
function GreyChooser_toConsumableArray(arr) {return GreyChooser_arrayWithoutHoles(arr) || GreyChooser_iterableToArray(arr) || GreyChooser_unsupportedIterableToArray(arr) || GreyChooser_nonIterableSpread();}function GreyChooser_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyChooser_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function GreyChooser_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return GreyChooser_arrayLikeToArray(arr);}function GreyChooser_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyChooser_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyChooser_slicedToArray(arr, i) {return GreyChooser_arrayWithHoles(arr) || GreyChooser_iterableToArrayLimit(arr, i) || GreyChooser_unsupportedIterableToArray(arr, i) || GreyChooser_nonIterableRest();}function GreyChooser_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyChooser_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyChooser_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyChooser_arrayLikeToArray(o, minLen);}function GreyChooser_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyChooser_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function GreyChooser_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyChooser_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyChooser_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyChooser_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyChooser_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyChooser_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyChooser_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}
















var AdventureFinder = /*#__PURE__*/function () {function AdventureFinder() {GreyChooser_classCallCheck(this, AdventureFinder);GreyChooser_defineProperty(this, "registry",
    new QuestRegistry());GreyChooser_defineProperty(this, "defeated", void 0);GreyChooser_defineProperty(this, "viableQuests", void 0);GreyChooser_defineProperty(this, "absorbs",


    new AbsorbsProvider());GreyChooser_defineProperty(this, "goose",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));GreyChooser_defineProperty(this, "goodAbsorbs", void 0);GreyChooser_defineProperty(this, "questLocations", void 0);GreyChooser_defineProperty(this, "path", void 0);}GreyChooser_createClass(AdventureFinder, [{ key: "getAllRawQuests", value:




    function getAllRawQuests() {
      return this.registry.getQuestsInOrder();
    } }, { key: "getDoableQuests", value:

    function getDoableQuests() {
      var quests = [];

      var tryAdd = (q, path) => {
        if (q.level() > (0,external_kolmafia_namespaceObject.myLevel)() || q.level() < 0) {
          return;
        }

        if (
        q.level() * ((0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Infinite Loop")) ? 1 : 6) >
        (0,external_kolmafia_namespaceObject.myBasestat)(external_kolmafia_namespaceObject.Stat.get("Moxie")))
        {
          return;
        }

        var status = q.status(path);

        if (status == QuestStatus.COMPLETED) {
          return;
        }

        if (status == QuestStatus.NOT_READY) {
          return;
        }

        quests.push([q, path]);
      };

      this.path.thisPath.forEach((_ref) => {var _ref2 = GreyChooser_slicedToArray(_ref, 2),quest = _ref2[0],path = _ref2[1];
        tryAdd(quest, path);
      });

      return quests;
    } }, { key: "start", value:

    function start() {
      this.setPreAbsorbs();
      this.viableQuests = this.getDoableQuests();
      this.setAbsorbs();
      this.defeated = this.absorbs.getAbsorbedMonstersFromInstance();
      this.goodAbsorbs = this.absorbs.getExtraAdventures(this.defeated, true);
      this.setQuestLocations();
    } }, { key: "setPreAbsorbs", value:

    function setPreAbsorbs() {
      var defeated = this.absorbs.getAbsorbedMonstersFromInstance();var _iterator = GreyChooser_createForOfIteratorHelper(

      this.path.thisPath),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = GreyChooser_slicedToArray(_step.value, 1),quest = _step$value[0];
          quest.toAbsorb = [];var _iterator2 = GreyChooser_createForOfIteratorHelper(

          quest.getLocations()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _quest$toAbsorb;var loc = _step2.value;
              var result = this.absorbs.getAdventuresInLocation(defeated, loc);

              if (result == null) {
                continue;
              }

              (_quest$toAbsorb = quest.toAbsorb).push.apply(_quest$toAbsorb, GreyChooser_toConsumableArray(result.monsters));
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "setAbsorbs", value:

    function setAbsorbs() {
      var defeated = this.absorbs.getAbsorbedMonstersFromInstance();var _iterator3 = GreyChooser_createForOfIteratorHelper(

      this.path.thisPath),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _step3$value = GreyChooser_slicedToArray(_step3.value, 2),quest = _step3$value[0],path = _step3$value[1];
          if (
          quest.status(path) == QuestStatus.NOT_READY ||
          quest.status(path) == QuestStatus.COMPLETED)
          {
            continue;
          }

          var run = quest.run(path);

          if (run.location == null) {
            continue;
          }

          var result = this.absorbs.getAdventuresInLocation(
          defeated,
          run.location);


          quest.toAbsorb = result == null ? [] : result.monsters;
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
    } }, { key: "setQuestLocations", value:

    function setQuestLocations() {
      this.questLocations = [];var _iterator4 = GreyChooser_createForOfIteratorHelper(

      this.path.thisPath),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var _this$questLocations;var _step4$value = GreyChooser_slicedToArray(_step4.value, 2),quest = _step4$value[0],path = _step4$value[1];
          if (quest.status(path) == QuestStatus.COMPLETED) {
            continue;
          }

          (_this$questLocations = this.questLocations).push.apply(_this$questLocations, GreyChooser_toConsumableArray(quest.getLocations()));
        }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
    } }, { key: "hasEnoughGooseWeight", value:

    function hasEnoughGooseWeight() {
      return (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 6;
    } }, { key: "getNumberOfQuestsWithAdventures", value:

    function getNumberOfQuestsWithAdventures() {
      var count = 0;var _iterator5 = GreyChooser_createForOfIteratorHelper(

      this.path.thisPath),_step5;try {loop: for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var _step5$value = GreyChooser_slicedToArray(_step5.value, 2),quest = _step5$value[0],path = _step5$value[1];
          if (quest.level() < 1 || quest.status(path) == QuestStatus.COMPLETED) {
            continue;
          }var _iterator6 = GreyChooser_createForOfIteratorHelper(

          quest.getLocations()),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var loc = _step6.value;
              var advs = this.absorbs.getAdventuresInLocation(this.defeated, loc);

              if (advs == null || advs.turnsToGain == 0) {
                continue;
              }

              count++;
              continue loop;
            }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}
        }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}

      return count;
    } }, { key: "getQuestsWithAdventures", value:

    function getQuestsWithAdventures() {
      // We want to generate our adventues

      var toReturn = [];

      this.viableQuests.forEach((_ref3) => {var _ref4 = GreyChooser_slicedToArray(_ref3, 2),q = _ref4[0],path = _ref4[1];
        var run = q.run(path);

        if (run.location == null && q.getAbsorbs == null) {
          return;
        }

        var outfit = run.outfit;

        if (
        outfit != null && (
        outfit.minusCombatWeight > 0 && hasCombatSkillActive() ||
        outfit.plusCombatWeight > 0 && hasNonCombatSkillActive()))
        {
          return;
        }

        var advs;

        if (q.getAbsorbs != null) {
          advs = this.absorbs.getAdventuresByAbsorbs(
          this.defeated,
          q.getAbsorbs());

        } else {
          advs = this.absorbs.getAdventuresInLocation(
          this.defeated,
          run.location);

        }

        if (advs == null || advs.turnsToGain == 0) {
          return;
        }

        toReturn.push([q, path, advs]);
      });

      toReturn.sort((q1, q2) => {
        if (q1[0].status(q1[1]) != q2[0].status(q2[1])) {
          return 0;
        }

        return q1[2].turnsToGain - q2[2].turnsToGain;
      });

      return toReturn;
    } }, { key: "getQuestsWithoutAdventures", value:

    function getQuestsWithoutAdventures() {
      // We want to level up our goose here

      var toReturn = [];

      this.viableQuests.forEach((_ref5) => {var _ref6 = GreyChooser_slicedToArray(_ref5, 2),q = _ref6[0],path = _ref6[1];
        var run = q.run(path);

        var outfit = run.outfit;

        if (
        outfit != null && (
        outfit.minusCombatWeight > 0 && hasCombatSkillActive() ||
        outfit.plusCombatWeight > 0 && hasNonCombatSkillActive()))
        {
          return;
        }

        if (run.location == null) {
          toReturn.push([q, path, null]);
          return;
        }

        var advs = this.absorbs.getAdventuresInLocation(
        this.defeated,
        run.location,
        true);


        if (advs != null && advs.turnsToGain > 0) {
          return;
        }

        toReturn.push([q, path, advs]);
      });

      return toReturn;
    } }, { key: "getNonQuestsWithSkills", value:

    function getNonQuestsWithSkills() {
      var toReturn = this.goodAbsorbs.
      filter(
      (a) =>
      a.skills.size > 0 &&
      (0,external_kolmafia_namespaceObject.canAdventure)(a.location) &&
      !this.questLocations.includes(a.location)).

      map((a) => {
        return [a, a.expectedTurnsProfit + this.generateWeights(a.skills) / 10];
      });

      return toReturn.filter((a) => a[1] > 0);
    } }, { key: "getNonQuestsWithAdventures", value:

    function getNonQuestsWithAdventures() {
      // We want to generate our adventues
      // Returns a location and the adventures generated, with helpful skills given a weight / 10

      var toReturn = this.goodAbsorbs.
      filter(
      (a) =>
      a.turnsToGain > 0 &&
      (0,external_kolmafia_namespaceObject.canAdventure)(a.location) &&
      !this.questLocations.includes(a.location)).

      map((a) => {
        return [a, a.expectedTurnsProfit + this.generateWeights(a.skills) / 10];
      });

      return toReturn.filter((a) => a[1] > 0);
    } }, { key: "getNonQuestsWithoutAdventures", value:

    function getNonQuestsWithoutAdventures() {
      // We want to level up our goose here, and grab w/e required skills
      // Returns locations and the weight, where helpful skills are weight of 1, required are weight of 2

      var toReturn = this.goodAbsorbs.
      filter(
      (a) =>
      a.turnsToGain == 0 &&
      (0,external_kolmafia_namespaceObject.canAdventure)(a.location) &&
      !this.questLocations.includes(a.location)).

      map((a) => {
        return [a, this.generateWeights(a.skills)];
      });

      return toReturn.filter((a) => a[1] > 0);
    } }, { key: "getModifiedStatus", value:

    function getModifiedStatus(
    status,
    runned,
    hasBlessing)
    {
      if (status != QuestStatus.READY) {
        return status;
      }

      var outfit = runned.outfit;

      if (outfit != null) {
        if (outfit.minusCombatWeight > 0 && hasBlessing) {
          status = QuestStatus.FASTER_LATER;
        } else if ((0,external_kolmafia_namespaceObject.myMp)() < 50) {
          if (outfit.minusCombatWeight > 0 && !hasNonCombatSkillActive()) {
            status = QuestStatus.FASTER_LATER;
          } else if (
          outfit.plusCombatWeight > 0 &&
          (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Piezoelectric Honk")) &&
          !hasCombatSkillActive())
          {
            status = QuestStatus.FASTER_LATER;
          }
        }
      }

      return status;
    } }, { key: "generateWeights", value:

    function generateWeights(skills) {
      var weight = 0;
      var handy = this.absorbs.getUsefulSkills();
      var mustHave = this.absorbs.getMustHaveSkills();var _iterator7 = GreyChooser_createForOfIteratorHelper(

      skills.keys()),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var k = _step7.value;
          var w = 0;

          if (!GreySettings.speedRunMode && handy.has(k.skill)) {
            //   w = GreySettings.handySkillsWeight;
          } else if (mustHave.has(k.skill)) {
            w = GreySettings.usefulSkillsWeight;
          } else {
            continue;
          }

          weight += w;
        }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}

      return weight;
    } }, { key: "getRecommendedFamiliars", value:

    function getRecommendedFamiliars() {
      return this.path.thisPath.
      map((_ref7) => {var _ref8 = GreyChooser_slicedToArray(_ref7, 2),q = _ref8[0],path = _ref8[1];
        if (q.hasFamiliarRecommendation == null) {
          return null;
        }

        var fam = q.hasFamiliarRecommendation();

        if (fam == null) {
          return null;
        }

        var status = q.status(path);

        if (status == QuestStatus.COMPLETED) {
          return null;
        }

        return fam;
      }).
      filter((f) => f != null);
    } }, { key: "getQuestColor", value:

    function getQuestColor(status) {
      switch (status) {
        case QuestStatus.COMPLETED:
          return "green";
        case QuestStatus.FASTER_LATER:
          return "gray";
        case QuestStatus.NOT_READY:
          return "red";
        case QuestStatus.READY:
          return "green";}

    } }, { key: "printStatus", value:

    function printStatus() {
      var hasBlessing =
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Brother Corsican's Blessing")) +
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("A Girl Named Sue")) >
      0;var _iterator8 = GreyChooser_createForOfIteratorHelper(

      this.viableQuests),_step8;try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var _step8$value = GreyChooser_slicedToArray(_step8.value, 2),quest = _step8$value[0],path = _step8$value[1];
          var status = quest.status(path);
          status = this.getModifiedStatus(status, quest.run(path), hasBlessing);

          var line =
          "<u>" +
          quest.getId() +
          "</u>: " +
          doColor(QuestStatus[status], this.getQuestColor(status));

          (0,external_kolmafia_namespaceObject.printHtml)(line);
        }} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}
    } }, { key: "findGoodVisit", value:

    function findGoodVisit() {
      var abortNotEnoughAdventures =
      (0,external_kolmafia_namespaceObject.myAdventures)() <= GreySettings.adventuresBeforeAbort;
      var generateAdventuresOrAbort =
      (0,external_kolmafia_namespaceObject.myAdventures)() <= GreySettings.adventuresGenerateIfPossibleOrAbort;

      if (abortNotEnoughAdventures) {
        (0,external_kolmafia_namespaceObject.print)(
        "We don't have enough adventures to feel comfortable, aborting..",
        "red");

        return;
      }

      var mustBeDone = this.viableQuests.filter(
      (_ref9) => {var _ref10 = GreyChooser_slicedToArray(_ref9, 1),q = _ref10[0];return q.mustBeDone != null && q.mustBeDone();});


      if (
      mustBeDone.length > 1 &&
      mustBeDone.filter(
      (_ref11) => {var _ref12 = GreyChooser_slicedToArray(_ref11, 1),m = _ref12[0];return m.needAdventures == null || m.needAdventures() > 0;}).
      length <= 1)
      {
        mustBeDone = mustBeDone.filter(
        (_ref13) => {var _ref14 = GreyChooser_slicedToArray(_ref13, 1),m = _ref14[0];return m.needAdventures != null && m.needAdventures() <= 0;});


        if (mustBeDone.length > 1) {
          mustBeDone = mustBeDone.splice(1);
        }
      }

      if (mustBeDone.length > 1) {
        (0,external_kolmafia_namespaceObject.print)(
        "Multiple quests demand to be done! " +
        mustBeDone.map((_ref15) => {var _ref16 = GreyChooser_slicedToArray(_ref15, 1),q = _ref16[0];return q.getId();}).join(", "),
        "red");

        (0,external_kolmafia_namespaceObject.print)("This is not a real error, but not that great either.", "red");
      }

      if (mustBeDone.length > 0) {
        return {
          quest: mustBeDone[0][0],
          path: mustBeDone[0][1],
          locationInfo: this.absorbs.getAdventuresInLocation(
          this.defeated,
          mustBeDone[0][0].run(mustBeDone[0][1]).location,
          true) };


      }

      if (generateAdventuresOrAbort && !this.hasEnoughGooseWeight()) {
        (0,external_kolmafia_namespaceObject.print)(
        "We need more adventures but we're not ready for a reabsorb..",
        "red");

        return;
      }

      var getPredicts = () => {
        if (predicts == null) {
          predicts = currentPredictions();
        }

        return predicts;
      };
      var hasBlessing =
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Brother Corsican's Blessing")) +
      (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("A Girl Named Sue")) >
      0;

      var quests = [];
      var nonQuests = [];

      if (this.hasEnoughGooseWeight() && (0,external_kolmafia_namespaceObject.myLevel)() >= 5) {
        quests = this.getQuestsWithAdventures();
        nonQuests = this.getNonQuestsWithAdventures();

        nonQuests = nonQuests.filter((_ref17) => {var _ref18 = GreyChooser_slicedToArray(_ref17, 1),loc = _ref18[0];
          var mon = getPredicts().get(loc.location);

          loc.shouldRunOrb = mon == null || loc.monsters.includes(mon);
          loc.ensuredOrb = mon != null && loc.monsters.includes(mon);

          return loc.shouldRunOrb;
        });
      } else {
        // It doesn't have enough goose weight to absorb adventures, so lets try do non-quests without adventures
        // This is mostly skills
        nonQuests = this.getNonQuestsWithoutAdventures();
      }

      if (quests.length + nonQuests.length == 0) {
        quests = this.getQuestsWithoutAdventures();

        if (quests.length == 0 && nonQuests.length == 0) {
          quests = this.getQuestsWithAdventures();
        }
      }

      // Now we see if we can find quests that are ready to run.
      // If we can't, then we see if we can find non-quests that are ready to run
      // If we can't, then we see if we can find quests that don't want to run
      // If we can't, then we abort.

      var bestQuest;
      var bestStatus;
      var bestWantsResetOrb;
      var bestWantsToRunOrb;
      var predicts;var _iterator9 = GreyChooser_createForOfIteratorHelper(

      quests),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var holder = _step9.value;
          var _holder = GreyChooser_slicedToArray(holder, 3),quest = _holder[0],path = _holder[1],_adv = _holder[2];

          var status = quest.status(path);
          var runned = void 0;
          var wantToResetOrb = false;
          var wantsToRunOrb = false;

          if (
          this.hasEnoughGooseWeight() &&
          _adv != null &&
          _adv.monsters.length > 0)
          {
            var a = _adv;
            runned = quest.run(path);

            var current = getPredicts().get(a.location);

            if (current == null || a.monsters.includes(current)) {
              wantsToRunOrb = true;
              a.shouldRunOrb = true;
              a.ensuredOrb = current != null && a.monsters.includes(current);

              if (
              current != null &&
              this.hasEnoughGooseWeight() &&
              a.turnsToGain > 0)
              {
                a.expectedTurnsProfit = a.turnsToGain - 1;
              }
            } else {
              wantToResetOrb = true;
            }
          }

          if (status == QuestStatus.READY) {
            if (runned == null) {
              runned = quest.run(path);
            }

            status = this.getModifiedStatus(status, runned, hasBlessing);
          }

          if (bestQuest != null) {
            if (bestWantsToRunOrb) {
              if (status >= bestStatus) {
                continue;
              }
            } else if (!bestWantsResetOrb && wantToResetOrb) {
              continue;
            } else if (!wantsToRunOrb) {
              if (status >= bestStatus) {
                continue;
              }
            }
          }

          bestQuest = holder;
          bestStatus = quest.status(path);
          bestWantsResetOrb = wantToResetOrb;
          bestWantsToRunOrb = wantsToRunOrb;
        }} catch (err) {_iterator9.e(err);} finally {_iterator9.f();}

      if (bestQuest != null && bestWantsToRunOrb) {
        return {
          quest: bestQuest[0],
          path: bestQuest[1],
          locationInfo: bestQuest[2] };

      }

      nonQuests.sort((v1, v2) => v2[1] - v1[1]);

      if (nonQuests.length > 0) {
        var best;var _iterator10 = GreyChooser_createForOfIteratorHelper(

        nonQuests),_step10;try {for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {var _step10$value = GreyChooser_slicedToArray(_step10.value, 1),adv = _step10$value[0];
            var mon = getPredicts().get(adv.location);

            adv.shouldRunOrb =
            this.hasEnoughGooseWeight() && (
            mon == null || adv.monsters.includes(mon));

            // If we already have a best, and the would-be doesn't want to run orb
            if (best != null && !adv.shouldRunOrb) {
              continue;
            }

            best = adv;

            if (best.shouldRunOrb) {
              break;
            }
          }} catch (err) {_iterator10.e(err);} finally {_iterator10.f();}

        if (best != null && (bestQuest == null || best.shouldRunOrb)) {
          return {
            quest: null,
            path: null,
            locationInfo: best };

        }
      }

      if (bestQuest != null) {
        return {
          quest: bestQuest[0],
          path: bestQuest[1],
          locationInfo: bestQuest[2] };

      }

      (0,external_kolmafia_namespaceObject.print)(
      "Failed to find any quests that are willing to run, and failed to find any non-quest locations willing to run.",
      "red");

      return null;
    } }]);return AdventureFinder;}();
;// CONCATENATED MODULE: ./src/tasks/TaskBoomboxSwitch.ts
function TaskBoomboxSwitch_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskBoomboxSwitch_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskBoomboxSwitch_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskBoomboxSwitch_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskBoomboxSwitch_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskBoomboxSwitch_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var TaskBoomboxSwitch = /*#__PURE__*/function () {function TaskBoomboxSwitch() {TaskBoomboxSwitch_classCallCheck(this, TaskBoomboxSwitch);TaskBoomboxSwitch_defineProperty(this, "boombox",
    external_kolmafia_namespaceObject.Item.get("SongBoom&trade; BoomBox"));TaskBoomboxSwitch_defineProperty(this, "canSkip",
    false);TaskBoomboxSwitch_defineProperty(this, "noneItem",
    external_kolmafia_namespaceObject.Item.get("None"));TaskBoomboxSwitch_defineProperty(this, "skill",
    external_kolmafia_namespaceObject.Skill.get("Hivemindedness"));}TaskBoomboxSwitch_createClass(TaskBoomboxSwitch, [{ key: "isForgedRequired", value:

    function isForgedRequired() {
      return (0,external_kolmafia_namespaceObject.getProperty)("questL11Black") != "finished";
    } }, { key: "isZapWandRequired", value:

    function isZapWandRequired() {
      return (0,external_kolmafia_namespaceObject.getZapWand)() == this.noneItem;
    } }, { key: "getSongChangesLeft", value:

    function getSongChangesLeft() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_boomBoxSongsLeft"));
    } }, { key: "isMeatSong", value:

    function isMeatSong() {
      return (0,external_kolmafia_namespaceObject.getProperty)("boomBoxSong") == "Total Eclipse of Your Meat";
    } }, { key: "run", value:

    function run() {
      if (this.canSkip) {
        return;
      }

      // If we don't have the mp regen skill and we might run out of meat..
      if (!(0,external_kolmafia_namespaceObject.haveSkill)(this.skill) && (0,external_kolmafia_namespaceObject.myMeat)() < 15000) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.boombox) == 0 || this.getSongChangesLeft() < 10) {
        this.canSkip = true;
        return;
      }

      if (this.getSongChangesLeft() < 11 && !this.isMeatSong()) {
        this.canSkip = true;
        return;
      }

      if (
      (0,external_kolmafia_namespaceObject.getProperty)("sidequestNunsCompleted") == "none" &&
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("hippiesDefeated")) >= 192)
      {
        return;
      }

      var requiredMeat =
      1000 + (
      this.isForgedRequired() ? 6000 : 0) + (
      this.isZapWandRequired() ? 5000 : 0);

      // If we have enough meat, switch to seasoning.
      if ((0,external_kolmafia_namespaceObject.myMeat)() < requiredMeat) {
        return;
      }

      (0,external_kolmafia_namespaceObject.cliExecute)("boombox food");
      this.canSkip = true;
    } }]);return TaskBoomboxSwitch;}();
;// CONCATENATED MODULE: ./src/tasks/TaskCouncil.ts
function TaskCouncil_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskCouncil_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskCouncil_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskCouncil_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskCouncil_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskCouncil_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var TaskCouncil = /*#__PURE__*/function () {function TaskCouncil() {TaskCouncil_classCallCheck(this, TaskCouncil);TaskCouncil_defineProperty(this, "lastLevelVisited",
    (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastCouncilVisit")));}TaskCouncil_createClass(TaskCouncil, [{ key: "run", value:

    function run() {
      this.lastLevelVisited = Math.min(
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("lastCouncilVisit")),
      this.lastLevelVisited);


      if (this.lastLevelVisited >= (0,external_kolmafia_namespaceObject.myLevel)()) {
        return;
      }

      (0,external_kolmafia_namespaceObject.council)();
      this.lastLevelVisited = (0,external_kolmafia_namespaceObject.myLevel)();
      (0,external_kolmafia_namespaceObject.cliExecute)("refresh inventory");
    } }]);return TaskCouncil;}();
;// CONCATENATED MODULE: ./src/tasks/TaskEater.ts
function TaskEater_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskEater_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function TaskEater_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskEater_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskEater_arrayLikeToArray(o, minLen);}function TaskEater_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function TaskEater_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskEater_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskEater_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskEater_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskEater_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskEater_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var TaskEater = /*#__PURE__*/function () {















  function TaskEater() {TaskEater_classCallCheck(this, TaskEater);TaskEater_defineProperty(this, "prop", "_greyEatenToday");TaskEater_defineProperty(this, "npcFoods", ["Hot buttered roll", "Ketchup", "Catsup", "cup of lukewarm tea", "Fortune Cookie", "Pickled Egg"].map((s) => external_kolmafia_namespaceObject.Item.get(s)));TaskEater_defineProperty(this, "keepOnHand", ["Bunch of square grapes", "Boxed Wine"].map((s) => external_kolmafia_namespaceObject.Item.get(s)));TaskEater_defineProperty(this, "blackberry", external_kolmafia_namespaceObject.Item.get("Blackberry"));TaskEater_defineProperty(this, "seasoning", external_kolmafia_namespaceObject.Item.get("Special Seasoning"));
    if ((0,external_kolmafia_namespaceObject.getProperty)(this.prop) == "") {
      var dontEat = [];
      // Goat cheese quest
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Goat Cheese"));

      // Are you sure you want to eat this bla bla
      // Suppress that annoying "pvp stone no brokey??"
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Can of Red Minotaur"));

      // Palin quest items
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Stunt Nuts"));
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Wet Stew"));

      // Azeal booze quest items
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Giant marshmallow"));
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Booze-soaked cherry"));
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Sponge cake"));
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Gin-soaked blotter paper"));

      // Protesters quest item
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Unnamed cocktail"));
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Flamin' Whatshisname"));

      // Insufficient level
      dontEat.push(external_kolmafia_namespaceObject.Item.get("Pie man was not meant to eat"));

      (0,external_kolmafia_namespaceObject.setProperty)(this.prop, dontEat.map((s) => (0,external_kolmafia_namespaceObject.toInt)(s)).join(","));
    }
  }TaskEater_createClass(TaskEater, [{ key: "doAlwaysAvailable", value:

    function doAlwaysAvailable(eaten) {
      if ((0,external_kolmafia_namespaceObject.myMeat)() < 2000) {
        return;
      }

      var pants = external_kolmafia_namespaceObject.Item.get("Designer Sweatpants");var _iterator = TaskEater_createForOfIteratorHelper(

      this.npcFoods),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var item = _step.value;
          var id = (0,external_kolmafia_namespaceObject.toInt)(item).toString();

          if (eaten.includes(id)) {
            continue;
          }

          if ((0,external_kolmafia_namespaceObject.availableAmount)(pants) > 0 && (0,external_kolmafia_namespaceObject.equippedAmount)(pants) == 0) {
            (0,external_kolmafia_namespaceObject.equip)(pants);
          }

          (0,external_kolmafia_namespaceObject.cliExecute)("acquire 1 " + item.name);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "doTavern", value:

    function doTavern() {
      if ((0,external_kolmafia_namespaceObject.getProperty)("questL03Rat") != "finished" || (0,external_kolmafia_namespaceObject.myMeat)() < 2000) {
        return;
      }
    } }, { key: "doChez", value:

    function doChez(eaten) {
      if (!(0,external_kolmafia_namespaceObject.canadiaAvailable)() || (0,external_kolmafia_namespaceObject.myMeat)() < 2000) {
        return;
      }

      var daily = (0,external_kolmafia_namespaceObject.toInt)(external_kolmafia_namespaceObject.Item.get((0,external_kolmafia_namespaceObject.getProperty)("_dailySpecial"))).toString();

      if (eaten.includes(daily)) {
        return;
      }

      eaten.push(daily);

      for (var _i = 0, _arr = ["-1", "-2", "-3", daily]; _i < _arr.length; _i++) {var itemId = _arr[_i];
        (0,external_kolmafia_namespaceObject.visitUrl)("cafe.php?cafeid=1&pwd=&action=CONSUME!&whichitem=" + itemId);
      }
    } }, { key: "doGnomes", value:

    function doGnomes(eaten) {
      if (!(0,external_kolmafia_namespaceObject.gnomadsAvailable)() || (0,external_kolmafia_namespaceObject.myMeat)() < 2000) {
        return;
      }

      var daily = (0,external_kolmafia_namespaceObject.toInt)(external_kolmafia_namespaceObject.Item.get((0,external_kolmafia_namespaceObject.getProperty)("_dailySpecial"))).toString();

      if (eaten.includes(daily)) {
        return;
      }

      eaten.push(daily);

      for (var _i2 = 0, _arr2 = ["-1", "-2", "-3", daily]; _i2 < _arr2.length; _i2++) {var itemId = _arr2[_i2];
        (0,external_kolmafia_namespaceObject.visitUrl)("cafe.php?cafeid=2&pwd=&action=CONSUME!&whichitem=" + itemId);
      }
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.pullsRemaining)() == -1) {
        return;
      }

      var eaten = (0,external_kolmafia_namespaceObject.getProperty)(this.prop).split(",");

      this.doAlwaysAvailable(eaten);
      this.doChez(eaten);
      this.doGnomes(eaten);

      for (var _i3 = 0, _Object$keys = Object.keys((0,external_kolmafia_namespaceObject.getInventory)()); _i3 < _Object$keys.length; _i3++) {var i = _Object$keys[_i3];
        var item = external_kolmafia_namespaceObject.Item.get(i);

        if (item.fullness == 0 && item.inebriety == 0 && item.spleen == 0) {
          continue;
        }

        if ((0,external_kolmafia_namespaceObject.availableAmount)(item) <= 1 && this.keepOnHand.includes(item)) {
          continue;
        }

        if (item.levelreq > (0,external_kolmafia_namespaceObject.myLevel)() || !item.tradeable || item.quest) {
          continue;
        }

        if (eaten.includes((0,external_kolmafia_namespaceObject.toInt)(item) + "") || (0,external_kolmafia_namespaceObject.historicalPrice)(item) > 4000) {
          continue;
        }

        if (item == this.blackberry && getQuestStatus("questL11Black") <= 1) {
          continue;
        }

        if (item.fullness > 0) {
          if ((0,external_kolmafia_namespaceObject.itemAmount)(this.seasoning) > 0) {
            (0,external_kolmafia_namespaceObject.putCloset)((0,external_kolmafia_namespaceObject.itemAmount)(this.seasoning), this.seasoning);
          }

          (0,external_kolmafia_namespaceObject.eatsilent)(item);
        } else if (item.inebriety > 0) {
          (0,external_kolmafia_namespaceObject.drinksilent)(item);
        } else if (item.spleen > 0) {
          (0,external_kolmafia_namespaceObject.chew)(item);
        }

        eaten.push((0,external_kolmafia_namespaceObject.toInt)(item).toString());
      }

      (0,external_kolmafia_namespaceObject.setProperty)(this.prop, eaten.join(","));
    } }, { key: "tryMakeCraftables", value:

    function tryMakeCraftables() {} }]);return TaskEater;}();
;// CONCATENATED MODULE: ./src/tasks/TaskEquipDistillery.ts
function TaskEquipDistillery_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskEquipDistillery_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskEquipDistillery_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskEquipDistillery_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskEquipDistillery_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskEquipDistillery_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var TaskEquipDistillery = /*#__PURE__*/function () {function TaskEquipDistillery() {TaskEquipDistillery_classCallCheck(this, TaskEquipDistillery);TaskEquipDistillery_defineProperty(this, "gelcube",
    external_kolmafia_namespaceObject.Familiar.get("Gelatinous Cubeling"));TaskEquipDistillery_defineProperty(this, "distill",
    external_kolmafia_namespaceObject.Item.get("Tiny stillsuit"));TaskEquipDistillery_defineProperty(this, "lastRun",
    0);}TaskEquipDistillery_createClass(TaskEquipDistillery, [{ key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.itemAmount)(this.distill) == 0) {
        return;
      }

      if (!(0,external_kolmafia_namespaceObject.haveFamiliar)(this.gelcube) || (0,external_kolmafia_namespaceObject.myFamiliar)() == this.gelcube) {
        return;
      }

      if (this.lastRun-- > 0) {
        return;
      }

      this.lastRun = 2;

      (0,external_kolmafia_namespaceObject.visitUrl)("familiar.php?action=equip&pwd=&whichfam=171&whichitem=10932");
    } }]);return TaskEquipDistillery;}();
;// CONCATENATED MODULE: ./src/tasks/TaskFuelAsdon.ts
function TaskFuelAsdon_slicedToArray(arr, i) {return TaskFuelAsdon_arrayWithHoles(arr) || TaskFuelAsdon_iterableToArrayLimit(arr, i) || TaskFuelAsdon_unsupportedIterableToArray(arr, i) || TaskFuelAsdon_nonIterableRest();}function TaskFuelAsdon_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskFuelAsdon_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskFuelAsdon_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskFuelAsdon_arrayLikeToArray(o, minLen);}function TaskFuelAsdon_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function TaskFuelAsdon_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function TaskFuelAsdon_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function TaskFuelAsdon_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskFuelAsdon_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskFuelAsdon_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskFuelAsdon_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskFuelAsdon_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskFuelAsdon_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var TaskFuelAsdon = /*#__PURE__*/function () {function TaskFuelAsdon() {TaskFuelAsdon_classCallCheck(this, TaskFuelAsdon);TaskFuelAsdon_defineProperty(this, "sodaBread",
    external_kolmafia_namespaceObject.Item.get("Loaf of Soda Bread"));TaskFuelAsdon_defineProperty(this, "eachFuelWorth",
    24);TaskFuelAsdon_defineProperty(this, "invalidFuels",
    []);TaskFuelAsdon_defineProperty(this, "asdonMartin",
    external_kolmafia_namespaceObject.Item.get("Asdon Martin keyfob"));}TaskFuelAsdon_createClass(TaskFuelAsdon, [{ key: "run", value:

    function run() {
      if (
      (0,external_kolmafia_namespaceObject.myMeat)() < 8000 ||
      (0,external_kolmafia_namespaceObject.getWorkshed)() != this.asdonMartin ||
      getQuestStatus("questL11Black") < 2)
      {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.getFuel)() >= 150 || !(0,external_kolmafia_namespaceObject.haveOutfit)("Bugbear Costume")) {
        return;
      }

      while ((0,external_kolmafia_namespaceObject.myMeat)() > 1500 && (0,external_kolmafia_namespaceObject.getFuel)() < 50) {
        // Each soda bread is worth 5-7 so lets always keep 50 / 6 = 9ish on hand
        var toUse = Math.ceil((50 - (0,external_kolmafia_namespaceObject.getFuel)()) / 6);

        (0,external_kolmafia_namespaceObject.cliExecute)("asdonmartin fuel " + toUse + " " + this.sodaBread);
      }
    } }, { key: "getAvailableItems", value:

    function getAvailableItems() {
      // Returns <Item, Amount, Each Fuel Worth in Mall>
      var items = [];

      for (var _i = 0, _Object$entries = Object.entries((0,external_kolmafia_namespaceObject.getInventory)()); _i < _Object$entries.length; _i++) {var _Object$entries$_i = TaskFuelAsdon_slicedToArray(_Object$entries[_i], 2),itemName = _Object$entries$_i[0],amount = _Object$entries$_i[1];
        var item = external_kolmafia_namespaceObject.Item.get(itemName);

        if (this.invalidFuels.includes(item)) {
          continue;
        }

        if (item.fullness == 0 && item.inebriety == 0) {
          this.invalidFuels.push(item);
          continue;
        }

        if (item.quest || !item.tradeable || item.gift) {
          this.invalidFuels.push(item);
          continue;
        }

        var histPrice = (0,external_kolmafia_namespaceObject.historicalPrice)(item);

        if (histPrice <= 10) {
          continue;
        }

        if (!item.adventures.match(/^[0-9]+(-[0-9]+)?$/)) {
          this.invalidFuels.push(item);
          continue;
        }

        // Make sure we don't consume something great
        if (
        item.quality != "crappy" &&
        item.quality != "decent" &&
        item.quality != "good")
        {
          histPrice = Math.max(histPrice, (0,external_kolmafia_namespaceObject.mallPrice)(item));
        }

        var advs = (0,external_kolmafia_namespaceObject.toInt)(item.adventures.split("-")[0]);
        var costPerFuel = histPrice / advs;

        // If the fuel would cost more than soda bread..
        if (costPerFuel > this.eachFuelWorth) {
          this.invalidFuels.push(item);
          continue;
        }

        items.push([item, amount, costPerFuel]);
      }

      return items;
    } }]);return TaskFuelAsdon;}();
;// CONCATENATED MODULE: ./src/tasks/TaskJuneCleaver.ts
function TaskJuneCleaver_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskJuneCleaver_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskJuneCleaver_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskJuneCleaver_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskJuneCleaver_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskJuneCleaver_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var TaskJuneCleaver = /*#__PURE__*/function () {function TaskJuneCleaver() {TaskJuneCleaver_classCallCheck(this, TaskJuneCleaver);TaskJuneCleaver_defineProperty(this, "hasSet",
    false);TaskJuneCleaver_defineProperty(this, "hasSet2",
    false);TaskJuneCleaver_defineProperty(this, "hasSet3",
    false);TaskJuneCleaver_defineProperty(this, "teachersPen",
    external_kolmafia_namespaceObject.Item.get("Teacher's Pen"));}TaskJuneCleaver_createClass(TaskJuneCleaver, [{ key: "run", value:

    function run() {
      if (!this.hasSet) {
        this.hasSet = true;

        // Alligator
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1469", "3"); // 1.5k meat

        // Peotic
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1467", "3"); // Get adventures
        // Teachers
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1470", "2"); // Teachers pen
        // Lost and found
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1471", "1"); // Meat potion

        if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_juneCleaverSkips")) < 5) {
          // Sprouts
          (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1474", "4"); // Skip
          // Hypnotic
          (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1475", "4"); // Skip

          // Summer days
          (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1472", "4"); // Skip

          // Aunts
          (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1468", "4"); // Skip

          // Bath time
          (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1473", "4"); // Skip
        }
      }

      if (!this.hasSet2 && (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_juneCleaverSkips")) >= 5) {
        this.hasSet2 = true;

        // Aunts
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1468", "1"); // Mus substats

        // Summer days
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1472", "2"); // Food fish.

        // Bath time
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1473", "2"); // 2 res to spooky, stench, sleaze, DR 15

        // Sprouts
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1474", "2"); // Get food.

        // Hypnotic
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1475", "1"); // Moms necklace.
      }

      if (!this.hasSet3 && (0,external_kolmafia_namespaceObject.availableAmount)(this.teachersPen) > 1) {
        // Teachers
        (0,external_kolmafia_namespaceObject.setProperty)("choiceAdventure1470", "1"); // Teachers Pet
      }
    } }]);return TaskJuneCleaver;}();
;// CONCATENATED MODULE: ./src/tasks/TaskLatteFiller.ts
function TaskLatteFiller_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskLatteFiller_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskLatteFiller_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskLatteFiller_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskLatteFiller_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskLatteFiller_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var TaskLatteFiller = /*#__PURE__*/function () {function TaskLatteFiller() {TaskLatteFiller_classCallCheck(this, TaskLatteFiller);TaskLatteFiller_defineProperty(this, "skipLatte",
    (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_latteRefillsUsed")) > 0);TaskLatteFiller_defineProperty(this, "latte",
    external_kolmafia_namespaceObject.Item.get("Latte lovers member's mug"));}TaskLatteFiller_createClass(TaskLatteFiller, [{ key: "run", value:

    function run() {
      if (this.skipLatte) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.availableAmount)(this.latte) == 0) {
        this.skipLatte = true;
        return;
      }

      var flavors = [
      LatteFlavor.FAMILIAR_WEIGHT,
      LatteFlavor.MEAT_DROP,
      LatteFlavor.FAM_EXP];


      var currentFlavors = getCurrentLatteFlavors();

      if (flavors.filter((f) => !currentFlavors.includes(f)).length == 0) {
        this.skipLatte = true;
        return;
      }

      var notUnlocked = flavors.filter((f) => !hasUnlockedLatteFlavor(f));

      if (notUnlocked.length > 0) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_latteRefillsUsed")) > 0) {
        throw "latte was refilled but we don't remember that!";
      }

      (0,external_kolmafia_namespaceObject.cliExecute)("latte refill " + flavors.join(" "));
    } }]);return TaskLatteFiller;}();
;// CONCATENATED MODULE: ./src/tasks/TaskSellCrap.ts
function TaskSellCrap_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskSellCrap_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function TaskSellCrap_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskSellCrap_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskSellCrap_arrayLikeToArray(o, minLen);}function TaskSellCrap_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function TaskSellCrap_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskSellCrap_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskSellCrap_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskSellCrap_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskSellCrap_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskSellCrap_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var TaskSellCrap = /*#__PURE__*/function () {function TaskSellCrap() {TaskSellCrap_classCallCheck(this, TaskSellCrap);TaskSellCrap_defineProperty(this, "autosells",
    ["dense meat stack", "meat stack"].map((s) =>
    external_kolmafia_namespaceObject.Item.get(s)));TaskSellCrap_defineProperty(this, "junk",

    [
    "adder bladder",
    "loose teeth",
    "skeleton bone",
    "bottle of whiskey",
    "cranberries",
    "spiked femur",
    "batgut",
    "bat wing",
    "bone flute",
    "bottle of rum",
    "bottle of tequila",
    "spooky stick",
    "tequila grenade",
    "ancient frozen dinner",
    "accidental cider",
    "bottle of gin",
    "imp ale",
    "hot wing",
    "hellion cube",
    "hot katana blade",
    "ice-cold Willer",
    "lihc eye",
    "snifter of thoroughly aged brandy",
    "wussiness potion",
    "ancient pills",
    "Fat stacks of cash"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));TaskSellCrap_defineProperty(this, "autouse",
    [
    "Ancient Vinyl Coin Purse",
    "Black Pension Check",
    "CSA Discount Card",
    "Fat Wallet",
    "Gathered Meat-Clip",
    "Old Leather Wallet",
    "Penultimate Fantasy Chest",
    "Pixellated Moneybag",
    "Old Coin Purse",
    "Shiny Stones",
    "Briefcase"].
    map((s) => external_kolmafia_namespaceObject.Item.get(s)));}TaskSellCrap_createClass(TaskSellCrap, [{ key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.myMeat)() > 15000) {
        return;
      }var _iterator = TaskSellCrap_createForOfIteratorHelper(

      this.autosells),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if ((0,external_kolmafia_namespaceObject.itemAmount)(i) == 0) {
            continue;
          }

          (0,external_kolmafia_namespaceObject.autosell)((0,external_kolmafia_namespaceObject.itemAmount)(i), i);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = TaskSellCrap_createForOfIteratorHelper(

      this.autouse),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _i = _step2.value;
          if ((0,external_kolmafia_namespaceObject.itemAmount)(_i) == 0) {
            continue;
          }

          (0,external_kolmafia_namespaceObject.use)((0,external_kolmafia_namespaceObject.itemAmount)(_i), _i);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = TaskSellCrap_createForOfIteratorHelper(

      this.junk),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _i2 = _step3.value;
          if ((0,external_kolmafia_namespaceObject.itemAmount)(_i2) <= 1) {
            continue;
          }

          (0,external_kolmafia_namespaceObject.autosell)((0,external_kolmafia_namespaceObject.itemAmount)(_i2) - 1, _i2);
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
    } }]);return TaskSellCrap;}();
;// CONCATENATED MODULE: ./src/tasks/TaskMedicineCabinet.ts
function TaskMedicineCabinet_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskMedicineCabinet_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskMedicineCabinet_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskMedicineCabinet_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskMedicineCabinet_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskMedicineCabinet_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}



var TaskColdMedicineCabinet = /*#__PURE__*/function () {function TaskColdMedicineCabinet() {TaskMedicineCabinet_classCallCheck(this, TaskColdMedicineCabinet);TaskMedicineCabinet_defineProperty(this, "lastChecked",
    "_lastCheckedCabinet");TaskMedicineCabinet_defineProperty(this, "hat",
    external_kolmafia_namespaceObject.Item.get("Ice Crown"));TaskMedicineCabinet_defineProperty(this, "pants",
    external_kolmafia_namespaceObject.Item.get("frozen jeans"));TaskMedicineCabinet_defineProperty(this, "cabinet",
    external_kolmafia_namespaceObject.Item.get("Cold medicine cabinet"));}TaskMedicineCabinet_createClass(TaskColdMedicineCabinet, [{ key: "hasConsults", value:

    function hasConsults() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_coldMedicineConsults")) < 5;
    } }, { key: "getNextConsult", value:

    function getNextConsult() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_nextColdMedicineConsult")) - (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
    } }, { key: "isConsultReady", value:

    function isConsultReady() {
      return this.hasConsults() && this.getNextConsult() <= 0;
    } }, { key: "isIndoors", value:

    function isIndoors() {
      return (
        (0,external_kolmafia_namespaceObject.getProperty)("lastCombatEnvironments").
        split("").
        filter((s) => s == "i").length > 10);

    } }, { key: "getLastChecked", value:

    function getLastChecked() {
      return (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)(this.lastChecked));
    } }, { key: "shouldCheck", value:

    function shouldCheck() {
      return this.getLastChecked() + 10 <= (0,external_kolmafia_namespaceObject.totalTurnsPlayed)();
    } }, { key: "check", value:

    function check() {
      var page = (0,external_kolmafia_namespaceObject.visitUrl)("campground.php?action=workshed");

      (0,external_kolmafia_namespaceObject.setProperty)(this.lastChecked, (0,external_kolmafia_namespaceObject.totalTurnsPlayed)().toString());

      if (!(0,external_kolmafia_namespaceObject.handlingChoice)()) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.lastChoice)() != 1455) {
        throw "Unexpected situation";
      }

      if (GreySettings.isHardcoreMode() && (0,external_kolmafia_namespaceObject.availableAmount)(this.pants) == 0) {
        (0,external_kolmafia_namespaceObject.runChoice)(1);
      } else if (page.includes("Extrovermectin&trade;")) {
        (0,external_kolmafia_namespaceObject.runChoice)(5);
      } else {
        (0,external_kolmafia_namespaceObject.visitUrl)("main.php");
      }
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_namespaceObject.getWorkshed)() != this.cabinet) {
        return;
      }

      if (
      !this.hasConsults() ||
      !this.isConsultReady() ||
      !this.isIndoors() ||
      !this.shouldCheck())
      {
        return;
      }

      this.check();
    } }]);return TaskColdMedicineCabinet;}();
;// CONCATENATED MODULE: ./src/GreyAdventurer.ts
function GreyAdventurer_toConsumableArray(arr) {return GreyAdventurer_arrayWithoutHoles(arr) || GreyAdventurer_iterableToArray(arr) || GreyAdventurer_unsupportedIterableToArray(arr) || GreyAdventurer_nonIterableSpread();}function GreyAdventurer_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyAdventurer_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function GreyAdventurer_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return GreyAdventurer_arrayLikeToArray(arr);}function GreyAdventurer_slicedToArray(arr, i) {return GreyAdventurer_arrayWithHoles(arr) || GreyAdventurer_iterableToArrayLimit(arr, i) || GreyAdventurer_unsupportedIterableToArray(arr, i) || GreyAdventurer_nonIterableRest();}function GreyAdventurer_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyAdventurer_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function GreyAdventurer_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyAdventurer_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyAdventurer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyAdventurer_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyAdventurer_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyAdventurer_arrayLikeToArray(o, minLen);}function GreyAdventurer_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyAdventurer_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyAdventurer_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyAdventurer_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyAdventurer_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyAdventurer_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyAdventurer_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}





















var GreyAdventurer = /*#__PURE__*/function () {function GreyAdventurer() {GreyAdventurer_classCallCheck(this, GreyAdventurer);GreyAdventurer_defineProperty(this, "goose",
    external_kolmafia_namespaceObject.Familiar.get("Grey Goose"));GreyAdventurer_defineProperty(this, "adventureFinder",
    new AdventureFinder());GreyAdventurer_defineProperty(this, "goTime", void 0);GreyAdventurer_defineProperty(this, "tasks",

    [
    new TaskEater(),
    new TaskSellCrap(),
    new TaskColdMedicineCabinet(),
    new TaskCouncil(),
    new TaskLatteFiller(),
    new TaskMaintainStatus(),
    new TaskFuelAsdon(),
    new TaskJuneCleaver(),
    new TaskBoomboxSwitch(),
    new TaskEquipDistillery()]);}GreyAdventurer_createClass(GreyAdventurer, [{ key: "runTurn", value:


    function runTurn(goTime) {
      this.goTime = goTime;

      if (goTime) {var _iterator = GreyAdventurer_createForOfIteratorHelper(
        this.tasks),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var task = _step.value;
            task.run();
          }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
      }

      this.adventureFinder.start();
      var goodAdventure = this.adventureFinder.findGoodVisit();

      this.adventureFinder.printStatus();

      if (goodAdventure == null) {
        (0,external_kolmafia_namespaceObject.print)("Failed, should have printed an error..", "gray");
        return false;
      }

      var snapshot = createResourcesSnapshot(goodAdventure.path);

      this.printMessage(goodAdventure);
      this.runAdventure(goodAdventure);

      var changed =
      goodAdventure.path == null ?
      getResourcesChanged(snapshot) :
      goodAdventure.path.detectResourceUsage(snapshot);

      if (this.isMismatch(snapshot, changed)) {
        return false;
      }

      return true;
    } }, { key: "isMismatch", value:

    function isMismatch(
    snapshotBeforeRun,
    changedBy)
    {
      var expected = new Map();var _iterator2 = GreyAdventurer_createForOfIteratorHelper(

      ResourceIds),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var resourceId = _step2.value;
          expected.set(resourceId, snapshotBeforeRun.resourceMap.get(resourceId));
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = GreyAdventurer_createForOfIteratorHelper(

      changedBy.resources),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _resource$resourcesUs;var resource = _step3.value;
          expected.set(
          resource.id,
          expected.get(resource.id) - ((_resource$resourcesUs = resource.resourcesUsed) !== null && _resource$resourcesUs !== void 0 ? _resource$resourcesUs : 1));

        }

        // Resource ID
        // What it was before we used resources
        // How much the snapshot said changed
        // What it should be after we used resources
        // What it currently is
      } catch (err) {_iterator3.e(err);} finally {_iterator3.f();}var mismatch =
      new Map();var _iterator4 = GreyAdventurer_createForOfIteratorHelper(

      ResourceIds),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var id = _step4.value;
          if (expected.get(id) == getResourcesLeft(id)) {
            continue;
          }

          // If we actually gained resources, probs clovers..
          if (snapshotBeforeRun.resourceMap.get(id) < getResourcesLeft(id)) {
            continue;
          }

          if (id == "Yellow Rocket" || id == "Retro Yellow Ray") {
            continue;
          } else if (id == "Pull" && getResourcesLeft(id) > 50) {
            continue;
          }

          mismatch.set(id, [
          snapshotBeforeRun.resourceMap.get(id),
          changedBy.resourceMap.get(id),
          expected.get(id),
          getResourcesLeft(id)]);

        }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

      if (mismatch.size == 0) {
        return false;
      }

      (0,external_kolmafia_namespaceObject.print)("Mismatch in resources used, aborting to be safe.", "red");

      (0,external_kolmafia_namespaceObject.print)("These resources were allowed to be used: ".concat(
      snapshotBeforeRun.resources.map(
      (r) => {var _r$resourcesUsed;return r.id + " (" + r.type + ", uses " + ((_r$resourcesUsed = r.resourcesUsed) !== null && _r$resourcesUsed !== void 0 ? _r$resourcesUsed : 1) + ")";})),

      "red");

      (0,external_kolmafia_namespaceObject.print)("These resources were marked as used: ".concat(
      changedBy.resources.map(
      (r) => {var _r$resourcesUsed2;return r.id + " (" + r.type + ", uses " + ((_r$resourcesUsed2 = r.resourcesUsed) !== null && _r$resourcesUsed2 !== void 0 ? _r$resourcesUsed2 : 1) + ")";})),

      "red");


      mismatch.forEach(
      (_ref, resourceId) => {var _ref2 = GreyAdventurer_slicedToArray(_ref, 4),beforeUsage = _ref2[0],changedBy = _ref2[1],shouldBe = _ref2[2],actualResource = _ref2[3];
        (0,external_kolmafia_namespaceObject.print)("".concat(
        resourceId, " was ").concat(beforeUsage, " and calculated to be ").concat(shouldBe, ", expected to have changed by ").concat(changedBy, ". Is now ").concat(actualResource),
        "red");

      });


      return true;
    } }, { key: "printMessage", value:

    function printMessage(goodAdventure) {
      var plan = [];

      if (goodAdventure.quest != null) {
        plan.push("Quest");
      }

      if (goodAdventure.locationInfo != null) {
        if (goodAdventure.locationInfo.turnsToGain > 0) {
          plan.push(
          "Absorb Adventures (Expect " +
          goodAdventure.locationInfo.expectedTurnsProfit +
          " profit of total " +
          goodAdventure.locationInfo.turnsToGain +
          " possible)");

        }

        if (goodAdventure.locationInfo.skills.size > 0) {
          var skills = [];

          goodAdventure.locationInfo.skills.forEach((v, k) => {
            skills.push(k.skill.name + " (" + v + ")");
          });

          plan.push("Grab Skills: " + skills.join(", "));
        }

        if (goodAdventure.locationInfo.monsters != null) {
          var monsters = [];

          var absorbed = this.adventureFinder.defeated;

          goodAdventure.locationInfo.monsters.
          map((m) => {
            var absorb = AbsorbsProvider.getAbsorb(m);

            if (absorb == null) {
              return m.name;
            }

            if (absorb.skill != null) {
              return m.name + " (Skill)";
            }

            if ((absorb.adventures || 0) <= 0) {
              return m.name;
            }

            if (absorbed.get(m) == Reabsorbed.REABSORBED) {
              return m.name;
            }

            return (
              m.name + " (Absorbs x " + (!absorbed.has(m) ? "2" : "1") + ")");

          }).
          forEach((m) => monsters.push(m));

          plan.push("Fight: " + monsters.join(", "));
        }
      }

      var prefix;

      if (goodAdventure.quest != null) {
        goodAdventure.adventure = goodAdventure.quest.run(goodAdventure.path);

        prefix =
        goodAdventure.quest.getId() + " @ " + goodAdventure.adventure.location;
      } else {
        goodAdventure.adventure = this.getNonQuest(goodAdventure.locationInfo);

        prefix = "Non-Quest @ " + goodAdventure.adventure.location;
      }

      (0,external_kolmafia_namespaceObject.printHtml)(
      "<u>" +
      doColor(prefix, "blue") +
      ", Goals:</u> " +
      doColor(plan.map((s) => "<u>" + s + "</u>").join(", "), "gray"));

    } }, { key: "getNonQuest", value:

    function getNonQuest(adv) {
      var outfit = new GreyOutfit();

      if (adv.location.combatPercent < 100) {
        outfit.setPlusCombat();
      }

      var settings = new AdventureSettings();
      settings.nonquest = true;
      adv.monsters.forEach((m) => settings.addNoBanish(m));

      return {
        outfit: outfit,
        location: adv.location,
        run: () => {
          // We don't want it casting +combat skills
          greyAdv(adv.location, null, settings);
        } };

    } }, { key: "doOutfitPrep", value:

    function doOutfitPrep(adventure) {
      var toRun = adventure.adventure;
      var outfit = toRun.outfit;

      if (
      outfit != null &&
      toRun.location == external_kolmafia_namespaceObject.Location.get("Inside the Palindome"))
      {
        outfit.addItem(external_kolmafia_namespaceObject.Item.get("Talisman o' Namsilat"));
      }

      var familiar = this.goose;
      var wantToAbsorb =
      adventure.locationInfo != null && adventure.locationInfo.turnsToGain > 0;
      var gooseReplaceable =
      !wantToAbsorb && this.adventureFinder.hasEnoughGooseWeight();
      var canDoMagGlass =
      this.adventureFinder.hasEnoughGooseWeight() &&
      outfit.minusCombatWeight == 0 &&
      outfit.itemDropWeight < 1 &&
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("cursedMagnifyingGlassCount")) < 13 &&
      (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("_voidFreeFights")) < 5;
      var reallyLovesMagGlass =
      (0,external_kolmafia_namespaceObject.getProperty)("sidequestLighthouseCompleted") == "none" &&
      (0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("barrel of gunpowder")) < 5;
      var doOrb = false;

      if (adventure.locationInfo != null && adventure.locationInfo.shouldRunOrb) {
        doOrb = true;

        if (!adventure.locationInfo.ensuredOrb) {
          outfit.addBonus("+20 bonus Kramco Sausage-o-Matic&trade;");
        }
      }

      if (canDoMagGlass) {
        var bonus = 10;

        if (reallyLovesMagGlass) {
          bonus = 100;
        }

        outfit.addBonus("+".concat(bonus, " bonus cursed magnifying glass"));
      }

      if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("scrapbookCharges")) < 100) {
        var _bonus = 2;

        if (GreySettings.greyPrepareLevelingResources) {
          _bonus = 4;

          if (canDoMagGlass) {
            _bonus = 11;
          }
        }

        outfit.addBonus("+" + _bonus + " bonus familiar scrapbook");
      }

      outfit.addBonus("+2 bonus lucky gold ring");
      var sweat = (0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("sweat"));

      if (sweat < 100 && outfit.itemDropWeight < 1) {
        outfit.addBonus("+".concat(sweat < 5 ? 16 : 8, " bonus designer sweatpants"));
      }

      var powerLevelGoose = false;

      if (
      toRun.familiar != null && (
      toRun.disableFamOverride == true || !wantToAbsorb))
      {
        familiar = toRun.familiar;
      } else if (gooseReplaceable) {
        var replaceWith = [];

        // If we don't expect to be doing absorbs in the future..
        if (
        GreySettings.greyPrepareLevelingResources &&
        (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) < 20)
        {
          AbsorbsProvider.remainingAdvAbsorbs =
          AbsorbsProvider.remainingAdvAbsorbs.filter(
          (m) => !AbsorbsProvider.getReabsorbedMonsters().includes(m));


          if (AbsorbsProvider.remainingAdvAbsorbs.length <= 3) {
            replaceWith.push(this.goose);
            powerLevelGoose = true;
          }
        }

        replaceWith.push.apply(replaceWith, GreyAdventurer_toConsumableArray(this.adventureFinder.getRecommendedFamiliars()));

        if ((0,external_kolmafia_namespaceObject.toInt)((0,external_kolmafia_namespaceObject.getProperty)("camelSpit")) < 100) {
          replaceWith.push(external_kolmafia_namespaceObject.Familiar.get("Melodramedary"));
        }

        var robor = external_kolmafia_namespaceObject.Familiar.get("Robortender");
        var doRobor =
        (0,external_kolmafia_namespaceObject.getProperty)("_roboDrinks").includes("drive-by shooting") &&
        (0,external_kolmafia_namespaceObject.familiarWeight)(robor) < 20;

        var toLevelUp = [
        "Pocket Professor",
        (0,external_kolmafia_namespaceObject.haveFamiliar)(external_kolmafia_namespaceObject.Familiar.get("Frumious Bandersnatch")) ?
        "Frumious Bandersnatch" :
        "Pair of Stomping Boots",
        (0,external_kolmafia_namespaceObject.haveFamiliar)(robor) ? doRobor ? "Robortender" : "" : "Hobomonkey",
        "Jumpsuited Hound Dog"].

        filter((f) => f.length > 0).
        map((f) => external_kolmafia_namespaceObject.Familiar.get(f)).
        filter((f) => (0,external_kolmafia_namespaceObject.haveFamiliar)(f) && (0,external_kolmafia_namespaceObject.familiarWeight)(f) < 20);

        replaceWith.push.apply(replaceWith, GreyAdventurer_toConsumableArray(toLevelUp.filter((f) => (0,external_kolmafia_namespaceObject.familiarWeight)(f) <= 15)));
        replaceWith.push.apply(replaceWith, GreyAdventurer_toConsumableArray(toLevelUp));

        replaceWith.push(familiar);

        familiar = replaceWith.filter((f) => (0,external_kolmafia_namespaceObject.haveFamiliar)(f))[0];
      }

      if (
      doOrb ||
      toRun.familiar == null && gooseReplaceable ||
      familiar == external_kolmafia_namespaceObject.Familiar.get("Melodramedary"))
      {
        outfit.addBonus("+10 bonus june cleaver");
      }

      var locationToSet = toRun.location;

      if (locationToSet == null) {
        locationToSet = external_kolmafia_namespaceObject.Location.get("Noob Cave");
      }

      (0,external_kolmafia_namespaceObject.setLocation)(locationToSet);

      if ((0,external_kolmafia_namespaceObject.availableAmount)(external_kolmafia_namespaceObject.Item.get("Unbreakable Umbrella")) > 0) {
        setUmbrella(outfit.getUmbrella());
      }

      (0,external_kolmafia_namespaceObject.useFamiliar)(familiar);

      if (familiar == external_kolmafia_namespaceObject.Familiar.get("Melodramedary")) {
        outfit.famExpWeight = 0;
      } else if (
      familiar != this.goose ||
      (0,external_kolmafia_namespaceObject.familiarWeight)(this.goose) >= 6 && !powerLevelGoose)
      {
        outfit.famExpWeight = 1;
      }

      var maximizeResult = (0,external_kolmafia_namespaceObject.maximize)(
      outfit.createString() +
      " " + (
      doOrb ? "+99999 bonus" : "-equip") +
      " miniature crystal ball",
      false);


      if (!maximizeResult) {
        throw "Failed to maximize. Either fix, or report to the script author";
      }

      var closet = external_kolmafia_namespaceObject.Item.get("Funky junk key");

      if ((0,external_kolmafia_namespaceObject.itemAmount)(closet) > 0) {
        (0,external_kolmafia_namespaceObject.putCloset)(closet, (0,external_kolmafia_namespaceObject.itemAmount)(closet));
      }
    } }, { key: "runAdventure", value:

    function runAdventure(adventure) {
      var toRun = adventure.adventure;

      if (toRun.outfit != GreyOutfit.IGNORE_OUTFIT) {
        if (toRun.outfit == null) {
          toRun.outfit = new GreyOutfit();
        }

        this.doOutfitPrep(adventure);
      } else if (toRun.outfit == null) {
        toRun.outfit = new GreyOutfit();
      }

      if (this.goTime) {
        var turn = (0,external_kolmafia_namespaceObject.turnsPlayed)();

        try {
          toRun.run();
        } finally {
          if (GreySettings.greyDebug) {
            var name = "grey_turns_played_".concat((0,external_kolmafia_namespaceObject.myAscensions)(), ".txt");

            var buffer = (0,external_kolmafia_namespaceObject.fileToBuffer)(name);

            if (buffer == "") {
              buffer = "# Turns Played\tQuest ID\tLocation\tTurns Taken";
            }

            var id = adventure.quest ? adventure.quest.getId() : "Non-Quest";

            toRun.location;

            buffer += "\n".concat((0,external_kolmafia_namespaceObject.turnsPlayed)(), "\t").concat(id, "\t").concat(toRun.location, "\t").concat(
            (0,external_kolmafia_namespaceObject.turnsPlayed)() - turn);


            (0,external_kolmafia_namespaceObject.bufferToFile)(buffer.toString(), name);
          }
        }
      } else {
        (0,external_kolmafia_namespaceObject.print)("Sim run()!");
      }
    } }]);return GreyAdventurer;}();


function castNoCombatSkills() {
  if (
  (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Phase Shift")) &&
  (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Shifted Phase")) == 0 &&
  restoreMPTo(50))
  {
    (0,external_kolmafia_namespaceObject.useSkill)(external_kolmafia_namespaceObject.Skill.get("Phase Shift"));
  }

  if (
  (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Photonic Shroud")) &&
  (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Darkened Photons")) == 0 &&
  restoreMPTo(50))
  {
    (0,external_kolmafia_namespaceObject.useSkill)(external_kolmafia_namespaceObject.Skill.get("Photonic Shroud"));
  }

  restoreMPTo(20);

  if ((0,external_kolmafia_namespaceObject.myMp)() < 20) {
    throw "Expected at least 20 mp";
  }
}

function castCombatSkill() {
  if (
  (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Piezoelectric Honk")) &&
  (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Hooooooooonk!")) == 0 &&
  restoreMPTo(50))
  {
    (0,external_kolmafia_namespaceObject.useSkill)(external_kolmafia_namespaceObject.Skill.get("Piezoelectric Honk"));
  }

  restoreMPTo(20);

  if ((0,external_kolmafia_namespaceObject.myMp)() < 20) {
    throw "Expected at least 20 mp";
  }
}

function hasNonCombatSkillsReady() {var wantBoth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var s1 = (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Phase Shift"));
  var s2 = (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Photonic Shroud"));

  var s1e = (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Shifted Phase")) > 0;
  var s2e = (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Darkened Photons")) > 0;

  if (wantBoth) {
    return (
      s1 &&
      s2 &&
      (s1e ? 0 : 50) + (s2e ? 0 : 40) + 20 <= (0,external_kolmafia_namespaceObject.myMp)() + (0,external_kolmafia_namespaceObject.myMeat)() / 200);

  }

  return s1e || s2e || (s1 || s2) && (0,external_kolmafia_namespaceObject.myMp)() + (0,external_kolmafia_namespaceObject.myMeat)() / 200 >= 60;
}

function hasCombatSkillReady() {
  return (
    hasCombatSkillActive() ||
    (0,external_kolmafia_namespaceObject.haveSkill)(external_kolmafia_namespaceObject.Skill.get("Piezoelectric Honk")) &&
    (0,external_kolmafia_namespaceObject.myMp)() + (0,external_kolmafia_namespaceObject.myMeat)() / 200 >= 50);

}

function hasBanisherSkill() {
  return haveSkill(Skill.get("System Sweep"));
}

function hasCombatSkillActive() {
  return (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Hooooooooonk!")) > 0;
}

function hasNonCombatSkillActive() {
  return (
    (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Shifted Phase")) > 0 ||
    (0,external_kolmafia_namespaceObject.haveEffect)(external_kolmafia_namespaceObject.Effect.get("Darkened Photons")) > 0);

}
;// CONCATENATED MODULE: ./src/typings/TaskManager.ts
function TaskManager_toConsumableArray(arr) {return TaskManager_arrayWithoutHoles(arr) || TaskManager_iterableToArray(arr) || TaskManager_unsupportedIterableToArray(arr) || TaskManager_nonIterableSpread();}function TaskManager_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskManager_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function TaskManager_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return TaskManager_arrayLikeToArray(arr);}function TaskManager_slicedToArray(arr, i) {return TaskManager_arrayWithHoles(arr) || TaskManager_iterableToArrayLimit(arr, i) || TaskManager_unsupportedIterableToArray(arr, i) || TaskManager_nonIterableRest();}function TaskManager_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskManager_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function TaskManager_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function TaskManager_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskManager_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function TaskManager_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskManager_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskManager_arrayLikeToArray(o, minLen);}function TaskManager_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function TaskManager_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskManager_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function TaskManager_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskManager_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskManager_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskManager_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} // The biggest failures are
// 1. Key sources, we want to get 3 key sources. Some key sources might return more than 1
// 2. Possible paths. Sometimes there's two questlines we can pick
// 3. Crypts, the boat technically means the boat should be in all four crypts or something
// 4. Giving negative adventures, if we provide -50 then we expect to save 50 advs.
// 5. Paths that have so many variables on what could be provided, but basically just initial pulls
// 6. Paths that are a one and done, but the quest can still be done
// 7. Quests that are optional, but entirely depend on the path being picked. We can either provide a dummy path, or something else







var SimmedPath = /*#__PURE__*/function () {







  function SimmedPath(assumeUnused) {var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;TaskManager_classCallCheck(this, SimmedPath);TaskManager_defineProperty(this, "resourcesRemaining", new Map());TaskManager_defineProperty(this, "resourcesUsed", []);TaskManager_defineProperty(this, "thisPath", []);TaskManager_defineProperty(this, "totalCost", void 0);TaskManager_defineProperty(this, "advsSaved", void 0);TaskManager_defineProperty(this, "profitLost", void 0);
    if (skip) {
      return;
    }var _iterator = TaskManager_createForOfIteratorHelper(

    getResources()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var resource = _step.value;
        this.resourcesRemaining.set(
        resource.id,
        getResourcesLeft(resource.id, assumeUnused));

      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }TaskManager_createClass(SimmedPath, [{ key: "isThisBetterThan", value:

    function isThisBetterThan(compareAgainst, eachTurnWorth) {
      var oldProfit = compareAgainst.getProfitLost(eachTurnWorth);
      var newProfit = this.getProfitLost(eachTurnWorth);

      if (oldProfit[0] + oldProfit[1] < newProfit[0] + newProfit[1]) {
        return false;
      }

      return true;
    } }, { key: "printInfo", value:

    function printInfo() {var _this = this;
      var used = new Map();var _iterator2 = TaskManager_createForOfIteratorHelper(

      this.resourcesUsed),_step2;try {var _loop = function _loop() {var _step2$value = TaskManager_slicedToArray(_step2.value, 2),quest = _step2$value[0],resource = _step2$value[1];
          var key = resource.id;

          if (!used.has(key)) {
            used.set(key, []);
          }

          var id = quest.getId();

          var pair = used.get(key).find((_ref5) => {var _ref6 = TaskManager_slicedToArray(_ref5, 1),p = _ref6[0];return p == id;});

          if (pair == null) {
            var path = _this.thisPath.find((_ref7) => {var _ref8 = TaskManager_slicedToArray(_ref7, 2),qu = _ref8[0],pa = _ref8[1];return qu.getId() === id;})[1];

            used.get(key).push(pair = [id, 0, path.getAverageTurns()]);
          }

          pair[1] = pair[1] + 1;};for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {_loop();
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      var index1 = 0;

      used.forEach((details, k) => {
        index1++;

        (0,external_kolmafia_namespaceObject.printHtml)("<font color='blue'>".concat(
        k, " x ").concat(details.
        map((_ref) => {var _ref2 = TaskManager_slicedToArray(_ref, 2),amount = _ref2[1];return amount;}).
        reduce((d1, d2) => d1 + d2, 0), "</font> => ").concat(details.
        map(
        (_ref3, index) => {var _ref4 = TaskManager_slicedToArray(_ref3, 3),quest = _ref4[0],amount = _ref4[1],turns = _ref4[2];return "<font color='".concat(

          (index + index1) % 2 == 0 ? "gray" : "", "'>").concat(
          quest, " x ").concat(amount, " (").concat(turns, " advs)</font>");}).

        join(", ")));

      });

      var advs = this.getAdvs();

      (0,external_kolmafia_namespaceObject.print)(
      "With mpa of " +
      GreySettings.greyValueOfAdventure +
      " and using estimated " +
      Math.floor(this.getTotalCost()) +
      " meat of resources, save " +
      advs[0] +
      " to " +
      advs[1] +
      " adventures compared to the worst alternatives");

    } }, { key: "setPath", value:

    function setPath(paths) {
      this.thisPath = paths;
    } }, { key: "assignResources", value:

    function assignResources() {var _this2 = this;var _iterator3 = TaskManager_createForOfIteratorHelper(
      this.resourcesUsed),_step3;try {var _loop2 = function _loop2() {var _step3$value = TaskManager_slicedToArray(_step3.value, 2),quest = _step3$value[0],resource = _step3$value[1];
          var _this2$thisPath$find = _this2.thisPath.find((_ref9) => {var _ref10 = TaskManager_slicedToArray(_ref9, 1),q = _ref10[0];return q === quest;}),_this2$thisPath$find2 = TaskManager_slicedToArray(_this2$thisPath$find, 2),path = _this2$thisPath$find2[1];

          path.resourcesAvailable.push(resource);};for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {_loop2();
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
    } }, { key: "getAdvs", value:

    function getAdvs() {
      if (this.advsSaved == null) {
        this.advsSaved = [0, 0];var _iterator4 = TaskManager_createForOfIteratorHelper(

        this.thisPath),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var _step4$value = TaskManager_slicedToArray(_step4.value, 2),path = _step4$value[1];
            if (path == null) {
              continue;
            }

            this.advsSaved[0] += path.advsSavedMin;
            this.advsSaved[1] += path.advsSavedMax;
          }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
      }

      return this.advsSaved;
    } }, { key: "clone", value:

    function clone() {
      var newPath = new SimmedPath(false, true);
      newPath.resourcesRemaining = new Map(this.resourcesRemaining);
      newPath.resourcesUsed = TaskManager_toConsumableArray(this.resourcesUsed);
      newPath.thisPath = TaskManager_toConsumableArray(this.thisPath);

      return newPath;
    } }, { key: "addUse", value:

    function addUse(quest, resource, chance) {
      this.resourcesUsed.push([quest, resource, chance]);
      this.resourcesRemaining.set(
      resource.id,
      this.resourcesRemaining.get(resource.id) - (resource.resourcesUsed || 1));

    } }, { key: "canUse", value:

    function canUse(resource) {
      return (
        this.resourcesRemaining.get(resource.id) >= (resource.resourcesUsed || 1));

    } }, { key: "getTotalCost", value:

    function getTotalCost() {
      this.totalCost = this.thisPath.
      map((p) => p[1] != null ? p[1].miscMeat : 0).
      reduce((p, n) => p + n, 0);var _iterator5 = TaskManager_createForOfIteratorHelper(

      this.resourcesUsed),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var resource = _step5.value;
          this.totalCost += resource[1].worthInAftercore * 1; //resource[2];
        }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}

      return this.totalCost;
    }

    /**
     * Returns how much profit was lost following this path
     */ }, { key: "getProfitLost", value:
    function getProfitLost(advsWorth) {
      if (this.profitLost == null) {
        // Costs are a negative
        var meatGain = this.getTotalCost();

        this.profitLost = [
        meatGain - this.getAdvs()[0] * advsWorth,
        meatGain - this.getAdvs()[1] * advsWorth];

      }

      return this.profitLost;
    } }]);return SimmedPath;}();


var FigureOutPath = /*#__PURE__*/function () {function FigureOutPath() {TaskManager_classCallCheck(this, FigureOutPath);TaskManager_defineProperty(this, "resources",
    getResources());}TaskManager_createClass(FigureOutPath, [{ key: "getPaths", value:

    function getPaths(quests) {var _this3 = this;var assumeUnstarted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      (0,external_kolmafia_namespaceObject.print)("Now calculating resources..");
      var allPaths = [];
      var miscPaths = [];
      var uncompleteable = [];

      // What we need to do is sort the paths by the most profitable. Ideally we want to eliminate the ones that are just not feasible asap.
      // If it wants 2 faxes but we only want 1, then we can immediately eliminate the least profitable.
      var _iterator6 = TaskManager_createForOfIteratorHelper(quests),_step6;try {var _loop3 = function _loop3() {var quest = _step6.value;
          var q = quest;

          if (q.getPossiblePaths == null) {
            miscPaths.push(quest);
            return "continue";
          }

          if (q.createPaths != null) {
            q.createPaths(assumeUnstarted);
          }

          var paths = q.getPossiblePaths();

          if (paths == null) {
            //miscPaths.push(quest);
            return "continue";
          }

          if (paths.length == 0) {
            (0,external_kolmafia_namespaceObject.print)(
            "We should never have empty paths, assume this is a bug. If we want to avoid doing the quest, return null and status() instead.",
            "red");

          }

          if (
          quest.level() >= 1 &&
          !assumeUnstarted &&
          quest.status() == QuestStatus.COMPLETED)
          {
            return "continue";
          }var _iterator8 = TaskManager_createForOfIteratorHelper(

          paths),_step8;try {var _loop4 = function _loop4() {var path = _step8.value;var _iterator10 = TaskManager_createForOfIteratorHelper(
              ResourceIds),_step10;try {var _loop5 = function _loop5() {var res = _step10.value;
                  if (path.ignoreResources.includes(res)) {
                    return "continue";
                  }

                  var possibles = getResources().filter(
                  (r) => r.id == res && path.canUse(r.type) > 0);


                  if (possibles.length <= 1) {
                    return "continue";
                  }

                  (0,external_kolmafia_namespaceObject.print)("Better check " + quest.getId() + " for " + res);};for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {var _ret2 = _loop5();if (_ret2 === "continue") continue;
                }} catch (err) {_iterator10.e(err);} finally {_iterator10.f();}};for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {_loop4();
            }} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}

          paths = paths.filter((p) => {
            var resources = new Map();var _iterator9 = TaskManager_createForOfIteratorHelper(

            ResourceIds),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var resourceId = _step9.value;
                resources.set(
                resourceId,
                getResourcesLeft(resourceId, assumeUnstarted));

              }} catch (err) {_iterator9.e(err);} finally {_iterator9.f();}

            var resourcesToComplete = _this3.getResourcesToComplete(
            resources,
            quest,
            p);


            if (resourcesToComplete == null) {
              return false;
            }

            p.setRoughPathCost(resourcesToComplete);

            return true;
          });

          if (paths.length == 0) {
            uncompleteable.push(quest);
            return "continue";
          }

          // Now we figure out how many advs each path would save compared to the other
          var mostAdvsCouldveUsed = paths.
          map((p) => [p.advsSavedMin, p.advsSavedMax]).
          reduce((p, n) => [Math.max(p[0], n[0]), Math.max(p[1], n[1])]);

          paths.forEach((p) => {
            // If this path would take 2 to 5 adventures
            // And the most adventures are 1 to 30
            // That means we would profit -1 to 25
            p.advsSavedMin = mostAdvsCouldveUsed[0] - p.advsSavedMin;
            p.advsSavedMax = mostAdvsCouldveUsed[1] - p.advsSavedMax;
          });

          paths.sort((p1, p2) => p1.getCostPerAdv() - p2.getCostPerAdv());

          var cheapestNoResource = paths.find(
          (p) => p.resourcesNeeded.length == 0);


          if (cheapestNoResource != null) {
            var meatSavedOnPath =
            cheapestNoResource.pathCost -
            (cheapestNoResource.advsSavedMin + cheapestNoResource.advsSavedMax) /
            2 *
            GreySettings.greyValueOfAdventure;
          }

          allPaths.push([quest, paths]);};for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var _ret = _loop3();if (_ret === "continue") continue;
        }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}

      if (uncompleteable.length > 0) {var _iterator7 = TaskManager_createForOfIteratorHelper(
        uncompleteable),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var q = _step7.value;
            (0,external_kolmafia_namespaceObject.print)(
            "Unable to plot a path! Not enough resources to complete `" +
            q.getId() +
            "`",
            "red");

            var combos = q.
            getPossiblePaths().
            map((p) =>
            p.resourcesNeeded.map(
            (_ref11) => {var _ref12 = TaskManager_slicedToArray(_ref11, 2),r = _ref12[0],amount = _ref12[1];return ResourceCategory[r] + " x " + amount;}));



            (0,external_kolmafia_namespaceObject.print)("Combinations of resources needed are: ".concat(combos.join(" OR ")));
          }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}

        return null;
      }

      allPaths.sort((_ref13, _ref14) => {var _ref15 = TaskManager_slicedToArray(_ref13, 2),_ref15$ = TaskManager_slicedToArray(_ref15[1], 1),p1 = _ref15$[0];var _ref16 = TaskManager_slicedToArray(_ref14, 2),_ref16$ = TaskManager_slicedToArray(_ref16[1], 1),p2 = _ref16$[0];
        return p1.getCostPerAdv() - p2.getCostPerAdv();
      });

      var simmedPath = this.doAttempt(
      new SimmedPath(assumeUnstarted),
      0,
      allPaths);


      if (simmedPath == null) {
        return null;
      }

      simmedPath.assignResources();

      miscPaths.forEach((q) => {
        simmedPath.thisPath.push([q, null]);
      });

      return simmedPath;
    } }, { key: "doAttempt", value:

    function doAttempt(
    currentPath,
    index,
    allPaths)
    {var _this4 = this;
      var _allPaths$index = TaskManager_slicedToArray(allPaths[index++], 2),quest = _allPaths$index[0],paths = _allPaths$index[1];

      var possible =



      [];var _iterator11 = TaskManager_createForOfIteratorHelper(

      paths),_step11;try {for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {var path = _step11.value;
          var resources =
          this.getResourcesToComplete(
          currentPath.resourcesRemaining,
          quest,
          path);


          if (resources == null) {
            continue;
          }

          var resourceCost = resources.
          map((r) => r[1].worthInAftercore * r[2]).
          reduce((p, n) => p + n, 0);
          var extraAdvsWorth =
          GreySettings.greyValueOfAdventure * (
          (path.advsSavedMax - path.advsSavedMin) / 2 + path.advsSavedMin);

          possible.push([
          path,
          resources,
          path.miscMeat + resourceCost - extraAdvsWorth]);

        }} catch (err) {_iterator11.e(err);} finally {_iterator11.f();}

      possible.sort((_ref17, _ref18) => {var _ref19 = TaskManager_slicedToArray(_ref17, 3),meat1 = _ref19[2];var _ref20 = TaskManager_slicedToArray(_ref18, 3),meat2 = _ref20[2];return meat1 - meat2;});

      var tried = 0;
      var best;
      var addPath = (
      simmed,
      quest,
      path) =>
      {
        if (path instanceof PossibleMultiPath) {var _iterator12 = TaskManager_createForOfIteratorHelper(
          path.subpaths),_step12;try {for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {var _step12$value = TaskManager_slicedToArray(_step12.value, 2),_quest = _step12$value[0],p = _step12$value[1];
              addPath(simmed, _quest, p);
            }} catch (err) {_iterator12.e(err);} finally {_iterator12.f();}
        } else {
          simmed.thisPath.push([quest, path]);
        }
      };var _loop6 = function _loop6() {

        var _possible$_i = TaskManager_slicedToArray(_possible[_i2], 2),path = _possible$_i[0],resources = _possible$_i[1];
        var simmed = currentPath.clone();

        addPath(simmed, quest, path);

        resources.forEach((_ref21) => {var _ref22 = TaskManager_slicedToArray(_ref21, 3),quest = _ref22[0],resource = _ref22[1],amount = _ref22[2];
          simmed.addUse(quest, resource, amount);
        });

        tried++;

        if (index < allPaths.length) {
          simmed = _this4.doAttempt(simmed, index, allPaths);

          if (simmed == null) {
            return "continue";
          }
        }

        if (
        best == null ||
        simmed.isThisBetterThan(best, GreySettings.greyValueOfAdventure))
        {
          best = simmed;
        }

        if (tried >= (path.pathCost <= 5000 ? 1 : 2)) {
          return { v: best };
        }};for (var _i2 = 0, _possible = possible; _i2 < _possible.length; _i2++) {var _ret3 = _loop6();if (_ret3 === "continue") continue;if (typeof _ret3 === "object") return _ret3.v;
      }

      return best;
    }

    /**
     * @returns [QuestInfo, Resource, Chance of use][]
     */ }, { key: "getResourcesToComplete", value:
    function getResourcesToComplete(
    resourcesAvailable,
    quest,
    path)
    {
      return this.doResourcesToComplete(
      quest,
      path,
      new Map(resourcesAvailable),
      []);

    } }, { key: "doResourcesToComplete", value:

    function doResourcesToComplete(
    quest,
    path,
    resourcesAvailable,
    resources)
    {
      if (path instanceof PossibleMultiPath) {var _iterator13 = TaskManager_createForOfIteratorHelper(
        path.subpaths),_step13;try {for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {var _step13$value = TaskManager_slicedToArray(_step13.value, 2),q = _step13$value[0],p = _step13$value[1];
            var result = this.doResourcesToComplete(
            q,
            p,
            resourcesAvailable,
            resources);


            if (result == null) {
              return null;
            }
          }} catch (err) {_iterator13.e(err);} finally {_iterator13.f();}
      } else {
        var skip = new Map();var _iterator14 = TaskManager_createForOfIteratorHelper(
        path.resourcesNeeded),_step14;try {for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {var _r$resourcesUsed;var _step14$value = TaskManager_slicedToArray(_step14.value, 2),res = _step14$value[0],chance = _step14$value[1];
            if (!skip.has(res)) {
              skip.set(res, path.getUsed(res));
            }

            if (skip.get(res) > 0) {
              skip.set(res, skip.get(res) - 1);
              continue;
            }

            var r = this.getResource(
            resourcesAvailable,
            res,
            path.ignoreResources);


            if (r == null) {
              return null;
            }

            resources.push([quest, r, chance]);
            resourcesAvailable.set(
            r.id,
            resourcesAvailable.get(r.id) - ((_r$resourcesUsed = r.resourcesUsed) !== null && _r$resourcesUsed !== void 0 ? _r$resourcesUsed : 1));

          }} catch (err) {_iterator14.e(err);} finally {_iterator14.f();}
      }

      return resources;
    } }, { key: "getResource", value:

    function getResource(
    used,
    resourceType,
    unsupported)
    {var _iterator15 = TaskManager_createForOfIteratorHelper(
      this.resources),_step15;try {for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {var resource = _step15.value;
          if (resource.type != resourceType || unsupported.includes(resource.id)) {
            continue;
          }

          if (used.get(resource.id) >= (resource.resourcesUsed || 1)) {
            return resource;
          }
        }} catch (err) {_iterator15.e(err);} finally {_iterator15.f();}

      return null;
    } }]);return FigureOutPath;}();
;// CONCATENATED MODULE: ./src/utils/GreyTimings.ts
function GreyTimings_slicedToArray(arr, i) {return GreyTimings_arrayWithHoles(arr) || GreyTimings_iterableToArrayLimit(arr, i) || GreyTimings_unsupportedIterableToArray(arr, i) || GreyTimings_nonIterableRest();}function GreyTimings_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyTimings_iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function GreyTimings_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyTimings_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyTimings_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyTimings_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyTimings_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyTimings_arrayLikeToArray(o, minLen);}function GreyTimings_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyTimings_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyTimings_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyTimings_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyTimings_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyTimings_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyTimings_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var GreyTimings = /*#__PURE__*/function () {function GreyTimings() {GreyTimings_classCallCheck(this, GreyTimings);GreyTimings_defineProperty(this, "prop",
    "_greyScriptTimings");GreyTimings_defineProperty(this, "expectingStart",
    true);}GreyTimings_createClass(GreyTimings, [{ key: "doStart", value:

    function doStart() {
      if (!this.expectingStart) {
        throw "Expected a end, not a start";
      }

      this.expectingStart = false;

      var times = (0,external_kolmafia_namespaceObject.getProperty)(this.prop).
      split(",").
      filter((s) => s.length > 0);

      times.push(this.getTime().toString());
      (0,external_kolmafia_namespaceObject.setProperty)(this.prop, times.join(","));
    } }, { key: "doEnd", value:

    function doEnd() {
      if (this.expectingStart) {
        throw "Expected a start, not a end";
      }

      this.expectingStart = true;
      (0,external_kolmafia_namespaceObject.setProperty)(this.prop, (0,external_kolmafia_namespaceObject.getProperty)(this.prop) + ":" + this.getTime());
    } }, { key: "getTimings", value:

    function getTimings() {
      var timings = [];var _iterator = GreyTimings_createForOfIteratorHelper(

      (0,external_kolmafia_namespaceObject.getProperty)(this.prop).
      split(",").
      map((s) => s.split(":"))),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = GreyTimings_slicedToArray(_step.value, 2),t1 = _step$value[0],t2 = _step$value[1];
          timings.push([(0,external_kolmafia_namespaceObject.toInt)(t1), t2 ? (0,external_kolmafia_namespaceObject.toInt)(t2) : null]);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return timings;
    } }, { key: "getTotalSeconds", value:

    function getTotalSeconds() {
      var timeTaken = 0;
      var timings = this.getTimings();

      for (var i = 0; i < timings.length; i++) {
        var _timings$i = GreyTimings_slicedToArray(timings[i], 2),started = _timings$i[0],ended = _timings$i[1];

        if (!ended) {
          ended = i + 1 < timings.length ? timings[i + 1][1] : this.getTime();
        }

        timeTaken += ended - started;
      }

      return timeTaken;
    } }, { key: "getTime", value:

    function getTime() {
      return Math.round(Date.now() / 1000);
    } }, { key: "getTimeAsString", value:

    function getTimeAsString(time) {
      var hours = Math.floor(time / 3600).toString();
      var minutes = Math.floor(time % 3600 / 60).toString();
      var seconds = (time % 60).toString();

      if (hours.length <= 1) {
        hours = "0" + hours;
      }

      if (minutes.length <= 1) {
        minutes = "0" + minutes;
      }

      if (seconds.length <= 1) {
        seconds = "0" + seconds;
      }

      return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
    } }]);return GreyTimings;}();
;// CONCATENATED MODULE: ./src/_git_commit.ts
var lastCommitHash = "7069848";
;// CONCATENATED MODULE: ./src/GreyYouMain.ts
function GreyYouMain_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyYouMain_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function GreyYouMain_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyYouMain_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyYouMain_arrayLikeToArray(o, minLen);}function GreyYouMain_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function GreyYouMain_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyYouMain_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function GreyYouMain_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyYouMain_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyYouMain_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyYouMain_defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}








var

GreyYouMain = /*#__PURE__*/function () {function GreyYouMain() {GreyYouMain_classCallCheck(this, GreyYouMain);GreyYouMain_defineProperty(this, "adventures", void 0);GreyYouMain_defineProperty(this, "reachedTower",

    "_greyReachedTower");GreyYouMain_defineProperty(this, "svn_name",
    "Kasekopf-loop-casual-branches-release");}GreyYouMain_createClass(GreyYouMain, [{ key: "isRevisionPass", value:

    function isRevisionPass() {
      var required = 26658;

      if ((0,external_kolmafia_namespaceObject.getRevision)() > 0 && (0,external_kolmafia_namespaceObject.getRevision)() < required) {
        (0,external_kolmafia_namespaceObject.print)("Please update your mafia. You are using ".concat(
        (0,external_kolmafia_namespaceObject.getRevision)(), " but we need at least ").concat(required),
        "red");

        return false;
      }

      return true;
    } }, { key: "getTick", value:

    function getTick() {
      return "<font color='green'>✔</font>";
    } }, { key: "getCross", value:

    function getCross() {
      return "<font color='red'>✘</font>";
    } }, { key: "doSettings", value:

    function doSettings() {
      var settings = getGreySettings();

      (0,external_kolmafia_namespaceObject.printHtml)(centerText("====== Grey Settings ======", "blue"));

      var html = "";var _iterator = GreyYouMain_createForOfIteratorHelper(

      settings),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var setting = _step.value;
          if (setting.viable == false) {
            continue;
          }

          html += "<br>";

          var val = (0,external_kolmafia_namespaceObject.getProperty)(setting.name);

          html += "<font color='blue'>".concat(setting.name, "</font> - <font color='gray'>").concat(setting.description, "</font>");
          html += "<br>";

          if (setting.valid(val)) {
            html += "".concat(this.getTick(), " <font color='green'>Setting '").concat(val, "' is valid</font>");
          } else if (val == "") {
            html += "".concat(this.getTick(), " <font color=>Using default").concat(
            setting.default != null ? " '".concat(setting.default, "'") : "", "</font>");

          } else {
            html += "".concat(this.getCross(), " <font color='red'>Invalid setting '").concat(val, "'</font>");
          }
          html += "<br>";
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      html += "<br>You can change these settings by using the following in CLI:";
      html += "<br>";
      html += "<font color='purple'>set settingName = value</font>";

      (0,external_kolmafia_namespaceObject.printHtml)(centerText(html));

      (0,external_kolmafia_namespaceObject.print)("");
      (0,external_kolmafia_namespaceObject.printHtml)(
      "<div style=\"text-align: center;\" color='blue'>======================</div>");

    } }, { key: "doHelp", value:

    function doHelp() {
      (0,external_kolmafia_namespaceObject.printHtml)(centerText("======================================"));
      (0,external_kolmafia_namespaceObject.print)("help - Shows this message", "blue");
      (0,external_kolmafia_namespaceObject.print)("settings - Show the settings", "blue");
      (0,external_kolmafia_namespaceObject.print)("required - Prints off a series of requirements.", "blue");
      (0,external_kolmafia_namespaceObject.print)(
      "resources - A debug command that predicts what resources it would try to use in Grey You using your current settings",
      "blue");


      var color = (0,external_kolmafia_namespaceObject.myPath)() == "Grey You" ? "blue" : "red";

      if (color == "red") {
        (0,external_kolmafia_namespaceObject.print)("You are not in Grey You, and cannot use these commands.", "gray");
      }

      (0,external_kolmafia_namespaceObject.print)(
      "run <Turns> - Run X amount of turns, or 999 if turns are not provided",
      color);

      (0,external_kolmafia_namespaceObject.print)(
      "sim - Equips and gets ready to adventure, showing where it would go. But will not take the action.",
      color);

      (0,external_kolmafia_namespaceObject.print)(
      "absorbs - Prints off what adventure absorbs have not yet been grabbed",
      color);

      (0,external_kolmafia_namespaceObject.printHtml)(centerText("======================================"));
    } }, { key: "checkVersion", value:

    function checkVersion() {
      // Copied from Kasekopf's loopgyou
      (0,external_kolmafia_namespaceObject.print)("Running Greyday version [".concat(

      lastCommitHash !== null && lastCommitHash !== void 0 ? lastCommitHash : "custom-built", "] in KoLmafia r").concat(
      (0,external_kolmafia_namespaceObject.getRevision)()), "grey");



      if (lastCommitHash !== undefined && (0,external_kolmafia_namespaceObject.svnExists)(this.svn_name)) {
        if (!(0,external_kolmafia_namespaceObject.svnAtHead)(this.svn_name)) {
          (0,external_kolmafia_namespaceObject.print)(
          'A newer version of this script is available and can be obtained with "svn update".',
          "red");

        } else {
          (0,external_kolmafia_namespaceObject.print)("This script is up to date.", "blue");
        }
      }
    } }, { key: "handleCommand", value:

    function handleCommand(command) {
      command = command.toLowerCase();

      if (!this.isRevisionPass()) {
        return;
      }

      this.checkVersion();

      GreySettings.loadSettings();

      if (command == "resources") {
        var adv = new GreyAdventurer();
        var path = new FigureOutPath().getPaths(
        adv.adventureFinder.getAllRawQuests(),
        true);


        if (path == null) {
          (0,external_kolmafia_namespaceObject.print)("Oh no! Path not found");
          return;
        }

        path.printInfo();
        return;
      }

      if (command == "" || command == "help") {
        this.doHelp();
        return;
      }

      if (command.includes("require")) {
        new GreyRequirements().hasRequired();
        return;
      }

      if (command == "settings") {
        this.doSettings();
        return;
      }

      if (
      command != "absorbs" &&
      command != "run" &&
      !command.startsWith("run ") &&
      command != "sim")
      {
        (0,external_kolmafia_namespaceObject.print)("Unknown command.");
        return;
      }

      var settings = getGreySettings();
      var invalid = false;var _iterator2 = GreyYouMain_createForOfIteratorHelper(

      settings),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var setting = _step2.value;
          var val = (0,external_kolmafia_namespaceObject.getProperty)(setting.name);

          if (val == "" || setting.valid(val)) {
            continue;
          }

          (0,external_kolmafia_namespaceObject.printHtml)(
          "<font color='red'>The setting '" +
          setting.name +
          "' is invalid, please correct this or set it to empty. To reset it, use the CLI command <font color='blue'>set " +
          setting.name +
          " =</font></font>");

        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      if (invalid) {
        return;
      }

      if ((0,external_kolmafia_namespaceObject.myPath)() != "Grey You") {
        (0,external_kolmafia_namespaceObject.print)(
        "You're not in grey you. Use 'help' to see what you can use.",
        "red");

        return;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("greyBreakAtTower") == "") {
        (0,external_kolmafia_namespaceObject.print)(
        "The 'greyBreakAtTower' setting has not been set, the script will not break when it reaches the tower.",
        "red");

      }

      this.adventures = new GreyAdventurer();
      var s = command.split(" ");

      if (command == "absorbs") {
        this.adventures.adventureFinder.absorbs.printRemainingAbsorbs();
        return;
      }

      if ((0,external_kolmafia_namespaceObject.getProperty)("autoSatisfyWithNPCs") == "false") {
        var prompt = (0,external_kolmafia_namespaceObject.userConfirm)(
        "Your 'Buy from NPC stores' is disabled. Enable?");


        if (!prompt) {
          (0,external_kolmafia_namespaceObject.print)("Unable to continue, not allowed to buy from NPC stores.", "red");
          return;
        }

        (0,external_kolmafia_namespaceObject.setProperty)("autoSatisfyWithNPCs", "true");
      }

      var simmedPath = new FigureOutPath().getPaths(
      this.adventures.adventureFinder.getAllRawQuests());


      if (simmedPath == null) {
        (0,external_kolmafia_namespaceObject.print)("Failed to find a way to accomplish!", "red");
        return;
      }

      this.adventures.adventureFinder.path = simmedPath;

      (0,external_kolmafia_namespaceObject.print)("Resources planning..");
      simmedPath.printInfo();

      if (command == "sim") {
        this.adventures.runTurn(false);
        return;
      } else if (s[0] == "go" || s[0] == "run") {
        var turns = (0,external_kolmafia_namespaceObject.toInt)(s[1] || "999");

        var effect = external_kolmafia_namespaceObject.Effect.get("Beaten Up");
        var lastBeaten = (0,external_kolmafia_namespaceObject.haveEffect)(effect);

        var timings = new GreyTimings();
        var turnsRunAsFar = 0;

        if (turns > 0) {
          timings.doStart();
        }

        var pullsBeforeStart = (0,external_kolmafia_namespaceObject.getProperty)("_roninStoragePulls");

        try {
          for (;

          turnsRunAsFar < turns && (0,external_kolmafia_namespaceObject.haveEffect)(effect) - lastBeaten != 3;
          turnsRunAsFar++)
          {
            if (this.shouldReturn()) {
              return;
            }

            lastBeaten = (0,external_kolmafia_namespaceObject.haveEffect)(effect);
            var run = this.adventures.runTurn(true);

            if (!run) {
              break;
            }
          }
        } finally {
          if (turns > 0) {
            timings.doEnd();
          }

          var extraPulls = (0,external_kolmafia_namespaceObject.getProperty)(
          (0,external_kolmafia_namespaceObject.getProperty)("_roninStoragePulls").replace(pullsBeforeStart, "")).

          split(",").
          filter((s) => s.length > 0);

          var greyPulls = (0,external_kolmafia_namespaceObject.getProperty)("_greyPulls").
          split(",").
          filter((s) => s.length > 0);var _iterator3 = GreyYouMain_createForOfIteratorHelper(

          extraPulls),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var p = _step3.value;
              if (greyPulls.includes(p)) {
                continue;
              }

              greyPulls.push(p);
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          if (greyPulls.length > 0) {
            (0,external_kolmafia_namespaceObject.setProperty)("_greyPulls", greyPulls.join(","));
          }

          (0,external_kolmafia_namespaceObject.print)(
          "Time to run this script as far today is: " +
          timings.getTimeAsString(timings.getTotalSeconds()),
          "blue");

        }

        if ((0,external_kolmafia_namespaceObject.haveEffect)(effect) - lastBeaten == 3) {
          (0,external_kolmafia_namespaceObject.print)("Oh no! We were beaten up..", "red");
        }

        (0,external_kolmafia_namespaceObject.print)("Done running", "blue");
        return;
      }
    } }, { key: "shouldReturn", value:

    function shouldReturn() {
      if (
      GreySettings.greyBreakAtTower &&
      (0,external_kolmafia_namespaceObject.getProperty)(this.reachedTower) != "true" &&
      getQuestStatus("questL13Final") >= 0)
      {
        (0,external_kolmafia_namespaceObject.setProperty)(this.reachedTower, "true");
        (0,external_kolmafia_namespaceObject.visitUrl)("place.php?whichplace=nstower");

        (0,external_kolmafia_namespaceObject.print)(
        "We've reached the tower! Now aborting script as set by preference 'greyBreakAtTower'!",
        "blue");

        (0,external_kolmafia_namespaceObject.print)("The script will continue when you run the script again.");

        printEndOfRun();
        return true;
      }

      return false;
    } }]);return GreyYouMain;}();


function printEndOfRun() {
  var pulls = (0,external_kolmafia_namespaceObject.getProperty)("_greyPulls").
  split(",").
  map((s) => (0,external_kolmafia_namespaceObject.toItem)((0,external_kolmafia_namespaceObject.toInt)(s)));

  if (!GreySettings.isHardcoreMode()) {
    (0,external_kolmafia_namespaceObject.print)("Used ".concat(
    pulls.length, " / ").concat(
    GreySettings.greyPullsLimit, " pulls. ").concat(
    (0,external_kolmafia_namespaceObject.pullsRemaining)(), " pull").concat(
    (0,external_kolmafia_namespaceObject.pullsRemaining)() == 1 ? "" : "s", " remain.."),

    "blue");

  }

  (0,external_kolmafia_namespaceObject.print)(
  "Took " +
  (0,external_kolmafia_namespaceObject.turnsPlayed)() +
  " turns this run! " +
  (0,external_kolmafia_namespaceObject.myAdventures)() +
  " turns left to play with!",
  "blue");

  new AbsorbsProvider().printRemainingAbsorbs();
  (0,external_kolmafia_namespaceObject.print)("Pulled: " + pulls.map((i) => i.name).join(", "), "gray");
}

function GreyYouMain_main() {var parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  new GreyYouMain().handleCommand(parameter);
}
var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;