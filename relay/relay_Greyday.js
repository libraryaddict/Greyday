/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 733:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eF": () => (/* binding */ getResourceSettings),
/* harmony export */   "is": () => (/* binding */ ResourceIds),
/* harmony export */   "jh": () => (/* binding */ getResources),
/* harmony export */   "r": () => (/* binding */ getResourcesLeft),
/* harmony export */   "s6": () => (/* binding */ ResourceCategory)
/* harmony export */ });
/* unused harmony exports PillkeeperPill, getResourceValues, isTurnCounter */
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_GreyClan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(782);
/* harmony import */ var _utils_GreySettings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(97);
/* harmony import */ var _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(152);
function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






// We should use the category only to determine if a quest is asking for a resource type, but doesn't tell us if it supports a certain resource or not. Aka not implemented.
var ResourceCategory;(function (ResourceCategory) {ResourceCategory[ResourceCategory["COPIER"] = 0] = "COPIER";ResourceCategory[ResourceCategory["OLFACT_COPIER"] = 1] = "OLFACT_COPIER";ResourceCategory[ResourceCategory["FAXER"] = 2] = "FAXER";ResourceCategory[ResourceCategory["CARGO_SHORTS"] = 3] = "CARGO_SHORTS";ResourceCategory[ResourceCategory["BANISHER"] = 4] = "BANISHER";ResourceCategory[ResourceCategory["YELLOW_RAY"] = 5] = "YELLOW_RAY";ResourceCategory[ResourceCategory["PULL"] = 6] = "PULL";ResourceCategory[ResourceCategory["ZAP"] = 7] = "ZAP";ResourceCategory[ResourceCategory["CLOVER"] = 8] = "CLOVER";ResourceCategory[ResourceCategory["POLAR_VORTEX"] = 9] = "POLAR_VORTEX";ResourceCategory[ResourceCategory["HUGS_AND_KISSES"] = 10] = "HUGS_AND_KISSES";ResourceCategory[ResourceCategory["FIRE_EXTINGUSHER_ZONE"] = 11] = "FIRE_EXTINGUSHER_ZONE";ResourceCategory[ResourceCategory["GLOVE_REPLACE"] = 12] = "GLOVE_REPLACE";ResourceCategory[ResourceCategory["DECK_OF_EVERY_CARD"] = 13] = "DECK_OF_EVERY_CARD";ResourceCategory[ResourceCategory["DECK_OF_EVERY_CARD_CHEAT"] = 14] = "DECK_OF_EVERY_CARD_CHEAT";ResourceCategory[ResourceCategory["CAT_HEIST"] = 15] = "CAT_HEIST";ResourceCategory[ResourceCategory["HOT_TUB"] = 16] = "HOT_TUB";ResourceCategory[ResourceCategory["FORCE_NC"] = 17] = "FORCE_NC";ResourceCategory[ResourceCategory["FORCE_FIGHT"] = 18] = "FORCE_FIGHT";ResourceCategory[ResourceCategory["PILL_KEEPER"] = 19] = "PILL_KEEPER";ResourceCategory[ResourceCategory["WANDERERS"] = 20] = "WANDERERS";})(ResourceCategory || (ResourceCategory = {}));























var ResourceIds = [
"Backup Camera",
"Cosplay Saber",
"Bowling Ball",
"Asdon",
"Combat Locket",
"Fax Machine",
"Wish",
"Cargo Shorts",
"Powerful Glove",
"Fire Extingusher",
"Yellow Ray",
"Pull",
"Clover",
"Deck of Every Card",
"Zap Wand",
"Cat Burglar Heist",
"Hot Tub",
"Chateau Painting",
"Parka: Force NC",
"Pillkeeper",
"Portscan",
"Hugs and Kisses",
"Autumn-aton",
"Digitize",
"Romantic Arrow"];


var PillkeeperPill;(function (PillkeeperPill) {PillkeeperPill["YELLOW_RAY"] = "explode";PillkeeperPill["DOUBLE_POTION"] = "extend";PillkeeperPill["FORCE_NC"] = "noncombat";PillkeeperPill["ALL_RES"] = "element";PillkeeperPill["DOUBLE_STATS"] = "stat";PillkeeperPill["FAM_WEIGHT"] = "familiar";PillkeeperPill["LUCKY"] = "lucky";PillkeeperPill["RANDOM_ADVENTURE"] = "random";})(PillkeeperPill || (PillkeeperPill = {}));








































function getResourceSettings() {
  return getResourceValues().map(function (res) {
    var def = ResourceValues[res.name];

    var setting = {
      setting: "values",
      name: "greyValue_" + res.name,
      description: res.description + " (Default " + def + ")",
      valid: function valid(s) {return /^-?\d+$/.test(s);},
      "default": def
    };

    return setting;
  });
}

function getResourceValues() {
  var embezzler = {
    name: "Embezzler",
    description:
    "How much meat you expect to gain from embezzlers in garbo (This is basically how much a copier is worth using garbo)"
  };

  var cloverValue = {
    name: "Clover",
    description: "How much meat you could sell an 11-leaf clover for"
  };

  var parkaNC = {
    name: "ParkaNC",
    description: "How much meat each forced non-combat using Parka is worth"
  };

  var forcedDrop = {
    name: "ForcedDrop",
    description: "How much meat you could earn from each forced drop"
  };

  var pillkeeper = {
    name: "Pillkeeper",
    description: "How much meat you'd earn from the free pillkeeper use"
  };

  var pull = {
    name: "Pull",
    description: "How much each pull is worth to the player in meat"
  };

  var cosplay = {
    name: "CosplaySaber",
    description:
    "How much meat each cosplay saber use is worth, normally calculated by pills remaining. Set to 0 to let Greyday calculate this.",
    dynamic: true
  };

  var shorts = {
    name: "CargoShorts",
    description: "How much meat an item from Cargo Shorts is worth"
  };

  var deckOfCards = {
    name: "DeckOfCards",
    description:
    "With 15 uses, a cheat using 5, how much each use is worth in meat"
  };

  var zap = {
    name: "ZapWand",
    description: "How much each zap is worth in meat"
  };

  var burglar = {
    name: "CatBurglarHeist",
    description: "How much a cat burglar heist is worth in meat"
  };

  var chateauPainting = {
    name: "ChateauPainting",
    description:
    "How much Chateau Painting is worth in meat, not sure why this is an option given it'll only consider the painting if it's a fax it wants"
  };

  var hotTub = {
    name: "HotTub",
    description: "How much each hot tub usage is worth to you"
  };

  return [
  embezzler,
  cloverValue,
  parkaNC,
  pillkeeper,
  forcedDrop,
  pull,
  cosplay,
  shorts,
  deckOfCards,
  zap,
  burglar,
  chateauPainting,
  hotTub];

}var

ResourceValues = /*#__PURE__*/_createClass(function ResourceValues() {_classCallCheck(this, ResourceValues);});_defineProperty(ResourceValues, "EmbezzlerValue",
19000);_defineProperty(ResourceValues, "CloverValue",
22000);_defineProperty(ResourceValues, "ForcedDropValue",
4000);_defineProperty(ResourceValues, "PillkeeperValue",
70000);_defineProperty(ResourceValues, "ParkaNCValue",
0);_defineProperty(ResourceValues, "PullValue",
0);_defineProperty(ResourceValues, "CosplaySaberValue",


0);_defineProperty(ResourceValues, "CargoShortsValue",
30000);_defineProperty(ResourceValues, "DeckOfCardsValue",
2000);_defineProperty(ResourceValues, "ZapWandValue",
15000);_defineProperty(ResourceValues, "CatBurglarHeistValue",
-500);_defineProperty(ResourceValues, "ChateauPaintingValue",
5000);_defineProperty(ResourceValues, "HotTubValue",
0);(function () {


  if (
  ["Distention Pill", "Dog Hair Pill"].
  map(function (s) {return kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(s);}).
  map(function (i) {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.itemAmount)(i) + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.closetAmount)(i) + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.storageAmount)(i);}).
  reduce(function (p1, p2) {return Math.min(p1, p2);}) > 60)
  {
    ResourceValues.CosplaySaberValue = -100;
  } else if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.modifierEval)("G") >= 4) {
    ResourceValues.CosplaySaberValue = 3000;
  } else {
    ResourceValues.CosplaySaberValue = 0;
  }var _iterator = _createForOfIteratorHelper(

    getResourceValues()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var setting = _step.value;
      if (ResourceValues[setting.name + "Value"] == null) {
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Can't find resource value " + setting.name, "red");
        continue;
      }

      ResourceValues[setting.name] = ResourceValues[setting.name + "Value"];

      var prop = "greyValue_" + setting.name;

      if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyExists)(prop)) {
        continue;
      }

      var val = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(prop);

      if (!/^\d+$/.test(val)) {
        continue;
      }

      if (val == "0" && setting.name == "CosplaySaber") {
        continue;
      }

      ResourceValues[setting.name + "Value"] = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(val);
    }} catch (err) {_iterator.e(err);} finally {_iterator.f();}})();



var glove = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Powerful Glove");

var gloveReplace = {
  type: ResourceCategory.GLOVE_REPLACE,
  resource: "Powerful Glove",
  name: "Powerful Glove: Replace",
  worthInAftercore: ResourceValues.EmbezzlerValue,
  resourcesUsed: 10,
  prepare: function prepare(outfit) {return (
      outfit != null ? outfit.addWeight(glove) : null);},
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("CHEAT CODE: Replace Enemy"));}
};

var clover = {
  type: ResourceCategory.CLOVER,
  resource: "Clover",
  worthInAftercore: ResourceValues.CloverValue, // How much we could sell a clover for
  prepare: function prepare() {}
};

var xoFam = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar.get("XO Skeleton");

var hugsAndKisses = {
  type: ResourceCategory.HUGS_AND_KISSES,
  resource: "Hugs and Kisses",
  worthInAftercore: ResourceValues.ForcedDropValue,
  familiar: xoFam,
  prepare: function prepare() {return null;},
  macro: function macro() {
    var skill = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Hugs and Kisses!");
    return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.while_ */ .LE.while_("!pastround 15 && hasskill ".concat(
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(
    skill), " && !match While your foe shudders from having a bunch of their life drained away"),

    _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(skill));

  }
};

var extingusher = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("industrial fire extinguisher");

var extingusherPolar = {
  type: ResourceCategory.POLAR_VORTEX,
  resource: "Fire Extingusher",
  name: "Fire Extingusher: Polar Vortex",
  resourcesUsed: 10,
  worthInAftercore: ResourceValues.ForcedDropValue, // Tattered paper cost and assume free run
  prepare: function prepare(outfit) {return (
      outfit != null ? outfit.addWeight(extingusher) : null);},
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Fire Extinguisher: Polar Vortex"));}
};

var extingusherZoneSpecific = {
  type: ResourceCategory.FIRE_EXTINGUSHER_ZONE,
  resource: "Fire Extingusher",
  name: "Fire Extingusher: Spray Down Zone",
  resourcesUsed: 20,
  worthInAftercore: ResourceValues.ForcedDropValue * 2, // Tattered paper cost x 2
  prepare: function prepare(outfit) {return (
      outfit != null ?
      outfit.addWeight(extingusher).addExtra("-equip smoke ball") :
      null);},
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Fire Extinguisher: Zone Specific"));}
};

var pull = {
  type: ResourceCategory.PULL,
  resource: "Pull",
  worthInAftercore: ResourceValues.PullValue, // This doesn't cost us anything to use
  prepare: function prepare() {}
};

var pillkeeper = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Eight Days a Week Pill Keeper");

var pillkeeperNC = {
  type: ResourceCategory.FORCE_NC,
  resource: "Pillkeeper",
  worthInAftercore: ResourceValues.PillkeeperValue, // Lets just value it at a frost flower?
  prepare: function prepare(outfit, props) {
    if (props != null) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("pillkeeper " + PillkeeperPill.FORCE_NC);
    }
  },
  ready: function ready() {return true;}
};

var sourceTerminal = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getCampground)()["Source terminal"] > 0;
var portscanProp = "_portscanPrimed";

var portscan = {
  type: ResourceCategory.FORCE_FIGHT,
  resource: "Portscan",
  worthInAftercore: 0,
  prepare: function prepare(outfit) {
    if (
    outfit != null ||
    (
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("sourceTerminalEducate1") +
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("sourceTerminalEducate2")).
    includes("portscan.edu"))
    {
      return;
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("terminal educate portscan.edu");
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("main.php");
  },
  primed: function primed() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(portscanProp) || "false");},
  unprime: function unprime() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(portscanProp, "false");},
  attemptPrime: function attemptPrime() {
    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.currentRound)() == 0) {
      return false;
    }

    var skill = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Portscan");

    if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveSkill)(skill) || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myMp)() < (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mpCost)(skill)) {
      return false;
    }

    var prop = "_sourceTerminalPortscanUses";
    var scans = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(prop));

    _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(skill).submit();

    if (scans != (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(prop))) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(portscanProp, "true");
      return true;
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Failed to portscan for some reason..");
    return false;
  }
};

var parka = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Jurassic Parka");
var torso = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Torso Awareness");
var parkaProp = "_parkaPrimed";

var ncParka = {
  type: ResourceCategory.FORCE_NC,
  resource: "Parka: Force NC",
  worthInAftercore: ResourceValues.ParkaNCValue,
  //available: () => haveSkill(torso) && availableAmount(parka) > 0,
  prepare: function prepare(outfit) {
    if (outfit != null) {
      outfit.addWeight(parka);
    } else {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("parka spikolodon");
    }
  },
  primed: function primed() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(parkaProp) || "false");},
  unprime: function unprime() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(parkaProp, "false");},
  attemptPrime: function attemptPrime() {
    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.currentRound)() == 0) {
      return false;
    }

    var skill = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Launch spikolodon spikes");

    if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveSkill)(skill) || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myMp)() < (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.mpCost)(skill)) {
      return false;
    }

    var prop = "_spikolodonSpikeUses";
    var spikes = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(prop));

    _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(skill).submit();

    if (spikes != (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(prop))) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(parkaProp, "true");
      return true;
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Failed to launch spikolodon spikes for some reason..", "red");
    return false;
  }
};

var digitizer = {
  type: ResourceCategory.WANDERERS,
  resource: "Digitize",
  name: "Source Terminal: Digitize",
  worthInAftercore: ResourceValues.EmbezzlerValue * 3,
  prepare: function prepare(outfit) {
    if (outfit == null) {
      return;
    }

    if (
    (
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("sourceTerminalEducate1") +
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("sourceTerminalEducate2")).
    includes("digitize.edu"))
    {
      return;
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("terminal educate digitize.edu");
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("main.php");
  },
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill("Digitize");}
};

var renimatedReanimator = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar.get("Reanimated Reanimator");
var obtuseAngel = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar.get("Obtuse Angel");

var reanimatedWanderer = {
  type: ResourceCategory.WANDERERS,
  resource: "Romantic Arrow",
  name: "Reanimated Reanimator: Wanderer Copier",
  worthInAftercore: ResourceValues.EmbezzlerValue * 3,
  familiar: renimatedReanimator,
  prepare: function prepare() {return null;},
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Wink At"));},
  available: function available() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(renimatedReanimator);}
};

var obtuseAngelWanderer = {
  type: ResourceCategory.WANDERERS,
  resource: "Romantic Arrow",
  name: "Obtuse Angel: Wanderer Copier",
  worthInAftercore: ResourceValues.EmbezzlerValue * 3,
  familiar: obtuseAngel,
  prepare: function prepare() {return null;},
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Fire a badly romantic arrow"));},
  available: function available() {return (
      !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(renimatedReanimator) && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(obtuseAngel));}
};

var yellowParka = {
  type: ResourceCategory.YELLOW_RAY,
  resource: "Yellow Ray",
  name: "Parka: Yellow Ray",
  available: function available() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(parka) > 0 && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveSkill)(torso);},
  freeTurn: true,
  resourcesUsed: 100,
  worthInAftercore: 0,
  prepare: function prepare(outfit, props) {
    if (outfit != null) {
      outfit.addWeight(parka);
    }

    if (props != null) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("parka dilophosaur");
    }
  },
  macro: function macro() {
    return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Spit jurassic acid"));
  },
  ready: function ready() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect.get("Everything Looks Yellow")) == 0;}
};

var rocket = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Yellow Rocket");

var yellowRocket = {
  type: ResourceCategory.YELLOW_RAY,
  resource: "Yellow Ray",
  name: "Yellow Rocket",
  worthInAftercore: 250, // Cost of a yellow rocket
  resourcesUsed: 75,
  available: function available() {return (0,_utils_GreyClan__WEBPACK_IMPORTED_MODULE_1__/* .canUseFireworks */ .LA)();},
  prepare: function prepare() {
    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.itemAmount)(rocket) == 0) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("acquire yellow rocket");
    }

    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.itemAmount)(rocket) == 0) {
      throw "Unable to acquire a yellow rocket";
    }
  },
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.item */ .LE.item(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Yellow Rocket"));},
  ready: function ready() {return (
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.myMeat)() > 300 && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect.get("Everything Looks Yellow")) == 0);}
};

var retrocape = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("unwrapped knock-off retro superhero cape");

var retroRay = {
  type: ResourceCategory.YELLOW_RAY,
  resource: "Yellow Ray",
  name: "Retrocape: Yellow Ray",
  worthInAftercore: 0,
  available: function available() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(retrocape) > 0;},
  resourcesUsed: 100,
  prepare: function prepare(outfit, props) {
    if (outfit != null) {
      outfit.addWeight(retrocape);
    }

    if (props != null) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("retrocape heck kiss");
    }
  },
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Unleash the Devil's Kiss"));},
  ready: function ready() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect.get("Everything Looks Yellow")) == 0;}
};

var cosplaySaber = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Fourth of May Cosplay Saber");

var cosplayYellowRay = {
  type: ResourceCategory.YELLOW_RAY,
  resource: "Cosplay Saber",
  name: "Cosplay Saber: YR",
  freeTurn: true,
  worthInAftercore: ResourceValues.CosplaySaberValue,
  prepare: function prepare(outfit, props) {
    if (outfit != null) {
      outfit.addWeight(cosplaySaber);
    }
    if (props != null) {
      props.setChoiceProperty(1387, 3);
    }
  },
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Use The Force"));},
  ready: function ready() {return true;}
};

var backupCamera = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Backup Camera");

var backupCopier = {
  type: ResourceCategory.COPIER,
  resource: "Backup Camera",
  worthInAftercore: ResourceValues.EmbezzlerValue, // Embezzler
  prepare: function prepare(outfit) {return (
      outfit != null ? outfit.addWeight(backupCamera) : null);},
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Back-Up to your Last Enemy"));}
};

var cosplayCopier = {
  type: ResourceCategory.OLFACT_COPIER,
  resource: "Cosplay Saber",
  name: "Cosplay Saber: Friends",
  worthInAftercore: ResourceValues.CosplaySaberValue,
  prepare: function prepare(outfit, props) {
    if (outfit != null) {
      outfit.addWeight(cosplaySaber);
    }
    if (props != null) {
      props.setChoiceProperty(1387, 2);
    }
  },
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Use The Force"));}
};

var cargoShorts = {
  type: ResourceCategory.CARGO_SHORTS,
  resource: "Cargo Shorts",
  freeTurn: true,
  worthInAftercore: ResourceValues.CargoShortsValue, // Some sellable item
  prepare: function prepare() {},
  pocket: function (_pocket) {function pocket(_x) {return _pocket.apply(this, arguments);}pocket.toString = function () {return _pocket.toString();};return pocket;}(function (pocket) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("inventory.php?action=pocket");
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("choice.php?whichchoice=1420&option=1&pocket=" + pocket + "&pwd=");
  })
};

var faxMachine = {
  type: ResourceCategory.FAXER,
  resource: "Fax Machine",
  worthInAftercore: ResourceValues.EmbezzlerValue, // Embezzler
  prepare: function prepare() {},
  available: function available() {return (0,_utils_GreyClan__WEBPACK_IMPORTED_MODULE_1__/* .canUseFaxMachine */ .ZP)();},
  fax: function fax(monster) {
    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_photocopyUsed") != "false") {
      throw "The fax was already used!";
    }

    (0,_utils_GreyClan__WEBPACK_IMPORTED_MODULE_1__/* .getFax */ .hw)(monster);

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("inv_use.php?which=3&whichitem=4873&pwd");
  }
};

var combatLocket = {
  type: ResourceCategory.FAXER,
  resource: "Combat Locket",
  worthInAftercore: ResourceValues.EmbezzlerValue, // Embezzler
  prepare: function prepare() {},
  fax: function fax(monster) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("inventory.php?reminisce=1", false);
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("choice.php?pwd=&whichchoice=1463&option=1&mid=" + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(monster));
  }
};

var wish = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Pocket Wish");
var genieBottle = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Genie Bottle");

var wishFaxer = {
  type: ResourceCategory.FAXER,
  resource: "Wish",
  worthInAftercore: 50000, // Sell
  prepare: function prepare() {},
  fax: function fax(monster) {
    if (
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(genieBottle) > 0 &&
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_genieWishesUsed")) < 3)
    {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("inv_use.php?pwd=&which=99&whichitem=9529");
    } else if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(wish) == 0) {
      throw "Not enough pocket wishes!";
    } else {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("inv_use.php?pwd=&which=99&whichitem=9537");
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("choice.php?forceoption=0");

    try {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)(
      "choice.php?pwd=&option=1&whichchoice=1267&wish=" +
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.urlEncode)("to fight " + monster.name),
      true,
      true);

    } catch (e) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)(e);
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("choice.php");

    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.currentRound)() == 0) {
      throw "Failed to wish in a monster";
    }
  }
};

var cosplayBanisher = {
  type: ResourceCategory.BANISHER,
  resource: "Cosplay Saber",
  name: "Cosplay Saber: Banish",
  worthInAftercore: ResourceValues.CosplaySaberValue, // Garbo has some use of it, but if you have an oflaction like its basically worth grimace pill/2 free fights
  prepare: function prepare(outfit, props) {
    if (outfit != null) {
      outfit.addWeight(cosplaySaber);
    }
    if (outfit != null) {
      props.setChoiceProperty(1387, 1);
    }
  },
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Use The Force"));}
};

var bowlingBall = {
  type: ResourceCategory.BANISHER,
  resource: "Bowling Ball",
  worthInAftercore: 0, // This doesn't cost us anything to use
  prepare: function prepare() {},
  macro: function macro() {return _utils_MacroBuilder__WEBPACK_IMPORTED_MODULE_3__/* .Macro.skill */ .LE.skill(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get("Bowl a Curveball"));}
};

var asdon = {
  type: ResourceCategory.BANISHER,
  resource: "Asdon",
  worthInAftercore: 900, // The rough price to fuel up the asdon
  prepare: function prepare() {}
};

var deckOfEveryCard = {
  type: ResourceCategory.DECK_OF_EVERY_CARD,
  resource: "Deck of Every Card",
  worthInAftercore: ResourceValues.DeckOfCardsValue,
  prepare: function prepare() {},
  pickCard: function pickCard(card) {
    if (card != null) {
      throw "You're not running a Pack of Cards Cheat, why provide a card name?";
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("play random");
  }
};

var deckOfEveryCardCheat = {
  type: ResourceCategory.DECK_OF_EVERY_CARD_CHEAT,
  resource: "Deck of Every Card",
  name: "Deck of Every Card: Cheat",
  worthInAftercore: ResourceValues.DeckOfCardsValue * 10, // Worth 20k, 20k and 10k (Blue mana x2, then misc)
  resourcesUsed: 5,
  prepare: function prepare() {},
  pickCard: function pickCard(card) {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("cheat ".concat(card));}
};

var zappable = {
  type: ResourceCategory.ZAP,
  resource: "Zap Wand",
  worthInAftercore: ResourceValues.ZapWandValue,
  prepare: function prepare() {}
};

var catHeist = {
  type: ResourceCategory.CAT_HEIST,
  resource: "Cat Burglar Heist",
  worthInAftercore: ResourceValues.CatBurglarHeistValue,
  prepare: function prepare() {},
  doHeist: function doHeist(item) {
    if (
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("catBurglarBankHeists")) == 0 &&
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_catBurglarCharge")) <
    10 * ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_catBurglarHeistsComplete")) + 1))
    {
      throw "Unable to heist, no heists available!";
    }

    var heistResult = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.heist)(item);

    if (!heistResult) {
      throw "Failed to perform a cat burglar heist";
    }
  }
};

var chateauPainting = {
  type: ResourceCategory.FAXER,
  resource: "Chateau Painting",
  worthInAftercore: ResourceValues.ChateauPaintingValue,
  prepare: function prepare() {},
  fax: function fax(monster) {
    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toMonster)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("chateauMonster")) != monster) {
      throw "Unexpected monster attempted to fax!";
    }
  }
};

var hottub = {
  type: ResourceCategory.HOT_TUB,
  resource: "Hot Tub",
  worthInAftercore: ResourceValues.HotTubValue,
  prepare: function prepare() {}
};

var allResources = [
gloveReplace,
clover,
extingusherPolar,
extingusherZoneSpecific,
pull,
yellowRocket,
yellowParka,
portscan,
ncParka,
cosplayYellowRay,
// pillkeeperNC,
backupCopier,
cosplayCopier,
cargoShorts,
faxMachine,
combatLocket,
wishFaxer,
cosplayBanisher,
bowlingBall,
asdon,
deckOfEveryCard,
deckOfEveryCardCheat,
zappable,
catHeist,
hottub,
retroRay,
chateauPainting,
hugsAndKisses,
digitizer,
reanimatedWanderer,
obtuseAngelWanderer].

map(function (r) {var _r$name;
  r.name = (_r$name = r.name) !== null && _r$name !== void 0 ? _r$name : r.resource;

  return r;
}).
sort(function (r1, r2) {return r1.worthInAftercore - r2.worthInAftercore;});

function getResources()

{var includingUnavailable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (includingUnavailable) {
    return allResources;
  }

  return allResources.filter(function (r) {return r.available == null || r.available();});
}

/**
 * If this resource is something that changes with turns used
 */
function isTurnCounter(resource) {
  return (
    resource == "Bowling Ball" ||
    resource == "Yellow Ray" ||
    resource == "Autumn-aton");

}

function getResourcesLeft(
resourceType)

{var assumeUnused = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  switch (resourceType) {
    case "Asdon":
      return 0;
    case "Hugs and Kisses":
      if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(xoFam)) {
        return 0;
      }

      return 11 - (assumeUnused ? 0 : (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_xoHugsUsed")));
    case "Yellow Ray":
      var played =
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.turnsPlayed)() + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveEffect)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect.get("Everything Looks Yellow"));

      return 650 - (assumeUnused ? 0 : played);
    case "Pull":
      if (_utils_GreySettings__WEBPACK_IMPORTED_MODULE_2__/* .GreySettings.isHardcoreMode */ .G6.isHardcoreMode()) {
        return 0;
      }

      if (!assumeUnused && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.pullsRemaining)() == -1) {
        return 1000;
      }

      // Clamp
      var pullsSetting = Math.max(0, Math.min(_utils_GreySettings__WEBPACK_IMPORTED_MODULE_2__/* .GreySettings.greyPullsLimit */ .G6.greyPullsLimit, 20));

      if (assumeUnused) {
        return pullsSetting;
      }

      var pullsUsed = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_greyPulls").
      split(",").
      filter(function (s) {return s.length > 0;}).length;

      pullsSetting -= pullsUsed;

      return Math.max(0, Math.min(pullsSetting, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.pullsRemaining)()));
    case "Backup Camera":
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(backupCamera) > 0 ?
      11 - (assumeUnused ? 0 : (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_backUpUses"))) :
      0;
    case "Combat Locket":
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Combat Lover's Locket")) > 0 ?
      3 - (
      assumeUnused ?
      0 :
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_locketMonstersFought").
      split(",").
      filter(function (s) {return s.length > 0;}).length) :
      0;
    case "Cargo Shorts":
      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Cargo Cultist Shorts")) == 0) {
        return 0;
      }

      if (!assumeUnused && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_cargoPocketEmptied"))) {
        return 0;
      }

      return 1;
    case "Powerful Glove":
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(glove) > 0 ?
      100 - (
      assumeUnused ?
      0 :
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_powerfulGloveBatteryPowerUsed"))) :
      0;
    case "Fire Extingusher":
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(extingusher) > 0 ?
      assumeUnused ?
      100 :
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_fireExtinguisherCharge")) :
      0;
    case "Clover":
      return assumeUnused || !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("breakfastCompleted")) ?
      3 :
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.itemAmount)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("11-leaf clover"));
    case "Deck of Every Card":
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Deck of Every Card")) > 0 ?
      15 - (assumeUnused ? 0 : (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_deckCardsDrawn"))) :
      0;
    case "Zap Wand":
      if (!_utils_GreySettings__WEBPACK_IMPORTED_MODULE_2__/* .GreySettings.greyGrabZapWand */ .G6.greyGrabZapWand) {
        return 0;
      }

      var zaps = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_zapCount"));

      // Blew up
      if (!assumeUnused && zaps < 0) {
        return 0;
      }

      return Math.max(0, 2 - (assumeUnused ? 0 : zaps));
    case "Cosplay Saber":
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(cosplaySaber) > 0 ?
      5 - (assumeUnused ? 0 : (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_saberForceUses"))) :
      0;
    case "Bowling Ball":
      return 0;
    case "Wish":
      var haveBottle = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Genie Bottle")) > 0;

      if (!haveBottle) {
        return 0;
      }

      if (assumeUnused) {
        return 3;
      }

      var fightsRemaining = 3 - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_genieFightsUsed"));
      var wishesAvailable = Math.max(
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.itemAmount)(wish),
      3 - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_genieWishesUsed")));


      return Math.min(fightsRemaining, wishesAvailable);
    case "Fax Machine":
      if (!(0,_utils_GreyClan__WEBPACK_IMPORTED_MODULE_1__/* .canUseFaxMachine */ .ZP)()) {
        return 0;
      }

      return assumeUnused || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_photocopyUsed") == "false" ? 1 : 0;
    case "Cat Burglar Heist":
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Familiar.get("Cat Burglar")) ?
      assumeUnused ?
      1 :
      1 - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_catBurglarHeistsComplete")) :
      0;
    case "Hot Tub":
      if ((0,_utils_GreyClan__WEBPACK_IMPORTED_MODULE_1__/* .isVIPDisabled */ .Ow)()) {
        return 0;
      }

      return 5 - (assumeUnused ? 0 : (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_hotTubSoaks")));
    case "Chateau Painting":
      if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("chateauAvailable"))) {
        return 0;
      }

      return assumeUnused || !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_chateauMonsterFought")) ?
      1 :
      0;
    case "Parka: Force NC":
      if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveSkill)(torso) || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(parka) == 0) {
        return 0;
      }

      if (assumeUnused) {
        return 5;
      }

      var spikesRemaining = 5 - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_spikolodonSpikeUses"));

      // Don't count a primed resource as used yet!
      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(parkaProp))) {
        spikesRemaining++;
      }

      return spikesRemaining;
    case "Pillkeeper":
      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(pillkeeper) == 0) {
        return 0;
      }

      return assumeUnused || !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_freePillKeeperUsed")) ?
      1 :
      0;
    case "Portscan":
      if (
      !sourceTerminal ||
      !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("sourceTerminalEducateKnown").includes("portscan.edu"))
      {
        return 0;
      }

      if (assumeUnused) {
        return 3;
      }

      var scansRemaining =
      3 - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_sourceTerminalPortscanUses"));

      // If resource is primed, don't count this resource as done yet!
      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toBoolean)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(portscanProp))) {
        scansRemaining++;
      }

      return scansRemaining;
    case "Autumn-aton":
      return 0;
    case "Digitize":
      if (
      !sourceTerminal ||
      !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("sourceTerminalEducateKnown").includes("digitize.edu"))
      {
        return 0;
      }

      if (assumeUnused) {
        return 3;
      }

      return 3 - (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_sourceTerminalDigitizeMonsterCount"));
    case "Romantic Arrow":
      if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(renimatedReanimator) || !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.haveFamiliar)(obtuseAngel)) {
        return 0;
      }

      if (assumeUnused) {
        return 1;
      }

      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_badlyRomanticArrows"));
    default:
      throw "No idea what the resource " + resourceType + " is.";}

}

/***/ }),

/***/ 782:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Aj": () => (/* binding */ runFireworks),
/* harmony export */   "LA": () => (/* binding */ canUseFireworks),
/* harmony export */   "Ow": () => (/* binding */ isVIPDisabled),
/* harmony export */   "Q5": () => (/* binding */ getAvailableClans),
/* harmony export */   "Qu": () => (/* binding */ useFortuneBuff),
/* harmony export */   "ZP": () => (/* binding */ canUseFaxMachine),
/* harmony export */   "_D": () => (/* binding */ doFortuneTeller),
/* harmony export */   "hw": () => (/* binding */ getFax),
/* harmony export */   "uS": () => (/* binding */ canUseFortuneBuff)
/* harmony export */ });
/* unused harmony exports hasVIPInvitation, hasWhitelistToCurrentClan */
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _GreySettings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97);
function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


var vipInvitation = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Clan VIP Lounge key");
var fireworks = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Clan Underground fireworks shop");
var fortune = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("Clan Carnival Game");
var faxMachine = kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("deluxe fax machine");
var faxOnline = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.isOnline)("CheeseFax");
var fortuneTellers = new Map([
[82072, "AverageChat"],
[90485, "CheeseFax"]]);


var availableClans;var

ClanSwitcher = /*#__PURE__*/function () {function ClanSwitcher() {_classCallCheck(this, ClanSwitcher);_defineProperty(this, "origClan",
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)());}_createClass(ClanSwitcher, [{ key: "joinClan", value:

    function joinClan(id) {
      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)() == id) {
        return true;
      }

      var page = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)(
      "showclan.php?recruiter=1&whichclan=" +
      id +
      "&pwd&whichclan=" +
      id +
      "&action=joinclan&apply=Apply+to+this+Clan&confirm=on");


      var success = page.includes("clanhalltop.gif");

      if (success) {
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Switched to clan " + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)(), "gray");
      } else {
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Failed to switch clans! Unable to switch to clan ID " + id, "red");
      }

      return success;
    } }, { key: "restoreClan", value:

    function restoreClan() {
      if (this.origClan == (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)()) {
        return;
      }

      this.joinClan(this.origClan);
    } }]);return ClanSwitcher;}();


function getDefaultClan() {
  if (_GreySettings__WEBPACK_IMPORTED_MODULE_1__/* .GreySettings.greyVIPClan.trim */ .G6.greyVIPClan.trim().length == 0) {
    return null;
  }

  if (_GreySettings__WEBPACK_IMPORTED_MODULE_1__/* .GreySettings.greyVIPClan.trim */ .G6.greyVIPClan.trim().toLowerCase() == (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)()) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)();
  }

  var clanInfo = _toConsumableArray(getAvailableClans()).find(
  function (_ref) {var _ref2 = _slicedToArray(_ref, 2),v = _ref2[1];return v.toLowerCase() == _GreySettings__WEBPACK_IMPORTED_MODULE_1__/* .GreySettings.greyVIPClan.toLowerCase */ .G6.greyVIPClan.toLowerCase();});


  if (clanInfo == null) {
    return null;
  }

  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(clanInfo[0]);
}

function runInClan(clanId, func) {
  if (!hasWhitelistToCurrentClan() && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)() != clanId) {
    throw "Attempted to switch clans, but we don't have WL to our current clan!";
  }

  var switcher = new ClanSwitcher();

  try {
    var result = switcher.joinClan(clanId);

    if (!result) {
      return;
    }

    func();
  } finally {
    switcher.restoreClan();
  }
}

function loadWhitelists() {
  var prop = "clansWhitelisted";
  var dayChecked = "clansWhitelistedChecked";

  availableClans = new Map();

  if (
  !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyExists)(prop) ||
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(dayChecked)) != (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.gamedayToInt)())
  {
    // Wait until we can fetch the page without errors
    while (
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.currentRound)() != 0 ||
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.handlingChoice)() ||
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.choiceFollowsFight)() ||
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fightFollowsChoice)())
    {}

    var page = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("clan_signup.php?place=managewhitelists");

    var match;

    while (
    (match = page.match(
    /option +value=(\d+)>([^<>]*)<\/option>(?!.*name=whichclan>)/)) !=
    null)
    {
      page = page.replace(match[0], "");

      availableClans.set((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(match[1]), match[2]);
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(
    prop,
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toJson)(_toConsumableArray(availableClans).map(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),k = _ref4[0],v = _ref4[1];return [k.toString(), v];})));

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(dayChecked, (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.gamedayToInt)().toString());
  } else {
    var data = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(prop);

    availableClans = new Map(
    JSON.parse(data).map(function (_ref5) {var _ref6 = _slicedToArray(_ref5, 2),k = _ref6[0],v = _ref6[1];return [(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(k), v];}));

  }

  return availableClans;
}

function getAvailableClans() {
  if (availableClans != null) {
    return availableClans;
  }

  return loadWhitelists();
}

function getFax(monster) {
  if (isVIPDisabled()) {
    throw "VIP was disabled, but function fax was still called";
  }

  var faxbot = "CheeseFax";

  if (!canAccessClan(getDefaultClan()) || !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.isOnline)(faxbot)) {
    throw "Cannot access fax machine, clan accessible? ".concat(canAccessClan(
    getDefaultClan()), ". ").concat(
    faxbot, " online? ").concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.isOnline)(faxbot));
  }

  runInClan(getDefaultClan(), function () {
    if (!canUseFaxMachine()) {
      throw "Expected to be find fax machine in the clan " + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)();
    }

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Now trying to fax " + monster.name, "blue");

    var hasReceivedFax = function hasReceivedFax() {
      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get("photocopied monster")) == 0) {
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("fax receive");
      }

      if (
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("photocopyMonster").toLowerCase() ==
      monster.name.toLowerCase())
      {
        return true;
      }

      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("fax send");
      return false;
    };

    if (!hasReceivedFax()) {
      for (var i = 0; i <= 6; i++) {
        // We might have missed it or overrode it
        if (i % 3 == 0) {
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.chatPrivate)(faxbot, monster.name);
        }

        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.wait)(10 + i);

        if (hasReceivedFax()) {
          return;
        }
      }
    }

    if (!hasReceivedFax()) {
      throw new Error(
      "Failed to acquire photocopied " +
      monster +
      ", assuming " +
      faxbot +
      " is online you probably just missed the fax. Try running the script again.");

    }
  });
}

function runFireworks(request) {
  runInClan(getClanToUse(fireworks), function () {
    if (!canUseFireworks()) {
      throw "Expected to be find fireworks shop in the clan " + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)();
    }

    request();
  });
}

function doFortuneTeller() {
  if (isVIPDisabled() || !_GreySettings__WEBPACK_IMPORTED_MODULE_1__/* .GreySettings.greyFortuneTeller */ .G6.greyFortuneTeller) {
    return;
  }

  var consultsUsed = function consultsUsed() {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)("_clanFortuneConsultUses"));};

  if (consultsUsed() >= 3) {
    return;
  }

  var bot = fortuneTellers.get((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)());
  var fortuneClan = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)();

  if (!(typeof bot == "string") || !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.isOnline)(bot)) {
    bot = null;
  }

  if (bot == null) {
    if (!hasWhitelistToCurrentClan()) {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)(
      "Oh dear, we don't have whitelist to current clan. Skipping fortune telling",
      "red");

      return;
    }var _iterator = _createForOfIteratorHelper(

      fortuneTellers),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = _slicedToArray(_step.value, 2),clanId = _step$value[0],botName = _step$value[1];
        if (!canAccessClan(clanId) || !(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.isOnline)(botName)) {
          continue;
        }

        bot = botName;
        fortuneClan = clanId;
        break;
      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }

  if (bot == null) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)(
    "Unfortunately we do not have access to any Fortune Telling as the bots are either offline or you do not have a whitelist to the clans",
    "red");

    return;
  }

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Now performing hocus pocus with the Fortune Teller", "blue");

  runInClan(fortuneClan, function () {
    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanLounge)()[fortune.name] == null) {
      throw "Expected to be find fortune teller in the clan " + (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)();
    }

    var failed = 0;

    while (consultsUsed() < 3) {
      // We want the first result to be compatible
      // The second result is incompatible, as its worth more
      // The last result is compatible, as it has nicer equips

      var consultString =
      consultsUsed() == 1 ? "a b c" : "pizza batman thick";

      var consults = consultsUsed();
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.cliExecute)("fortune " + bot + " " + consultString);

      if (consults == consultsUsed() && failed++ > 3) {
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)(
        "Going to ask " +
        bot +
        " for a fax so they join " +
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanName)() +
        "...",
        "gray");


        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.chatPrivate)(bot, "fax mountain man");
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.waitq)(10);
        failed = -2;
      }

      if (consultsUsed() < 3) {
        (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.waitq)(4);
      }
    }
  });

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Done with fortune telling.", "blue");
}

function hasVIPInvitation() {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.availableAmount)(vipInvitation) > 0;
}

function canAccessClan(clanId) {
  if (clanId == null) {
    return false;
  }

  clanId = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(clanId);

  return (
    clanId == (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)() ||
    hasWhitelistToCurrentClan() && getAvailableClans().has(clanId));

}

function hasWhitelistToCurrentClan() {
  return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)() < 0 || getAvailableClans().has((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)());
}

function canUseFireworks() {
  return hasVIPInvitation() && canUse(fireworks);
}

function canUseFortuneBuff() {
  return hasVIPInvitation() && canUse(fortune);
}

function useFortuneBuff(func) {
  runInClan(getClanToUse(fortune), func);
}

function canUseFaxMachine() {
  return (
    hasVIPInvitation() &&
    !isVIPDisabled() &&
    canUse(faxMachine) &&
    canAccessClan(getDefaultClan()) &&
    faxOnline);

}

function canUse(vipItem) {
  return getClanToUse(vipItem) != null;
}

function getClanToUse(vipItem) {
  if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanLounge)()[vipItem.name] != null) {
    return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)();
  }

  if (canAccessClan(getDefaultClan()) && getDefaultClan() != (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getClanId)()) {
    return getDefaultClan();
  }

  return null;
}

function isVIPDisabled() {
  return !hasVIPInvitation() || _GreySettings__WEBPACK_IMPORTED_MODULE_1__/* .GreySettings.greyVIPClan.length */ .G6.greyVIPClan.length == 0;
}

/***/ }),

/***/ 97:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "G6": () => (/* binding */ GreySettings_GreySettings),
  "p_": () => (/* binding */ GreySettings_getGreySettings),
  "ti": () => (/* binding */ getMoonZone),
  "X_": () => (/* binding */ moonSigns)
});

// EXTERNAL MODULE: external "kolmafia"
var external_kolmafia_ = __webpack_require__(530);
// EXTERNAL MODULE: ./src/utils/GreyClan.ts
var GreyClan = __webpack_require__(782);
;// CONCATENATED MODULE: ./src/quests/Quests.ts






















var QuestStatus;(function (QuestStatus) {QuestStatus[QuestStatus["READY"] = 0] = "READY";QuestStatus[QuestStatus["FASTER_LATER"] = 1] = "FASTER_LATER";QuestStatus[QuestStatus["NOT_READY"] = 2] = "NOT_READY";QuestStatus[QuestStatus["COMPLETED"] = 3] = "COMPLETED";})(QuestStatus || (QuestStatus = {}));






var DelayType;(function (DelayType) {DelayType[DelayType["TURN_BURNING"] = 0] = "TURN_BURNING";DelayType[DelayType["NONCOMBAT_HITTING"] = 1] = "NONCOMBAT_HITTING";})(DelayType || (DelayType = {}));





















function getQuestStatus(property) {
  var status = (0,external_kolmafia_.getProperty)(property);

  if (status == "unstarted") {
    return -1;
  } else if (status == "started") {
    return 0;
  } else if (status == "finished") {
    return 100;
  } else if (status.match(/^step\d+$/)) {
    return (0,external_kolmafia_.toInt)(status.replace("step", ""));
  } else {
    throw (
      "Cannot parse property '" +
      property +
      "' value '" +
      status +
      "' to an int");

  }
}
// EXTERNAL MODULE: ./src/typings/ResourceTypes.ts
var ResourceTypes = __webpack_require__(733);
;// CONCATENATED MODULE: ./src/typings/TaskInfo.ts
function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}





var TaskInfo = /*#__PURE__*/_createClass(function TaskInfo() {_classCallCheck(this, TaskInfo);});





















var ResourcesSnapshot = /*#__PURE__*/function () {function ResourcesSnapshot() {_classCallCheck(this, ResourcesSnapshot);_defineProperty(this, "resources",
    []);_defineProperty(this, "resourceMap",
    new Map());_defineProperty(this, "unused",
    []);}_createClass(ResourcesSnapshot, [{ key: "toString", value: // For those special resources that have limits that change on the fly, aka yellow rocket

    function toString() {
      var output = [];

      output.push("Resource Snapshot");

      var resourceStrings = this.resources.
      map(
      function (s) {var _ref;return (_ref =
        s.name +
        " x " +
        ResourceTypes/* ResourceCategory */.s6[s.type] +
        " - Uses " +
        s.resourcesUsed) !== null && _ref !== void 0 ? _ref : 1;}).

      join(", ");
      var resMap = _toConsumableArray(this.resourceMap).map(
      function (_ref2) {var _ref3 = _slicedToArray(_ref2, 2),id = _ref3[0],amount = _ref3[1];return id + " x " + amount;});

      var unused = this.unused.join(", ");

      output.push("Resources: " + resourceStrings);
      output.push("Resources Count: " + resMap.join(", "));
      output.push("Unused: " + unused);

      return output.join(" || ");
    } }]);return ResourcesSnapshot;}();


var PossiblePath = /*#__PURE__*/function () {











  function PossiblePath(advsMin) {var advsMax = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : advsMin;_classCallCheck(this, PossiblePath);_defineProperty(this, "resourcesNeeded", []);_defineProperty(this, "resourceUsed", []);_defineProperty(this, "resourcesAvailable", []);_defineProperty(this, "ignoreResources", []);_defineProperty(this, "pulls", []);_defineProperty(this, "tags", []);_defineProperty(this, "advsSavedMin", void 0);_defineProperty(this, "advsSavedMax", void 0);_defineProperty(this, "miscMeat", 0);_defineProperty(this, "pathCost", 0);
    this.advsSavedMax = advsMax;
    this.advsSavedMin = advsMin;
  }_createClass(PossiblePath, [{ key: "addTag", value:

    function addTag(tag) {
      this.tags.push(tag);

      return this;
    } }, { key: "removeTag", value:

    function removeTag(tag) {
      this.tags = this.tags.filter(function (t) {return t != tag;});

      return this;
    } }, { key: "hasTag", value:

    function hasTag(tag) {
      return this.tags.includes(tag);
    } }, { key: "setRoughPathCost", value:

    function setRoughPathCost(resourcesUsed) {
      this.pathCost = this.miscMeat;
      var hitFree = false;var _iterator = _createForOfIteratorHelper(

        resourcesUsed),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = _slicedToArray(_step.value, 2),res = _step$value[1];
          this.pathCost += res.worthInAftercore;

          if (!hitFree && res.freeTurn == true) {
            hitFree = true;

            this.pathCost -= GreySettings_GreySettings.greyValueOfAdventure;
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getAverageTurns", value:

    function getAverageTurns() {
      return Math.ceil((this.advsSavedMin + this.advsSavedMax) / 2);
    } }, { key: "getCostOfPath", value:

    function getCostOfPath() {
      return (
        this.pathCost + this.getAverageTurns() * GreySettings_GreySettings.greyValueOfAdventure);

    } }, { key: "getCostPerAdv", value:

    function getCostPerAdv() {
      if (this.getAverageTurns() == 0) {
        return this.pathCost;
      }

      return this.pathCost / this.getAverageTurns();
    } }, { key: "clone", value:

    function clone() {
      var path = new PossiblePath(this.advsSavedMin, this.advsSavedMax);
      path.resourcesNeeded = _toConsumableArray(
      this.resourcesNeeded.map(
      function (_ref4) {var _ref5 = _slicedToArray(_ref4, 2),v1 = _ref5[0],v2 = _ref5[1];return [v1, v2];}));


      path.resourceUsed = _toConsumableArray(this.resourceUsed);
      path.resourcesAvailable = _toConsumableArray(this.resourcesAvailable);
      path.ignoreResources = _toConsumableArray(this.ignoreResources);
      path.miscMeat = this.miscMeat;

      return path;
    } }, { key: "detectResourceUsage", value:

    function detectResourceUsage(snapshot) {var _this = this;
      var changed = getResourcesChanged(snapshot, this);
      var diff = changed.resourceMap;
      // Get all resources that were among the changed, and uses enough of the resource to fit in
      var viableResources = this.resourcesAvailable.filter(
      function (r) {var _r$resourcesUsed;return (
          diff.has(r.resource) && diff.get(r.resource) >= ((_r$resourcesUsed = r.resourcesUsed) !== null && _r$resourcesUsed !== void 0 ? _r$resourcesUsed : 1));});

      var doDebug = function doDebug() {
        (0,external_kolmafia_.print)("Snapshot " + snapshot.toString());
        (0,external_kolmafia_.print)("Now " + createResourcesSnapshot(_this).toString());
        (0,external_kolmafia_.print)("Changed " + changed.toString());
      };var _iterator2 = _createForOfIteratorHelper(

        diff.keys()),_step2;try {var _loop = function _loop() {var _resources$0$resource, _resources$0$resource2, _changed$resources;var resourceId = _step2.value;
          var resources = viableResources.filter(function (r) {return r.resource == resourceId;});

          if (resources.length == 0) {return "continue";

          }

          // If all the resources using this key, are not of the same type
          if (resources.filter(function (r) {return r.type != resources[0].type;}).length > 1) {
            doDebug();
            throw "Multiple resources of the same source were used, need to manually register the resources of ".concat(resourceId, " and types ").concat(resources.map(
            function (r) {return ResourceTypes/* ResourceCategory */.s6[r.type];}), " as used.");

          }

          var amountUsed = diff.get(resourceId) / ((_resources$0$resource = resources[0].resourcesUsed) !== null && _resources$0$resource !== void 0 ? _resources$0$resource : 1);

          // If its a yellow ray, round it if its a turn off
          if (
          resourceId == "Yellow Ray" &&
          Math.abs(diff.get(resourceId) - ((_resources$0$resource2 = resources[0].resourcesUsed) !== null && _resources$0$resource2 !== void 0 ? _resources$0$resource2 : 0)) <= 1)
          {var _ref6;
            diff.set(
            resourceId, (_ref6 =
            Math.round(amountUsed) * resources[0].resourcesUsed) !== null && _ref6 !== void 0 ? _ref6 : 1);


            amountUsed = Math.round(amountUsed);
          }

          if (amountUsed % 1 != 0) {var _resources$0$resource3;
            doDebug();
            throw "Unexpected amount of a resource used! Expected a multiple of ".concat((_resources$0$resource3 =
            resources[0].resourcesUsed) !== null && _resources$0$resource3 !== void 0 ? _resources$0$resource3 : 1, " from ").concat(
            resources[0].name, " of type ").concat(
            ResourceTypes/* ResourceCategory */.s6[resources[0].type], " but got a total of ").concat(
            diff.get(
            resourceId), " used! Original value: ").concat(
            snapshot.resourceMap.get(
            resources[0].resource), ", Current Value: ").concat(
            (0,ResourceTypes/* getResourcesLeft */.r)(resources[0].resource));
          }

          if (amountUsed > resources.length) {
            doDebug();
            throw "Unexpected amount of a resource used! Expected ".concat(
            resources.length, " or less of ").concat(
            resources[0].name, " of type ").concat(
            ResourceTypes/* ResourceCategory */.s6[resources[0].type], " but got a total of ").concat(
            diff.get(
            resourceId), " used! Original value: ").concat(
            snapshot.resourceMap.get(
            resources[0].resource), ", Current Value: ").concat(
            (0,ResourceTypes/* getResourcesLeft */.r)(resources[0].resource));
          }

          _this.addUsedResource(resources[0], amountUsed);

          (_changed$resources = changed.resources).push.apply(_changed$resources, _toConsumableArray(resources.slice(0, amountUsed)));
          (0,external_kolmafia_.print)(
          "Detected resource change, " +
          resources[0].name +
          " of " +
          ResourceTypes/* ResourceCategory */.s6[resources[0].type] +
          " x " +
          amountUsed);

        };for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return changed;
    } }, { key: "addMeat", value:

    function addMeat(meat) {
      this.miscMeat += meat;

      return this;
    } }, { key: "addIgnored", value:

    function addIgnored(resource) {
      this.ignoreResources.push(resource);

      return this;
    } }, { key: "getResource", value:

    function getResource(resource) {
      return this.resourcesAvailable.find(function (r) {return r.type == resource;});
    } }, { key: "addUsedResource", value:

    function addUsedResource(resource) {var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      for (var i = 0; i < amount; i++) {
        var index = this.resourcesAvailable.findIndex(function (r) {return r === resource;});

        if (index >= 0) {
          this.resourcesAvailable.splice(index, 1);
        } else {
          throw "Expected to find a ".concat(resource.name, " of type ").concat(
          ResourceTypes/* ResourceCategory */.s6[resource.type], " but none were remaining!");

        }

        this.resourceUsed.push(resource.type);
      }

      return this;
    } }, { key: "addUsed", value:

    function addUsed(resource) {var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      for (var i = 0; i < amount; i++) {
        var index = this.resourcesAvailable.findIndex(
        function (r) {return r.type == resource;});


        if (index >= 0) {
          this.resourcesAvailable.splice(index, 1);
        }

        this.resourceUsed.push(resource);
      }

      return this;
    } }, { key: "canUse", value:

    function canUse(resource) {
      return Math.max(
      0,
      this.resourcesNeeded.filter(function (r) {return r[0] == resource;}).length -
      this.getUsed(resource));

    } }, { key: "addMaybe", value:

    function addMaybe(
    resource,
    chance)

    {var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      if (resource == null) {
        throw "Tried to add a null resource";
      }

      for (var i = 0; i < amount; i++) {
        this.resourcesNeeded.push([resource, chance]);
      }

      return this;
    } }, { key: "addConsumablePull", value:

    function addConsumablePull(item) {var chance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.addMeat((0,external_kolmafia_.historicalPrice)(item) * 1.1);

      return this.addPull(item, chance);
    } }, { key: "addPull", value:

    function addPull(item) {var chance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.pulls.push(item);

      this.pulls.sort(function (i1, i2) {return i1.name.localeCompare(i2.name);});

      return this.addMaybe(ResourceTypes/* ResourceCategory.PULL */.s6.PULL, chance);
    } }, { key: "addFax", value:

    function addFax(monster) {var chance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      if (!(0,external_kolmafia_.canFaxbot)(monster)) {
        this.addIgnored("Fax Machine");
      }

      if (
      (0,external_kolmafia_.getProperty)("chateauMonster") != "" &&
      (0,external_kolmafia_.toMonster)((0,external_kolmafia_.getProperty)("chateauMonster")) != monster)
      {
        this.addIgnored("Chateau Painting");
      }

      var foughtLocket = (0,external_kolmafia_.getProperty)("_locketMonstersFought").
      split(",").
      map(function (s) {return (0,external_kolmafia_.toInt)(s);});

      if (
      foughtLocket.length < 3 && (
      foughtLocket.includes((0,external_kolmafia_.toInt)(monster)) ||
      !(0,external_kolmafia_.getLocketMonsters)()[monster.name]))
      {
        this.addIgnored("Combat Locket");
      }

      return this.addMaybe(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER, chance);
    } }, { key: "add", value:

    function add(resource) {var resources = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      if (resource == ResourceTypes/* ResourceCategory.PULL */.s6.PULL) {
        throw "Please use addPull instead";
      }

      if (resource == ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) {
        throw "Please use addFax instead";
      }

      this.addMaybe(resource, 1, resources);

      return this;
    } }, { key: "getUsed", value:

    function getUsed(resource) {
      return this.resourceUsed.filter(function (r) {return r == resource;}).length;
    } }]);return PossiblePath;}();


var PossibleMultiPath = /*#__PURE__*/function (_PossiblePath) {_inherits(PossibleMultiPath, _PossiblePath);var _super = _createSuper(PossibleMultiPath);function PossibleMultiPath() {var _this2;_classCallCheck(this, PossibleMultiPath);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this2 = _super.call.apply(_super, [this].concat(args));_defineProperty(_assertThisInitialized(_this2), "printUsing",
    false);_defineProperty(_assertThisInitialized(_this2), "subpaths",
    []);return _this2;}_createClass(PossibleMultiPath, [{ key: "addPath", value:

    function addPath(quest, path) {var _this$resourcesNeeded, _this$resourceUsed, _this$resourcesAvaila, _this$ignoreResources, _this$pulls;
      this.subpaths.push([quest, path]);

      (_this$resourcesNeeded = this.resourcesNeeded).push.apply(_this$resourcesNeeded, _toConsumableArray(path.resourcesNeeded));
      (_this$resourceUsed = this.resourceUsed).push.apply(_this$resourceUsed, _toConsumableArray(path.resourceUsed));
      (_this$resourcesAvaila = this.resourcesAvailable).push.apply(_this$resourcesAvaila, _toConsumableArray(path.resourcesAvailable));
      (_this$ignoreResources = this.ignoreResources).push.apply(_this$ignoreResources, _toConsumableArray(path.ignoreResources));
      (_this$pulls = this.pulls).push.apply(_this$pulls, _toConsumableArray(path.pulls));
      this.advsSavedMin += path.advsSavedMin;
      this.advsSavedMax += path.advsSavedMax;
      this.miscMeat += path.miscMeat;
    } }]);return PossibleMultiPath;}(PossiblePath);


var TaskRelation;(function (TaskRelation) {TaskRelation[TaskRelation["WAIT_FOR"] = 0] = "WAIT_FOR";TaskRelation[TaskRelation["DO_BEFORE"] = 1] = "DO_BEFORE";TaskRelation[TaskRelation["DO_AFTER"] = 2] = "DO_AFTER";TaskRelation[TaskRelation["UNRELATED"] = 3] = "UNRELATED";})(TaskRelation || (TaskRelation = {}));






function createResourcesSnapshot(
path)
{
  var snapshot = new ResourcesSnapshot();var _iterator3 = _createForOfIteratorHelper(

    ResourceTypes/* ResourceIds */.is),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var resource = _step3.value;
      if (resource == "Yellow Ray") {
        if ((0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Everything Looks Yellow")) == 0) {
          snapshot.unused.push(resource);
        }
      }

      snapshot.resourceMap.set(resource, (0,ResourceTypes/* getResourcesLeft */.r)(resource));
    }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

  if (path != null) {var _snapshot$resources;
    (_snapshot$resources = snapshot.resources).push.apply(_snapshot$resources, _toConsumableArray(path.resourcesAvailable));
  }

  return snapshot;
}

function getResourcesChanged(
snapshot,
path)
{
  var newSnapshot = new ResourcesSnapshot();var _iterator4 = _createForOfIteratorHelper(

    ResourceTypes/* ResourceIds */.is),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var resource = _step4.value;
      var resourcesLeft = (0,ResourceTypes/* getResourcesLeft */.r)(resource);

      // If this resource is a yellow rocket
      if (resource == "Yellow Ray") {
        var prev = snapshot.resourceMap.get(resource);
        var diff = prev - resourcesLeft;

        // On YR effect, previously if we had 100 left
        // We'd now have 25 left
        // If a turn elapsed, then it'll go from 100 to 99

        // If we have a diff of less than 10, then it probably wasn't a YR
        if (diff < 10) {
          resourcesLeft = prev;
        }
      }

      // 20 - 19 = 1 resource used.
      var res = snapshot.resourceMap.get(resource) - resourcesLeft;

      if (res === 0) {
        continue;
      }

      newSnapshot.resourceMap.set(resource, res);
    }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

  newSnapshot.resources = [];

  if (path == null) {
    return newSnapshot;
  }

  // Now we're looking for the difference between available resources, and previously available

  var lastIndex = 0;

  snapshot.resources.forEach(function (resource) {
    if (lastIndex < path.resourcesAvailable.length) {
      if (path.resourcesAvailable[lastIndex] === resource) {
        lastIndex++;
        return;
      }
    }

    newSnapshot.resources.push(resource);
  });

  if (newSnapshot.resources.length > 0) {
    (0,external_kolmafia_.print)(
    "We manually used: " +
    newSnapshot.resources.
    map(function (r) {return r.name + " x " + ResourceTypes/* ResourceCategory */.s6[r.type];}).
    join(", "));

  }

  return newSnapshot;
}
;// CONCATENATED MODULE: ./src/utils/GreyOutfitter.ts
function GreyOutfitter_typeof(obj) {"@babel/helpers - typeof";return GreyOutfitter_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyOutfitter_typeof(obj);}function GreyOutfitter_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyOutfitter_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyOutfitter_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyOutfitter_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyOutfitter_arrayLikeToArray(o, minLen);}function GreyOutfitter_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyOutfitter_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyOutfitter_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyOutfitter_toPropertyKey(descriptor.key), descriptor);}}function GreyOutfitter_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyOutfitter_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyOutfitter_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyOutfitter_defineProperty(obj, key, value) {key = GreyOutfitter_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyOutfitter_toPropertyKey(arg) {var key = GreyOutfitter_toPrimitive(arg, "string");return GreyOutfitter_typeof(key) === "symbol" ? key : String(key);}function GreyOutfitter_toPrimitive(input, hint) {if (GreyOutfitter_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyOutfitter_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var goose = external_kolmafia_.Familiar.get("Grey Goose");

var GreyOutfit = /*#__PURE__*/function () {


















  /**
   * When we don't want to cap how much combat we run
   */


  function GreyOutfit() {var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;GreyOutfitter_classCallCheck(this, GreyOutfit);GreyOutfitter_defineProperty(this, "allowChampBottle", false);GreyOutfitter_defineProperty(this, "famExpWeight", 30);GreyOutfitter_defineProperty(this, "itemDropWeight", 0.3);GreyOutfitter_defineProperty(this, "meatDropWeight", 0.1);GreyOutfitter_defineProperty(this, "hpWeight", 0.001);GreyOutfitter_defineProperty(this, "hpRegenWeight", 0.01);GreyOutfitter_defineProperty(this, "mpWeight", 0.001);GreyOutfitter_defineProperty(this, "mpRegenWeight", 0.01);GreyOutfitter_defineProperty(this, "initWeight", 0.05);GreyOutfitter_defineProperty(this, "plusCombatWeight", 0);GreyOutfitter_defineProperty(this, "minusCombatWeight", 0);GreyOutfitter_defineProperty(this, "bonusWeights", []);GreyOutfitter_defineProperty(this, "extra", []);GreyOutfitter_defineProperty(this, "overrideMaximizer", void 0);GreyOutfitter_defineProperty(this, "umbrellaSetting", void 0);GreyOutfitter_defineProperty(this, "combatCap", 25);
    this.overrideMaximizer = string;

    this.setWeights();
  }

  /**
   * Checks if the user defined a bonus weight. If so, discards our own.
   */GreyOutfitter_createClass(GreyOutfit, [{ key: "hasExtra", value:
    function hasExtra(name) {
      return (
        this.bonusWeights.find(
        function (s) {return (
            !(s.item instanceof external_kolmafia_.Item) &&
            s.item.
            toLowerCase().
            replace(/^[^a-z]+/, "").
            startsWith(name));}) !=
        null);

    } }, { key: "getUmbrella", value:

    function getUmbrella() {
      if (this.umbrellaSetting == null) {
        if (this.minusCombatWeight > 0) {
          return UmbrellaState.MINUS_COMBAT;
        } else {
          //if (outfit.itemDropWeight > 2) {
          return UmbrellaState.ITEM_DROPS;
        }
      }

      return this.umbrellaSetting;
    } }, { key: "setWeights", value:

    function setWeights() {
      if (GreySettings_GreySettings.greyLocketWeight > 0) {
        this.addWeight(
        external_kolmafia_.Item.get("combat lover's locket"),
        GreySettings_GreySettings.greyLocketWeight);

      }

      this.addWeight(external_kolmafia_.Item.get("lucky gold ring"), 20);
      this.addWeight(external_kolmafia_.Item.get("mafia thumb ring"), 19);

      if (getQuestStatus("questL13Final") <= 5) {
        if ((0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("powerful glove")) > 0) {
          this.addWeight(external_kolmafia_.Item.get("hewn moon-rune spoon"), -4);
          this.addWeight(external_kolmafia_.Item.get("Powerful Glove"), 4.5);
        }
      }

      if ((0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Camp Scout Backpack")) > 0) {
        this.addWeight(external_kolmafia_.Item.get("camp scout backpack"), 6000);
      }

      if (
      (0,external_kolmafia_.availableAmount)(GreyOutfit.teachersPen) > 1 &&
      (0,external_kolmafia_.availableAmount)(GreyOutfit.leafPendant) > 0)
      {
        this.addIgnored(GreyOutfit.leafPendant);
      }

      this.addExtra("-equip screwing pooch");

      if ((0,external_kolmafia_.myLevel)() > 15) {
        this.initWeight = 0.001;
      }

      if ((0,external_kolmafia_.myMeat)() > 12000) {
        this.meatDropWeight = 0.01;
      }

      if (
      !(0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Hivemindedness")) &&
      (0,external_kolmafia_.myMp)() < Math.min(125, Math.max((0,external_kolmafia_.myMaxmp)(), 70)))
      {
        this.mpRegenWeight += 1;

        if ((0,external_kolmafia_.myMp)() <= 30) {
          this.mpRegenWeight += 2;
        }

        /*if (myMp() < 42) {
          this.mpRegenWeight += 2;
        }*/
      }

      if (
      GreySettings_GreySettings.isHardcoreMode() &&
      (0,external_kolmafia_.myAdventures)() < 40 &&
      (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) < 6 &&
      (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Phase Shift")) &&
      (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Photonic Shroud")))
      {
        this.famExpWeight = 100;
      }
      // Setup weights according to w/e passives I have
    } }, { key: "addIgnored", value:

    function addIgnored(item) {
      return this.addExtra("-equip " + item.name);
    } }, { key: "addExtra", value:

    function addExtra(extra) {
      this.extra.push(extra);

      return this;
    } }, { key: "addWeight", value:

    function addWeight(
    item,
    weight,
    min,
    max)
    {
      weight = weight != null ? weight : item instanceof external_kolmafia_.Item ? 999999 : 1;

      if (!(item instanceof external_kolmafia_.Item)) {
        item = item.toLowerCase();
        item = item.
        replace(" exp", " experience").
        replace(" dmg", " damage").
        replace(/ res$/, " resistance").
        replace(/ mox$/, " moxie").
        replace(/ mys$/, " mysticality").
        replace(/ mus$/, " muscle");
      }

      if (
      weight < 999999 ||
      !(item instanceof external_kolmafia_.Item) ||
      (0,external_kolmafia_.availableAmount)(item) == 0)
      {
        var existing = this.bonusWeights.find(function (m) {return m.item === item;});

        if (existing != null) {
          if (existing.weight >= 0 == weight >= 0) {
            existing.weight += weight;

            if (min != null) {var _existing$min;
              existing.min = Math.max((_existing$min = existing.min) !== null && _existing$min !== void 0 ? _existing$min : 0, min);
            }

            if (max != null) {var _existing$max;
              existing.max = Math.max((_existing$max = existing.max) !== null && _existing$max !== void 0 ? _existing$max : 0, max);
            }
          } else {
            existing.weight = weight;
            existing.min = min;
            existing.max = max;
          }
        } else {
          this.bonusWeights.push({
            item: item,
            weight: weight,
            min: min,
            max: max
          });
        }
      } else {
        this.addExtra("+equip " + item.name);
      }

      return this;
    } }, { key: "setNoCombat", value:

    function setNoCombat() {
      if (this.minusCombatWeight > 0) {
        this.minusCombatWeight += 20;
        this.setUncapped();
      }

      this.minusCombatWeight += 10;
      return this;
    } }, { key: "setPlusCombat", value:

    function setPlusCombat() {
      if (this.plusCombatWeight > 0) {
        this.plusCombatWeight += 20;
        this.setUncapped();
      }

      this.plusCombatWeight += 10;
      return this;
    } }, { key: "setItemDrops", value:

    function setItemDrops() {
      this.itemDropWeight = 2;

      return this;
    } }, { key: "setChampagneBottle", value:

    function setChampagneBottle() {
      this.allowChampBottle = true;

      return this;
    } }, { key: "setUncapped", value:

    function setUncapped() {
      this.combatCap = 100;

      return this;
    } }, { key: "createString", value:

    function createString() {
      if (this.overrideMaximizer != null) {
        return this.overrideMaximizer;
      }

      var modifiers = [];

      if (this.famExpWeight > 0 && !this.hasExtra("familiar exp")) {
        var mod = "+" + this.famExpWeight + " familiar experience";

        if ((0,external_kolmafia_.familiarWeight)(goose) < 6) {
          // Subtract 1 as we gain a minimum of 1 exp per fight
          var expToReabsorb = 36 - 1 - goose.experience;

          mod += " " + expToReabsorb + " MAX";
        }

        modifiers.push(mod);
      }

      if (this.itemDropWeight > 0 && !this.hasExtra("item drop")) {
        modifiers.push("+" + this.itemDropWeight + " item drop");
      }

      if (this.meatDropWeight > 0 && !this.hasExtra("meat drop")) {
        modifiers.push("+" + this.meatDropWeight + " meat drop");
      }

      if (this.hpWeight > 0 && !this.hasExtra("hp")) {
        modifiers.push("+" + this.hpWeight + " hp");
      }

      if (this.hpRegenWeight > 0 && !this.hasExtra("hp regen")) {
        modifiers.push("+" + this.hpRegenWeight + " hp regen");
      }

      if (this.mpWeight > 0 && !this.hasExtra("mp")) {
        modifiers.push("+" + this.mpWeight + " mp");
      }

      if (this.mpRegenWeight > 0 && !this.hasExtra("mp regen")) {
        modifiers.push("+" + this.mpRegenWeight + " mp regen");
      }

      if (this.initWeight > 0 && !this.hasExtra("init")) {
        modifiers.push("+" + this.initWeight + " init");
      }

      if (this.plusCombatWeight > 0 && !this.hasExtra("combat")) {
        modifiers.push(
        "+" + this.plusCombatWeight + " combat " + this.combatCap + " MAX");

      }

      if (this.minusCombatWeight > 0 && !this.hasExtra("combat")) {
        modifiers.push(
        "-" + this.minusCombatWeight + " combat " + this.combatCap + " MAX");

      }var _iterator = GreyOutfitter_createForOfIteratorHelper(

        this.bonusWeights),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var weight = _step.value;
          modifiers.push(
          (weight.weight >= 0 ? "+" + weight.weight : weight.weight) +
          " " + (
          weight.item instanceof external_kolmafia_.Item ? "bonus " : "") +
          weight.item + (
          weight.min != null ? " " + weight.min + " MIN" : "") + (
          weight.max != null ? " " + weight.max + " MAX" : ""));

        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = GreyOutfitter_createForOfIteratorHelper(

        this.extra),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var extra = _step2.value;
          modifiers.push(extra);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      if (!this.allowChampBottle && !this.hasExtra("equip broken champagne")) {
        modifiers.push("-equip broken champagne bottle");
      }

      return modifiers.join(" ");
    } }]);return GreyOutfit;}();GreyOutfitter_defineProperty(GreyOutfit, "IGNORE_OUTFIT", "Ignore Outfit");GreyOutfitter_defineProperty(GreyOutfit, "teachersPen", external_kolmafia_.Item.get("Teacher's Pen"));GreyOutfitter_defineProperty(GreyOutfit, "leafPendant", external_kolmafia_.Item.get("Autumn leaf pendant"));
;// CONCATENATED MODULE: ./src/utils/GreyResources.ts
function GreyResources_typeof(obj) {"@babel/helpers - typeof";return GreyResources_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyResources_typeof(obj);}function GreyResources_slicedToArray(arr, i) {return GreyResources_arrayWithHoles(arr) || GreyResources_iterableToArrayLimit(arr, i) || GreyResources_unsupportedIterableToArray(arr, i) || GreyResources_nonIterableRest();}function GreyResources_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyResources_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyResources_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyResources_defineProperty(obj, key, value) {key = GreyResources_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyResources_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyResources_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyResources_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyResources_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyResources_arrayLikeToArray(o, minLen);}function GreyResources_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyResources_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyResources_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyResources_toPropertyKey(descriptor.key), descriptor);}}function GreyResources_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyResources_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyResources_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyResources_toPropertyKey(arg) {var key = GreyResources_toPrimitive(arg, "string");return GreyResources_typeof(key) === "symbol" ? key : String(key);}function GreyResources_toPrimitive(input, hint) {if (GreyResources_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyResources_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}

var GreyPulls = /*#__PURE__*/function () {function GreyPulls() {GreyResources_classCallCheck(this, GreyPulls);}GreyResources_createClass(GreyPulls, null, [{ key: "pullFratWarOutfit", value:
    function pullFratWarOutfit() {var _iterator = GreyResources_createForOfIteratorHelper(
        (0,external_kolmafia_.outfitPieces)("Frat Warrior Fatigues")),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if ((0,external_kolmafia_.availableAmount)(i) > 0) {
            continue;
          }

          GreyPulls.tryPull(i);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "pullCrypts", value:

    function pullCrypts() {
      GreyPulls.tryPull(external_kolmafia_.Item.get("Gravy Boat"));
    } }, { key: "pullBoxOfMatches", value:

    function pullBoxOfMatches() {
      GreyPulls.tryPull(external_kolmafia_.Item.get("book of matches"));
    } }, { key: "pullScrip", value:

    function pullScrip() {
      GreyPulls.tryPull(external_kolmafia_.Item.get("Shore Inc. Ship Trip Scrip"));
    } }, { key: "pullOre", value:

    function pullOre() {
      if ((0,external_kolmafia_.getProperty)("questL08Trapper") != "step1") {
        return;
      }

      var ore = external_kolmafia_.Item.get((0,external_kolmafia_.getProperty)("trapperOre"));

      if (ore == external_kolmafia_.Item.none || (0,external_kolmafia_.availableAmount)(ore) >= 3) {
        return;
      }

      this.tryPull(ore);
    } }, { key: "getPullableKeys", value:

    function getPullableKeys() {
      var items = getZappables(external_kolmafia_.Item.get("Jarlsberg's key")).filter(
      function (i) {return !i.quest;});


      items.sort(function (i1, i2) {
        // If an item is in storage, and the other item isn't. Prioritize the item in storage.
        if ((0,external_kolmafia_.storageAmount)(i1) > 0 != (0,external_kolmafia_.storageAmount)(i2) > 0) {
          return (0,external_kolmafia_.storageAmount)(i2) - (0,external_kolmafia_.storageAmount)(i1);
        }

        return (0,external_kolmafia_.mallPrice)(i1) - (0,external_kolmafia_.mallPrice)(i2);
      });

      return items;
    } }, { key: "tryRetrieve", value:

    function tryRetrieve(item) {var maxCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;
      if ((0,external_kolmafia_.pullsRemaining)() >= 0) {
        return this.tryPull(item, maxCost);
      }

      if ((0,external_kolmafia_.itemAmount)(item) > 0) {
        return;
      }

      if ((0,external_kolmafia_.availableAmount)(item) > 0) {
        (0,external_kolmafia_.cliExecute)("retrieve " + item);
      } else {
        if ((0,external_kolmafia_.myMeat)() > (0,external_kolmafia_.myStorageMeat)()) {
          (0,external_kolmafia_.buy)(item, 1, maxCost);
        } else {
          GreyPulls.buyWithStorage(item, maxCost);
        }
      }
    } }, { key: "buyWithStorage", value:

    function buyWithStorage(item, maxCost) {
      var prop = "autoBuyPriceLimit";
      var prev = (0,external_kolmafia_.getProperty)(prop);

      try {
        (0,external_kolmafia_.setProperty)(prop, maxCost.toString());

        (0,external_kolmafia_.buyUsingStorage)(item, 1, maxCost);
      } finally {
        (0,external_kolmafia_.setProperty)(prop, prev);
      }
    } }, { key: "tryPull", value:

    function tryPull(item) {var maxCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;
      if ((0,external_kolmafia_.storageAmount)(item) == 0) {
        GreyPulls.buyWithStorage(item, maxCost);
      }

      if ((0,external_kolmafia_.storageAmount)(item) == 0) {
        throw "Unable to pull " + item.name;
      }

      var propPrior = (0,external_kolmafia_.getProperty)("_roninStoragePulls");

      (0,external_kolmafia_.print)("Pulling " + item.name, "blue");
      (0,external_kolmafia_.cliExecute)("pull " + item.name);

      if ((0,external_kolmafia_.getProperty)("_roninStoragePulls") != propPrior) {
        var pulled = (0,external_kolmafia_.getProperty)("_roninStoragePulls").split(",");

        var greyPulls = (0,external_kolmafia_.getProperty)("_greyPulls").
        split(",").
        filter(function (s) {return s.length > 0;});
        greyPulls.push((0,external_kolmafia_.toInt)(item).toString());
        var pullsSorted = [];var _iterator2 = GreyResources_createForOfIteratorHelper(

          pulled),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var pull = _step2.value;
            if (!greyPulls.includes(pull)) {
              continue;
            }

            pullsSorted.push(pull);
          }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = GreyResources_createForOfIteratorHelper(

          greyPulls),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var remainder = _step3.value;
            if (pullsSorted.includes(remainder)) {
              continue;
            }

            (0,external_kolmafia_.print)("Somehow didn't detect " + remainder + " as a used pull", "red");
            pullsSorted.push(remainder);
          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

        (0,external_kolmafia_.setProperty)("_greyPulls", pullsSorted.join(","));
      }
    } }]);return GreyPulls;}();


var GreyClovers = /*#__PURE__*/function () {function GreyClovers() {GreyResources_classCallCheck(this, GreyClovers);}GreyResources_createClass(GreyClovers, null, [{ key: "doOres", value:


    function doOres() {
      // 2
      (0,external_kolmafia_.use)(this.clover);
    } }, { key: "doWand", value:

    function doWand() {
      // 1
      (0,external_kolmafia_.use)(this.clover);
    } }]);return GreyClovers;}();GreyResources_defineProperty(GreyClovers, "clover", external_kolmafia_.Item.get("11-leaf Clover"));


var GreyVortex = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyVortex() {GreyResources_classCallCheck(this, GreyVortex);}GreyResources_createClass(GreyVortex, null, [{ key: "doBatCave", value:
    function doBatCave() {


      // 20
    } }, { key: "doHarem", value: function doHarem() {


      // 20
    } }, { key: "doHiddenTemple", value: function doHiddenTemple() {


      // 20
    } }, { key: "doSmutOrcs", value: function doSmutOrcs() {


      // 20
    } }, { key: "doCrypt", value: function doCrypt() {


      // 20
    } }]);return GreyVortex;}()));
var GreyCombatLocket = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyCombatLocket() {GreyResources_classCallCheck(this, GreyCombatLocket);}GreyResources_createClass(GreyCombatLocket, null, [{ key: "doSystemSweep", value:
    function doSystemSweep() {} }, { key: "doInfiniteLoop", value:

    function doInfiniteLoop() {} }, { key: "doFantasyBandit", value:

    function doFantasyBandit() {} }, { key: "doMountainMan", value:

    function doMountainMan() {} }]);return GreyCombatLocket;}()));


function getZappables(item) {
  var items = [];

  Object.keys((0,external_kolmafia_.getRelated)(item, "zap")).forEach(function (s) {
    var i = external_kolmafia_.Item.get(s);

    if (items.includes(i)) {
      return;
    }

    items.push(i);
  });

  return items;
}var

Required;(function (Required) {Required["MUST"] = "You really should have these";Required["VERY_USEFUL"] = "Optional, but very very useful";Required["USEFUL"] = "Useful, but not major";Required["MINOR"] = "Minor, can skip";})(Required || (Required = {}));var






Type;(function (Type) {Type[Type["FREE"] = 0] = "FREE";Type[Type["IOTM"] = 1] = "IOTM";Type[Type["IOTM_EXTRA"] = 2] = "IOTM_EXTRA";})(Type || (Type = {}));





var GreyResources_GreyRequirements = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyRequirements() {GreyResources_classCallCheck(this, GreyRequirements);}GreyResources_createClass(GreyRequirements, [{ key: "hasRequired", value:
    function hasRequired() {
      var required = [];
      var add = function add(
      type,
      name,
      desc,
      e,
      owns)

      {var unsupported = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
        if (name instanceof Item) {
          owns =
          itemAmount(name) +
          closetAmount(name) +
          storageAmount(name) +
          equippedAmount(name) >
          0;
          name = name.name;
        } else if (name instanceof Familiar) {
          owns = haveFamiliar(name);

          var hatchling = name.hatchling;

          if (
          !owns &&
          storageAmount(hatchling) +
          itemAmount(hatchling) +
          closetAmount(hatchling) +
          displayAmount(hatchling) +
          shopAmount(hatchling) >
          0)
          {
            desc +=
            "- <u>You do have the hatchling " + hatchling + " though..</u>";
          }

          name = "" + name;
        }

        if (unsupported) {
          desc = "<s>" + desc + "</s> - <b><u>CURRENTLY UNSUPPORTED</u></b>";
        }

        required.push([type, name, desc, e, owns]);
      };

      add(
      Type.IOTM,
      Familiar.get("Grey Goose"),
      "Without this, Grey You isn't really feasible",
      Required.MUST);


      add(
      Type.IOTM,
      Item.get("Clan VIP Lounge key"),
      "Used to remove Beaten Up, grab yellow rockets, fax and get the +fam exp effect!",
      Required.MUST);


      add(
      Type.FREE,
      Item.get("Yule Hatchet"),
      "Gives +2 fam exp every fight, basically a must have",
      Required.MUST);


      var locket = Object.keys(getLocketMonsters()).map(function (s) {return (
          s.toLowerCase().trim());});


      var monstersLocket = [
      "pygmy witch lawyer",
      "mountain man",
      "cloud of disembodied whiskers",
      "one-eyed willie",
      "little man in the canoe",
      "fantasy bandit",
      "vicious gnauga",
      "revolving bugbear"];


      if (locket.length > 0) {
        var monstersNeed = monstersLocket.filter(function (m) {return !locket.includes(m);});
        var monstersHave = monstersLocket.filter(function (m) {return locket.includes(m);});

        if (monstersNeed.length > 0) {
          add(
          Type.IOTM_EXTRA,
          "Combat Locket: " + monstersNeed.join(", "),
          "The script uses these in run, you are missing these from your combat locket",
          Required.MUST,
          false);

        }

        if (monstersHave.length > 0) {
          add(
          Type.IOTM_EXTRA,
          "Combat Locket: " + monstersHave.join(", "),
          "The script uses these in run, you have these",
          Required.MUST,
          true);

        }
      } else if (availableAmount(Item.get("Combat Lover's Locket")) > 0) {
        add(
        Type.IOTM_EXTRA,
        "Combat Locket " + monstersLocket.join(", "),
        "We can't tell if you have these in your locket unfortunately due to mafia limitations.",
        Required.MUST,
        false);

      }

      var poolSkill = Math.floor(
      2 * Math.sqrt(toInt(getProperty("poolSharkCount"))));


      if (poolSkill < 10) {
        add(
        Type.FREE,
        "Pool Skill", "You can train this up using 11-Leaf Clovers to have a permanant +10 across ascensions. You currently have a pool skill of ".concat(
        poolSkill, ", we want 10. Try looking up \"A Shark's Chum\" in the kol wiki."),
        Required.MUST,
        false);

      } else {
        add(
        Type.FREE,
        "Pool Skill",
        "You have fully trained up your pool skill, which is great for the Billards pool test!",
        Required.MUST,
        true);

      }

      add(
      Type.IOTM,
      Item.get("Unbreakable Umbrella"),
      "Awesome -Combat and +ML for Oil Peak",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("miniature crystal ball"),
      "Great for speeding up predictions, saves about 40 turns?",
      Required.VERY_USEFUL);


      add(
      Type.FREE,
      Familiar.get("Gelatinous Cubeling"),
      "Saves about 10 turns if you're not doing a tower break",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("Combat Lover's Locket"),
      "Used as a fax source, with some helpful enchants",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("Backup Camera"),
      "Great for +ML, Init and sometimes Fantasy Bandits & Lobsters",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("unwrapped knock-off retro superhero cape"),
      "Great for crypts & tower",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("Designer Sweatpants"),
      "Great for Ron Protesters, and restoring MP!",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("June Cleaver"),
      "Great for 1.5k meat, occasional 5 advs, smut orcs and the teachers pen which is +2 fam exp!",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("mumming trunk"),
      "Absolutely great for early game MP regeneration. Especially when you're tough on meat.",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("protonic accelerator pack"),
      "Used for some free delay, -5 combat, get a nice +2 fam exp offhand and as a MP restorer! With sweatpants as a stunner, this is great!",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("Familiar Scrapbook"),
      "Great for power leveling after GYou ends, and the offhand +1 fam exp!",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("SongBoom&trade; BoomBox"),
      "Awesome for startup meat & nuns, then passive Special Seasoning generation you can use/sell",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("hewn moon-rune spoon"),
      "Great for starting as vole, then switching to Blender! Probably worth 20 turns! Don't forget to setup your Greyday settings!",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("Deck of Every Card"),
      "Used as a key source and as an initial meat source. Not worth buying as its very expensive",
      Required.VERY_USEFUL);


      add(
      Type.FREE,
      Item.get("HOA regulation book"),
      "Prefered over Space Trip safety headphones for the +2 res, saves 20? turns, especially on smut orcs. Very minor difference which one you have.",
      Required.VERY_USEFUL);


      add(
      Type.FREE,
      Item.get("Space Trip safety headphones"),
      "HOA regulation book is used instead when available, but this still saves 20? turns, especially on smut orcs. Very minor difference which one you have.",
      Required.VERY_USEFUL);


      add(
      Type.FREE,
      Item.get("Mafia Thumb Ring"),
      "Gives roughly 30 extra adventures over the course of your run",
      Required.VERY_USEFUL);


      add(
      Type.IOTM,
      Item.get("Industrial Fire Extinguisher"),
      "Can speed up by up 15 to 25 turns",
      Required.USEFUL);


      add(
      Type.IOTM,
      "Mayday Contract",
      "Gives a nice +combat cape and starting 5k meat boost, meat boost is extremely minor if you use a pull instead.",
      Required.USEFUL,
      toBoolean(getProperty("hasMaydayContract")));


      add(
      Type.IOTM,
      "Cosmic Bowling Ball",
      "Banishes for all!",
      Required.USEFUL,
      toBoolean(getProperty("hasCosmicBowlingBall")));


      add(
      Type.IOTM,
      Item.get("Fourth of May Cosplay Saber"),
      "Great for faster lobsterfrogmen, ele res checks and for 1-2 yellow rays!",
      Required.USEFUL);


      add(
      Type.IOTM,
      Item.get("Powerful Glove"),
      "If not tower breaking, great for white pixels. If you have cursed mag glass, saves 5 turns?",
      Required.USEFUL);


      add(
      Type.IOTM,
      Item.get("Cargo Cultist Shorts"),
      "Used to fight Smut Orc to save 6 turns, or for the frat outfit to save pulls or 12 turns",
      Required.USEFUL);


      add(
      Type.FREE,
      Item.get("Deck of lewd playing cards"),
      "Speeds up Ron Protesters",
      Required.USEFUL);


      add(
      Type.IOTM,
      Item.get("latte lovers member's mug"),
      "Gives +3 familiar exp roughly 100 turns into the run",
      Required.USEFUL);


      add(
      Type.IOTM,
      "'Greatest American Pants' or 'Navel Ring of Navel Gazing'",
      "Free runs",
      Required.USEFUL,
      [
      Item.get("Greatest American Pants"),
      Item.get("navel ring of navel gazing")].
      find(function (i) {return availableAmount(i) + storageAmount(i) > 0;}) != null);


      add(
      Type.IOTM,
      Item.get("Pantsgiving"),
      "Gives +2 all res, 10 items which can help save turncount and stacks up stomach size increasers",
      Required.USEFUL);


      add(
      Type.IOTM,
      Familiar.get("Shorter-Order Cook"),
      "Gives an initial boost to start, skip 6-8 leveling turns! Also great for tower killing!",
      Required.USEFUL);


      add(
      Type.IOTM,
      Familiar.get("Melodramedary"),
      "Saves 3 adventures for desert!",
      Required.MINOR);


      add(
      Type.IOTM,
      Familiar.get("Cat Burglar"),
      "Only used rarely, generally not worth picking up but does sometimes save 20k of resources in meat!",
      Required.MINOR);


      add(
      Type.IOTM,
      "Fantasyrealm",
      "This isn't worth buying as it devalues Lucky Gold Ring, but if you do have it; Then it's useful as another key source.",
      Required.MINOR,
      toBoolean(getProperty("frAlways")));


      add(
      Type.IOTM,
      Item.get("Cursed Magnifying Glass"),
      "Only really used for minor delay burning, and lobsters + powerful glove",
      Required.MINOR);


      add(
      Type.IOTM,
      Familiar.get("XO Skeleton"),
      "Used for its pickpocket, just saves a polar vortex for the well kitted players",
      Required.MINOR);


      add(
      Type.IOTM,
      "Autumn-aton",
      "Fetches stuff from zones, the only major one is sonofa beach, and less major if you're shiny. If very shiny, saves 4 turns + resources, otherwise 20+ turns",
      Required.USEFUL,
      toBoolean(getProperty("hasAutumnaton")));


      add(
      Type.IOTM,
      "Gingerbread City",
      "Useful as another key source",
      Required.MINOR,
      toBoolean(getProperty("gingerbreadCityAvailable")),
      true);


      add(
      Type.IOTM,
      "Piraterealm",
      "Useful as another key source",
      Required.MINOR,
      toBoolean(getProperty("prAlways")),
      true);


      add(
      Type.IOTM,
      Item.get("Kramco Sausage-o-Matic&trade;"),
      "Useful as a delay burner, and for another 23 adventures a day",
      Required.MINOR);


      add(
      Type.IOTM,
      "Voting Booth",
      "Iotm for voting, +3 hot res, +25% moxie buff, has interaction with powerful glove for lobsterfrogman, and gives 3 free delay burns",
      Required.MINOR,
      toBoolean(getProperty("voteAlways")),
      true);


      required.sort(function (_ref, _ref2) {var _ref3 = GreyResources_slicedToArray(_ref, 2),t1 = _ref3[0],r1 = _ref3[1];var _ref4 = GreyResources_slicedToArray(_ref2, 2),t2 = _ref4[0],r2 = _ref4[1];return (
          t1 == t2 ? r1.localeCompare(r2) : t1 - t2);});


      printHtml(
      '<div style="text-align: center;">======= Greyday Requirements =======<br><font color="gray">Note that this has significant overlap with loopgyou</font></div>');


      var tick = "<font color='green'>✔</font>";
      var cross = "<font color='red'>✘</font>";var _loop = function _loop()

      {var e = _arr2[_i2];
        if (e != Required.MUST) {
          printHtml("<hr>");
        }

        printHtml("<div style=\"text-align: center;\"><font color=\"blue\">".concat(
        e, "</font></div>"));

        var values = required.filter(function (r) {return r[3] == e;});var _iterator4 = GreyResources_createForOfIteratorHelper(

          values),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var _step4$value = GreyResources_slicedToArray(_step4.value, 5),name = _step4$value[1],desc = _step4$value[2],has = _step4$value[4];
            printHtml("".concat(
            has ? tick : cross, " <font color='").concat(
            has ? "" : "red", "'>").concat(
            name, "</font> <font color='gray'>=> ").concat(desc, "</font>"));

          }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
      };for (var _i2 = 0, _arr2 = Object.values(Required); _i2 < _arr2.length; _i2++) {_loop();}

      if (required.find(function (r) {return r[4] == false;}) == null) {
        printHtml(
        "<center color='green'>Wow! You have everything in here!</center>");

      }

      printHtml('<div style="text-align: center;">===============</div>');
    } }]);return GreyRequirements;}()));
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptPull.ts
function QuestL7CryptPull_typeof(obj) {"@babel/helpers - typeof";return QuestL7CryptPull_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL7CryptPull_typeof(obj);}function QuestL7CryptPull_slicedToArray(arr, i) {return QuestL7CryptPull_arrayWithHoles(arr) || QuestL7CryptPull_iterableToArrayLimit(arr, i) || QuestL7CryptPull_unsupportedIterableToArray(arr, i) || QuestL7CryptPull_nonIterableRest();}function QuestL7CryptPull_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL7CryptPull_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL7CryptPull_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL7CryptPull_arrayLikeToArray(o, minLen);}function QuestL7CryptPull_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL7CryptPull_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL7CryptPull_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL7CryptPull_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptPull_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL7CryptPull_toPropertyKey(descriptor.key), descriptor);}}function QuestL7CryptPull_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptPull_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptPull_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptPull_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptPull_setPrototypeOf(subClass, superClass);}function QuestL7CryptPull_setPrototypeOf(o, p) {QuestL7CryptPull_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptPull_setPrototypeOf(o, p);}function QuestL7CryptPull_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptPull_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptPull_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptPull_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptPull_possibleConstructorReturn(this, result);};}function QuestL7CryptPull_possibleConstructorReturn(self, call) {if (call && (QuestL7CryptPull_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptPull_assertThisInitialized(self);}function QuestL7CryptPull_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptPull_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptPull_getPrototypeOf(o) {QuestL7CryptPull_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptPull_getPrototypeOf(o);}function QuestL7CryptPull_defineProperty(obj, key, value) {key = QuestL7CryptPull_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL7CryptPull_toPropertyKey(arg) {var key = QuestL7CryptPull_toPrimitive(arg, "string");return QuestL7CryptPull_typeof(key) === "symbol" ? key : String(key);}function QuestL7CryptPull_toPrimitive(input, hint) {if (QuestL7CryptPull_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL7CryptPull_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL7CryptPull = /*#__PURE__*/function (_TaskInfo) {QuestL7CryptPull_inherits(QuestL7CryptPull, _TaskInfo);var _super = QuestL7CryptPull_createSuper(QuestL7CryptPull);function QuestL7CryptPull() {var _this;QuestL7CryptPull_classCallCheck(this, QuestL7CryptPull);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "cape",
    external_kolmafia_.Item.get("Unwrapped knock-off retro superhero cape"));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "gravyboat",
    external_kolmafia_.Item.get("Gravy Boat"));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "completed",
    false);QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "backupCamera",
    external_kolmafia_.Item.get("Backup Camera"));QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "hasRun",
    false);QuestL7CryptPull_defineProperty(QuestL7CryptPull_assertThisInitialized(_this), "paths",
    []);return _this;}QuestL7CryptPull_createClass(QuestL7CryptPull, [{ key: "getId", value:

    function getId() {
      return "Council / Crypt / Gravy Boat Pull";
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          _this2.hasRun = true;

          if (!path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
            return;
          }

          GreyPulls.pullCrypts();
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      var _this$getEstimatedFig = this.getEstimatedFights(
        assumeUnstarted || (0,external_kolmafia_.getProperty)("questL07Cyrptic") == "unstarted"),_this$getEstimatedFig2 = QuestL7CryptPull_slicedToArray(_this$getEstimatedFig, 2),without = _this$getEstimatedFig2[0],withBoat = _this$getEstimatedFig2[1];


      this.paths = [
      new PossiblePath(without[0], without[1]),
      new PossiblePath(withBoat[0], withBoat[1]).addPull(this.gravyboat)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    }

    /**
     * Returns estimated fights, without boat. And with boat.
     */ }, { key: "getEstimatedFights", value:
    function getEstimatedFights(
    assumeFresh)
    {
      // TODO Estimate using retrocape, fire extingusher, init, ML, rough item drop

      var swarmKills = Math.max(
      Math.floor(Math.sqrt(((0,external_kolmafia_.availableAmount)(this.backupCamera) ? 50 : 0) + 30)),
      3);

      var modernEncounterRate =
      0.15 + (((0,external_kolmafia_.availableAmount)(this.backupCamera) > 0 ? 100 : 0) + 150) / 1000;
      var eyeDropRate = 0.45; // Lets assume you have +300 drop rate and do party skeleton for -50 item
      var rattlingNC = 0.6; // Lets assume you have -25%, and base is 85%. So its 60%;

      var dirty = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cyrptNicheEvilness"));
      var eyes = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cyrptNookEvilness"));
      var rattling = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cyrptCrannyEvilness"));
      var sprinters = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cyrptAlcoveEvilness"));

      if (assumeFresh) {
        dirty = eyes = rattling = sprinters = 25;
      } else {
        dirty = Math.max(0, dirty - 25);
        eyes = Math.max(0, eyes - 25);
        rattling = Math.max(0, rattling - 25);
        sprinters = Math.max(0, sprinters - 25);
      }

      var evilPerNormFight = 1 + ((0,external_kolmafia_.availableAmount)(this.cape) > 0 ? 1 : 0);
      var evilPerBoatFight = evilPerNormFight + 1;

      var boatlessMinKills = 0;
      var boatlessMaxKills = 0;
      var boatMinKills = 0;
      var boatMaxKills = 0;

      // Eyes
      boatlessMaxKills += Math.ceil(eyes / evilPerNormFight);
      boatlessMinKills += Math.ceil(eyes / (evilPerNormFight + eyeDropRate * 3));

      boatMaxKills += Math.ceil(eyes / evilPerBoatFight);
      boatMinKills += Math.ceil(eyes / (evilPerBoatFight + eyeDropRate * 3));

      // Dirty
      boatlessMaxKills += Math.ceil(dirty / evilPerNormFight);
      // Adjust for encounter rate
      boatlessMinKills += Math.ceil(dirty / (evilPerNormFight + 3 * 0.3));

      boatMaxKills += Math.ceil(dirty / evilPerBoatFight);
      boatMinKills += Math.ceil(dirty / (evilPerBoatFight + 3 * 0.3));

      // Sprinters
      boatlessMaxKills += Math.ceil(sprinters / evilPerNormFight);
      // Adjust for encounter rate
      boatlessMinKills += Math.ceil(
      sprinters / (evilPerNormFight + 5 * modernEncounterRate));


      boatMaxKills += Math.ceil(sprinters / evilPerBoatFight);
      // Adjust for encounter rate
      boatMinKills += Math.ceil(
      sprinters / (evilPerBoatFight + 5 * modernEncounterRate));


      // Rattling
      boatlessMaxKills += Math.ceil(rattling / evilPerNormFight);
      boatlessMinKills += Math.ceil(
      rattling / (evilPerNormFight + rattlingNC * swarmKills));


      boatMaxKills += Math.ceil(rattling / evilPerBoatFight);
      boatMinKills += Math.ceil(
      rattling / (evilPerBoatFight + rattlingNC * swarmKills));


      return [
      [boatlessMinKills, boatlessMaxKills],
      [boatMinKills, boatMaxKills]];

    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status(path) {
      if (this.hasRun || (0,external_kolmafia_.availableAmount)(this.gravyboat) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (path != null && !path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
        this.hasRun = true;
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }]);return QuestL7CryptPull;}(TaskInfo);
;// CONCATENATED MODULE: ./src/utils/Properties.ts
function Properties_typeof(obj) {"@babel/helpers - typeof";return Properties_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, Properties_typeof(obj);}function Properties_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = Properties_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function Properties_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return Properties_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Properties_arrayLikeToArray(o, minLen);}function Properties_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function Properties_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function Properties_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, Properties_toPropertyKey(descriptor.key), descriptor);}}function Properties_createClass(Constructor, protoProps, staticProps) {if (protoProps) Properties_defineProperties(Constructor.prototype, protoProps);if (staticProps) Properties_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function Properties_defineProperty(obj, key, value) {key = Properties_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function Properties_toPropertyKey(arg) {var key = Properties_toPrimitive(arg, "string");return Properties_typeof(key) === "symbol" ? key : String(key);}function Properties_toPrimitive(input, hint) {if (Properties_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (Properties_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}

var handledChoices = [];

var Properties_PropertyManager = /*#__PURE__*/function () {function PropertyManager() {Properties_classCallCheck(this, PropertyManager);Properties_defineProperty(this, "properties",
    new Map());Properties_defineProperty(this, "cleanups",
    []);Properties_defineProperty(this, "choicesSet",
    []);}Properties_createClass(PropertyManager, [{ key: "setProperty", value:

    function setProperty(property, value) {var quiet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (!this.properties.has(property)) {
        this.properties.set(property, (0,external_kolmafia_.getProperty)(property));
      }

      (0,external_kolmafia_.setProperty)(property, value);

      if (!quiet) {
        (0,external_kolmafia_.print)("Set property " + property + " to " + value);
      }
    } }, { key: "addCleanup", value:

    function addCleanup(cleanup) {
      this.cleanups.push(cleanup);
    } }, { key: "setChoiceProperty", value:

    function setChoiceProperty(choice, value) {
      this.setChoice(choice, value);

      (0,external_kolmafia_.setProperty)("choiceAdventure" + choice, value.toString());
    } }, { key: "setChoice", value:

    function setChoice(choice, value) {
      var combo = [choice, value];

      this.choicesSet.push(combo);
      handledChoices.push(combo);
    } }, { key: "resetAll", value:

    function resetAll() {var quiet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.properties.forEach(function (value, key) {
        (0,external_kolmafia_.setProperty)(key, value);

        if (!quiet) {
          (0,external_kolmafia_.print)("Reset property " + key + " back to " + value);
        }
      });

      this.properties.clear();var _iterator = Properties_createForOfIteratorHelper(

        this.choicesSet),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          var index = handledChoices.lastIndexOf(combo);

          if (index < 0) {
            throw "Failed to reset a choice! Was missing!";
          }

          handledChoices.splice(index, 1);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      this.choicesSet.splice(0, this.choicesSet.length);

      this.cleanups.forEach(function (c) {return c();});
      this.cleanups.splice(0, this.cleanups.length);
    } }]);return PropertyManager;}();
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayBurningKramco.ts
function DelayBurningKramco_typeof(obj) {"@babel/helpers - typeof";return DelayBurningKramco_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, DelayBurningKramco_typeof(obj);}function DelayBurningKramco_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayBurningKramco_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, DelayBurningKramco_toPropertyKey(descriptor.key), descriptor);}}function DelayBurningKramco_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayBurningKramco_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayBurningKramco_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayBurningKramco_defineProperty(obj, key, value) {key = DelayBurningKramco_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function DelayBurningKramco_toPropertyKey(arg) {var key = DelayBurningKramco_toPrimitive(arg, "string");return DelayBurningKramco_typeof(key) === "symbol" ? key : String(key);}function DelayBurningKramco_toPrimitive(input, hint) {if (DelayBurningKramco_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (DelayBurningKramco_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


var DelayBurningKramco = /*#__PURE__*/function () {function DelayBurningKramco() {DelayBurningKramco_classCallCheck(this, DelayBurningKramco);DelayBurningKramco_defineProperty(this, "kramco",
    external_kolmafia_.Item.get("Kramco Sausage-o-Matic"));}DelayBurningKramco_createClass(DelayBurningKramco, [{ key: "doFightSetup", value:

    function doFightSetup() {
      (0,external_kolmafia_.equip)(this.kramco, external_kolmafia_.Slot.get("off-hand"));

      return [external_kolmafia_.Slot.get("off-hand")];
    } }, { key: "isViableAsCombatReplacer", value:

    function isViableAsCombatReplacer() {
      return this.getChanceOfFight() > 0.1; // 10% chance
    } }, { key: "isViable", value:

    function isViable() {
      return (0,external_kolmafia_.availableAmount)(this.kramco) > 0;
    } }, { key: "isFree", value:

    function isFree() {
      return true;
    } }, { key: "readyIn", value:

    function readyIn() {
      return this.getNextGuaranteedFight();
    } }, { key: "doSetup", value:

    function doSetup() {} }, { key: "getGoblinsFought", value:

    function getGoblinsFought() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_sausageFights"));
    } }, { key: "getLastGoblinTurn", value:

    function getLastGoblinTurn() {
      return (0,external_kolmafia_.totalTurnsPlayed)() - (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_lastSausageMonsterTurn"));
    } }, { key: "getNextGuaranteedGoblin", value:

    function getNextGuaranteedGoblin() {
      var goblinsFought = this.getGoblinsFought();
      return (
        4 +
        goblinsFought * 3 +
        Math.max(0, goblinsFought - 5) *
        Math.max(0, goblinsFought - 5) *
        Math.max(0, goblinsFought - 5));

    } }, { key: "getNextGuaranteedFight", value:

    function getNextGuaranteedFight() {
      if (this.getGoblinsFought() == 0) {
        return 0;
      }

      return Math.max(
      0,
      this.getNextGuaranteedGoblin() - this.getLastGoblinTurn());

    } }, { key: "getGoblinMultiplier", value:

    function getGoblinMultiplier() {
      return Math.max(0, this.getGoblinsFought() - 5);
    } }, { key: "getChanceOfFight", value:

    function getChanceOfFight() {
      var chance =
      (this.getLastGoblinTurn() + 1.0) / (
      (5.0 + this.getGoblinsFought()) * 3.0 +
      this.getGoblinMultiplier() *
      this.getGoblinMultiplier() *
      this.getGoblinMultiplier());

      if (chance > 1) {
        chance = 1;
      }
      if (chance < 0) {
        chance = 0;
      }

      return chance;
    } }]);return DelayBurningKramco;}();
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayBurningVoter.ts
function DelayBurningVoter_typeof(obj) {"@babel/helpers - typeof";return DelayBurningVoter_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, DelayBurningVoter_typeof(obj);}function DelayBurningVoter_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayBurningVoter_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, DelayBurningVoter_toPropertyKey(descriptor.key), descriptor);}}function DelayBurningVoter_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayBurningVoter_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayBurningVoter_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayBurningVoter_defineProperty(obj, key, value) {key = DelayBurningVoter_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function DelayBurningVoter_toPropertyKey(arg) {var key = DelayBurningVoter_toPrimitive(arg, "string");return DelayBurningVoter_typeof(key) === "symbol" ? key : String(key);}function DelayBurningVoter_toPrimitive(input, hint) {if (DelayBurningVoter_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (DelayBurningVoter_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var DelayBurningVoter = /*#__PURE__*/function () {function DelayBurningVoter() {DelayBurningVoter_classCallCheck(this, DelayBurningVoter);DelayBurningVoter_defineProperty(this, "absentee",
    external_kolmafia_.Item.get("Absentee Voter Ballot"));DelayBurningVoter_defineProperty(this, "sticker",
    external_kolmafia_.Item.get('"I Voted!" sticker'));}DelayBurningVoter_createClass(DelayBurningVoter, [{ key: "doFightSetup", value:

    function doFightSetup() {
      (0,external_kolmafia_.equip)(this.sticker, external_kolmafia_.Slot.get("acc3"));

      return [external_kolmafia_.Slot.get("acc3")];
    } }, { key: "isViableAsCombatReplacer", value:

    function isViableAsCombatReplacer() {
      return false;
    } }, { key: "readyIn", value:

    function readyIn() {
      var turnsTillNextFight = ((0,external_kolmafia_.totalTurnsPlayed)() - 1) % 11;

      if (turnsTillNextFight > 0) {
        turnsTillNextFight = 10 - turnsTillNextFight;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastVoteMonsterTurn")) >= (0,external_kolmafia_.totalTurnsPlayed)()) {
        turnsTillNextFight += 10;
      }

      return turnsTillNextFight;
    } }, { key: "doSetup", value:

    function doSetup() {
      if (
      (0,external_kolmafia_.availableAmount)(this.sticker) > 0 ||
      (0,external_kolmafia_.turnsPlayed)() < 200 ||
      !GreySettings_GreySettings.greyVotingBooth)
      {
        return;
      }

      this.voterSetup();
    } }, { key: "isViable", value:

    function isViable() {
      return (0,external_kolmafia_.availableAmount)(this.sticker) > 0;
      // return (
      //   availableAmount(this.sticker) > 0 ||
      //   getProperty("voteAlways") == "true" ||
      //   getProperty("_voteToday") == "true" ||
      //   availableAmount(this.absentee) > 0
      // );
    } }, { key: "isFree", value:

    function isFree() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_voteFreeFights")) < 3;
    } }, { key: "voterSetup", value:

    function voterSetup() {
      var voterValueTable = [
      {
        monster: external_kolmafia_.Monster.get("terrible mutant"),
        value: (0,external_kolmafia_.mallPrice)(external_kolmafia_.Item.get("glob of undifferentiated tissue")) + 10
      },
      {
        monster: external_kolmafia_.Monster.get("angry ghost"),
        value: (0,external_kolmafia_.mallPrice)(external_kolmafia_.Item.get("ghostly ectoplasm")) * 1.11
      },
      {
        monster: external_kolmafia_.Monster.get("government bureaucrat"),
        value:
        (0,external_kolmafia_.mallPrice)(external_kolmafia_.Item.get("absentee voter ballot")) * 0.05 + 75 * 0.25 + 50
      },
      {
        monster: external_kolmafia_.Monster.get("annoyed snake"),
        value: 25 * 0.5 + 25
      },
      {
        monster: external_kolmafia_.Monster.get("slime blob"),
        value: 20 * 0.4 + 50 * 0.2 + 250 * 0.01
      }];


      if (
      (0,external_kolmafia_.availableAmount)(this.absentee) > 0 &&
      (0,external_kolmafia_.getProperty)("_voteToday") == "false" &&
      (0,external_kolmafia_.getProperty)("voteAlways") == "false")
      {
        try {
          (0,external_kolmafia_.visitUrl)("inv_use.php?pwd&which=3&whichitem=9991");
          //use(Item.get("Absentee Voter Ballot"));
        } catch (e) {}
      }

      try {
        (0,external_kolmafia_.visitUrl)("place.php?whichplace=town_right&action=townright_vote");
      } catch (e) {}

      var votingMonsterPriority = voterValueTable.
      sort(function (a, b) {return b.value - a.value;}).
      map(function (element) {return element.monster.name;});

      var monsterVote =
      votingMonsterPriority.indexOf((0,external_kolmafia_.getProperty)("_voteMonster1")) <
      votingMonsterPriority.indexOf((0,external_kolmafia_.getProperty)("_voteMonster2")) ?
      1 :
      2;

      var firstInit = [2, "Moxie Percent"];
      var secondInit = [3, "Hot Resistance: +3"];
      var firstProp = (0,external_kolmafia_.getProperty)("_voteLocal" + (firstInit[0] + 1));
      var secondProp = (0,external_kolmafia_.getProperty)("_voteLocal" + (secondInit[0] + 1));

      if (firstInit[1] != firstProp || secondInit[1] != secondProp) {
        throw "Expected voting booth to give us ".concat(firstInit[1], " and ").concat(secondInit[1], " but instead they give ").concat(firstProp, " and ").concat(secondProp);
      }

      (0,external_kolmafia_.print)(
      "We're voting for " +
      (0,external_kolmafia_.getProperty)("_voteLocal" + (firstInit[0] + 1)) +
      " (" +
      firstInit +
      ")" +
      " and " +
      (0,external_kolmafia_.getProperty)("_voteLocal" + (secondInit[0] + 1)) +
      " (" +
      secondInit +
      ")",
      "gray");


      (0,external_kolmafia_.visitUrl)("choice.php?option=1&whichchoice=1331&g=".concat(
      monsterVote, "&local[]=").concat(firstInit[0], "&local[]=").concat(secondInit[0]));

      (0,external_kolmafia_.waitq)(1);
    } }]);return DelayBurningVoter;}();
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayCursedMagnifyingGlass.ts
function DelayCursedMagnifyingGlass_typeof(obj) {"@babel/helpers - typeof";return DelayCursedMagnifyingGlass_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, DelayCursedMagnifyingGlass_typeof(obj);}function DelayCursedMagnifyingGlass_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayCursedMagnifyingGlass_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, DelayCursedMagnifyingGlass_toPropertyKey(descriptor.key), descriptor);}}function DelayCursedMagnifyingGlass_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayCursedMagnifyingGlass_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayCursedMagnifyingGlass_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayCursedMagnifyingGlass_defineProperty(obj, key, value) {key = DelayCursedMagnifyingGlass_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function DelayCursedMagnifyingGlass_toPropertyKey(arg) {var key = DelayCursedMagnifyingGlass_toPrimitive(arg, "string");return DelayCursedMagnifyingGlass_typeof(key) === "symbol" ? key : String(key);}function DelayCursedMagnifyingGlass_toPrimitive(input, hint) {if (DelayCursedMagnifyingGlass_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (DelayCursedMagnifyingGlass_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


var DelayBurningCursedMagnifyingGlass = /*#__PURE__*/function () {function DelayBurningCursedMagnifyingGlass() {DelayCursedMagnifyingGlass_classCallCheck(this, DelayBurningCursedMagnifyingGlass);DelayCursedMagnifyingGlass_defineProperty(this, "item",
    external_kolmafia_.Item.get("Cursed Magnifying Glass"));DelayCursedMagnifyingGlass_defineProperty(this, "lobsterBarrels",
    external_kolmafia_.Item.get("barrel of gunpowder"));DelayCursedMagnifyingGlass_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("Lobsterfrogman"));}DelayCursedMagnifyingGlass_createClass(DelayBurningCursedMagnifyingGlass, [{ key: "isViable", value:

    function isViable() {
      if ((0,external_kolmafia_.availableAmount)(this.item) == 0) {
        return false;
      }

      // Force it to be available for lobster
      if (
      (0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") == "none" &&
      (0,external_kolmafia_.availableAmount)(this.lobsterBarrels) < 5)
      {
        return false;
      }

      return true;
    } }, { key: "isViableAsCombatReplacer", value:

    function isViableAsCombatReplacer() {
      return false;
    } }, { key: "isFree", value:

    function isFree() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_voidFreeFights")) < 5;
    } }, { key: "readyIn", value:

    function readyIn() {
      return 13 - (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cursedMagnifyingGlassCount"));
    } }, { key: "doSetup", value:

    function doSetup() {} }, { key: "doFightSetup", value:

    function doFightSetup() {
      (0,external_kolmafia_.equip)(this.item, external_kolmafia_.Slot.get("off-hand"));

      return [external_kolmafia_.Slot.get("off-hand")];
    } }]);return DelayBurningCursedMagnifyingGlass;}();
;// CONCATENATED MODULE: ./src/iotms/delayburners/DelayBurners.ts
function DelayBurners_typeof(obj) {"@babel/helpers - typeof";return DelayBurners_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, DelayBurners_typeof(obj);}function DelayBurners_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = DelayBurners_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function DelayBurners_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return DelayBurners_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DelayBurners_arrayLikeToArray(o, minLen);}function DelayBurners_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function DelayBurners_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function DelayBurners_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, DelayBurners_toPropertyKey(descriptor.key), descriptor);}}function DelayBurners_createClass(Constructor, protoProps, staticProps) {if (protoProps) DelayBurners_defineProperties(Constructor.prototype, protoProps);if (staticProps) DelayBurners_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function DelayBurners_defineProperty(obj, key, value) {key = DelayBurners_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function DelayBurners_toPropertyKey(arg) {var key = DelayBurners_toPrimitive(arg, "string");return DelayBurners_typeof(key) === "symbol" ? key : String(key);}function DelayBurners_toPrimitive(input, hint) {if (DelayBurners_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (DelayBurners_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var DelayBurners = /*#__PURE__*/function () {function DelayBurners() {DelayBurners_classCallCheck(this, DelayBurners);}DelayBurners_createClass(DelayBurners, null, [{ key: "getDelays", value:


    function getDelays() {
      if (this.delays != null) {
        return this.delays;
      }

      this.delays = [
      new DelayBurningKramco(),
      new DelayBurningVoter(),
      new DelayBurningCursedMagnifyingGlass()].
      filter(function (d) {return d.isViable();});var _iterator = DelayBurners_createForOfIteratorHelper(

        this.delays),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var delay = _step.value;
          delay.doSetup();
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return this.delays;
    } }, { key: "getDelayBurners", value:

    function getDelayBurners() {
      return this.getDelays().filter(function (d) {return d.isViable();});
    } }, { key: "isTryingForDupeableGoblin", value:

    function isTryingForDupeableGoblin() {
      var fam = external_kolmafia_.Familiar.get("Grey Goose");
      return (
        (0,external_kolmafia_.familiarWeight)(fam) >= 6 &&
        (0,external_kolmafia_.familiarWeight)(fam) < 9 &&
        (0,external_kolmafia_.equippedAmount)(external_kolmafia_.Item.get("Kramco Sausage-o-Matic")) > 0);

    } }, { key: "getReadyDelayBurner", value:

    function getReadyDelayBurner() {var freeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var burner = this.getDelayBurner(freeOnly);

      if (burner == null || burner.readyIn() > 0) {
        return null;
      }

      return burner;
    } }, { key: "isDelayBurnerReady", value:

    function isDelayBurnerReady() {var freeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var burner = this.getDelayBurner(freeOnly);

      return burner != null && burner.readyIn() <= 0;
    } }, { key: "tryReplaceCombats", value:

    function tryReplaceCombats() {var maxTurnsWasted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      var delays = this.getDelays().
      filter(function (d) {return d.isViable() && d.isViableAsCombatReplacer();}).
      sort(function (d1, d2) {return d1.readyIn() - d2.readyIn();});

      var toReturn = delays.find(
      function (d) {return d.isFree() && d.readyIn() <= maxTurnsWasted;});


      if (toReturn == null) {
        toReturn = delays[0];
      }

      if (toReturn == null) {
        return;
      }

      return toReturn.doFightSetup();
    } }, { key: "isDelayBurnerFeasible", value:

    function isDelayBurnerFeasible() {
      return this.getDelayBurners().find(function (d) {return d.readyIn() < 7;}) != null;
    } }, { key: "getDelayBurner", value:

    function getDelayBurner() {var freeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var delays = this.getDelays().
      filter(function (d) {return d.isViable() && (d.isFree() || freeOnly);}).
      sort(function (d1, d2) {return d1.readyIn() - d2.readyIn();});

      var toReturn = delays.find(function (d) {return d.isFree();});

      if (toReturn == null) {
        toReturn = delays[0];
      }

      return toReturn;
    } }]);return DelayBurners;}();DelayBurners_defineProperty(DelayBurners, "delays", void 0);
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantShip.ts
function QuestL10GiantShip_typeof(obj) {"@babel/helpers - typeof";return QuestL10GiantShip_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL10GiantShip_typeof(obj);}function QuestL10GiantShip_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantShip_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL10GiantShip_toPropertyKey(descriptor.key), descriptor);}}function QuestL10GiantShip_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantShip_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantShip_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantShip_defineProperty(obj, key, value) {key = QuestL10GiantShip_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL10GiantShip_toPropertyKey(arg) {var key = QuestL10GiantShip_toPrimitive(arg, "string");return QuestL10GiantShip_typeof(key) === "symbol" ? key : String(key);}function QuestL10GiantShip_toPrimitive(input, hint) {if (QuestL10GiantShip_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL10GiantShip_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL10GiantShip = /*#__PURE__*/function () {function QuestL10GiantShip() {QuestL10GiantShip_classCallCheck(this, QuestL10GiantShip);QuestL10GiantShip_defineProperty(this, "modelShip",
    external_kolmafia_.Item.get("Model airship"));QuestL10GiantShip_defineProperty(this, "amulet",
    external_kolmafia_.Item.get("Amulet of Extreme Plot Significance"));QuestL10GiantShip_defineProperty(this, "umbrella",
    external_kolmafia_.Item.get("Titanium Assault Umbrella"));QuestL10GiantShip_defineProperty(this, "unbreakable",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL10GiantShip_defineProperty(this, "wig",
    external_kolmafia_.Item.get("Mohawk Wig"));QuestL10GiantShip_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Penultimate Fantasy Airship"));QuestL10GiantShip_defineProperty(this, "wads",
    [
    "Tissue Paper Immateria",
    "Tin Foil Immateria",
    "Gauze Immateria",
    "Plastic Wrap Immateria"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestL10GiantShip_defineProperty(this, "protag",
    external_kolmafia_.Monster.get("Protagonist"));QuestL10GiantShip_defineProperty(this, "healer",
    external_kolmafia_.Monster.get("Quiet Healer"));QuestL10GiantShip_defineProperty(this, "burly",
    external_kolmafia_.Monster.get("Burly Sidekick"));QuestL10GiantShip_defineProperty(this, "princess",
    external_kolmafia_.Monster.get("Spunky Princess"));QuestL10GiantShip_defineProperty(this, "toAbsorb", void 0);}QuestL10GiantShip_createClass(QuestL10GiantShip, [{ key: "shouldRunNC", value:


    function shouldRunNC() {
      if ((0,external_kolmafia_.availableAmount)(this.modelShip) == 0 || this.loc.turnsSpent >= 25) {
        return true;
      }

      if (this.loc.turnsSpent < 5) {
        return false;
      }

      var wadExpected = this.wads[Math.floor(this.loc.turnsSpent - 5) / 5];

      // If we have this wad already, then we need to wait for the next wad to be available
      if (wadExpected != null && (0,external_kolmafia_.availableAmount)(wadExpected) > 0) {
        return false;
      }

      return true;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (this.shouldRunNC()) {
        outfit.setNoCombat();
      }

      var orbs = [];

      if ((0,external_kolmafia_.availableAmount)(this.amulet) == 0) {
        orbs.push(this.healer);
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.umbrella) == 0 &&
      (0,external_kolmafia_.availableAmount)(this.unbreakable) == 0)
      {
        orbs.push(this.princess);
      }

      if ((0,external_kolmafia_.availableAmount)(this.wig) == 0) {
        orbs.push(this.burly);
      }

      if (orbs.length > 0) {
        outfit.setItemDrops();
      }

      return {
        location: this.loc,
        outfit: outfit,
        orbs: orbs,
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return !orbs.includes(monster);},
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(681, 1);

          if (!_this.shouldRunNC()) {
            var ready = DelayBurners.getReadyDelayBurner();

            if (ready != null) {
              ready.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          try {
            if ((0,external_kolmafia_.availableAmount)(_this.modelShip) == 0) {
              props.setChoice(182, 4);
            } else {
              props.setChoice(182, 1);
            }

            var settings = new AdventureSettings();
            settings.addBanish(_this.protag);

            greyAdv(_this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Ship";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 6) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantShip;}();
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantGround.ts
function QuestL10GiantGround_typeof(obj) {"@babel/helpers - typeof";return QuestL10GiantGround_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL10GiantGround_typeof(obj);}function QuestL10GiantGround_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantGround_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL10GiantGround_toPropertyKey(descriptor.key), descriptor);}}function QuestL10GiantGround_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantGround_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantGround_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantGround_defineProperty(obj, key, value) {key = QuestL10GiantGround_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL10GiantGround_toPropertyKey(arg) {var key = QuestL10GiantGround_toPrimitive(arg, "string");return QuestL10GiantGround_typeof(key) === "symbol" ? key : String(key);}function QuestL10GiantGround_toPrimitive(input, hint) {if (QuestL10GiantGround_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL10GiantGround_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL10GiantGround = /*#__PURE__*/function () {function QuestL10GiantGround() {QuestL10GiantGround_classCallCheck(this, QuestL10GiantGround);QuestL10GiantGround_defineProperty(this, "boning",
    external_kolmafia_.Item.get("electric boning knife"));QuestL10GiantGround_defineProperty(this, "loc",
    external_kolmafia_.Location.get(
    "The Castle in the Clouds in the Sky (Ground Floor)"));QuestL10GiantGround_defineProperty(this, "toAbsorb", void 0);QuestL10GiantGround_defineProperty(this, "drunkBell",


    external_kolmafia_.Item.get("Drunkula's bell"));QuestL10GiantGround_defineProperty(this, "rocket",
    external_kolmafia_.Item.get("Great Wolf's rocket launcher"));}QuestL10GiantGround_createClass(QuestL10GiantGround, [{ key: "isDelayBurning", value:

    function isDelayBurning() {
      return (
        this.isKnifeHunting() &&
        this.toAbsorb.length == 0 &&
        this.loc.turnsSpent < 11);

    } }, { key: "isKnifeHunting", value:

    function isKnifeHunting() {
      if ((0,external_kolmafia_.availableAmount)(this.boning) > 0) {
        return false;
      }

      if (GreySettings_GreySettings.shouldAvoidTowerRequirements()) {
        return (
          (0,external_kolmafia_.availableAmount)(this.drunkBell) +
          (0,external_kolmafia_.availableAmount)(this.rocket) +
          (0,external_kolmafia_.storageAmount)(this.drunkBell) +
          (0,external_kolmafia_.storageAmount)(this.rocket) ==
          0);

      }

      return true;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (this.loc.turnsSpent < 11) {
        if (this.isKnifeHunting()) {
          outfit.setNoCombat();
        } else {
          outfit.setPlusCombat();
        }
      }

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();
          var hasBone = (0,external_kolmafia_.availableAmount)(_this.boning) > 0;

          if (_this.isDelayBurning()) {
            var ready = DelayBurners.getReadyDelayBurner();

            if (ready != null) {
              ready.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }
          } else if (_this.toAbsorb.length == 0) {
            DelayBurners.tryReplaceCombats();
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          try {
            // props.setChoice(672, hasBone ? 2 : 1);
            // props.setChoice(673, hasBone ? 2 : 1);
            // props.setChoice(674, hasBone ? 2 : 1);
            props.setChoice(672, 2);
            props.setChoice(673, 2);
            props.setChoice(674, 2);
            props.setChoice(1026, hasBone ? 3 : 2);

            greyAdv(_this.loc, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Ground";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 8) {
        return QuestStatus.NOT_READY;
      }

      if (status > 8) {
        return QuestStatus.COMPLETED;
      }

      if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantGround;}();
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantBasement.ts
function QuestL10GiantBasement_typeof(obj) {"@babel/helpers - typeof";return QuestL10GiantBasement_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL10GiantBasement_typeof(obj);}function QuestL10GiantBasement_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantBasement_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL10GiantBasement_toPropertyKey(descriptor.key), descriptor);}}function QuestL10GiantBasement_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantBasement_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantBasement_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantBasement_defineProperty(obj, key, value) {key = QuestL10GiantBasement_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL10GiantBasement_toPropertyKey(arg) {var key = QuestL10GiantBasement_toPrimitive(arg, "string");return QuestL10GiantBasement_typeof(key) === "symbol" ? key : String(key);}function QuestL10GiantBasement_toPrimitive(input, hint) {if (QuestL10GiantBasement_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL10GiantBasement_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL10GiantBasement = /*#__PURE__*/function () {








  // TODO Once we've got the absorbs, try replace combats if it doesn't interfere with our slots cos umbrella

  function QuestL10GiantBasement() {QuestL10GiantBasement_classCallCheck(this, QuestL10GiantBasement);QuestL10GiantBasement_defineProperty(this, "amulet", external_kolmafia_.Item.get("Amulet of Extreme Plot Significance"));QuestL10GiantBasement_defineProperty(this, "umbrella", external_kolmafia_.Item.get("Titanium Assault Umbrella"));QuestL10GiantBasement_defineProperty(this, "dumbell", external_kolmafia_.Item.get("Massive Dumbbell"));QuestL10GiantBasement_defineProperty(this, "loc", external_kolmafia_.Location.get("The Castle in the Clouds in the Sky (Basement)"));QuestL10GiantBasement_defineProperty(this, "alphaGiant", external_kolmafia_.Monster.get("Alphabet Giant"));QuestL10GiantBasement_defineProperty(this, "letterD", external_kolmafia_.Item.get("Heavy D"));
    var umbrella = external_kolmafia_.Item.get("Unbreakable Umbrella");

    if ((0,external_kolmafia_.availableAmount)(umbrella) > 0) {
      this.umbrella = umbrella; // They replace!
    }
  }QuestL10GiantBasement_createClass(QuestL10GiantBasement, [{ key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun(monster) {return (
            monster == _this.alphaGiant && (0,external_kolmafia_.itemAmount)(_this.letterD) == 0);},
        run: function run() {
          var turnsSpent = (0,external_kolmafia_.turnsPlayed)();
          _this.runAdv(outfit);

          // If we took a turn, or the last choice wasn't one asking for umbrella & amulet
          if (
          turnsSpent != (0,external_kolmafia_.turnsPlayed)() ||
          (0,external_kolmafia_.lastChoice)() != 669 && (0,external_kolmafia_.lastChoice)() != 670)
          {
            return;
          }

          (0,external_kolmafia_.print)(
          "Detected that we've hit the giant NC and want to wear an umbrella/amulet.. So equipping that and trying it again.",
          "blue");


          for (var _i = 0, _arr = [_this.umbrella, _this.amulet]; _i < _arr.length; _i++) {var i = _arr[_i];
            if ((0,external_kolmafia_.equippedAmount)(i) > 0 || (0,external_kolmafia_.itemAmount)(i) == 0) {
              continue;
            }

            (0,external_kolmafia_.equip)(i);
          }

          _this.runAdv(outfit);
        }
      };
    } }, { key: "runAdv", value:

    function runAdv(outfit) {
      var props = new Properties_PropertyManager();

      try {
        // Do umbrella
        if ((0,external_kolmafia_.equippedAmount)(this.umbrella) > 0 || (0,external_kolmafia_.itemAmount)(this.umbrella) == 0) {
          // If we have umbrella equipped, or don't have one
          props.setChoice(669, 1);
        } else {
          props.setChoice(669, 4); // Skip so we can resume
        }

        // If have amulet otherwise grab dumbbell (or skips it)
        if ((0,external_kolmafia_.equippedAmount)(this.amulet) > 0) {
          props.setChoice(670, 4);
        } else if ((0,external_kolmafia_.itemAmount)(this.amulet) == 0) {
          // Grab dumbbell
          props.setChoice(670, 1);
        } else {
          // Skip
          props.setChoice(670, 5);
        }

        // Use dumbbell to open stuff
        if ((0,external_kolmafia_.availableAmount)(this.dumbell) > 0) {
          props.setChoice(671, 1);
        } else {
          // Go to gym
          props.setChoice(671, 4);
        }

        greyAdv(this.loc, outfit);
      } finally {
        props.resetAll();
      }
    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Basement";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 7) {
        return QuestStatus.NOT_READY;
      }

      if (status > 7) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantBasement;}();
;// CONCATENATED MODULE: ./src/quests/council/beanstalk/QuestL10GiantTop.ts
function QuestL10GiantTop_typeof(obj) {"@babel/helpers - typeof";return QuestL10GiantTop_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL10GiantTop_typeof(obj);}function QuestL10GiantTop_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10GiantTop_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL10GiantTop_toPropertyKey(descriptor.key), descriptor);}}function QuestL10GiantTop_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10GiantTop_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10GiantTop_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10GiantTop_defineProperty(obj, key, value) {key = QuestL10GiantTop_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL10GiantTop_toPropertyKey(arg) {var key = QuestL10GiantTop_toPrimitive(arg, "string");return QuestL10GiantTop_typeof(key) === "symbol" ? key : String(key);}function QuestL10GiantTop_toPrimitive(input, hint) {if (QuestL10GiantTop_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL10GiantTop_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL10GiantTop = /*#__PURE__*/function () {function QuestL10GiantTop() {QuestL10GiantTop_classCallCheck(this, QuestL10GiantTop);QuestL10GiantTop_defineProperty(this, "modelAirShip",
    external_kolmafia_.Item.get("Model airship"));QuestL10GiantTop_defineProperty(this, "wig",
    external_kolmafia_.Item.get("Mohawk Wig"));QuestL10GiantTop_defineProperty(this, "record",
    external_kolmafia_.Item.get("drum 'n' bass 'n' drum 'n' bass record"));QuestL10GiantTop_defineProperty(this, "rocketToStars",
    external_kolmafia_.Item.get("steam-powered model rocketship"));QuestL10GiantTop_defineProperty(this, "loc",
    external_kolmafia_.Location.get(
    "The Castle in the Clouds in the Sky (Top Floor)"));QuestL10GiantTop_defineProperty(this, "steamNC",

    677);QuestL10GiantTop_defineProperty(this, "raverNC",
    676);QuestL10GiantTop_defineProperty(this, "punkNC",
    678);QuestL10GiantTop_defineProperty(this, "gothNC",
    675);QuestL10GiantTop_defineProperty(this, "holeInSky",
    new QuestTowerHoleInSkyUnlock());}QuestL10GiantTop_createClass(QuestL10GiantTop, [{ key: "getChildren", value:

    function getChildren() {
      return [this.holeInSky];
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat();

      if ((0,external_kolmafia_.availableAmount)(this.wig) > 0) {
        outfit.addWeight(this.wig);
      }

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun(monster) {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            // Goth and steam love each other
            if ((0,external_kolmafia_.availableAmount)(_this.modelAirShip) > 0) {
              props.setChoice(_this.steamNC, 1); // Use model ship
              props.setChoice(_this.gothNC, 4); // Crawl to copper
            } else if ((0,external_kolmafia_.availableAmount)(_this.record) > 0) {
              // We have the record, lets end this.
              props.setChoice(_this.steamNC, 4); // Crawl to goth
              props.setChoice(_this.gothNC, 2); // Grab record
            } else if ((0,external_kolmafia_.availableAmount)(_this.rocketToStars) == 0) {
              // We don't have airship or record, to avoid fighting lets just grab the rocket if we can
              props.setChoice(_this.steamNC, 2); // Grab rocket
              props.setChoice(_this.gothNC, 4); // Crawl to steam
            } else {
              // This adv is a waste, just fight.
              props.setChoice(_this.steamNC, 1); // Fight steam
              props.setChoice(_this.gothNC, 1); // Fight goth
            }

            // Punk and raver love each other
            if ((0,external_kolmafia_.equippedAmount)(_this.wig) > 0) {
              // If we can end this with the wig
              props.setChoice(_this.punkNC, 1); // Use wig
              props.setChoice(_this.raverNC, 4); // Crawl to punk rock
            } else if ((0,external_kolmafia_.availableAmount)(_this.record) == 0) {
              // If we can grab a record
              props.setChoice(_this.punkNC, 4); // Crawl to raver
              props.setChoice(_this.raverNC, 3); // Grab record
            } else {
              // We're going to waste an adventure
              props.setChoice(_this.punkNC, 4); // Crawl to raver
              props.setChoice(_this.raverNC, 1); // Fight the raver for their advs
            }

            props.setChoice(679, 1); // Turn dat wheel

            greyAdv(_this.loc, outfit);

            if ((0,external_kolmafia_.lastChoice)() == 679) {
              (0,external_kolmafia_.council)();
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / Top";
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status < 9) {
        return QuestStatus.NOT_READY;
      }

      if (status > 9) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL10GiantTop;}();


var QuestTowerHoleInSkyUnlock = /*#__PURE__*/function () {function QuestTowerHoleInSkyUnlock() {QuestL10GiantTop_classCallCheck(this, QuestTowerHoleInSkyUnlock);QuestL10GiantTop_defineProperty(this, "topFloor",
    external_kolmafia_.Location.get(
    "The Castle in the Clouds in the Sky (Top Floor)"));QuestL10GiantTop_defineProperty(this, "rocket",

    external_kolmafia_.Item.get("steam-powered model rocketship"));QuestL10GiantTop_defineProperty(this, "copperFeel",
    677);QuestL10GiantTop_defineProperty(this, "flavorOfARaver",
    676);QuestL10GiantTop_defineProperty(this, "yeahPunkRock",
    678);QuestL10GiantTop_defineProperty(this, "gothNC",
    675);}QuestL10GiantTop_createClass(QuestTowerHoleInSkyUnlock, [{ key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / HoleInSkyUnlock";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questL10Garbage") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_.availableAmount)(this.rocket) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this2 = this;
      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.topFloor,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();

          props.setChoice(_this2.copperFeel, 2); // Grab rocket
          props.setChoice(_this2.gothNC, 4); // Crawl to steam
          props.setChoice(_this2.yeahPunkRock, 3); // Crawl to steam
          props.setChoice(_this2.flavorOfARaver, 4); // Crawl to punk

          try {
            greyAdv(_this2.topFloor, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestTowerHoleInSkyUnlock;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL10Giants.ts
function QuestL10Giants_typeof(obj) {"@babel/helpers - typeof";return QuestL10Giants_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL10Giants_typeof(obj);}function QuestL10Giants_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL10Giants_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL10Giants_toPropertyKey(descriptor.key), descriptor);}}function QuestL10Giants_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL10Giants_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL10Giants_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL10Giants_defineProperty(obj, key, value) {key = QuestL10Giants_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL10Giants_toPropertyKey(arg) {var key = QuestL10Giants_toPrimitive(arg, "string");return QuestL10Giants_typeof(key) === "symbol" ? key : String(key);}function QuestL10Giants_toPrimitive(input, hint) {if (QuestL10Giants_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL10Giants_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL10Beanstalk = /*#__PURE__*/function () {



  function QuestL10Beanstalk() {QuestL10Giants_classCallCheck(this, QuestL10Beanstalk);QuestL10Giants_defineProperty(this, "bean", external_kolmafia_.Item.get("Enchanted Bean"));QuestL10Giants_defineProperty(this, "children", []);
    this.children.push(new QuestL10GiantShip());
    this.children.push(new QuestL10GiantGround());
    this.children.push(new QuestL10GiantBasement());
    this.children.push(new QuestL10GiantTop());
  }QuestL10Giants_createClass(QuestL10Beanstalk, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Beanstalk / EnchantedBean";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL10Garbage");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.bean) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "run", value:

    function run() {
      // Use bean if we need to
      var status = getQuestStatus("questL10Garbage");

      if (status == 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.use)(external_kolmafia_.Item.get("Enchanted Bean"));
          }
        };
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.council)();
        }
      };
    } }]);return QuestL10Beanstalk;}();var


GiantStatus;(function (GiantStatus) {GiantStatus["unstarted"] = "unstarted";GiantStatus["started"] = "started";GiantStatus["step1"] = "PLANTED_BEAN";GiantStatus["step2"] = "LOOKING_SHIP_WADS";GiantStatus["step3"] = "TISSUE_WAD";GiantStatus["step4"] = "TIN_WAD";GiantStatus["step5"] = "GAUZE_WAD";GiantStatus["step6"] = "PLASTIC_WAD";GiantStatus["step7"] = "BASEMENT";GiantStatus["step8"] = "GROUND_FLOOR";GiantStatus["step9"] = "TOP_FLOOR";GiantStatus["step10"] = "TURNED_WHEEL";GiantStatus["finished"] = "finished";})(GiantStatus || (GiantStatus = {}));
;// CONCATENATED MODULE: ./src/utils/LatteUtils.ts
function LatteUtils_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = LatteUtils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function LatteUtils_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return LatteUtils_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LatteUtils_arrayLikeToArray(o, minLen);}function LatteUtils_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}

var LatteFlavor;



















// Map of kol latte names, to mafia latte names
(function (LatteFlavor) {LatteFlavor["FAM_EXP"] = "vitamins";LatteFlavor["ITEM_DROP"] = "carrot";LatteFlavor["COLD_DAMAGE"] = "blue chalks";LatteFlavor["MEAT_DROP"] = "cajun";LatteFlavor["FAM_WEIGHT"] = "rawhide";LatteFlavor["PVP_FIGHTS"] = "hellion";LatteFlavor["PLUS_COMBAT"] = "wing";LatteFlavor["MINUS_COMBAT"] = "ink";LatteFlavor["MP_5_REGEN"] = "carrrdamom";LatteFlavor["MP_10_REGEN"] = "lizard milk";LatteFlavor["HOT_RESIST"] = "chili seeds";LatteFlavor["COLD_RESIST"] = "cocoa powder";LatteFlavor["SLEAZE_RESIST"] = "white flour";LatteFlavor["SPOOKY_RESIST"] = "squamous salt";LatteFlavor["STENCH_RESIST"] = "clove";LatteFlavor["FAMILIAR_WEIGHT"] = "rawhide";LatteFlavor["UNKNOWN"] = "??";})(LatteFlavor || (LatteFlavor = {}));var latteAliases = new Map([
["fortified", "vitamins"],
["hot wing", "wing"],
["hot wings", "wing"],
["hot wing and", "wing"]]);


function getFlavors() {
  var page = (0,external_kolmafia_.visitUrl)("main.php?latte=1", false);
  (0,external_kolmafia_.visitUrl)("main.php");
  var flavors = [];var _iterator = LatteUtils_createForOfIteratorHelper(

    page.split(
    '<td valign="top" style="border-bottom: 1px solid black"></td>')),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;)
    {var spl = _step.value;
      var match = spl.match(
      /<input {2}type="radio" name="l([123])" checked value="[a-zA-Z0-9/+]+">[a-zA-z- ]+<\/td>/);


      if (match == null) {
        continue;
      }

      var level = (0,external_kolmafia_.toInt)(match[1]);
      match = spl.match(
      /<input {2}type="radio" name="l1" (?:checked)? value="[a-zA-Z0-9/+]+"> *([a-zA-z- ]+?) *<\/td>/);


      flavors[level - 1] = match[1];
    }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

  return flavors;
}

function getCurrentLatteFlavors() {
  var knownFlavors = (0,external_kolmafia_.getProperty)("_latteFlavors");

  if (knownFlavors.startsWith((0,external_kolmafia_.getProperty)("latteModifier") + "|")) {
    return knownFlavors.
    substring(knownFlavors.lastIndexOf("|") + 1).
    split(",");
  }

  var getEnum = function getEnum(flavor) {
    flavor = flavor.toLowerCase();

    if (latteAliases.has(flavor)) {
      flavor = latteAliases.get(flavor);
    }

    for (var _i = 0, _Object$values = Object.values(LatteFlavor); _i < _Object$values.length; _i++) {var v = _Object$values[_i];
      if (flavor != v) {
        continue;
      }

      return v;
    }

    return LatteFlavor.UNKNOWN;
  };

  var flavors = getFlavors();

  for (var i = 0; i < flavors.length; i++) {
    var flav = getEnum(flavors[i]);

    if (flav == LatteFlavor.UNKNOWN) {







      /* print(
        "Unknown Latte Flavor " + flavors[i] + "! Cautiously continuing..",
        "gray"
      );*/}flavors[i] = flav;}(0,external_kolmafia_.setProperty)("_latteFlavors",
  (0,external_kolmafia_.getProperty)("latteModifier") + "|" + flavors.join(","));


  return flavors;
}

function hasUnlockedLatteFlavor(drink) {
  return (0,external_kolmafia_.getProperty)("latteUnlocks").split(",").includes(drink);
}
;// CONCATENATED MODULE: ./src/tasks/TaskMaintainStatus.ts
function TaskMaintainStatus_typeof(obj) {"@babel/helpers - typeof";return TaskMaintainStatus_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskMaintainStatus_typeof(obj);}function TaskMaintainStatus_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskMaintainStatus_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function TaskMaintainStatus_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskMaintainStatus_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskMaintainStatus_arrayLikeToArray(o, minLen);}function TaskMaintainStatus_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function TaskMaintainStatus_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskMaintainStatus_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskMaintainStatus_toPropertyKey(descriptor.key), descriptor);}}function TaskMaintainStatus_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskMaintainStatus_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskMaintainStatus_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskMaintainStatus_defineProperty(obj, key, value) {key = TaskMaintainStatus_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskMaintainStatus_toPropertyKey(arg) {var key = TaskMaintainStatus_toPrimitive(arg, "string");return TaskMaintainStatus_typeof(key) === "symbol" ? key : String(key);}function TaskMaintainStatus_toPrimitive(input, hint) {if (TaskMaintainStatus_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskMaintainStatus_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var TaskMaintainStatus = /*#__PURE__*/function () {






































































  function TaskMaintainStatus() {TaskMaintainStatus_classCallCheck(this, TaskMaintainStatus);TaskMaintainStatus_defineProperty(this, "restorers", []);TaskMaintainStatus_defineProperty(this, "toRemove", ["Really Quite Poisoned", "Majorly Poisoned", "Somewhat Poisoned", "A Little Bit Poisoned", "Hardly Poisoned at All", "Temporary Amnesia"].map(function (s) {return external_kolmafia_.Effect.get(s);}));TaskMaintainStatus_defineProperty(this, "antidote", external_kolmafia_.Item.get("anti-anti-antidote"));
    this.fillRestorers();
  }TaskMaintainStatus_createClass(TaskMaintainStatus, [{ key: "fillRestorers", value: function fillRestorers() {this.restorers.push({ item: external_kolmafia_.Item.get("Psychokinetic energy blob"), mpRestored: 25, hpRestored: 0, available: function available() {return (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("Psychokinetic energy blob")) > 0;}, price: 0 });this.restorers.push({ item: external_kolmafia_.Item.get("Knob Goblin seltzer"), mpRestored: 11, hpRestored: 0, available: function available() {return (0,external_kolmafia_.dispensaryAvailable)() || (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("Knob Goblin seltzer")) > 0;}, price: 80 });this.restorers.push({ item: external_kolmafia_.Item.get("Black cherry soda"), mpRestored: 11, hpRestored: 0, available: function available() {return (0,external_kolmafia_.blackMarketAvailable)() || (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("Black cherry soda")) > 0;}, price: 80 });this.restorers.push({ item: external_kolmafia_.Item.get("Doc Galaktik's Invigorating Tonic"), mpRestored: 11, hpRestored: 0, available: function available() {return true;}, price: 90 }); // HP
      this.restorers.push({ item: external_kolmafia_.Item.get("Cast"), mpRestored: 0, hpRestored: 30, available: function available() {return (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("Cast")) > 0;}, price: 0 });this.restorers.push({ item: external_kolmafia_.Item.get("Doc Galaktik's Homeopathic Elixir"), mpRestored: 0, hpRestored: 19, available: function available() {return true;}, price: 120 });this.restorers.push({ item: external_kolmafia_.Item.get("Doc Galaktik's Pungent Unguent"), mpRestored: 0, hpRestored: 4, available: function available() {return true;}, price: 0 });} }, { key: "restoreHPTo", value:
    function restoreHPTo(hp) {
      var desiredHp = Math.min(hp, (0,external_kolmafia_.myMaxhp)());

      while ((0,external_kolmafia_.myMeat)() > 100 && (0,external_kolmafia_.myHp)() < desiredHp) {
        var restorer = this.restorers.find(
        function (r) {return (0,external_kolmafia_.itemAmount)(r.item) > 0 && r.hpRestored > 0;});


        if (restorer == null) {
          restorer = this.restorers.find(
          function (r) {return r.available() && r.hpRestored > 0;});

        }

        if (restorer == null) {
          return false;
        }

        var toUse = Math.ceil((desiredHp - (0,external_kolmafia_.myHp)()) / restorer.hpRestored);

        if ((0,external_kolmafia_.itemAmount)(restorer.item) > 0) {
          toUse = Math.min(toUse, (0,external_kolmafia_.itemAmount)(restorer.item));
        } else {
          toUse = Math.min(Math.floor((0,external_kolmafia_.myMeat)() / restorer.price), toUse + 4);

          (0,external_kolmafia_.cliExecute)("acquire " + toUse + " " + restorer.item);
        }

        toUse = Math.min(
        (0,external_kolmafia_.itemAmount)(restorer.item),
        Math.ceil((desiredHp - (0,external_kolmafia_.myHp)()) / restorer.hpRestored));


        (0,external_kolmafia_.cliExecute)("use " + toUse + " " + restorer.item);
        return true;
      }

      return (0,external_kolmafia_.myHp)() >= hp;
    } }, { key: "restoreMPTo", value:

    function restoreMPTo(mp) {
      if ((0,external_kolmafia_.myMp)() >= mp) {
        return true;
      }

      var ronStatus = getQuestStatus("questL11Ron");

      var desiredMp = Math.min(mp, (0,external_kolmafia_.myMaxmp)());

      if (
      (ronStatus < 0 || ronStatus > 1 || getQuestStatus("questL11Shen") <= 6) &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("sweat")) >= (
      (0,external_kolmafia_.myMp)() + 10 >= desiredMp && (0,external_kolmafia_.myMaxmp)() - (0,external_kolmafia_.myMp)() < 50 ? 95 : 80))
      {
        (0,external_kolmafia_.useSkill)(external_kolmafia_.Skill.get("Sip Some Sweat"));
      }

      while ((0,external_kolmafia_.myMeat)() > 100 && (0,external_kolmafia_.myMp)() < desiredMp) {
        var restorer = this.restorers.find(
        function (r) {return (0,external_kolmafia_.itemAmount)(r.item) > 0 && r.mpRestored > 0;});


        if (restorer == null) {
          restorer = this.restorers.find(
          function (r) {return r.available() && r.mpRestored > 0;});

        }

        if (restorer == null) {
          return false;
        }

        var toUse = Math.ceil((desiredMp - (0,external_kolmafia_.myMp)()) / restorer.mpRestored);

        if ((0,external_kolmafia_.itemAmount)(restorer.item) > 0) {
          toUse = Math.min(toUse, (0,external_kolmafia_.itemAmount)(restorer.item));
        } else {
          toUse = Math.min(Math.floor((0,external_kolmafia_.myMeat)() / restorer.price), toUse);

          (0,external_kolmafia_.cliExecute)("acquire " + toUse + " " + restorer.item);
        }

        (0,external_kolmafia_.cliExecute)("use " + toUse + " " + restorer.item);
      }

      return (0,external_kolmafia_.myMp)() >= mp;
    } }, { key: "run", value:

    function run() {var _iterator = TaskMaintainStatus_createForOfIteratorHelper(
        this.toRemove),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var effect = _step.value;
          if ((0,external_kolmafia_.haveEffect)(effect) == 0) {
            continue;
          }

          (0,external_kolmafia_.cliExecute)("shrug " + effect.name);

          if ((0,external_kolmafia_.haveEffect)(effect) > 0) {
            throw "Tried to remove " + effect.name + " but failed!";
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if ((0,external_kolmafia_.itemAmount)(this.antidote) == 0 && (0,external_kolmafia_.myMeat)() > 1000) {
        (0,external_kolmafia_.buy)(this.antidote);
      }

      if ((0,external_kolmafia_.myMaxmp)() < 20) {
        return;
      }

      var desiredMp = 20; //myMaxmp() < 40 ? 20 : 40;

      this.restoreMPTo(desiredMp);
    } }]);return TaskMaintainStatus;}();


var maintainStatus = new TaskMaintainStatus();

function restoreMPTo(mp) {
  // If we can't hit that MP
  if (mp > (0,external_kolmafia_.myMaxmp)()) {
    return false;
  }

  // If we already have that amount
  if (mp <= (0,external_kolmafia_.myMp)()) {
    return true;
  }

  // If we don't have 100 meat per 10 mp
  if (Math.ceil(((0,external_kolmafia_.myMp)() - mp) / 10) * 100 > (0,external_kolmafia_.myMeat)()) {
    return false;
  }

  return maintainStatus.restoreMPTo(mp);
}

function restoreHPTo(hp) {
  // If we can't hit that MP
  if (hp > (0,external_kolmafia_.myMaxhp)()) {
    return false;
  }

  // If we already have that amount
  if (hp <= (0,external_kolmafia_.myHp)()) {
    return true;
  }

  // If we don't have 100 meat per 10 mp
  if (Math.ceil(((0,external_kolmafia_.myHp)() - hp) / 10) * 100 > (0,external_kolmafia_.myMeat)()) {
    return false;
  }

  return maintainStatus.restoreHPTo(hp);
}
// EXTERNAL MODULE: ./src/utils/MacroBuilder.ts
var MacroBuilder = __webpack_require__(152);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerWallSkin.ts
function QuestTowerWallSkin_typeof(obj) {"@babel/helpers - typeof";return QuestTowerWallSkin_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerWallSkin_typeof(obj);}function QuestTowerWallSkin_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerWallSkin_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerWallSkin_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerWallSkin_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerWallSkin_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerWallSkin_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerWallSkin_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestTowerWallSkin_setPrototypeOf(subClass, superClass);}function QuestTowerWallSkin_setPrototypeOf(o, p) {QuestTowerWallSkin_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestTowerWallSkin_setPrototypeOf(o, p);}function QuestTowerWallSkin_createSuper(Derived) {var hasNativeReflectConstruct = QuestTowerWallSkin_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestTowerWallSkin_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestTowerWallSkin_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestTowerWallSkin_possibleConstructorReturn(this, result);};}function QuestTowerWallSkin_possibleConstructorReturn(self, call) {if (call && (QuestTowerWallSkin_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestTowerWallSkin_assertThisInitialized(self);}function QuestTowerWallSkin_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestTowerWallSkin_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestTowerWallSkin_getPrototypeOf(o) {QuestTowerWallSkin_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestTowerWallSkin_getPrototypeOf(o);}function QuestTowerWallSkin_defineProperty(obj, key, value) {key = QuestTowerWallSkin_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTowerWallSkin_toPropertyKey(arg) {var key = QuestTowerWallSkin_toPrimitive(arg, "string");return QuestTowerWallSkin_typeof(key) === "symbol" ? key : String(key);}function QuestTowerWallSkin_toPrimitive(input, hint) {if (QuestTowerWallSkin_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerWallSkin_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestTowerWallSkin = /*#__PURE__*/function (_TaskInfo) {QuestTowerWallSkin_inherits(QuestTowerWallSkin, _TaskInfo);var _super = QuestTowerWallSkin_createSuper(QuestTowerWallSkin);function QuestTowerWallSkin() {var _this;QuestTowerWallSkin_classCallCheck(this, QuestTowerWallSkin);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "beehive",
    external_kolmafia_.Item.get("Beehive"));QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "killer",
    new QuestTowerKillSkin());QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "blackForest",
    external_kolmafia_.Location.get("The Black Forest"));QuestTowerWallSkin_defineProperty(QuestTowerWallSkin_assertThisInitialized(_this), "paths", void 0);return _this;}QuestTowerWallSkin_createClass(QuestTowerWallSkin, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [
      new PossiblePath(0).addMeat(1000),
      new PossiblePath(0).add(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / WallOfSkin";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 6) {
        return QuestStatus.NOT_READY;
      }

      if (status > 6) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if ((0,external_kolmafia_.availableAmount)(this.beehive) == 0) {
        if (this.killer.isPossible()) {
          return this.killer.run(path);
        } else {
          return this.runBees();
        }
      }

      return {
        location: null,
        run: function run() {
          greyAdv(
          "place.php?whichplace=nstower&action=ns_05_monster1",
          null,
          new AdventureSettings().setStartOfFightMacro(
          MacroBuilder/* Macro.tryItem */.LE.tryItem(_this2.beehive)));


        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "runBees", value:

    function runBees() {var _this3 = this;
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.blackForest,
        run: function run() {
          var props = new Properties_PropertyManager();
          DelayBurners.tryReplaceCombats();

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          try {
            props.setChoice(924, 3); // Beezzzz
            props.setChoice(1018, 1);
            props.setChoice(1019, 1);

            greyAdv(_this3.blackForest, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTowerWallSkin;}(TaskInfo);


var QuestTowerKillSkin = /*#__PURE__*/function () {function QuestTowerKillSkin() {QuestTowerWallSkin_classCallCheck(this, QuestTowerKillSkin);QuestTowerWallSkin_defineProperty(this, "familiar",
    external_kolmafia_.Familiar.get("Shorter-Order Cook"));QuestTowerWallSkin_defineProperty(this, "hotPlate",
    external_kolmafia_.Item.get("Hot Plate"));QuestTowerWallSkin_defineProperty(this, "maximizeString",

    "hot dmg 1 max +stench dmg 1 max +cold dmg 1 max +sleaze dmg 1 max +spooky dmg 1 max -tie");QuestTowerWallSkin_defineProperty(this, "familiarEquips",
    [
    "Muscle band",
    "Ant Hoe",
    "Ant Pick",
    "Ant Pitchfork",
    "Ant Rake",
    "Ant Sickle",
    "Tiny bowler"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestTowerWallSkin_defineProperty(this, "lastPossible",
    0);QuestTowerWallSkin_defineProperty(this, "possible", void 0);}QuestTowerWallSkin_createClass(QuestTowerKillSkin, [{ key: "isPossible", value:


    function isPossible() {
      if (!(0,external_kolmafia_.haveFamiliar)(this.familiar)) {
        return false;
      }

      if (getQuestStatus("questL13Final") < 6) {
        return true;
      }

      if (this.lastPossible == (0,external_kolmafia_.turnsPlayed)()) {
        return this.possible;
      }

      this.lastPossible = (0,external_kolmafia_.turnsPlayed)();

      // Short cook and physical damage
      var damagePerRound = 7;

      if ((0,external_kolmafia_.availableAmount)(this.hotPlate) > 0) {
        damagePerRound += 1;
      }

      if (
      this.familiarEquips.find(function (equip) {return (0,external_kolmafia_.availableAmount)(equip) > 0;}) != null)
      {
        damagePerRound++;
      }

      (0,external_kolmafia_.maximize)(this.maximizeString + " -offhand -familiar", true);

      for (var _i = 0, _arr = ["Cold", "Hot", "Sleaze", "Spooky", "Stench"]; _i < _arr.length; _i++) {var ele = _arr[_i];
        var mod = (0,external_kolmafia_.numericModifier)("Generated:_spec", ele + " Damage");

        if (mod > 0) {
          damagePerRound += 1;
        }
      }

      return this.possible = damagePerRound >= 13;
    } }, { key: "run", value:

    function run(path) {var _this4 = this;
      var str = this.maximizeString;

      var fam = this.familiarEquips.find(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;});

      if (fam != null) {
        str += " +equip " + fam;
      }

      if ((0,external_kolmafia_.availableAmount)(this.hotPlate) > 0) {
        str += " +equip " + this.hotPlate;
      }

      var outfit = new GreyOutfit(str);

      return {
        location: null,
        familiar: this.familiar,
        disableFamOverride: true,
        outfit: outfit,
        run: function run() {
          if ((0,external_kolmafia_.myFamiliar)() != _this4.familiar) {
            throw "Expected to be using cook!";
          }

          if ((0,external_kolmafia_.myHp)() < (0,external_kolmafia_.myMaxhp)()) {
            if (path.canUse(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB)) {
              (0,external_kolmafia_.cliExecute)("hottub");
              path.addUsed(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB);
            } else {
              restoreHPTo((0,external_kolmafia_.myMaxhp)());
            }
          }

          if ((0,external_kolmafia_.myHp)() < (0,external_kolmafia_.myMaxhp)()) {
            throw "Not healthy enough!";
          }

          greyAdv(
          "place.php?whichplace=nstower&action=ns_05_monster1",
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          MacroBuilder/* Macro.skill */.LE.skill("Grey Noise").repeat()));


        }
      };
    } }]);return QuestTowerKillSkin;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Black.ts
function QuestL11Black_typeof(obj) {"@babel/helpers - typeof";return QuestL11Black_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Black_typeof(obj);}function QuestL11Black_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11Black_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL11Black_slicedToArray(arr, i) {return QuestL11Black_arrayWithHoles(arr) || QuestL11Black_iterableToArrayLimit(arr, i) || QuestL11Black_unsupportedIterableToArray(arr, i) || QuestL11Black_nonIterableRest();}function QuestL11Black_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL11Black_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11Black_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11Black_arrayLikeToArray(o, minLen);}function QuestL11Black_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL11Black_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL11Black_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL11Black_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Black_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Black_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Black_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Black_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Black_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Black_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11Black_setPrototypeOf(subClass, superClass);}function QuestL11Black_setPrototypeOf(o, p) {QuestL11Black_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11Black_setPrototypeOf(o, p);}function QuestL11Black_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11Black_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11Black_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11Black_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11Black_possibleConstructorReturn(this, result);};}function QuestL11Black_possibleConstructorReturn(self, call) {if (call && (QuestL11Black_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11Black_assertThisInitialized(self);}function QuestL11Black_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11Black_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11Black_getPrototypeOf(o) {QuestL11Black_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11Black_getPrototypeOf(o);}function QuestL11Black_defineProperty(obj, key, value) {key = QuestL11Black_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Black_toPropertyKey(arg) {var key = QuestL11Black_toPrimitive(arg, "string");return QuestL11Black_typeof(key) === "symbol" ? key : String(key);}function QuestL11Black_toPrimitive(input, hint) {if (QuestL11Black_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Black_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}













var QuestL11Black = /*#__PURE__*/function (_TaskInfo) {QuestL11Black_inherits(QuestL11Black, _TaskInfo);var _super = QuestL11Black_createSuper(QuestL11Black);function QuestL11Black() {var _this;QuestL11Black_classCallCheck(this, QuestL11Black);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "boots",
    external_kolmafia_.Item.get("Blackberry Galoshes"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "beehive",
    external_kolmafia_.Item.get("Beehive"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("The Black Forest"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "blackbird",
    external_kolmafia_.Item.get("reassembled blackbird"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "sunkenEyes",
    external_kolmafia_.Item.get("Sunken Eyes"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "brokenWings",
    external_kolmafia_.Item.get("Broken Wings"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "eyesMonster",
    external_kolmafia_.Monster.get("black adder"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "wingsMonster",
    external_kolmafia_.Monster.get("Black Panther"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "blackberryBush",
    external_kolmafia_.Monster.get("Blackberry bush"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "toAbsorb", void 0);QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "blackberry",


    external_kolmafia_.Item.get("Blackberry"));QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "skinKiller",
    new QuestTowerKillSkin());QuestL11Black_defineProperty(QuestL11Black_assertThisInitialized(_this), "paths", void 0);return _this;}QuestL11Black_createClass(QuestL11Black, [{ key: "level", value:


    function level() {
      return 11;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];
      this.paths.push(new PossiblePath(17, 25));

      if ((0,external_kolmafia_.availableAmount)(this.boots) == 0) {
        this.paths.push(new PossiblePath(13, 17).addPull(this.boots));
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.MEAT_DROP));

    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Black";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Black");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.myHp)() < 60) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "forcedNCIn", value:

    function forcedNCIn() {
      var encounters = getEncounters("The Black Forest", ["All Over the Map"]).
      filter(function (_ref) {var _ref2 = QuestL11Black_slicedToArray(_ref, 1),e = _ref2[0];return e.startsWith("black ") || e == "All Over the Map";}).
      reverse();

      var fightsSinceLastNC = 0;var _iterator = QuestL11Black_createForOfIteratorHelper(

        encounters),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = QuestL11Black_slicedToArray(_step.value, 1),encounter = _step$value[0];
          if (encounter == "All Over the Map") {
            break;
          }

          fightsSinceLastNC++;
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return Math.max(0, 4 - fightsSinceLastNC);
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var ncIn = this.forcedNCIn();
      var ncTime = ncIn <= 0;

      var outfit = new GreyOutfit();

      if (!ncTime) {
        outfit.setPlusCombat();
        outfit.combatCap = 5;
        outfit.addWeight("init", 3, null, 50);
      }

      if ((0,external_kolmafia_.availableAmount)(this.boots) > 0) {
        if (!ncTime) {
          outfit.addWeight(this.boots);
        }
      } else if ((0,external_kolmafia_.availableAmount)(this.blackberry) <= 1) {
        outfit.setItemDrops();

        outfit.addWeight("booze drop", 0.1).addWeight("food drop", 0.1);
      }

      if (this.shouldWearLatte()) {
        outfit.addWeight(this.latte);
      }

      outfit.addWeight("moxie").addWeight("ml", -1);

      var fam;

      if ((0,external_kolmafia_.availableAmount)(this.blackbird) == 0 && !ncTime) {
        fam = external_kolmafia_.Familiar.get("Reassembled Blackbird");
      }

      return {
        location: this.loc,
        forcedFight: [ncIn, this.blackberryBush],
        outfit: outfit,
        familiar: fam,
        orbs: this.getNeededMonsters(),
        mayFreeRun: ncIn == 0 && (0,external_kolmafia_.availableAmount)(this.boots) > 0,
        freeRun: function freeRun(monster) {return monster == _this2.blackberryBush;},
        run: function run() {
          if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
            GreyPulls.tryPull(_this2.boots);
          }

          (0,external_kolmafia_.print)("Black NC in: " + ncIn, "gray");
          var props = new Properties_PropertyManager();

          try {
            props.setChoice(923, 1);

            if (
            !GreySettings_GreySettings.shouldAvoidTowerRequirements() &&
            (0,external_kolmafia_.availableAmount)(_this2.beehive) == 0 &&
            !_this2.skinKiller.isPossible())
            {
              props.setChoice(924, 3); // Beezzzz
              props.setChoice(1018, 1);
              props.setChoice(1019, 1);
            } else if (
            (0,external_kolmafia_.availableAmount)(_this2.boots) == 0 &&
            (0,external_kolmafia_.availableAmount)(_this2.blackberry) >= 3)
            {
              props.setChoice(924, 2); // Cobble
              props.setChoice(928, 4); // Make boots
            } else {
              props.setChoice(924, 1); // Fight bush
            }

            var settings = new AdventureSettings();

            if ((0,external_kolmafia_.availableAmount)(_this2.blackbird) == 0) {var _iterator2 = QuestL11Black_createForOfIteratorHelper(
                _this2.getNeededMonsters()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var mon = _step2.value;
                  settings.addNoBanish(mon);
                }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
            }

            greyAdv(_this2.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getNeededMonsters", value:

    function getNeededMonsters() {
      if ((0,external_kolmafia_.availableAmount)(this.blackbird) > 0) {
        return [];
      }

      var monsters = [];

      if ((0,external_kolmafia_.availableAmount)(this.sunkenEyes) == 0) {
        monsters.push(this.eyesMonster);
      }

      if ((0,external_kolmafia_.availableAmount)(this.brokenWings) == 0) {
        monsters.push(this.wingsMonster);
      }

      return monsters;
    } }]);return QuestL11Black;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertCompass.ts
function QuestL11DesertCompass_typeof(obj) {"@babel/helpers - typeof";return QuestL11DesertCompass_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11DesertCompass_typeof(obj);}function QuestL11DesertCompass_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertCompass_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11DesertCompass_toPropertyKey(descriptor.key), descriptor);}}function QuestL11DesertCompass_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertCompass_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertCompass_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertCompass_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11DesertCompass_setPrototypeOf(subClass, superClass);}function QuestL11DesertCompass_setPrototypeOf(o, p) {QuestL11DesertCompass_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11DesertCompass_setPrototypeOf(o, p);}function QuestL11DesertCompass_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11DesertCompass_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11DesertCompass_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11DesertCompass_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11DesertCompass_possibleConstructorReturn(this, result);};}function QuestL11DesertCompass_possibleConstructorReturn(self, call) {if (call && (QuestL11DesertCompass_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11DesertCompass_assertThisInitialized(self);}function QuestL11DesertCompass_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11DesertCompass_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11DesertCompass_getPrototypeOf(o) {QuestL11DesertCompass_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11DesertCompass_getPrototypeOf(o);}function QuestL11DesertCompass_defineProperty(obj, key, value) {key = QuestL11DesertCompass_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11DesertCompass_toPropertyKey(arg) {var key = QuestL11DesertCompass_toPrimitive(arg, "string");return QuestL11DesertCompass_typeof(key) === "symbol" ? key : String(key);}function QuestL11DesertCompass_toPrimitive(input, hint) {if (QuestL11DesertCompass_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11DesertCompass_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestL11DesertCompass = /*#__PURE__*/function (_TaskInfo) {QuestL11DesertCompass_inherits(QuestL11DesertCompass, _TaskInfo);var _super = QuestL11DesertCompass_createSuper(QuestL11DesertCompass);function QuestL11DesertCompass() {var _this;QuestL11DesertCompass_classCallCheck(this, QuestL11DesertCompass);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "compass",
    external_kolmafia_.Item.get("UV-resistant compass"));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "script",
    external_kolmafia_.Item.get("Shore Inc. Ship Trip Scrip"));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "dontPullScriptAt",
    6);QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "pullScript",
    new PossiblePath(0).addConsumablePull(_this.script));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "noPull",
    new PossiblePath(3));QuestL11DesertCompass_defineProperty(QuestL11DesertCompass_assertThisInitialized(_this), "camel",
    external_kolmafia_.Familiar.get("Melodramedary"));return _this;}QuestL11DesertCompass_createClass(QuestL11DesertCompass, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Compass";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      if ((0,external_kolmafia_.storageAmount)(this.script) <= this.dontPullScriptAt) {
        return [this.noPull];
      }

      return [this.noPull, this.pullScript];
    } }, { key: "status", value:

    function status(path) {
      if (
      (0,external_kolmafia_.haveFamiliar)(this.camel) ||
      (0,external_kolmafia_.availableAmount)(this.compass) > 0 ||
      (0,external_kolmafia_.getProperty)("questL11Desert") == "finished")
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.myAdventures)() < 40 && path == this.pullScript) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Desert") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          if (!path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
            var props = new Properties_PropertyManager();

            try {
              props.setChoice(793, 1);

              greyAdv(external_kolmafia_.Location.get("The Shore, Inc. Travel Agency"));
            } finally {
              props.resetAll();
            }
          } else {
            GreyPulls.pullScrip();
            path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
          }

          (0,external_kolmafia_.cliExecute)("make " + _this2.compass.name);

          if ((0,external_kolmafia_.availableAmount)(_this2.compass) == 0) {
            throw "Compass should've been available!";
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11DesertCompass;}(TaskInfo);
;// CONCATENATED MODULE: ./src/utils/GreyAbsorber.ts
function GreyAbsorber_typeof(obj) {"@babel/helpers - typeof";return GreyAbsorber_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyAbsorber_typeof(obj);}function GreyAbsorber_slicedToArray(arr, i) {return GreyAbsorber_arrayWithHoles(arr) || GreyAbsorber_iterableToArrayLimit(arr, i) || GreyAbsorber_unsupportedIterableToArray(arr, i) || GreyAbsorber_nonIterableRest();}function GreyAbsorber_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyAbsorber_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyAbsorber_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyAbsorber_toConsumableArray(arr) {return GreyAbsorber_arrayWithoutHoles(arr) || GreyAbsorber_iterableToArray(arr) || GreyAbsorber_unsupportedIterableToArray(arr) || GreyAbsorber_nonIterableSpread();}function GreyAbsorber_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyAbsorber_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function GreyAbsorber_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return GreyAbsorber_arrayLikeToArray(arr);}function GreyAbsorber_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyAbsorber_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyAbsorber_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyAbsorber_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyAbsorber_arrayLikeToArray(o, minLen);}function GreyAbsorber_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyAbsorber_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyAbsorber_toPropertyKey(descriptor.key), descriptor);}}function GreyAbsorber_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyAbsorber_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyAbsorber_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyAbsorber_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyAbsorber_defineProperty(obj, key, value) {key = GreyAbsorber_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyAbsorber_toPropertyKey(arg) {var key = GreyAbsorber_toPrimitive(arg, "string");return GreyAbsorber_typeof(key) === "symbol" ? key : String(key);}function GreyAbsorber_toPrimitive(input, hint) {if (GreyAbsorber_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyAbsorber_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var Absorb = /*#__PURE__*/GreyAbsorber_createClass(function Absorb() {GreyAbsorber_classCallCheck(this, Absorb);GreyAbsorber_defineProperty(this, "monster", void 0);GreyAbsorber_defineProperty(this, "skill", void 0);GreyAbsorber_defineProperty(this, "adventures",


  0);GreyAbsorber_defineProperty(this, "mus",
  0);GreyAbsorber_defineProperty(this, "mys",
  0);GreyAbsorber_defineProperty(this, "mox",
  0);GreyAbsorber_defineProperty(this, "hp",
  0);GreyAbsorber_defineProperty(this, "mp",
  0);});


if (
(0,external_kolmafia_.currentRound)() == 0 &&
!(0,external_kolmafia_.handlingChoice)() &&
!(0,external_kolmafia_.fightFollowsChoice)() &&
!(0,external_kolmafia_.fightFollowsChoice)())
{
  if ((0,external_kolmafia_.getProperty)("lastIcehouseCheck") != (0,external_kolmafia_.gamedayToInt)().toString()) {
    (0,external_kolmafia_.visitUrl)("museum.php?action=icehouse");
    (0,external_kolmafia_.setProperty)("lastIcehouseCheck", (0,external_kolmafia_.gamedayToInt)().toString());
  }
}

var GreyAbsorber_AbsorbsProvider = /*#__PURE__*/function () {function AbsorbsProvider() {GreyAbsorber_classCallCheck(this, AbsorbsProvider);}GreyAbsorber_createClass(AbsorbsProvider, [{ key: "getRolloverAdvs", value:






    function getRolloverAdvs() {
      return new Map(
      [
      ["Subatomic Tango", 15],
      ["Solid Fuel", 10],
      ["Autochrony", 10],
      ["Temporal Hyperextension", 10],
      ["Spooky Veins", 10],
      ["Extra Innings", 5],
      ["Reloading", 5],
      ["Harried", 5],
      ["Temporal Bent", 5],
      ["Provably Efficient", 5],
      ["Basic Improvements", 5],
      ["Shifted About", 5],
      ["Seven Foot Feelings", 5],
      ["Self-Actualized", 5]].
      map(function (s) {return [(0,external_kolmafia_.toSkill)(s[0]), s[1] + " Rollover Adventures"];}));

    } }, { key: "shouldGrabSkill", value:

    function shouldGrabSkill(skill) {
      if (skill == AbsorbsProvider.meatSkill) {
        return GreySettings_GreySettings.greyMeatSkill != "No";
      }

      return this.getMustHaveSkills().has(skill);
    } }, { key: "getMustHaveSkills", value:

    function getMustHaveSkills() {
      if ((0,external_kolmafia_.getProperty)("questL13Final") != "unstarted") {
        return new Map();
      }

      var array = [
      ["Propagation Drive", "20% Item Drops"],
      ["Overclocking", "Scaling +init"],
      ["Ponzi Apparatus", "Scaling meat%"],
      ["Advanced Exo-Alloy", "100 DA"],
      ["Subatomic Hardening", "Scaling DR"],
      ["Fluid Dynamics Simulation", "Scaling HP Regen"],
      ["Infinite Loop", "Fast Leveling"],
      ["Gravitational Compression", "Scaling Item Drop"],
      ["Hivemindedness", "Scaling MP Regen"],
      ["Photonic Shroud", "-10 Combat"],
      ["Piezoelectric Honk", "+10 Combat"],
      ["Phase Shift", "-10 Combat"],
      ["Ponzi Apparatus", "Scaling Meat Drop"]];


      if (GreySettings_GreySettings.greyMeatSkill == "Yes") {
        array.push(["Financial Spreadsheets", "+40% Meat from Monsters"]);
      }

      return new Map(array.map(function (s) {return [(0,external_kolmafia_.toSkill)(s[0]), s[1]];}));
    } }, { key: "getAbsorb", value:

    function getAbsorb(monster) {
      return AbsorbsProvider.loadAbsorbs().find(function (a) {return a.monster == monster;});
    } }, { key: "getAbsorbsInLocation", value:

    function getAbsorbsInLocation(location) {
      var absorbs = [];

      if (location == null) {
        return absorbs;
      }

      var monsters = (0,external_kolmafia_.getMonsters)(location);var _iterator = GreyAbsorber_createForOfIteratorHelper(

        AbsorbsProvider.loadAbsorbs()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var absorb = _step.value;
          if (!monsters.includes(absorb.monster)) {
            continue;
          }

          absorbs.push(absorb);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return absorbs;
    } }, { key: "getMultiplier", value:

    function getMultiplier(monster, defeated) {
      if (
      defeated.has(monster) &&
      defeated.get(monster) === Reabsorbed.REABSORBED)
      {
        return 0;
      }

      var mult = defeated.get(monster) == null ? 1 : 0;

      if ((0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) >= 6) {
        mult += 1;
      }

      return mult;
    } }, { key: "getAdventuresByAbsorbs", value:

    function getAdventuresByAbsorbs(
    defeated,
    monsters)

    {var _this = this;var includeSkills = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var skills = this.getMustHaveSkills();

      var absorbs = monsters.
      map(function (m) {return AbsorbsProvider.getAbsorb(m);}).
      filter(function (a) {
        if (
        a.adventures <= 0 && (
        a.skill == null || !includeSkills || !skills.has(a.skill)))
        {
          return false;
        }

        if (
        a.adventures > 0 &&
        defeated.get(a.monster) == Reabsorbed.REABSORBED)
        {
          return false;
        }

        if (a.skill != null && (0,external_kolmafia_.haveSkill)(a.skill)) {
          return false;
        }

        return true;
      });

      if (absorbs.length == 0) {
        return null;
      }

      var advsSpent = 1;

      var totalAdvs = absorbs.reduce(
      function (p, a) {return (
          Math.max(0, a.adventures) * _this.getMultiplier(a.monster, defeated) + p);},
      0);

      var newSkills = new Map();var _iterator2 = GreyAbsorber_createForOfIteratorHelper(

        absorbs),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var a = _step2.value;
          if (!skills.has(a.skill)) {
            continue;
          }

          newSkills.set(a, skills.get(a.skill));
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      var profit =
      totalAdvs - (advsSpent + Math.max(2, Math.ceil(advsSpent * 0.2)));

      return {
        turnsToGain: totalAdvs,
        expectedTurnsProfit: profit,
        monsters: absorbs.map(function (a) {return a.monster;}),
        skills: newSkills,
        weight: profit + this.generateWeights(newSkills),
        reabsorb:
        absorbs.find(
        function (a) {return (
            a.adventures > 0 && defeated.get(a.monster) != Reabsorbed.REABSORBED);}) !=
        null
      };
    } }, { key: "generateWeights", value:

    function generateWeights(skills) {
      var weight = 0;
      var mustHave = this.getMustHaveSkills();var _iterator3 = GreyAbsorber_createForOfIteratorHelper(

        skills.keys()),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var k = _step3.value;
          var w = 0;

          if (mustHave.has(k.skill)) {
            w = GreySettings_GreySettings.usefulSkillsWeight;
          } else {
            continue;
          }

          weight += w;
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

      return weight;
    } }, { key: "getAdventuresInLocation", value:

    function getAdventuresInLocation(
    defeated,
    location)

    {var _this2 = this;var includeSkills = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var skills = this.getMustHaveSkills();

      // for (let entry of this.getRolloverAdvs()) {
      //   skills.set(entry[0], entry[1]);
      // }

      var absorbs = this.getAbsorbsInLocation(location).filter(function (a) {
        if (
        a.adventures <= 0 && (
        a.skill == null || !includeSkills || !skills.has(a.skill)))
        {
          return false;
        }

        if (
        a.adventures > 0 &&
        defeated.get(a.monster) == Reabsorbed.REABSORBED)
        {
          return false;
        }

        if (a.skill != null && (0,external_kolmafia_.haveSkill)(a.skill)) {
          return false;
        }

        return true;
      });

      if (absorbs.length == 0) {
        return null;
      }

      var appearRates = (0,external_kolmafia_.appearanceRates)(location);

      // Special workaround for screambat making appearance rates of non-screambats zero
      if (appearRates["screambat"] == 100) {
        for (var _i = 0, _Object$keys = Object.keys(appearRates); _i < _Object$keys.length; _i++) {var key = _Object$keys[_i];
          if (key == "none") {
            continue;
          }

          appearRates[key] = 20;
        }
      }

      var advsSpent = 0;
      var rates = [];
      var combatPercent =
      location == external_kolmafia_.Location.get("Twin Peak") ? 100 : location.combatPercent;

      Object.entries(appearRates).forEach(function (v) {
        var monster = external_kolmafia_.Monster.get(v[0]);
        var rate = v[1];

        if (rate <= 0 || combatPercent <= 0) {
          return;
        }

        rates.push([monster, rate * (combatPercent / 100)]);
      });

      if (location == external_kolmafia_.Location.get("Oil Peak")) {
        rates.push([external_kolmafia_.Monster.get("Oil Baron"), 100]);
      }

      absorbs = absorbs.filter(
      function (a) {return rates.find(function (r) {return r[0] == a.monster;}) != null;});


      if (absorbs.length == 0) {
        return null;
      }

      while (
      rates.filter(
      function (r) {return (
          r[1] * advsSpent < 100 &&
          absorbs.filter(function (a) {return a.monster == r[0];}).length > 0);}).
      length > 0)
      {
        advsSpent++;
      }

      if (AbsorbsProvider.hasBall) {
        advsSpent = Math.floor(advsSpent / 2);
      }

      var totalAdvs = absorbs.reduce(
      function (p, a) {return (
          Math.max(0, a.adventures) * _this2.getMultiplier(a.monster, defeated) + p);},
      0);

      var newSkills = new Map();var _iterator4 = GreyAbsorber_createForOfIteratorHelper(

        absorbs),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var a = _step4.value;
          if (!skills.has(a.skill)) {
            continue;
          }

          newSkills.set(a, skills.get(a.skill));
        }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

      var profit =
      totalAdvs - (advsSpent + Math.max(2, Math.ceil(advsSpent * 0.2)));

      return {
        turnsToGain: totalAdvs,
        expectedTurnsProfit: profit,
        monsters: absorbs.map(function (a) {return a.monster;}),
        skills: newSkills,
        weight: profit + this.generateWeights(newSkills),
        reabsorb:
        absorbs.find(
        function (a) {return (
            a.adventures > 0 && defeated.get(a.monster) != Reabsorbed.REABSORBED);}) !=
        null
      };
    } }, { key: "getOnlyUsefulAbsorbs", value:

    function getOnlyUsefulAbsorbs(absorbs) {
      var usefulSkills = GreyAbsorber_toConsumableArray(this.getMustHaveSkills().keys());

      return absorbs.filter(function (a) {
        return (
          a.adventures > 0 ||
          a.mp > 0 ||
          a.skill != null && usefulSkills.includes(a.skill));

      });
    } }, { key: "getAbsorbedMonstersFromInstance", value:





































































    function getAbsorbedMonstersFromInstance() {
      var monsters = new Map();
      var absorbed = AbsorbsProvider.getAbsorbedMonsters();
      var reabsorbed = AbsorbsProvider.getReabsorbedMonsters();

      reabsorbed.forEach(function (m) {
        monsters.set(m, Reabsorbed.REABSORBED);
      });

      absorbed.forEach(function (m) {
        if (reabsorbed.includes(m)) {
          return;
        }

        monsters.set(m, Reabsorbed.NOT_REABSORBED);
      });

      return monsters;
    } }, { key: "getExtraAdventures", value:












    function getExtraAdventures(
    defeated)

    {var includeSkills = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var map = new Map();var _iterator5 = GreyAbsorber_createForOfIteratorHelper(

        AbsorbsProvider.loadAbsorbs().filter(
        function (a) {return (
            (includeSkills || a.adventures > 0) &&
            defeated.get(a.monster) != Reabsorbed.REABSORBED);})),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;)
        {var absorb = _step5.value;var _iterator6 = GreyAbsorber_createForOfIteratorHelper(
            getLocations(absorb.monster)),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var l = _step6.value;
              if (map.has(l)) {
                continue;
              }

              map.set(l, this.getAdventuresInLocation(defeated, l, includeSkills));
            }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}
        }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}

      return GreyAbsorber_toConsumableArray(map.entries()).filter(function (_ref) {var _ref2 = GreyAbsorber_slicedToArray(_ref, 2),abs = _ref2[1];return abs != null;});
    } }, { key: "printRemainingAbsorbs", value:

    function printRemainingAbsorbs() {
      var defeated = this.getAbsorbedMonstersFromInstance();
      var absorbs = AbsorbsProvider.loadAbsorbs().filter(
      function (a) {return (
          a.adventures > 0 && defeated.get(a.monster) != Reabsorbed.REABSORBED);});


      absorbs.sort(function (a1, a2) {return a2.adventures - a1.adventures;});

      if (absorbs.length == 0) {
        (0,external_kolmafia_.print)("No adventures to absorb!", "blue");
        return;
      }

      if (
      (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) >= 6 &&
      getQuestStatus("questL13Final") > 11)
      {
        (0,external_kolmafia_.print)(
        "The remaining absorbs are likely either out of reach or judged to be wasteful to acquire",
        "red");

      }

      (0,external_kolmafia_.printHtml)(
      "<font color='blue'>Absorbs:</font> " +
      absorbs.
      map(
      function (a) {return (
          a.monster.name +
          " <font color='gray'>(" +
          a.adventures +
          " advs, Absorb x " + (
          defeated.has(a.monster) ? "1" : "2") +
          ")</font>");}).

      join(", "));

    } }], [{ key: "getAbsorb", value: function getAbsorb(monster) {var _iterator7 = GreyAbsorber_createForOfIteratorHelper(AbsorbsProvider.loadAbsorbs()),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var absorb = _step7.value;if (absorb.monster != monster) {continue;}return absorb;}} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}return null;} }, { key: "loadAbsorbs", value: function loadAbsorbs() {var includeBanished = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;if (AbsorbsProvider.allAbsorbs == null) {AbsorbsProvider.allAbsorbs = [];var _iterator8 = GreyAbsorber_createForOfIteratorHelper((0,external_kolmafia_.fileToBuffer)("data/grey_you_data.txt").split("\n")),_step8;try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var line = _step8.value;var spl = line.replace("\r", "").split("\t");if (spl.length != 2 || spl[1] == null || spl[1].length == 0) {continue;}var mons = (0,external_kolmafia_.toMonster)(spl[0]);if (mons == external_kolmafia_.Monster.none) {(0,external_kolmafia_.print)("Unknown " + spl[0]);continue;}var absorb = new Absorb();absorb.monster = mons;if (spl[1].endsWith("adventures")) {absorb.adventures = (0,external_kolmafia_.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("muscle")) {absorb.mus = (0,external_kolmafia_.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("mysticality")) {absorb.mys = (0,external_kolmafia_.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("moxie")) {absorb.mox = (0,external_kolmafia_.toInt)(spl[1].substring(0, spl[1].lastIndexOf(" ")));} else if (spl[1].endsWith("maximum hp")) {absorb.hp = (0,external_kolmafia_.toInt)(spl[1].substring(0, spl[1].indexOf(" ")));} else if (spl[1].endsWith("maximum mp")) {absorb.mp = (0,external_kolmafia_.toInt)(spl[1].substring(0, spl[1].indexOf(" ")));} else {absorb.skill = (0,external_kolmafia_.toSkill)(spl[1]);if (absorb.skill == external_kolmafia_.Skill.none) {throw "Unknown line '" + spl[1] + "' in absorb data";}}AbsorbsProvider.allAbsorbs.push(absorb);}} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}this.remainingAdvAbsorbs = AbsorbsProvider.allAbsorbs.filter(function (a) {return a.adventures > 0;}).map(function (a) {return a.monster;});}return AbsorbsProvider.allAbsorbs.filter(function (a) {return includeBanished || !(0,external_kolmafia_.isBanished)(a.monster);});} }, { key: "getAbsorbedMonsters", value: function getAbsorbedMonsters() {return Object.keys((0,external_kolmafia_.absorbedMonsters)()).map(function (m) {return external_kolmafia_.Monster.get(m);});} }, { key: "getReabsorbedMonsters", value: function getReabsorbedMonsters() {return (0,external_kolmafia_.getProperty)("gooseReprocessed").split(",").filter(function (s) {return s != "";}).map(function (m) {return (0,external_kolmafia_.toMonster)((0,external_kolmafia_.toInt)(m));});} }]);return AbsorbsProvider;}();GreyAbsorber_defineProperty(GreyAbsorber_AbsorbsProvider, "allAbsorbs", void 0);GreyAbsorber_defineProperty(GreyAbsorber_AbsorbsProvider, "remainingAdvAbsorbs", void 0);GreyAbsorber_defineProperty(GreyAbsorber_AbsorbsProvider, "hasBall", (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("miniature crystal ball")) > 0);GreyAbsorber_defineProperty(GreyAbsorber_AbsorbsProvider, "meatSkill", external_kolmafia_.Skill.get("Financial Spreadsheets"));











var Reabsorbed;(function (Reabsorbed) {Reabsorbed[Reabsorbed["REABSORBED"] = 0] = "REABSORBED";Reabsorbed[Reabsorbed["NOT_REABSORBED"] = 1] = "NOT_REABSORBED";})(Reabsorbed || (Reabsorbed = {}));
;// CONCATENATED MODULE: ./src/utils/Banishers.ts
function Banishers_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, Banishers_toPropertyKey(descriptor.key), descriptor);}}function Banishers_createClass(Constructor, protoProps, staticProps) {if (protoProps) Banishers_defineProperties(Constructor.prototype, protoProps);if (staticProps) Banishers_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function Banishers_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function Banishers_defineProperty(obj, key, value) {key = Banishers_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function Banishers_toPropertyKey(arg) {var key = Banishers_toPrimitive(arg, "string");return Banishers_typeof(key) === "symbol" ? key : String(key);}function Banishers_toPrimitive(input, hint) {if (Banishers_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (Banishers_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function Banishers_typeof(obj) {"@babel/helpers - typeof";return Banishers_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, Banishers_typeof(obj);}function Banishers_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = Banishers_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function Banishers_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return Banishers_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Banishers_arrayLikeToArray(o, minLen);}function Banishers_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}

function hasBanished(location, banish) {
  var banished = Banishers_getBanished().filter(function (b) {return b.banisher.type == banish;});

  if (banish.length == 0) {
    return false;
  }

  if (location == null) {
    return true;
  }var _iterator = Banishers_createForOfIteratorHelper(

    Object.keys((0,external_kolmafia_.getLocationMonsters)(location)).map(function (m) {return (
        external_kolmafia_.Monster.get(m));})),_step;try {var _loop = function _loop()
    {var mob = _step.value;
      if (banished.filter(function (b) {return b.monster == mob;}).length == 0) {return "continue";

      }return { v:

        true };
    };for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;if (Banishers_typeof(_ret) === "object") return _ret.v;}} catch (err) {_iterator.e(err);} finally {_iterator.f();}

  return false;
}

var BanishReason;(function (BanishReason) {BanishReason[BanishReason["QUEST"] = 0] = "QUEST";BanishReason[BanishReason["REASBORB"] = 1] = "REASBORB";BanishReason[BanishReason["UNKNOWN"] = 2] = "UNKNOWN";})(BanishReason || (BanishReason = {}));





var Banishers_BanishType;(function (BanishType) {BanishType["BALEFUL_HOWL"] = "baleful howl";BanishType["BANISHING_SHOUT"] = "banishing shout";BanishType["BATTER_UP"] = "batter up!";BanishType["BEANCANNON"] = "beancannon";BanishType["BE_A_MIND_MASTER"] = "Be a Mind Master";BanishType["BLART_SPRAY_WIDE"] = "B. L. A. R. T. Spray (wide)";BanishType["BOWL_A_CURVEBALL"] = "Bowl a Curveball";BanishType["BREATHE_OUT"] = "breathe out";BanishType["BUNDLE_OF_FRAGRANT_HERBS"] = "bundle of &quot;fragrant&quot; herbs";BanishType["CHATTERBOXING"] = "chatterboxing";BanishType["CLASSY_MONKEY"] = "classy monkey";BanishType["COCKTAIL_NAPKIN"] = "cocktail napkin";BanishType["CRYSTAL_SKULL"] = "crystal skull";BanishType["CURSE_OF_VACATION"] = "curse of vacation";BanishType["DEATHCHUCKS"] = "deathchucks";BanishType["DIRTY_STINKBOMB"] = "dirty stinkbomb";BanishType["DIVINE_CHAMPAGNE_POPPER"] = "divine champagne popper";BanishType["FEEL_HATRED"] = "Feel Hatred";BanishType["GINGERBREAD_RESTRAINING_ORDER"] = "gingerbread restraining order";BanishType["HAROLDS_BELL"] = "harold's bell";BanishType["HOWL_OF_THE_ALPHA"] = "howl of the alpha";BanishType["HUMAN_MUSK"] = "human musk";BanishType["ICE_HOTEL_BELL"] = "ice hotel bell";BanishType["ICE_HOUSE"] = "ice house";BanishType["KGB_TRANQUILIZER_DART"] = "KGB tranquilizer dart";BanishType["LICORICE_ROPE"] = "licorice rope";BanishType["LOUDER_THAN_BOMB"] = "louder than bomb";BanishType["MAFIA_MIDDLEFINGER_RING"] = "mafia middle finger ring";BanishType["NANORHINO"] = "nanorhino";BanishType["PANTSGIVING"] = "pantsgiving";BanishType["PEEL_OUT"] = "peel out";BanishType["PULLED_INDIGO_TAFFY"] = "pulled indigo taffy";BanishType["REFLEX_HAMMER"] = "Reflex Hammer";BanishType["SABER_FORCE"] = "Saber Force";BanishType["SHOW_YOUR_BORING_FAMILIAR_PICTURES"] = "Show your boring familiar pictures";BanishType["SMOKE_GRENADE"] = "smoke grenade";BanishType["SNOKEBOMB"] = "snokebomb";BanishType["SPOOKY_MUSIC_BOX_MECHANISM"] = "spooky music box mechanism";BanishType["SPRING_LOADED_FRONT_BUMPER"] = "Spring-Loaded Front Bumper";BanishType["STAFF_OF_THE_STANDALONE_CHEESE"] = "staff of the standalone cheese";BanishType["STINKY_CHEESE_EYE"] = "stinky cheese eye";BanishType["SYSTEM_SWEEP"] = "System Sweep";BanishType["TENNIS_BALL"] = "tennis ball";BanishType["THROW_LATTE_ON_OPPONENT"] = "Throw Latte on Opponent";BanishType["THUNDER_CLAP"] = "thunder clap";BanishType["TRYPTOPHAN_DART"] = "tryptophan dart";BanishType["ULTRA_HAMMER"] = "Ultra Hammer";BanishType["V_FOR_VIVALA_MASK"] = "v for vivala mask";BanishType["WALK_AWAY_FROM_EXPLOSION"] = "walk away from explosion";})(Banishers_BanishType || (Banishers_BanishType = {}));var



















































Banisher = /*#__PURE__*/Banishers_createClass(function Banisher() {Banishers_classCallCheck(this, Banisher);Banishers_defineProperty(this, "item", void 0);Banishers_defineProperty(this, "turnsBanish", void 0);Banishers_defineProperty(this, "type", void 0);});





var Banish = /*#__PURE__*/Banishers_createClass(function Banish() {Banishers_classCallCheck(this, Banish);Banishers_defineProperty(this, "monster", void 0);Banishers_defineProperty(this, "turnBanished", void 0);Banishers_defineProperty(this, "banisher", void 0);Banishers_defineProperty(this, "reason", void 0);});












function Banishers_getBanished() {
  var prop = (0,external_kolmafia_.getProperty)("banishedMonsters").split(":");
  var banishes = [];
  var banishers = getBanishers();var _loop2 = function _loop2()

  {
    var monsterName = (0,external_kolmafia_.toMonster)(prop[i]);
    var banisherName = prop[i + 1];
    var turnBanished = (0,external_kolmafia_.toInt)(prop[i + 2]);

    var banisher = new Banish();
    banisher.monster = monsterName;
    var banishType =
    Banishers_BanishType[getEnumKeyByEnumValue(Banishers_BanishType, banisherName)];
    banisher.banisher = banishers.find(function (b) {return b.type == banishType;});
    banisher.turnBanished = turnBanished;

    if (banisher.banisher == null) {
      banisher.banisher = new Banisher();
      banisher.banisher.type = banishType;
    }

    banishes.push(banisher);
  };for (var i = 0; i + 2 < prop.length; i += 3) {_loop2();}

  return banishes;
}

function getEnumKeyByEnumValue(myEnum, enumValue) {
  var keys = Object.keys(myEnum).filter(function (x) {return myEnum[x] == enumValue;});

  return keys.length > 0 ? keys[0] : null;
}

var BanishManager = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function BanishManager() {Banishers_classCallCheck(this, BanishManager);}Banishers_createClass(BanishManager, [{ key: "getGoodBanishers", value:
    function getGoodBanishers(
    location)

    {var _this = this;var turnsSpendingInZone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : myAdventures();
      var banishers = getBanishers().filter(
      function (b) {return !_this.isInUse(b, location);});


      if (
      choiceFollowsFight() ||
      currentRound() != 0 ||
      fightFollowsChoice() ||
      handlingChoice() ||
      !canInteract())
      {
        banishers = banishers.filter(function (b) {return availableAmount(b.item) > 0;});
      }

      banishers.sort(function (b1, b2) {
        return (
          _this.getTotalCost(b1, turnsSpendingInZone) -
          _this.getTotalCost(b2, turnsSpendingInZone));

      });

      return banishers;
    } }, { key: "getTotalCost", value:

    function getTotalCost(banisher, turnsToSpend) {
      var cost = mallPrice(banisher.item);

      if (banisher.turnsBanish == -1) {
        return cost;
      }

      var itemsToBuy = Math.ceil(turnsToSpend / banisher.turnsBanish);

      return cost * itemsToBuy;
    } }, { key: "getMonsterLocations", value:

    function getMonsterLocations(monster) {
      var locations = [];var _iterator2 = Banishers_createForOfIteratorHelper(

        Location.all()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var location = _step2.value;
          var monsters = this.getMonstersAtLocation(location);

          if (!monsters.includes(monster)) {
            continue;
          }

          locations.push(location);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return locations;
    } }, { key: "getMonstersAtLocation", value:

    function getMonstersAtLocation(location) {
      return Object.keys(getLocationMonsters(location)).map(function (s) {return toMonster(s);});
    } }, { key: "isInUse", value:

    function isInUse(banisher, location) {var _this2 = this;
      return (
        Banishers_getBanished().find(
        function (b) {return (
            b.banisher.type == banisher.type &&
            _this2.getMonsterLocations(b.monster).includes(location));}) !=
        null);

    } }]);return BanishManager;}()));


function getBanishers() {
  var banishers = [
  [Banishers_BanishType.HUMAN_MUSK, "Human Musk", -1],
  [Banishers_BanishType.BE_A_MIND_MASTER, "Daily Affirmation: Be a Mind Master", 80],
  [Banishers_BanishType.TENNIS_BALL, "Tennis Ball", 30],
  [Banishers_BanishType.LOUDER_THAN_BOMB, "Louder Than Bomb", 20],
  [Banishers_BanishType.CRYSTAL_SKULL, "Crystal Skull", 20],
  [Banishers_BanishType.DIVINE_CHAMPAGNE_POPPER, "Divine Champagne Popper", 5],
  [Banishers_BanishType.ICE_HOUSE, "Ice House", -1]];


  return banishers.map(function (b) {
    var banish = new Banisher();
    banish.item = (0,external_kolmafia_.toItem)(b[1]);
    banish.turnsBanish = b[2];
    banish.type = b[0];

    return banish;
  });
}
;// CONCATENATED MODULE: ./src/utils/GreyCombat.ts









var poisonousMonsters = [
"Black Adder",
"Black Widow",
"tomb asp",
"big creepy spider",
"completely different spider",
"Stone temple pirate",
"spectral jellyfish",
"Stephen Spookyraven",
"Swarm of killer bees",
"whitesnake",
"Mayonnaise wasp",
"Dodecapede",
"Quantum Mechanic",
"Protagonist",
"ninja snowman assassin"].
map(function (s) {return external_kolmafia_.Monster.get(s);});

var flyers = external_kolmafia_.Item.get("Rockband Flyers");
var pantsgiving = external_kolmafia_.Item.get("Pantsgiving");
var cosmicBall = external_kolmafia_.Item.get("Cosmic Bowling Ball");
var GreyCombat_goose = external_kolmafia_.Familiar.get("Grey Goose");

function greyDuringFightMacro(settings) {
  var macro = new MacroBuilder/* Macro */.LE();

  var monster = (0,external_kolmafia_.lastMonster)();
  var absorb = GreyAbsorber_AbsorbsProvider.getAbsorb(monster);
  var hasAbsorbed = GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(monster);

  if (
  (0,external_kolmafia_.myFamiliar)() == external_kolmafia_.Familiar.get("Space Jellyfish") &&
  (0,external_kolmafia_.monsterElement)(monster) == external_kolmafia_.Element.get("stench"))
  {
    macro.trySkill(external_kolmafia_.Skill.get("Extract Jelly"));
  }

  // If low weight fam, but not too high. Let them try to dupe.
  if (
  (0,external_kolmafia_.myLevel)() >= 6 &&
  monster == external_kolmafia_.Monster.get("Sausage Goblin") &&
  !GreySettings_GreySettings.isHardcoreMode() &&
  (0,external_kolmafia_.familiarWeight)(GreyCombat_goose) >= 6 &&
  (0,external_kolmafia_.familiarWeight)(GreyCombat_goose) < 9)
  {
    macro = macro.trySkill(external_kolmafia_.Skill.get("Emit Matter Duplicating Drones"));
  } else if (
  absorb != null && (
  (0,external_kolmafia_.myAdventures)() > 20 && absorb.mp > 0 || absorb.adventures > 0) &&
  !hasAbsorbed)
  {
    if (absorb.adventures > 0) {
      macro = macro.trySkill(external_kolmafia_.Skill.get("Re-Process Matter"));
    }
  } else if (isBanishable(settings, monster)) {
    // If they have no good absorbs, or we've already absorbed them
    if (
    absorb == null ||
    hasAbsorbed != null ||
    absorb.hp == 0 &&
    absorb.mp == 0 && (
    absorb.skill == null || (0,external_kolmafia_.haveSkill)(absorb.skill)))
    {
      // If the script explicitly wanted to banish these and this isn't a non-quest
      if (
      !settings.nonquest && (
      settings.banishThese != null || settings.dontBanishThese != null))
      {
        if (
        !hasBanished((0,external_kolmafia_.myLocation)(), Banishers_BanishType.SPRING_LOADED_FRONT_BUMPER) &&
        (0,external_kolmafia_.getFuel)() >= 50)
        {
          macro.trySkill("Asdon Martin: Spring-Loaded Front Bumper");
        }

        if (
        !hasBanished((0,external_kolmafia_.myLocation)(), Banishers_BanishType.BOWL_A_CURVEBALL) &&
        (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Cosmic bowling ball")) > 0)
        {
          macro.trySkill("Bowl a Curveball");
        }
      }

      if (
      !hasBanished((0,external_kolmafia_.myLocation)(), Banishers_BanishType.SYSTEM_SWEEP) &&
      (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("System Sweep")) &&
      (0,external_kolmafia_.getMonsters)((0,external_kolmafia_.myLocation)()).includes(monster))
      {
        // We want to banish always on quests, but not on non-quests which we're likely to be wasting a banish in
        var wastedBanish =
        settings.nonquest &&
        Banishers_getBanished().filter(
        function (b) {return (
            b.banisher.type == Banishers_BanishType.SYSTEM_SWEEP &&
            b.turnBanished + 1 >= (0,external_kolmafia_.myTurncount)());}).
        length > 0;

        // If we're using crystal ball on a non-quest and we're only aiming to hit one banish
        if (
        !wastedBanish &&
        settings.nonquest &&
        (0,external_kolmafia_.equippedAmount)(external_kolmafia_.Item.get("miniature crystal ball")) > 0 &&
        settings.dontBanishThese != null &&
        settings.dontBanishThese.length == 1)
        {
          // If our next monster is a monster we're aiming to hit.
          var nextMonster = currentPredictions().get((0,external_kolmafia_.myLocation)());

          // If our next predicted combat is against a monster we specifically don't want to banish.
          wastedBanish =
          nextMonster != null && !isBanishable(settings, nextMonster);
        }

        if (!wastedBanish) {
          // If we do want to banish something..
          macro.trySkill(external_kolmafia_.Skill.get("System Sweep"));
        }
      }
    }
  }

  if (
  /*toInt(getProperty("flyeredML")) <= 10000 && */monster.baseHp < 300 &&
  (0,external_kolmafia_.expectedDamage)(monster) < Math.min(200, (0,external_kolmafia_.myHp)() * 0.9) &&
  !monster.attributes.includes("FREE") &&
  !poisonousMonsters.includes(monster) &&
  (0,external_kolmafia_.itemAmount)(flyers) > 0)
  {
    macro.tryItem(flyers);
  }

  if ((0,external_kolmafia_.equippedAmount)(pantsgiving) > 0) {
    macro.trySkill(external_kolmafia_.Skill.get("Pocket Crumbs"));
  }

  if (
  (0,external_kolmafia_.myHp)() > monster.baseAttack * 2 &&
  Math.max(monster.baseAttack, monster.baseHp) * 1.1 <
  (0,external_kolmafia_.myBasestat)(external_kolmafia_.Stat.get("Moxie")) &&
  (0,external_kolmafia_.getProperty)("boomBoxSong") == "Total Eclipse of Your Meat")
  {
    // Always try to sing along if the mob is weak enough
    macro.trySkill(external_kolmafia_.Skill.get("Sing Along"));
  }

  return macro;
}

function isBanishable(
settings,
monster)
{
  if (settings.banishThese == null && settings.dontBanishThese == null) {
    return false;
  }

  if (settings.banishThese != null) {
    return settings.banishThese.includes(monster);
  } else if (!settings.dontBanishThese.includes(monster) && !monster.boss) {
    var loc = (0,external_kolmafia_.myLocation)();
    var rates = (0,external_kolmafia_.appearanceRates)(loc);

    if (rates[monster.name] > 5) {
      return true;
    }
  }

  return false;
}
var toRemove = [
"Really Quite Poisoned",
"Majorly Poisoned",
"Somewhat Poisoned",
"A Little Bit Poisoned",
"Hardly Poisoned at All"].
map(function (s) {return external_kolmafia_.Effect.get(s);});
var antidote = external_kolmafia_.Item.get("anti-anti-antidote");
var cape = external_kolmafia_.Item.get("Unwrapped knock-off retro superhero cape");
var beehive = external_kolmafia_.Item.get("Beehive");

function greyKillingBlow(outfit) {
  var macro = new MacroBuilder/* Macro */.LE();
  var healthPerc = Math.min(Math.floor((0,external_kolmafia_.myHp)() / (0,external_kolmafia_.myMaxhp)() * 100) - 5, 30);

  if (toRemove.find(function (e) {return (0,external_kolmafia_.haveEffect)(e) > 0;}) && (0,external_kolmafia_.itemAmount)(antidote) > 0) {
    (0,external_kolmafia_.use)(antidote);
  }

  if (
  (0,external_kolmafia_.myMeat)() < 500 &&
  (0,external_kolmafia_.getProperty)("hasMaydayContract") == "true" &&
  (0,external_kolmafia_.getProperty)("_maydayDropped") == "false")
  {
    macro = macro.attack().repeat();
  }

  if ((0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Temporary Amnesia")) == 0) {
    if (
    (0,external_kolmafia_.getProperty)("retroCapeSuperhero") == "vampire" &&
    (0,external_kolmafia_.getProperty)("retroCapeWashingInstructions") == "kill" &&
    (0,external_kolmafia_.equippedAmount)(cape) > 0 && (
    (0,external_kolmafia_.currentRound)() == 0 || (0,external_kolmafia_.lastMonster)().phylum == external_kolmafia_.Phylum.get("undead")))
    {
      macro = macro.trySkillRepeat("Slay the dead");
    }

    if (
    ((0,external_kolmafia_.lastMonster)().baseHp < 2 || (0,external_kolmafia_.lastMonster)().physicalResistance < 70) &&
    (0,external_kolmafia_.myMp)() >= 20)
    {
      var nano = external_kolmafia_.Skill.get("Double Nanovision");
      var loop = external_kolmafia_.Skill.get("Infinite Loop");
      var attackSkill = null;

      if ((0,external_kolmafia_.haveSkill)(nano) && (outfit.itemDropWeight >= 2 || (0,external_kolmafia_.myLevel)() > 18)) {
        attackSkill = nano;
      }

      if ((0,external_kolmafia_.haveSkill)(loop)) {
        // If we're underleveled or don't intend to use nanovision
        if ((0,external_kolmafia_.myLevel)() <= 10 || attackSkill == null) {
          attackSkill = loop;
        } else if (
        // If we failed to stay underleveled for hippies, or don't need to stay underleveled
        (0,external_kolmafia_.myLevel)() >= 12 ||
        !GreySettings_GreySettings.isHippyMode() ||
        (0,external_kolmafia_.haveOutfit)("Filthy Hippy Disguise") ||
        (0,external_kolmafia_.haveOutfit)("Frat Warrior Fatigues"))
        {
          attackSkill = loop;
        }
      } else if ((0,external_kolmafia_.haveSkill)(nano)) {
        attackSkill = nano;
      }

      if (attackSkill != null) {
        macro.trySkill(attackSkill);

        macro.while_("!pastround 15 && !hppercentbelow ".concat(
        healthPerc, " && hasskill ").concat(attackSkill.name),
        MacroBuilder/* Macro.skill */.LE.skill(attackSkill));

      }
    }
  }

  if ((0,external_kolmafia_.itemAmount)(beehive) > 0) {
    macro.if_("!pastround 15 && !hppercentbelow ".concat(
    healthPerc),
    MacroBuilder/* Macro.tryItem */.LE.tryItem(beehive));

  }

  if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cosmicBowlingBallReturnCombats")) <= 1) {
    macro.tryItem(cosmicBall);
  }

  macro.while_("!pastround 15 && !hppercentbelow ".concat(
  healthPerc),
  MacroBuilder/* Macro.attack */.LE.attack());

  macro.abort();

  return macro;
}
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertExplore.ts
function QuestL11DesertExplore_typeof(obj) {"@babel/helpers - typeof";return QuestL11DesertExplore_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11DesertExplore_typeof(obj);}function QuestL11DesertExplore_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertExplore_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11DesertExplore_toPropertyKey(descriptor.key), descriptor);}}function QuestL11DesertExplore_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertExplore_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertExplore_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertExplore_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11DesertExplore_setPrototypeOf(subClass, superClass);}function QuestL11DesertExplore_setPrototypeOf(o, p) {QuestL11DesertExplore_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11DesertExplore_setPrototypeOf(o, p);}function QuestL11DesertExplore_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11DesertExplore_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11DesertExplore_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11DesertExplore_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11DesertExplore_possibleConstructorReturn(this, result);};}function QuestL11DesertExplore_possibleConstructorReturn(self, call) {if (call && (QuestL11DesertExplore_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11DesertExplore_assertThisInitialized(self);}function QuestL11DesertExplore_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11DesertExplore_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11DesertExplore_getPrototypeOf(o) {QuestL11DesertExplore_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11DesertExplore_getPrototypeOf(o);}function QuestL11DesertExplore_defineProperty(obj, key, value) {key = QuestL11DesertExplore_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11DesertExplore_toPropertyKey(arg) {var key = QuestL11DesertExplore_toPrimitive(arg, "string");return QuestL11DesertExplore_typeof(key) === "symbol" ? key : String(key);}function QuestL11DesertExplore_toPrimitive(input, hint) {if (QuestL11DesertExplore_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11DesertExplore_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}













var QuestL11DesertExplore = /*#__PURE__*/function (_TaskInfo) {QuestL11DesertExplore_inherits(QuestL11DesertExplore, _TaskInfo);var _super = QuestL11DesertExplore_createSuper(QuestL11DesertExplore);function QuestL11DesertExplore() {var _this;QuestL11DesertExplore_classCallCheck(this, QuestL11DesertExplore);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "hydrated",
    external_kolmafia_.Effect.get("Ultrahydrated"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "oasis",
    external_kolmafia_.Location.get("Oasis"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "desert",
    external_kolmafia_.Location.get("The Arid, Extra-Dry Desert"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "compass",
    external_kolmafia_.Item.get("UV-resistant compass"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "knife",
    external_kolmafia_.Item.get("survival knife"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "toAbsorb", void 0);QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "camel",

    external_kolmafia_.Familiar.get("Melodramedary"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "ball",
    external_kolmafia_.Item.get("miniature crystal ball"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "page",
    external_kolmafia_.Item.get("worm-riding manual page"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "rose",
    external_kolmafia_.Item.get("Stone Rose"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "lefthand",
    external_kolmafia_.Familiar.get("Left-Hand Man"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "extingusherProp",
    "fireExtinguisherDesertUsed");QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "kramco",
    external_kolmafia_.Item.get("Kramco Sausage-o-Matic&trade;"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "paths",
    []);QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "curse1",
    external_kolmafia_.Effect.get("Once-Cursed"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "curse2",
    external_kolmafia_.Effect.get("Twice-Cursed"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "curse3",
    external_kolmafia_.Effect.get("Thrice-Cursed"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "blur",
    external_kolmafia_.Monster.get("Blur"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "hooks",
    external_kolmafia_.Item.get("worm-riding hooks"));QuestL11DesertExplore_defineProperty(QuestL11DesertExplore_assertThisInitialized(_this), "stillsuit",
    external_kolmafia_.Item.get("tiny stillsuit"));return _this;}QuestL11DesertExplore_createClass(QuestL11DesertExplore, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];
      // Shitty math
      var turnsLeft = (assumeUnstarted ? 100 : this.getExploredRemaining()) / 5;

      var withoutExtingusher = new PossiblePath(turnsLeft);
      this.paths.push(withoutExtingusher);

      if (assumeUnstarted || (0,external_kolmafia_.getProperty)(this.extingusherProp) != "true") {
        var withExtingusher = new PossiblePath(turnsLeft - 3).add(
        ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE);


        this.paths.push(withExtingusher);
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Explore";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeRose", value:

    function wantsGnomeRose() {
      return (this.getGnome() & 1) != 1;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if ((0,external_kolmafia_.haveEffect)(this.hydrated) == 0 || this.getExploredRemaining() <= 0) {
        return false;
      }

      if ((0,external_kolmafia_.availableAmount)(this.hooks) > 0) {
        return false;
      }

      if (
      this.toAbsorb.length == 0 &&
      canGreyAdventure(this.oasis) &&
      (0,external_kolmafia_.getProperty)("_gnasirAvailable") == "true" &&
      this.wantsGnomeRose() &&
      (0,external_kolmafia_.availableAmount)(this.rose) == 0 && (
      (0,external_kolmafia_.familiarWeight)(this.goose) >= 6 ||
      GreyAbsorber_AbsorbsProvider.getAbsorbedMonsters().includes(this.blur)))
      {
        return false;
      }

      return true;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (
      !(0,external_kolmafia_.haveFamiliar)(this.camel) && (0,external_kolmafia_.availableAmount)(this.compass) == 0 ||
      !(0,external_kolmafia_.haveSkill)(this.nanovision))
      {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Tenuous Grip on Reality")) ||
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Barking Dogs")))
      {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.haveEffect)(this.hydrated) == 0 &&
      (0,external_kolmafia_.haveEffect)(this.curse1) +
      (0,external_kolmafia_.haveEffect)(this.curse2) +
      (0,external_kolmafia_.haveEffect)(this.curse3) >
      0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.haveEffect)(this.hydrated) == 0 && (0,external_kolmafia_.familiarWeight)(this.goose) < 6) {
        return QuestStatus.FASTER_LATER;
      }

      if (
      getQuestStatus("questM20Necklace") < 4 &&
      this.getExplored() > 40 &&
      (0,external_kolmafia_.haveEffect)(this.hydrated) == 0)
      {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_.myAdventures)() < 70) {
        //|| !haveEffect(this.hydrated)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var pred = currentPredictions().get(this.desert);
      var fireExtingusherResource =
      (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("_gnasirAvailable")) &&
      (0,external_kolmafia_.familiarWeight)(this.goose) >= 6 ?
      path.getResource(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE) :
      null;

      if (
      fireExtingusherResource == null && (
      pred == null || !this.toAbsorb.includes(pred)))
      {
        if (
        canGreyAdventure(this.oasis) &&
        (0,external_kolmafia_.haveEffect)(this.hydrated) == 0 &&
        this.getExploredRemaining() > 3)
        {
          return {
            location: this.desert,
            outfit: GreyOutfit.IGNORE_OUTFIT,
            run: function run() {
              greyAdv(_this2.oasis);
            }
          };
        }
      }

      var outfit = new GreyOutfit();
      outfit.addWeight(this.compass); // Compass
      outfit.addWeight(this.knife);

      if (fireExtingusherResource != null) {
        fireExtingusherResource.prepare(outfit);
      }

      if (this.toAbsorb.length > 0) {
        outfit.addIgnored(this.kramco);
      }

      var crystalBall = currentPredictions();
      var fam = (0,external_kolmafia_.haveFamiliar)(this.camel) ? this.camel : null;
      var forceFam = fam != null && this.toAbsorb.length == 0;
      var predictAbsorb = this.toAbsorb.includes(crystalBall.get(this.desert));

      if (fam != null) {
        if (!crystalBall.has(this.desert) || !predictAbsorb) {
          forceFam = true;
        }

        if (this.getExplored() < 10) {
          forceFam = true;
        }
      }

      return {
        outfit: outfit,
        location: this.desert,
        familiar: fam,
        disableFamOverride: forceFam,
        run: function run() {
          var killing = MacroBuilder/* Macro.if_ */.LE.if_(
          external_kolmafia_.Effect.get("Tenuous Grip on Reality"),
          MacroBuilder/* Macro.attack */.LE.attack().repeat()).
          step(greyKillingBlow(outfit));

          // If we're looking for an absorb, have the crystal ball and have the camel and explored is >= 10
          if (
          _this2.toAbsorb.length > 0 &&
          (0,external_kolmafia_.availableAmount)(_this2.ball) > 0 &&
          fam != null)
          {
            // If we have a prediction
            if (crystalBall.has(_this2.desert)) {
              // If we predict an absorb
              if (predictAbsorb) {
                // If we are still doing the first 10 explores
                if (_this2.getExplored() < 10) {
                  // We don't want to wear the ball, we'll do that when we do the absorb
                  if ((0,external_kolmafia_.availableAmount)(_this2.stillsuit) > 0) {
                    (0,external_kolmafia_.cliExecute)("equip " + _this2.stillsuit);
                  } else {
                    (0,external_kolmafia_.equip)(external_kolmafia_.Slot.get("familiar"), external_kolmafia_.Item.none);

                    (0,external_kolmafia_.maximize)("familiar -equip " + _this2.ball, false);
                  }
                } else if (
                (0,external_kolmafia_.equippedAmount)(_this2.ball) == 0 &&
                (0,external_kolmafia_.familiarWeight)(_this2.goose) >= 6)
                {
                  (0,external_kolmafia_.equip)(_this2.ball);
                }
              } else {
                // Force them to wear the ball to change our prediction
                (0,external_kolmafia_.equip)(_this2.ball);
              }
            } else {
              // Force the ball to be worn to make a prediction
              (0,external_kolmafia_.equip)(_this2.ball);
            }
          }

          if (fireExtingusherResource != null) {
            var macro = fireExtingusherResource.macro();

            if ((0,external_kolmafia_.myFamiliar)() == _this2.goose && _this2.toAbsorb.length > 0) {
              macro = MacroBuilder/* Macro.ifNot_ */.LE.ifNot_(_this2.toAbsorb[0], macro);
            }

            killing = macro.step(killing);
          } else if (
          _this2.toAbsorb.length == 0 &&
          DelayBurners.isDelayBurnerReady())
          {
            DelayBurners.tryReplaceCombats(3);

            // If the compass is not equipped, and we don't own camel, but we do own left-hand man.
            // Then it's worth it.
            if (
            (0,external_kolmafia_.itemAmount)(_this2.compass) > 0 &&
            (0,external_kolmafia_.equippedAmount)(_this2.compass) == 0 &&
            (0,external_kolmafia_.haveFamiliar)(_this2.lefthand) &&
            (0,external_kolmafia_.myFamiliar)() != _this2.camel)
            {
              (0,external_kolmafia_.useFamiliar)(_this2.lefthand);
              (0,external_kolmafia_.equip)(_this2.compass, external_kolmafia_.Slot.get("familiar"));
            }
          }

          var explored = _this2.getExplored();
          var props = new Properties_PropertyManager();
          props.setChoice(805, 1);

          try {
            greyAdv(
            _this2.desert,
            outfit,
            new AdventureSettings().setFinishingBlowMacro(killing));

          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_.getProperty)("lastEncounter") == "A Sietch in Time") {
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=desertbeach", false);
          } else if (explored == _this2.getExplored()) {
            (0,external_kolmafia_.print)("Checking explored..", "blue");
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=desertbeach", false);
          } else if (
          explored >= 10 &&
          ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress")) & 8) != 8)
          {
            (0,external_kolmafia_.print)("Worm Pages: " + (0,external_kolmafia_.availableAmount)(_this2.page) + " / 15", "blue");
          }
          (0,external_kolmafia_.print)("Desert Explored: " + _this2.getExplored() + " / 100", "blue");
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.desert];
    } }, { key: "getExplored", value:

    function getExplored() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("desertExploration"));
    } }, { key: "getExploredRemaining", value:

    function getExploredRemaining() {
      return 100 - this.getExplored();
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11DesertExplore;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertGnome.ts
function QuestL11DesertGnome_typeof(obj) {"@babel/helpers - typeof";return QuestL11DesertGnome_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11DesertGnome_typeof(obj);}function QuestL11DesertGnome_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertGnome_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11DesertGnome_toPropertyKey(descriptor.key), descriptor);}}function QuestL11DesertGnome_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertGnome_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertGnome_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertGnome_defineProperty(obj, key, value) {key = QuestL11DesertGnome_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11DesertGnome_toPropertyKey(arg) {var key = QuestL11DesertGnome_toPrimitive(arg, "string");return QuestL11DesertGnome_typeof(key) === "symbol" ? key : String(key);}function QuestL11DesertGnome_toPrimitive(input, hint) {if (QuestL11DesertGnome_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11DesertGnome_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestL11DesertGnome = /*#__PURE__*/function () {function QuestL11DesertGnome() {QuestL11DesertGnome_classCallCheck(this, QuestL11DesertGnome);QuestL11DesertGnome_defineProperty(this, "availableProp",
    "_gnasirAvailable");QuestL11DesertGnome_defineProperty(this, "hooks",
    external_kolmafia_.Item.get("worm-riding hooks"));QuestL11DesertGnome_defineProperty(this, "drum",
    external_kolmafia_.Item.get("Drum Machine"));QuestL11DesertGnome_defineProperty(this, "killingJar",
    external_kolmafia_.Item.get("Killing Jar"));QuestL11DesertGnome_defineProperty(this, "rose",
    external_kolmafia_.Item.get("Stone Rose"));}QuestL11DesertGnome_createClass(QuestL11DesertGnome, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Gnome";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      // Can gnome be turned in
      if (!this.isAvailable()) {
        return QuestStatus.NOT_READY;
      }

      if (this.wantsGnomeKillingJar() && (0,external_kolmafia_.availableAmount)(this.killingJar) > 0) {
        return QuestStatus.READY;
      }

      if (this.wantsGnomePaint() && (0,external_kolmafia_.myMeat)() > 1000) {
        return QuestStatus.READY;
      }

      if (this.wantsGnomeRose() && (0,external_kolmafia_.availableAmount)(this.rose) > 0) {
        return QuestStatus.READY;
      }

      if (this.wantsWormPages() && !this.needsMorePages()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "run", value:

    function run() {var _this = this;
      if (this.wantsGnomePaint() && (0,external_kolmafia_.myMeat)() >= 1000) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            var paint = external_kolmafia_.Item.get("Can of black paint");

            if ((0,external_kolmafia_.itemAmount)(paint) == 0) {
              (0,external_kolmafia_.retrieveItem)(paint);
            }

            (0,external_kolmafia_.print)("Giving gnome their black paint");
            _this.turnInItem();
          }
        };
      }

      if (this.wantsGnomeKillingJar() && (0,external_kolmafia_.availableAmount)(this.killingJar) > 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.print)("Giving gnome their killing jar");

            _this.turnInItem();
          }
        };
      }

      if (this.wantsWormPages() && !this.needsMorePages()) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.print)("Giving gnome their pages");
            _this.turnInItem();
          }
        };
      }

      if (this.wantsGnomeRose() && (0,external_kolmafia_.availableAmount)(this.rose) > 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.print)("Giving gnome their rose");
            _this.turnInItem();
          }
        };
      }

      return {
        location: null,
        run: function run() {
          throw "Not sure why we got to this state";
        }
      };
    } }, { key: "turnInItem", value:

    function turnInItem() {
      var gnome = this.getGnome();

      (0,external_kolmafia_.visitUrl)("place.php?whichplace=desertbeach&action=db_gnasir");
      (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=805&option=1&pwd=");
      (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=805&option=2&pwd=");
      (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=805&option=1&pwd=");

      var item = external_kolmafia_.Item.get("desert sightseeing pamphlet");

      if ((0,external_kolmafia_.availableAmount)(item) > 0) {
        (0,external_kolmafia_.use)(item, (0,external_kolmafia_.availableAmount)(item));
      }

      if (gnome == this.getGnome()) {
        throw "Failed to progress gnome";
      }
    } }, { key: "needsMorePages", value:

    function needsMorePages() {
      return (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("Worm-Riding Manual Page")) < 15;
    } }, { key: "isAvailable", value:

    function isAvailable() {
      if ((0,external_kolmafia_.getProperty)("gnasirProgress") != "0") {
        return true;
      }

      if ((0,external_kolmafia_.getProperty)("lastEncounter") == "A Sietch in Time") {
        (0,external_kolmafia_.setProperty)(this.availableProp, "true");
      }

      if ((0,external_kolmafia_.getProperty)(this.availableProp) == "true") {
        return true;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("desertExploration")) <= 10) {
        return false;
      }

      var page = (0,external_kolmafia_.visitUrl)("place.php?whichplace=desertbeach");

      if (!page.includes("place.php?whichplace=desertbeach&action=db_gnasir")) {
        return false;
      }

      (0,external_kolmafia_.setProperty)(this.availableProp, "true");
      return true;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeRose", value:

    function wantsGnomeRose() {
      return (this.getGnome() & 1) != 1;
    } }, { key: "wantsGnomePaint", value:

    function wantsGnomePaint() {
      return (this.getGnome() & 2) != 2;
    } }, { key: "wantsGnomeKillingJar", value:

    function wantsGnomeKillingJar() {
      return (this.getGnome() & 4) != 4;
    } }, { key: "wantsWormPages", value:

    function wantsWormPages() {
      return (this.getGnome() & 8) != 8;
    } }, { key: "wantsToWormRide", value:

    function wantsToWormRide() {
      return (this.getGnome() & 16) != 16;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11DesertGnome;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertStoneRose.ts
function QuestL11DesertStoneRose_typeof(obj) {"@babel/helpers - typeof";return QuestL11DesertStoneRose_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11DesertStoneRose_typeof(obj);}function QuestL11DesertStoneRose_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertStoneRose_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11DesertStoneRose_toPropertyKey(descriptor.key), descriptor);}}function QuestL11DesertStoneRose_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertStoneRose_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertStoneRose_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertStoneRose_defineProperty(obj, key, value) {key = QuestL11DesertStoneRose_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11DesertStoneRose_toPropertyKey(arg) {var key = QuestL11DesertStoneRose_toPrimitive(arg, "string");return QuestL11DesertStoneRose_typeof(key) === "symbol" ? key : String(key);}function QuestL11DesertStoneRose_toPrimitive(input, hint) {if (QuestL11DesertStoneRose_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11DesertStoneRose_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11DesertStoneRose = /*#__PURE__*/function () {function QuestL11DesertStoneRose() {QuestL11DesertStoneRose_classCallCheck(this, QuestL11DesertStoneRose);QuestL11DesertStoneRose_defineProperty(this, "hydrated",
    external_kolmafia_.Effect.get("Ultrahydrated"));QuestL11DesertStoneRose_defineProperty(this, "oasis",
    external_kolmafia_.Location.get("Oasis"));QuestL11DesertStoneRose_defineProperty(this, "rose",
    external_kolmafia_.Item.get("Stone Rose"));QuestL11DesertStoneRose_defineProperty(this, "blur",
    external_kolmafia_.Monster.get("Blur"));QuestL11DesertStoneRose_defineProperty(this, "toAbsorb", void 0);QuestL11DesertStoneRose_defineProperty(this, "fam",

    external_kolmafia_.Familiar.get("Grey Goose"));QuestL11DesertStoneRose_defineProperty(this, "swarm",
    external_kolmafia_.Monster.get("Swarm of fire ants"));QuestL11DesertStoneRose_defineProperty(this, "curse1",
    external_kolmafia_.Effect.get("Once-Cursed"));QuestL11DesertStoneRose_defineProperty(this, "curse2",
    external_kolmafia_.Effect.get("Twice-Cursed"));QuestL11DesertStoneRose_defineProperty(this, "curse3",
    external_kolmafia_.Effect.get("Thrice-Cursed"));}QuestL11DesertStoneRose_createClass(QuestL11DesertStoneRose, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / StoneRose";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!this.wantsGnomeRose() || (0,external_kolmafia_.availableAmount)(this.rose) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.haveEffect)(this.hydrated) == 0 &&
      (0,external_kolmafia_.haveEffect)(this.curse1) +
      (0,external_kolmafia_.haveEffect)(this.curse2) +
      (0,external_kolmafia_.haveEffect)(this.curse3) >
      0)
      {
        return QuestStatus.NOT_READY;
      }

      if (status < 0 || !canGreyAdventure(this.oasis)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("_gnasirAvailable") != "true") {
        return QuestStatus.NOT_READY;
      }

      if (!GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.swarm)) {
        return QuestStatus.NOT_READY;
      }

      if (this.toAbsorb.length > 0) {
        if ((0,external_kolmafia_.familiarWeight)(this.fam) < 6) {
          return QuestStatus.NOT_READY;
        }
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: this.oasis,
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return monster != _this.blur;},
        run: function run() {
          var settings = new AdventureSettings();

          if (!(0,external_kolmafia_.absorbedMonsters)()[_this.blur.name]) {
            settings.addNoBanish(_this.blur);
          }

          greyAdv(_this.oasis, null, settings);
        }
      };
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeRose", value:

    function wantsGnomeRose() {
      return (this.getGnome() & 1) != 1;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.oasis];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_.haveEffect)(this.hydrated) > 0;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11DesertStoneRose;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/desert/QuestL11DesertWormRide.ts
function QuestL11DesertWormRide_typeof(obj) {"@babel/helpers - typeof";return QuestL11DesertWormRide_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11DesertWormRide_typeof(obj);}function QuestL11DesertWormRide_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11DesertWormRide_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11DesertWormRide_toPropertyKey(descriptor.key), descriptor);}}function QuestL11DesertWormRide_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11DesertWormRide_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11DesertWormRide_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11DesertWormRide_defineProperty(obj, key, value) {key = QuestL11DesertWormRide_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11DesertWormRide_toPropertyKey(arg) {var key = QuestL11DesertWormRide_toPrimitive(arg, "string");return QuestL11DesertWormRide_typeof(key) === "symbol" ? key : String(key);}function QuestL11DesertWormRide_toPrimitive(input, hint) {if (QuestL11DesertWormRide_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11DesertWormRide_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11DesertWormRide = /*#__PURE__*/function () {function QuestL11DesertWormRide() {QuestL11DesertWormRide_classCallCheck(this, QuestL11DesertWormRide);QuestL11DesertWormRide_defineProperty(this, "hooks",
    external_kolmafia_.Item.get("worm-riding hooks"));QuestL11DesertWormRide_defineProperty(this, "drum",
    external_kolmafia_.Item.get("Drum Machine"));QuestL11DesertWormRide_defineProperty(this, "oasis",
    external_kolmafia_.Location.get("Oasis"));QuestL11DesertWormRide_defineProperty(this, "toAbsorb", void 0);QuestL11DesertWormRide_defineProperty(this, "fam",

    external_kolmafia_.Familiar.get("Grey Goose"));QuestL11DesertWormRide_defineProperty(this, "curse1",
    external_kolmafia_.Effect.get("Once-Cursed"));QuestL11DesertWormRide_defineProperty(this, "curse2",
    external_kolmafia_.Effect.get("Twice-Cursed"));QuestL11DesertWormRide_defineProperty(this, "curse3",
    external_kolmafia_.Effect.get("Thrice-Cursed"));QuestL11DesertWormRide_defineProperty(this, "hydrated",
    external_kolmafia_.Effect.get("Ultrahydrated"));QuestL11DesertWormRide_defineProperty(this, "blur",
    external_kolmafia_.Monster.get("Blur"));}QuestL11DesertWormRide_createClass(QuestL11DesertWormRide, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / WormRide";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Desert");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0 || !this.wantsToWormRide()) {
        return QuestStatus.COMPLETED;
      }

      if (this.toAbsorb.length > 0 && (0,external_kolmafia_.availableAmount)(this.hooks) == 0) {
        if ((0,external_kolmafia_.familiarWeight)(this.fam) < 6) {
          return QuestStatus.NOT_READY;
        }

        if (status > 0) {
          return QuestStatus.READY;
        }
      }

      if ((0,external_kolmafia_.availableAmount)(this.hooks) == 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.drum) == 0) {
        if (
        (0,external_kolmafia_.haveEffect)(this.hydrated) == 0 &&
        (0,external_kolmafia_.haveEffect)(this.curse1) +
        (0,external_kolmafia_.haveEffect)(this.curse2) +
        (0,external_kolmafia_.haveEffect)(this.curse3) >
        0)
        {
          return QuestStatus.NOT_READY;
        }

        if (this.getExploredRemaining() < 6) {
          return QuestStatus.NOT_READY;
        }
      }

      return QuestStatus.READY;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress"));
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      var pred = currentPredictions();

      return !pred.has(this.oasis) || pred.get(this.oasis) == this.blur;
    } }, { key: "free", value:

    function free() {
      return (0,external_kolmafia_.availableAmount)(this.drum) > 0 && (0,external_kolmafia_.availableAmount)(this.hooks) > 0;
    } }, { key: "wantsToWormRide", value:

    function wantsToWormRide() {
      return (this.getGnome() & 16) != 16;
    } }, { key: "run", value:

    function run() {var _this = this;
      if ((0,external_kolmafia_.availableAmount)(this.drum) == 0) {
        var outfit = new GreyOutfit();
        outfit.setItemDrops();

        return {
          outfit: outfit,
          location: this.oasis,
          orbs: [this.blur],
          run: function run() {
            greyAdv(_this.oasis, outfit);
          }
        };
      }

      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.equip)(_this.hooks);
          (0,external_kolmafia_.use)(_this.drum);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.oasis];
    } }, { key: "getExplored", value:

    function getExplored() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("desertExploration"));
    } }, { key: "getExploredRemaining", value:

    function getExploredRemaining() {
      return 100 - this.getExplored();
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11DesertWormRide;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Desert.ts
function QuestL11Desert_typeof(obj) {"@babel/helpers - typeof";return QuestL11Desert_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Desert_typeof(obj);}function QuestL11Desert_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Desert_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Desert_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Desert_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Desert_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Desert_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Desert_defineProperty(obj, key, value) {key = QuestL11Desert_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Desert_toPropertyKey(arg) {var key = QuestL11Desert_toPrimitive(arg, "string");return QuestL11Desert_typeof(key) === "symbol" ? key : String(key);}function QuestL11Desert_toPrimitive(input, hint) {if (QuestL11Desert_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Desert_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL11Desert = /*#__PURE__*/function () {


  function QuestL11Desert() {QuestL11Desert_classCallCheck(this, QuestL11Desert);QuestL11Desert_defineProperty(this, "children", []);
    this.children.push(new QuestL11DesertCompass());
    this.children.push(new QuestL11DesertExplore());
    this.children.push(new QuestL11DesertGnome());
    this.children.push(new QuestL11DesertStoneRose());
    this.children.push(new QuestL11DesertWormRide());
  }QuestL11Desert_createClass(QuestL11Desert, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Desert / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11Desert;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorBomb.ts
function QuestL11ManorBomb_typeof(obj) {"@babel/helpers - typeof";return QuestL11ManorBomb_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ManorBomb_typeof(obj);}function QuestL11ManorBomb_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorBomb_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ManorBomb_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ManorBomb_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorBomb_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorBomb_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorBomb_defineProperty(obj, key, value) {key = QuestL11ManorBomb_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ManorBomb_toPropertyKey(arg) {var key = QuestL11ManorBomb_toPrimitive(arg, "string");return QuestL11ManorBomb_typeof(key) === "symbol" ? key : String(key);}function QuestL11ManorBomb_toPrimitive(input, hint) {if (QuestL11ManorBomb_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ManorBomb_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11ManorBomb = /*#__PURE__*/function () {function QuestL11ManorBomb() {QuestL11ManorBomb_classCallCheck(this, QuestL11ManorBomb);QuestL11ManorBomb_defineProperty(this, "soda",
    external_kolmafia_.Item.get("blasting soda"));QuestL11ManorBomb_defineProperty(this, "wine",
    external_kolmafia_.Item.get("bottle of Chateau de Vinegar"));QuestL11ManorBomb_defineProperty(this, "unstable",
    external_kolmafia_.Item.get("unstable fulminate"));QuestL11ManorBomb_defineProperty(this, "bomb",
    external_kolmafia_.Item.get("Wine Bomb"));QuestL11ManorBomb_defineProperty(this, "boiler",
    external_kolmafia_.Location.get("The Haunted Boiler Room"));QuestL11ManorBomb_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("Monstrous boiler"));}QuestL11ManorBomb_createClass(QuestL11ManorBomb, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Bomb";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.unstable) == 0 && (
      (0,external_kolmafia_.availableAmount)(this.soda) == 0 || (0,external_kolmafia_.availableAmount)(this.wine) == 0))
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      if ((0,external_kolmafia_.availableAmount)(this.unstable) == 0) {
        return {
          location: null,
          run: function run() {
            (0,external_kolmafia_.cliExecute)("create Unstable Fulminate");

            if ((0,external_kolmafia_.availableAmount)(_this.unstable) == 0) {
              throw "Expected to have created " + _this.unstable + " but failed";
            }
          }
        };
      }

      var outfit = new GreyOutfit().addWeight(this.unstable);
      outfit.addWeight("ML", 5, null, 81);
      //outfit.plusMonsterLevelWeight = 5;

      return {
        location: this.boiler,
        outfit: outfit,
        orbs: [this.monster],
        run: function run() {
          var settings = new AdventureSettings();
          settings.addNoBanish(_this.monster);

          greyAdv(_this.boiler, outfit, settings);

          if ((0,external_kolmafia_.itemAmount)(_this.unstable) == 0) {
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=manor4&action=manor4_chamberwall");
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.boiler];
    } }]);return QuestL11ManorBomb;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorBoss.ts
function QuestL11ManorBoss_typeof(obj) {"@babel/helpers - typeof";return QuestL11ManorBoss_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ManorBoss_typeof(obj);}function QuestL11ManorBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ManorBoss_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ManorBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorBoss_defineProperty(obj, key, value) {key = QuestL11ManorBoss_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ManorBoss_toPropertyKey(arg) {var key = QuestL11ManorBoss_toPrimitive(arg, "string");return QuestL11ManorBoss_typeof(key) === "symbol" ? key : String(key);}function QuestL11ManorBoss_toPrimitive(input, hint) {if (QuestL11ManorBoss_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ManorBoss_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11ManorBoss = /*#__PURE__*/function () {function QuestL11ManorBoss() {QuestL11ManorBoss_classCallCheck(this, QuestL11ManorBoss);QuestL11ManorBoss_defineProperty(this, "summoning",
    external_kolmafia_.Location.get("Summoning Chamber"));}QuestL11ManorBoss_createClass(QuestL11ManorBoss, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Boss";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.summoning,
        run: function run() {
          greyAdv(
          "place.php?whichplace=manor4&action=manor4_chamberboss",
          null,
          new AdventureSettings().setStartOfFightMacro(
          MacroBuilder/* Macro.skill */.LE.skill(external_kolmafia_.Skill.get("Infinite Loop"))));


        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11ManorBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorRecipe.ts
function QuestL11ManorRecipe_typeof(obj) {"@babel/helpers - typeof";return QuestL11ManorRecipe_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ManorRecipe_typeof(obj);}function QuestL11ManorRecipe_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorRecipe_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ManorRecipe_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ManorRecipe_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorRecipe_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorRecipe_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorRecipe_defineProperty(obj, key, value) {key = QuestL11ManorRecipe_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ManorRecipe_toPropertyKey(arg) {var key = QuestL11ManorRecipe_toPrimitive(arg, "string");return QuestL11ManorRecipe_typeof(key) === "symbol" ? key : String(key);}function QuestL11ManorRecipe_toPrimitive(input, hint) {if (QuestL11ManorRecipe_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ManorRecipe_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var QuestL11ManorRecipe = /*#__PURE__*/function () {function QuestL11ManorRecipe() {QuestL11ManorRecipe_classCallCheck(this, QuestL11ManorRecipe);QuestL11ManorRecipe_defineProperty(this, "glasses",
    external_kolmafia_.Item.get("Lord Spookyraven's Spectacles"));}QuestL11ManorRecipe_createClass(QuestL11ManorRecipe, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Recipe";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.glasses) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.equip)(_this.glasses);
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=manor4&action=manor4_chamberwall");
          (0,external_kolmafia_.use)(external_kolmafia_.Item.get("recipe: mortar-dissolving solution"));
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11ManorRecipe;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorSoda.ts
function QuestL11ManorSoda_typeof(obj) {"@babel/helpers - typeof";return QuestL11ManorSoda_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ManorSoda_typeof(obj);}function QuestL11ManorSoda_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorSoda_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ManorSoda_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ManorSoda_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorSoda_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorSoda_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorSoda_defineProperty(obj, key, value) {key = QuestL11ManorSoda_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ManorSoda_toPropertyKey(arg) {var key = QuestL11ManorSoda_toPrimitive(arg, "string");return QuestL11ManorSoda_typeof(key) === "symbol" ? key : String(key);}function QuestL11ManorSoda_toPrimitive(input, hint) {if (QuestL11ManorSoda_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ManorSoda_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11ManorSoda = /*#__PURE__*/function () {function QuestL11ManorSoda() {QuestL11ManorSoda_classCallCheck(this, QuestL11ManorSoda);QuestL11ManorSoda_defineProperty(this, "soda",
    external_kolmafia_.Item.get("blasting soda"));QuestL11ManorSoda_defineProperty(this, "laundry",
    external_kolmafia_.Location.get("The Haunted Laundry Room"));QuestL11ManorSoda_defineProperty(this, "unstable",
    external_kolmafia_.Item.get("unstable fulminate"));QuestL11ManorSoda_defineProperty(this, "bomb",
    external_kolmafia_.Item.get("Wine Bomb"));QuestL11ManorSoda_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("cabinet of Dr. Limpieza"));}QuestL11ManorSoda_createClass(QuestL11ManorSoda, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Soda";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (
      status > 2 ||
      (0,external_kolmafia_.availableAmount)(this.soda) > 0 ||
      (0,external_kolmafia_.availableAmount)(this.unstable) > 0 ||
      (0,external_kolmafia_.availableAmount)(this.bomb) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setItemDrops();

      if (
      this.laundry.combatQueue.split("; ").filter(function (s) {return s == _this.monster.name;}).
      length > 1 &&
      currentPredictions().get(this.laundry) == this.monster)
      {
        outfit.setChampagneBottle();
      }

      return {
        location: this.laundry,
        outfit: outfit,
        olfaction: [this.monster],
        run: function run() {
          var settings = new AdventureSettings();
          settings.addNoBanish(_this.monster);

          greyAdv(_this.laundry, outfit, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.laundry];
    } }]);return QuestL11ManorSoda;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/manor/QuestL11ManorWine.ts
function QuestL11ManorWine_typeof(obj) {"@babel/helpers - typeof";return QuestL11ManorWine_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ManorWine_typeof(obj);}function QuestL11ManorWine_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ManorWine_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ManorWine_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ManorWine_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ManorWine_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ManorWine_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ManorWine_defineProperty(obj, key, value) {key = QuestL11ManorWine_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ManorWine_toPropertyKey(arg) {var key = QuestL11ManorWine_toPrimitive(arg, "string");return QuestL11ManorWine_typeof(key) === "symbol" ? key : String(key);}function QuestL11ManorWine_toPrimitive(input, hint) {if (QuestL11ManorWine_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ManorWine_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11ManorWine = /*#__PURE__*/function () {function QuestL11ManorWine() {QuestL11ManorWine_classCallCheck(this, QuestL11ManorWine);QuestL11ManorWine_defineProperty(this, "wine",
    external_kolmafia_.Item.get("bottle of Chateau de Vinegar"));QuestL11ManorWine_defineProperty(this, "celler",
    external_kolmafia_.Location.get("The Haunted Wine Cellar"));QuestL11ManorWine_defineProperty(this, "unstable",
    external_kolmafia_.Item.get("unstable fulminate"));QuestL11ManorWine_defineProperty(this, "bomb",
    external_kolmafia_.Item.get("Wine Bomb"));QuestL11ManorWine_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("possessed wine rack"));}QuestL11ManorWine_createClass(QuestL11ManorWine, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Wine";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (
      status > 2 ||
      (0,external_kolmafia_.availableAmount)(this.wine) > 0 ||
      (0,external_kolmafia_.availableAmount)(this.unstable) > 0 ||
      (0,external_kolmafia_.availableAmount)(this.bomb) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setItemDrops();

      if (
      this.celler.combatQueue.split("; ").filter(function (s) {return s == _this.monster.name;}).
      length > 1 &&
      currentPredictions().get(this.celler) == this.monster)
      {
        outfit.setChampagneBottle();
      }

      return {
        location: this.celler,
        outfit: outfit,
        olfaction: [this.monster],
        run: function run() {
          var settings = new AdventureSettings();
          settings.addNoBanish(_this.monster);

          greyAdv(_this.celler, outfit, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.celler];
    } }]);return QuestL11ManorWine;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Manor.ts
function QuestL11Manor_typeof(obj) {"@babel/helpers - typeof";return QuestL11Manor_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Manor_typeof(obj);}function QuestL11Manor_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Manor_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Manor_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Manor_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Manor_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Manor_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Manor_defineProperty(obj, key, value) {key = QuestL11Manor_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Manor_toPropertyKey(arg) {var key = QuestL11Manor_toPrimitive(arg, "string");return QuestL11Manor_typeof(key) === "symbol" ? key : String(key);}function QuestL11Manor_toPrimitive(input, hint) {if (QuestL11Manor_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Manor_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}













var QuestL11Manor = /*#__PURE__*/function () {



  function QuestL11Manor() {QuestL11Manor_classCallCheck(this, QuestL11Manor);QuestL11Manor_defineProperty(this, "ballroom", external_kolmafia_.Location.get("The Haunted Ballroom"));QuestL11Manor_defineProperty(this, "children", []);
    this.children.push(new QuestL11ManorBomb());
    this.children.push(new QuestL11ManorBoss());
    this.children.push(new QuestL11ManorRecipe());
    this.children.push(new QuestL11ManorSoda());
    this.children.push(new QuestL11ManorWine());
  }QuestL11Manor_createClass(QuestL11Manor, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Manor / Ballroom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.ballroom];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Manor");

      if (status < 0 || !canGreyAdventure(this.ballroom)) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.ballroom,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            props.setChoice(921, 1); // Play da music
            props.setChoice(106, 3);
            props.setChoice(90, 3);
            greyAdv(_this.ballroom, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getStatus", value:

    function getStatus() {
      return ManorStatus[(0,external_kolmafia_.getProperty)("questL11Manor")];
    } }]);return QuestL11Manor;}();var


ManorStatus;(function (ManorStatus) {ManorStatus["unstarted"] = "unstarted";ManorStatus["started"] = "started";ManorStatus["step1"] = "CELLER_OPENED";ManorStatus["step2"] = "RECIPE_ACQUIRED";ManorStatus["step3"] = "WALL_BROKEN";ManorStatus["finished"] = "finished";})(ManorStatus || (ManorStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/palin/QuestL11PalinStew.ts
function QuestL11PalinStew_typeof(obj) {"@babel/helpers - typeof";return QuestL11PalinStew_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11PalinStew_typeof(obj);}function QuestL11PalinStew_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PalinStew_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11PalinStew_toPropertyKey(descriptor.key), descriptor);}}function QuestL11PalinStew_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PalinStew_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PalinStew_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PalinStew_defineProperty(obj, key, value) {key = QuestL11PalinStew_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11PalinStew_toPropertyKey(arg) {var key = QuestL11PalinStew_toPrimitive(arg, "string");return QuestL11PalinStew_typeof(key) === "symbol" ? key : String(key);}function QuestL11PalinStew_toPrimitive(input, hint) {if (QuestL11PalinStew_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11PalinStew_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11PalinStew = /*#__PURE__*/function () {function QuestL11PalinStew() {QuestL11PalinStew_classCallCheck(this, QuestL11PalinStew);QuestL11PalinStew_defineProperty(this, "wetStew",
    external_kolmafia_.Item.get("Wet Stew"));QuestL11PalinStew_defineProperty(this, "stuntNuts",
    external_kolmafia_.Item.get("Stunt Nuts"));QuestL11PalinStew_defineProperty(this, "talisman",
    external_kolmafia_.Item.get("Talisman o' Namsilat"));QuestL11PalinStew_defineProperty(this, "stuntNutStew",
    external_kolmafia_.Item.get("Wet stunt nut stew"));QuestL11PalinStew_defineProperty(this, "rib",
    external_kolmafia_.Item.get("Bird Rib"));QuestL11PalinStew_defineProperty(this, "lionOil",
    external_kolmafia_.Item.get("lion oil"));QuestL11PalinStew_defineProperty(this, "grove",
    external_kolmafia_.Location.get("Whitey's Grove"));QuestL11PalinStew_defineProperty(this, "lion",
    external_kolmafia_.Monster.get("white lion"));QuestL11PalinStew_defineProperty(this, "snake",
    external_kolmafia_.Monster.get("whitesnake"));}QuestL11PalinStew_createClass(QuestL11PalinStew, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Palin / WetStew";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Palindome");

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (status > 4) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.stuntNuts) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setItemDrops().setPlusCombat();
      var orbs = [];

      if ((0,external_kolmafia_.availableAmount)(this.rib) == 0) {
        orbs.push(this.snake);
      }

      if ((0,external_kolmafia_.availableAmount)(this.lionOil) == 0) {
        orbs.push(this.lion);
      }

      return {
        location: this.grove,
        outfit: outfit,
        orbs: orbs,
        run: function run() {
          var settings = new AdventureSettings();
          settings.addNoBanish(_this.lion);
          settings.addNoBanish(_this.snake);

          var props = new Properties_PropertyManager();
          props.setChoice(73, 3);
          props.setChoice(74, 2);
          props.setChoice(75, 2);

          try {
            greyAdv(_this.grove, outfit, settings);
          } finally {
            props.resetAll();
          }

          if (
          (0,external_kolmafia_.availableAmount)(_this.rib) > 0 &&
          (0,external_kolmafia_.availableAmount)(_this.lionOil) > 0)
          {
            (0,external_kolmafia_.cliExecute)("create " + _this.stuntNutStew.name);
            (0,external_kolmafia_.equip)(_this.talisman);

            (0,external_kolmafia_.visitUrl)("place.php?whichplace=palindome&action=pal_mrlabel");
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.grove];
    } }]);return QuestL11PalinStew;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestTrapGhost.ts
function QuestTrapGhost_typeof(obj) {"@babel/helpers - typeof";return QuestTrapGhost_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTrapGhost_typeof(obj);}function QuestTrapGhost_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTrapGhost_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTrapGhost_toPropertyKey(descriptor.key), descriptor);}}function QuestTrapGhost_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTrapGhost_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTrapGhost_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTrapGhost_defineProperty(obj, key, value) {key = QuestTrapGhost_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTrapGhost_toPropertyKey(arg) {var key = QuestTrapGhost_toPrimitive(arg, "string");return QuestTrapGhost_typeof(key) === "symbol" ? key : String(key);}function QuestTrapGhost_toPrimitive(input, hint) {if (QuestTrapGhost_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTrapGhost_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestTrapGhost = /*#__PURE__*/function () {function QuestTrapGhost() {QuestTrapGhost_classCallCheck(this, QuestTrapGhost);QuestTrapGhost_defineProperty(this, "pack",
    external_kolmafia_.Item.get("protonic accelerator pack"));QuestTrapGhost_defineProperty(this, "sweatpants",
    external_kolmafia_.Item.get("Designer Sweatpants"));QuestTrapGhost_defineProperty(this, "gallery",
    external_kolmafia_.Location.get("The Haunted Gallery"));QuestTrapGhost_defineProperty(this, "icyPeak",
    external_kolmafia_.Location.get("The Icy Peak"));QuestTrapGhost_defineProperty(this, "palindome",
    external_kolmafia_.Location.get("Inside the Palindome"));QuestTrapGhost_defineProperty(this, "smutOrcs",
    external_kolmafia_.Location.get("The Smut Orc Logging Camp"));QuestTrapGhost_defineProperty(this, "spookyForest",
    external_kolmafia_.Location.get("The Spooky Forest"));QuestTrapGhost_defineProperty(this, "talisman",
    external_kolmafia_.Item.get("Talisman o' Namsilat"));QuestTrapGhost_defineProperty(this, "hasColdRes", void 0);QuestTrapGhost_defineProperty(this, "lastColdResCheck", void 0);}QuestTrapGhost_createClass(QuestTrapGhost, [{ key: "getId", value:



    function getId() {
      return "Misc / Ghost Buster";
    } }, { key: "level", value:

    function level() {
      return 3;
    } }, { key: "isReady", value:

    function isReady() {
      return (0,external_kolmafia_.getProperty)("ghostLocation") != "";
    } }, { key: "getLocation", value:

    function getLocation() {
      return external_kolmafia_.Location.get((0,external_kolmafia_.getProperty)("ghostLocation"));
    } }, { key: "isBadLocation", value:

    function isBadLocation() {
      var loc = this.getLocation();

      switch (loc) {
        case this.gallery:
          return getQuestStatus("questM21Dance") <= 1;
        case this.palindome:
          return getQuestStatus("questL11Palindome") <= 1;
        case this.smutOrcs:
          if (getQuestStatus("questL09Topping") > 0) {
            return false;
          }

          var progress = (0,external_kolmafia_.getProperty)("smutOrcNoncombatProgress");

          if (progress == "") {
            return false;
          }

          return (0,external_kolmafia_.toInt)(progress) >= 15;
        case this.spookyForest:
          return (
            (0,external_kolmafia_.myLevel)() >= 6 && (0,external_kolmafia_.getProperty)("questM16Temple") != "finished" ||
            (0,external_kolmafia_.getProperty)("questL02Larva") != "finished");

        case this.icyPeak:
          if (getQuestStatus("questL08Trapper") < 100) {
            return true;
          }

          if (this.lastColdResCheck + 5 >= (0,external_kolmafia_.totalTurnsPlayed)()) {
            return !this.hasColdRes;
          }

          (0,external_kolmafia_.maximize)("cold res 5 min +equip ".concat(
          this.pack.name).concat(
          (0,external_kolmafia_.availableAmount)(this.sweatpants) > 0 ?
          " +equip designer sweatpants" :
          "", " -tie"),

          true);


          var res = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Cold Resistance");
          this.lastColdResCheck = (0,external_kolmafia_.totalTurnsPlayed)();
          this.hasColdRes = res >= 5;

          return !this.hasColdRes;}


      return false;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.availableAmount)(this.pack) == 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.myHp)() < 10) {
        return QuestStatus.NOT_READY;
      }

      if (!this.isReady()) {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.sweatpants) > 0 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("sweat")) < 5)
      {
        return QuestStatus.NOT_READY;
      }

      var loc = this.getLocation();

      if (!canGreyAdventure(loc)) {
        return QuestStatus.NOT_READY;
      }

      if (this.isBadLocation()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = getGhostBustingOutfit();

      if (this.isReady() && this.getLocation() == this.icyPeak) {
        outfit.addWeight("cold res", 10, 5);
      } else if (this.isReady() && this.getLocation() == this.palindome) {
        outfit.addWeight(this.talisman);
      }

      return {
        outfit: outfit,
        location: null,
        run: function run() {
          greyAdv(
          _this.getLocation(),
          outfit,
          new AdventureSettings().setStartOfFightMacro(getGhostBustingMacro()));

        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      return !reallyMustBeDone;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTrapGhost;}();


var sweatpants = external_kolmafia_.Item.get("Designer Sweatpants");
var pack = external_kolmafia_.Item.get("protonic accelerator pack");

function getGhostBustingOutfit() {
  var outfit = new GreyOutfit();

  outfit.addWeight(pack);

  if ((0,external_kolmafia_.availableAmount)(sweatpants) > 0) {
    outfit.addWeight(sweatpants);
  } else {
    outfit.addWeight("DA").addWeight("DR");
  }

  return outfit;
}

function isGhostBustingTime(loc) {
  return (
    (0,external_kolmafia_.getProperty)("ghostLocation") != "" &&
    loc == external_kolmafia_.Location.get((0,external_kolmafia_.getProperty)("ghostLocation")));

}

function shouldAvoidGhosts() {
  return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("sweat")) < 5 && (0,external_kolmafia_.availableAmount)(sweatpants) > 0;
}

function getGhostBustingMacro() {
  var macro = new MacroBuilder/* Macro */.LE();

  if ((0,external_kolmafia_.availableAmount)(sweatpants) > 0) {
    macro.skill(external_kolmafia_.Skill.get("Sweat Flood"));
  }

  for (var i = 0; i < 3; i++) {
    macro.skill(external_kolmafia_.Skill.get("Shoot Ghost"));
  }

  macro.skill(external_kolmafia_.Skill.get("Trap Ghost"));

  return macro;
}
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/palin/QuestL11PalinBook.ts
function QuestL11PalinBook_typeof(obj) {"@babel/helpers - typeof";return QuestL11PalinBook_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11PalinBook_typeof(obj);}function QuestL11PalinBook_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PalinBook_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11PalinBook_toPropertyKey(descriptor.key), descriptor);}}function QuestL11PalinBook_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PalinBook_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PalinBook_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PalinBook_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11PalinBook_setPrototypeOf(subClass, superClass);}function QuestL11PalinBook_setPrototypeOf(o, p) {QuestL11PalinBook_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11PalinBook_setPrototypeOf(o, p);}function QuestL11PalinBook_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11PalinBook_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11PalinBook_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11PalinBook_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11PalinBook_possibleConstructorReturn(this, result);};}function QuestL11PalinBook_possibleConstructorReturn(self, call) {if (call && (QuestL11PalinBook_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11PalinBook_assertThisInitialized(self);}function QuestL11PalinBook_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11PalinBook_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11PalinBook_getPrototypeOf(o) {QuestL11PalinBook_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11PalinBook_getPrototypeOf(o);}function QuestL11PalinBook_defineProperty(obj, key, value) {key = QuestL11PalinBook_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11PalinBook_toPropertyKey(arg) {var key = QuestL11PalinBook_toPrimitive(arg, "string");return QuestL11PalinBook_typeof(key) === "symbol" ? key : String(key);}function QuestL11PalinBook_toPrimitive(input, hint) {if (QuestL11PalinBook_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11PalinBook_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}













var QuestL11PalinBook = /*#__PURE__*/function (_TaskInfo) {QuestL11PalinBook_inherits(QuestL11PalinBook, _TaskInfo);var _super = QuestL11PalinBook_createSuper(QuestL11PalinBook);function QuestL11PalinBook() {var _this;QuestL11PalinBook_classCallCheck(this, QuestL11PalinBook);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "camera",
    external_kolmafia_.Item.get("Disposable Instant Camera"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "stuntNuts",
    external_kolmafia_.Item.get("Stunt Nuts"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "talisman",
    external_kolmafia_.Item.get("Talisman o' Namsilat"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "loveBook1",
    external_kolmafia_.Item.get('"I Love Me, Vol. I"'));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "loveBook2",
    external_kolmafia_.Item.get('"2 Love Me, Vol. 2"'));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "palindome",
    external_kolmafia_.Location.get("Inside the Palindome"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "ncPhotos",
    [
    "photograph of an ostrich egg",
    "photograph of a red nugget",
    "photograph of God"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "dogPhoto",
    external_kolmafia_.Item.get("photograph of a dog"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "bobRace",
    external_kolmafia_.Monster.get("Bob Racecar"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "raceBob",
    external_kolmafia_.Monster.get("Racecar Bob"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "drab",
    external_kolmafia_.Monster.get("Drab Bard"));QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "paths", void 0);QuestL11PalinBook_defineProperty(QuestL11PalinBook_assertThisInitialized(_this), "toAbsorb", void 0);return _this;}QuestL11PalinBook_createClass(QuestL11PalinBook, [{ key: "createPaths", value:



    function createPaths(assumeUnused) {
      this.paths = [new PossiblePath(0).addMeat(1000)];

      if (!assumeUnused && getQuestStatus("questL11Palindome") > 1) {
        return;
      }

      this.paths.push(new PossiblePath(0).add(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB));
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Palin / Book";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Palindome");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (
      isGhostBustingTime(this.palindome) &&
      (0,external_kolmafia_.availableAmount)(this.talisman) > 0 &&
      !shouldAvoidGhosts())
      {
        return QuestStatus.READY;
      }

      if (GreySettings_GreySettings.greySkipPalindome && !this.isFarmDudes()) {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.myMeat)() < 1000 ||
      (0,external_kolmafia_.availableAmount)(this.talisman) == 0 ||
      status < 0 ||
      this.needDogPhoto() && (0,external_kolmafia_.availableAmount)(this.camera) == 0)
      {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "needDogPhoto", value:

    function needDogPhoto() {
      return (0,external_kolmafia_.availableAmount)(this.dogPhoto) == 0;
    } }, { key: "isFarmDudes", value:

    function isFarmDudes() {
      return (
        (0,external_kolmafia_.availableAmount)(this.stuntNuts) == 0 ||
        this.needDogPhoto() ||
        this.ncPhotos.filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;}).length > 0 ||
        (0,external_kolmafia_.availableAmount)(this.loveBook1) == 0);

    } }, { key: "run", value:

    function run(path) {
      // Workaround for some weird bug I had
      if (
      (0,external_kolmafia_.availableAmount)(this.loveBook1) == 0 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("palindomeDudesDefeated")) >= 5)
      {
        (0,external_kolmafia_.cliExecute)("refresh inventory");
      }

      if (this.isFarmDudes()) {
        return this.farmDudes();
      }

      return this.turnInStuff(path);
    } }, { key: "turnInStuff", value:

    function turnInStuff(path) {var _this2 = this;
      return {
        location: null,
        outfit: new GreyOutfit().addWeight(this.talisman),
        run: function run() {
          (0,external_kolmafia_.use)(_this2.loveBook1);
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=palindome&action=pal_drlabel");
          (0,external_kolmafia_.visitUrl)(
          "choice.php?pwd=&whichchoice=872&option=1&photo1=2259&photo2=7264&photo3=7263&photo4=7265");


          if (path.canUse(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB)) {
            (0,external_kolmafia_.cliExecute)("hottub");
            path.addUsed(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB);
          } else {
            restoreHPTo(Math.min((0,external_kolmafia_.myMaxhp)(), 120));
          }

          (0,external_kolmafia_.use)(_this2.loveBook2);
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=palindome&action=pal_mroffice");
        }
      };
    } }, { key: "farmDudes", value:

    function farmDudes() {var _this3 = this;
      var outfit = isGhostBustingTime(this.palindome) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      if ((0,external_kolmafia_.availableAmount)(this.stuntNuts) == 0) {
        outfit.setItemDrops();
      }

      if (this.ncPhotos.filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;}).length > 0) {
        outfit.setNoCombat();
      }

      var orbs = [];

      if (
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("palindomeDudesDefeated")) <
      5 - this.toAbsorb.length)
      {
        orbs.push(this.drab);
        orbs.push(this.bobRace);
        orbs.push(this.raceBob);
      } else if (this.toAbsorb.length == 0 && this.needDogPhoto()) {
        orbs.push(this.bobRace);
        orbs.push(this.raceBob);
      }

      // No NCs to be hit other than quest so no need to +combat

      outfit.addWeight(this.talisman);

      return {
        outfit: outfit,
        location: isGhostBustingTime(this.palindome) ? null : this.palindome,
        orbs: orbs,
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return !orbs.includes(monster);},
        run: function run() {
          var macro = null;

          if (isGhostBustingTime(_this3.palindome)) {
            macro = getGhostBustingMacro();
          } else if (_this3.needDogPhoto()) {
            macro = new MacroBuilder/* Macro */.LE().
            if_(_this3.bobRace, MacroBuilder/* Macro.tryItem */.LE.tryItem(_this3.camera)).
            if_(_this3.raceBob, MacroBuilder/* Macro.tryItem */.LE.tryItem(_this3.camera));
          }

          var settings = new AdventureSettings().setStartOfFightMacro(macro);
          settings.addBanish(external_kolmafia_.Monster.get("Evil Olive"));
          settings.addBanish(external_kolmafia_.Monster.get("Flock of Stab-bats"));
          settings.addBanish(external_kolmafia_.Monster.get("Taco Cat"));
          settings.addBanish(external_kolmafia_.Monster.get("Tan Gnat"));

          var props = new Properties_PropertyManager();
          props.setChoice(129, 1);
          props.setChoice(873, 1);

          try {
            greyAdv(_this3.palindome, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      if (this.isFarmDudes()) {
        return [this.palindome];
      }

      return [];
    } }, { key: "free", value:

    function free() {
      return !this.isFarmDudes();
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      if (!this.isFarmDudes()) {
        return true;
      }

      if (reallyMustBeDone) {
        return false;
      }

      return isGhostBustingTime(this.palindome);
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return this.isFarmDudes();
    } }]);return QuestL11PalinBook;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Palindome.ts
function QuestL11Palindome_typeof(obj) {"@babel/helpers - typeof";return QuestL11Palindome_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Palindome_typeof(obj);}function QuestL11Palindome_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Palindome_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Palindome_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Palindome_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Palindome_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Palindome_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Palindome_defineProperty(obj, key, value) {key = QuestL11Palindome_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Palindome_toPropertyKey(arg) {var key = QuestL11Palindome_toPrimitive(arg, "string");return QuestL11Palindome_typeof(key) === "symbol" ? key : String(key);}function QuestL11Palindome_toPrimitive(input, hint) {if (QuestL11Palindome_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Palindome_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL11Palin = /*#__PURE__*/function () {




  function QuestL11Palin() {QuestL11Palindome_classCallCheck(this, QuestL11Palin);QuestL11Palindome_defineProperty(this, "megagem", external_kolmafia_.Item.get("Mega Gem"));QuestL11Palindome_defineProperty(this, "talisman", external_kolmafia_.Item.get("Talisman o' Namsilat"));QuestL11Palindome_defineProperty(this, "children", []);
    this.children.push(new QuestL11PalinStew());
    this.children.push(new QuestL11PalinBook());
  }QuestL11Palindome_createClass(QuestL11Palin, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Palin / Boss";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Palindome");

      if (status == 100) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.megagem) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit().
      addWeight(this.talisman).
      addWeight(this.megagem);

      return {
        outfit: outfit,
        location: null,
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(131, 1);

          try {
            greyAdv("place.php?whichplace=palindome&action=pal_drlabel", outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11Palin;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/pyramid/QuestL11PyramidControl.ts
function QuestL11PyramidControl_typeof(obj) {"@babel/helpers - typeof";return QuestL11PyramidControl_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11PyramidControl_typeof(obj);}function QuestL11PyramidControl_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PyramidControl_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11PyramidControl_toPropertyKey(descriptor.key), descriptor);}}function QuestL11PyramidControl_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PyramidControl_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PyramidControl_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PyramidControl_defineProperty(obj, key, value) {key = QuestL11PyramidControl_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11PyramidControl_toPropertyKey(arg) {var key = QuestL11PyramidControl_toPrimitive(arg, "string");return QuestL11PyramidControl_typeof(key) === "symbol" ? key : String(key);}function QuestL11PyramidControl_toPrimitive(input, hint) {if (QuestL11PyramidControl_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11PyramidControl_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestL11PyramidControl = /*#__PURE__*/function () {function QuestL11PyramidControl() {QuestL11PyramidControl_classCallCheck(this, QuestL11PyramidControl);QuestL11PyramidControl_defineProperty(this, "wheel",
    external_kolmafia_.Item.get("Crumbling Wooden Wheel"));QuestL11PyramidControl_defineProperty(this, "ratchet",
    external_kolmafia_.Item.get("Tomb Ratchet"));}QuestL11PyramidControl_createClass(QuestL11PyramidControl, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Pyramid / Wheel";
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.getProperty)("lowerChamberUnlock") != "true" ||
      (0,external_kolmafia_.getProperty)("controlRoomUnlock") != "true")
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("pyramidBombUsed") == "true") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.wheel) + (0,external_kolmafia_.availableAmount)(this.ratchet) < 10) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      if ((0,external_kolmafia_.getProperty)("pyramidPosition") != "1") {
        throw "Shouldn't have used any wheels or ratchets yet!";
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=pyramid&action=pyramid_control");

          for (var wheel = 1; wheel <= 10; wheel++) {
            if ((0,external_kolmafia_.itemAmount)(_this.wheel) > 0) {
              (0,external_kolmafia_.visitUrl)(
              "choice.php?pwd=&whichchoice=929&option=1&choiceform1=Use+a+wheel+on+the+peg&pwd=" +
              (0,external_kolmafia_.myHash)());

            } else {
              (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=929&option=2&pwd");
            }

            if (wheel == 3 || wheel == 7 || wheel == 10) {
              (0,external_kolmafia_.visitUrl)(
              "choice.php?pwd=&whichchoice=929&option=5&choiceform5=Head+down+to+the+Lower+Chambers+%281%29&pwd=" +
              (0,external_kolmafia_.myHash)());

            }

            if (wheel == 3 || wheel == 7) {
              (0,external_kolmafia_.visitUrl)("place.php?whichplace=pyramid&action=pyramid_control");
            }
          }

          if ((0,external_kolmafia_.getProperty)("pyramidBombUsed") != "true") {
            throw "Bomb should've been used in the pyramid!";
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11PyramidControl;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/pyramid/QuestL11PyramidMiddle.ts
function QuestL11PyramidMiddle_typeof(obj) {"@babel/helpers - typeof";return QuestL11PyramidMiddle_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11PyramidMiddle_typeof(obj);}function QuestL11PyramidMiddle_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PyramidMiddle_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11PyramidMiddle_toPropertyKey(descriptor.key), descriptor);}}function QuestL11PyramidMiddle_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PyramidMiddle_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PyramidMiddle_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PyramidMiddle_defineProperty(obj, key, value) {key = QuestL11PyramidMiddle_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11PyramidMiddle_toPropertyKey(arg) {var key = QuestL11PyramidMiddle_toPrimitive(arg, "string");return QuestL11PyramidMiddle_typeof(key) === "symbol" ? key : String(key);}function QuestL11PyramidMiddle_toPrimitive(input, hint) {if (QuestL11PyramidMiddle_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11PyramidMiddle_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL11PyramidMiddle = /*#__PURE__*/function () {function QuestL11PyramidMiddle() {QuestL11PyramidMiddle_classCallCheck(this, QuestL11PyramidMiddle);QuestL11PyramidMiddle_defineProperty(this, "ratTangle",
    external_kolmafia_.Item.get("Tangle of rat tails"));QuestL11PyramidMiddle_defineProperty(this, "tombRat",
    external_kolmafia_.Monster.get("Tomb Rat"));QuestL11PyramidMiddle_defineProperty(this, "middleLoc",
    external_kolmafia_.Location.get("The Middle Chamber"));QuestL11PyramidMiddle_defineProperty(this, "wheel",
    external_kolmafia_.Item.get("Crumbling Wooden Wheel"));QuestL11PyramidMiddle_defineProperty(this, "ratchet",
    external_kolmafia_.Item.get("Tomb Ratchet"));QuestL11PyramidMiddle_defineProperty(this, "servant",
    external_kolmafia_.Monster.get("Tomb Servant"));QuestL11PyramidMiddle_defineProperty(this, "toAbsorb", void 0);}QuestL11PyramidMiddle_createClass(QuestL11PyramidMiddle, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / Pyramid / Middle";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("pyramidBombUsed") == "true") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("middleChamberUnlock") == "false") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.getProperty)("lowerChamberUnlock") == "true" &&
      (0,external_kolmafia_.getProperty)("controlRoomUnlock") == "true" &&
      this.haveEnough())
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("questL03Rat") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if (this.toAbsorb.length == 0 && this.haveEnough()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "haveEnough", value:

    function haveEnough() {
      return (0,external_kolmafia_.availableAmount)(this.wheel) + (0,external_kolmafia_.availableAmount)(this.ratchet) >= 10;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (!this.haveEnough()) {
        outfit.setItemDrops();
      }

      return {
        location: this.middleLoc,
        outfit: outfit,
        orbs: this.haveEnough() ? null : [this.tombRat],
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return _this.haveEnough() || _this.tombRat != monster;},
        run: function run() {
          var settings = new AdventureSettings();

          var startMacro = new MacroBuilder/* Macro */.LE();

          if ((0,external_kolmafia_.availableAmount)(_this.ratTangle) > 0) {
            startMacro.if_(_this.tombRat, MacroBuilder/* Macro.item */.LE.item(_this.ratTangle));
          } else if (_this.haveEnough() && _this.toAbsorb.length == 0) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          settings.addNoBanish(_this.tombRat);

          settings.setStartOfFightMacro(startMacro);
          greyAdv(_this.middleLoc, outfit, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.middleLoc];
    } }]);return QuestL11PyramidMiddle;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/pyramid/QuestL11PyramidTop.ts
function QuestL11PyramidTop_typeof(obj) {"@babel/helpers - typeof";return QuestL11PyramidTop_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11PyramidTop_typeof(obj);}function QuestL11PyramidTop_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PyramidTop_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11PyramidTop_toPropertyKey(descriptor.key), descriptor);}}function QuestL11PyramidTop_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PyramidTop_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PyramidTop_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PyramidTop_defineProperty(obj, key, value) {key = QuestL11PyramidTop_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11PyramidTop_toPropertyKey(arg) {var key = QuestL11PyramidTop_toPrimitive(arg, "string");return QuestL11PyramidTop_typeof(key) === "symbol" ? key : String(key);}function QuestL11PyramidTop_toPrimitive(input, hint) {if (QuestL11PyramidTop_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11PyramidTop_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11PyramidTop = /*#__PURE__*/function () {function QuestL11PyramidTop() {QuestL11PyramidTop_classCallCheck(this, QuestL11PyramidTop);QuestL11PyramidTop_defineProperty(this, "topLoc",
    external_kolmafia_.Location.get("The Upper Chamber"));QuestL11PyramidTop_defineProperty(this, "eye",
    external_kolmafia_.Item.get("Eye of Ed"));QuestL11PyramidTop_defineProperty(this, "amulet",
    external_kolmafia_.Item.get("ancient amulet"));QuestL11PyramidTop_defineProperty(this, "headpiece",
    external_kolmafia_.Item.get("headpiece of the Staff of Ed"));QuestL11PyramidTop_defineProperty(this, "staff",
    external_kolmafia_.Item.get("Staff of Fats"));QuestL11PyramidTop_defineProperty(this, "staff2",
    external_kolmafia_.Item.get("[2325]Staff Of Ed"));}QuestL11PyramidTop_createClass(QuestL11PyramidTop, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Pyramid / Top";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Pyramid");

      if (status <= 0 && !this.isUnlockable()) {
        return QuestStatus.NOT_READY;
      }

      if (this.isMiddleUnlocked() || status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Desert") != "finished") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "isMiddleUnlocked", value:

    function isMiddleUnlocked() {
      return (0,external_kolmafia_.getProperty)("middleChamberUnlock") == "true";
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        this.isUnlockable() &&
        (0,external_kolmafia_.getProperty)("questL11Desert") == "finished" &&
        (0,external_kolmafia_.getProperty)("questL11Pyramid") == "unstarted");

    } }, { key: "free", value:

    function free() {
      return this.mustBeDone();
    } }, { key: "run", value:

    function run() {var _this = this;
      if (this.mustBeDone()) {
        return {
          location: null,
          run: function run() {
            // Unlock
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=desertbeach&action=db_pyramid1");
          }
        };
      }

      var outfit = new GreyOutfit().setNoCombat();

      return {
        location: this.topLoc,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          greyAdv(_this.topLoc, outfit);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.topLoc];
    } }, { key: "isUnlockable", value:

    function isUnlockable() {
      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("desertExploration")) < 100) {
        return false;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Palindome") != "finished") {
        return false;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Manor") != "finished") {
        return false;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Worship") != "finished") {
        return false;
      }

      return true;
    } }]);return QuestL11PyramidTop;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Pyramid.ts
function QuestL11Pyramid_typeof(obj) {"@babel/helpers - typeof";return QuestL11Pyramid_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Pyramid_typeof(obj);}function QuestL11Pyramid_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Pyramid_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Pyramid_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Pyramid_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Pyramid_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Pyramid_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Pyramid_defineProperty(obj, key, value) {key = QuestL11Pyramid_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Pyramid_toPropertyKey(arg) {var key = QuestL11Pyramid_toPrimitive(arg, "string");return QuestL11Pyramid_typeof(key) === "symbol" ? key : String(key);}function QuestL11Pyramid_toPrimitive(input, hint) {if (QuestL11Pyramid_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Pyramid_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL11Pyramid = /*#__PURE__*/function () {



  function QuestL11Pyramid() {QuestL11Pyramid_classCallCheck(this, QuestL11Pyramid);QuestL11Pyramid_defineProperty(this, "edUndying", external_kolmafia_.Location.get("The Lower Chambers"));QuestL11Pyramid_defineProperty(this, "children", []);
    this.children.push(new QuestL11PyramidControl());
    this.children.push(new QuestL11PyramidTop());
    this.children.push(new QuestL11PyramidMiddle());
  }QuestL11Pyramid_createClass(QuestL11Pyramid, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Pyramid / EdUndying";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Pyramid");

      if (status < 3 || (0,external_kolmafia_.getProperty)("pyramidBombUsed") == "false") {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      var fam = external_kolmafia_.Familiar.get("Grey Goose");

      if ((0,external_kolmafia_.familiarWeight)(fam) >= 3) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: this.edUndying,
        run: function run() {
          for (var i = 0; i < 7; i++) {
            greyAdv("place.php?whichplace=pyramid&action=pyramid_state1a");
          }

          (0,external_kolmafia_.council)();
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11Pyramid;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/ron/QuestL11RonAirship.ts
function QuestL11RonAirship_typeof(obj) {"@babel/helpers - typeof";return QuestL11RonAirship_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11RonAirship_typeof(obj);}function QuestL11RonAirship_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11RonAirship_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11RonAirship_toPropertyKey(descriptor.key), descriptor);}}function QuestL11RonAirship_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11RonAirship_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11RonAirship_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11RonAirship_defineProperty(obj, key, value) {key = QuestL11RonAirship_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11RonAirship_toPropertyKey(arg) {var key = QuestL11RonAirship_toPrimitive(arg, "string");return QuestL11RonAirship_typeof(key) === "symbol" ? key : String(key);}function QuestL11RonAirship_toPrimitive(input, hint) {if (QuestL11RonAirship_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11RonAirship_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL11RonAirship = /*#__PURE__*/function () {function QuestL11RonAirship() {QuestL11RonAirship_classCallCheck(this, QuestL11RonAirship);QuestL11RonAirship_defineProperty(this, "ticket",
    external_kolmafia_.Item.get("Red Zeppelin Ticket"));QuestL11RonAirship_defineProperty(this, "ron",
    external_kolmafia_.Monster.get('Ron "The Weasel" Copperhead'));QuestL11RonAirship_defineProperty(this, "airship",
    external_kolmafia_.Location.get("The Red Zeppelin"));QuestL11RonAirship_defineProperty(this, "butler",
    external_kolmafia_.Monster.get("Red Butler"));QuestL11RonAirship_defineProperty(this, "skeleton",
    external_kolmafia_.Monster.get("Red Skeleton"));QuestL11RonAirship_defineProperty(this, "buttons",
    external_kolmafia_.Monster.get("Man with the red buttons"));}QuestL11RonAirship_createClass(QuestL11RonAirship, [{ key: "getLocations", value:

    function getLocations() {
      return [this.airship];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Ron / Zepp";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Ron");

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (status > 4) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.ticket) == 0 && (0,external_kolmafia_.myMeat)() <= 5000) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setItemDrops();
      var orbs = [this.skeleton, this.butler, this.buttons];

      return {
        location: this.airship,
        outfit: outfit,
        orbs: orbs,
        olfaction: [this.butler],
        freeRun: function freeRun(monster) {return !orbs.includes(monster);},
        run: function run() {
          if ((0,external_kolmafia_.availableAmount)(_this.ticket) == 0) {
            (0,external_kolmafia_.retrieveItem)(_this.ticket);
          }

          var macro = greyKillingBlow(outfit);

          if (
          (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Glark Cable")) > 0 &&
          (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_glarkCableUses")) < 5)
          {
            macro = MacroBuilder/* Macro.if_ */.LE.if_(_this.ron, macro).
            step(MacroBuilder/* Macro.tryItem */.LE.tryItem(external_kolmafia_.Item.get("Glark Cable"))).
            step(macro);
          }

          var settings = new AdventureSettings();
          settings.setFinishingBlowMacro(macro);
          settings.addNoBanish(external_kolmafia_.Monster.get("Red Skeleton"));
          settings.addNoBanish(external_kolmafia_.Monster.get("Red Butler"));

          greyAdv(_this.airship, outfit, settings);
        }
      };
    } }]);return QuestL11RonAirship;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/ron/QuestL11RonProtesters.ts
function QuestL11RonProtesters_typeof(obj) {"@babel/helpers - typeof";return QuestL11RonProtesters_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11RonProtesters_typeof(obj);}function QuestL11RonProtesters_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11RonProtesters_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL11RonProtesters_toConsumableArray(arr) {return QuestL11RonProtesters_arrayWithoutHoles(arr) || QuestL11RonProtesters_iterableToArray(arr) || QuestL11RonProtesters_unsupportedIterableToArray(arr) || QuestL11RonProtesters_nonIterableSpread();}function QuestL11RonProtesters_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL11RonProtesters_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11RonProtesters_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11RonProtesters_arrayLikeToArray(o, minLen);}function QuestL11RonProtesters_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestL11RonProtesters_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestL11RonProtesters_arrayLikeToArray(arr);}function QuestL11RonProtesters_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL11RonProtesters_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11RonProtesters_toPropertyKey(descriptor.key), descriptor);}}function QuestL11RonProtesters_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11RonProtesters_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11RonProtesters_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11RonProtesters_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11RonProtesters_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11RonProtesters_setPrototypeOf(subClass, superClass);}function QuestL11RonProtesters_setPrototypeOf(o, p) {QuestL11RonProtesters_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11RonProtesters_setPrototypeOf(o, p);}function QuestL11RonProtesters_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11RonProtesters_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11RonProtesters_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11RonProtesters_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11RonProtesters_possibleConstructorReturn(this, result);};}function QuestL11RonProtesters_possibleConstructorReturn(self, call) {if (call && (QuestL11RonProtesters_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11RonProtesters_assertThisInitialized(self);}function QuestL11RonProtesters_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11RonProtesters_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11RonProtesters_getPrototypeOf(o) {QuestL11RonProtesters_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11RonProtesters_getPrototypeOf(o);}function QuestL11RonProtesters_defineProperty(obj, key, value) {key = QuestL11RonProtesters_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11RonProtesters_toPropertyKey(arg) {var key = QuestL11RonProtesters_toPrimitive(arg, "string");return QuestL11RonProtesters_typeof(key) === "symbol" ? key : String(key);}function QuestL11RonProtesters_toPrimitive(input, hint) {if (QuestL11RonProtesters_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11RonProtesters_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var


PossiblePathExtra = /*#__PURE__*/function (_PossiblePath) {QuestL11RonProtesters_inherits(PossiblePathExtra, _PossiblePath);var _super = QuestL11RonProtesters_createSuper(PossiblePathExtra);function PossiblePathExtra() {var _this;QuestL11RonProtesters_classCallCheck(this, PossiblePathExtra);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this), "equips",
    []);return _this;}return QuestL11RonProtesters_createClass(PossiblePathExtra);}(PossiblePath);


var QuestL11RonProtesters = /*#__PURE__*/function (_TaskInfo) {QuestL11RonProtesters_inherits(QuestL11RonProtesters, _TaskInfo);var _super2 = QuestL11RonProtesters_createSuper(QuestL11RonProtesters);function QuestL11RonProtesters() {var _this2;QuestL11RonProtesters_classCallCheck(this, QuestL11RonProtesters);for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}_this2 = _super2.call.apply(_super2, [this].concat(args));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "proLoc",
    external_kolmafia_.Location.get("A Mob Of Zeppelin Protesters"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "deck",
    external_kolmafia_.Item.get("deck of lewd playing cards"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "sleazeBook",
    external_kolmafia_.Item.get("Disturbing Fanfic"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndHat",
    external_kolmafia_.Item.get("lynyrdskin cap"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndPants",
    external_kolmafia_.Item.get("lynyrdskin breeches"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndShirt",
    external_kolmafia_.Item.get("lynyrdskin tunic"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lyrndCostume",
    [_this2.lyrndHat, _this2.lyrndPants, _this2.lyrndShirt]);QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "musk",
    external_kolmafia_.Item.get("lynyrd musk"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "cig",
    external_kolmafia_.Item.get("cigarette lighter"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "cultist",
    external_kolmafia_.Monster.get("Blue Oyster Cultist"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "flaming",
    external_kolmafia_.Item.get("Flamin' Whatshisname"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "musky",
    external_kolmafia_.Effect.get("Musky"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "toAbsorb", void 0);QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "torsoAwareness",

    external_kolmafia_.Skill.get("Torso Awareness"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "smutSleazeSkill",
    external_kolmafia_.Skill.get("Procgen Ribaldry"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "sleazeSkill2",
    external_kolmafia_.Skill.get("Innuendo Circuitry"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "starChart",
    external_kolmafia_.Item.get("Star Chart"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "sweatpants",
    external_kolmafia_.Item.get("designer sweatpants"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "spoon",
    external_kolmafia_.Item.get("hewn moon-rune spoon"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "umbrella",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "vipInvitation",

    external_kolmafia_.Item.get("Clan VIP Lounge key"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "transparentPants",
    external_kolmafia_.Item.get("Transparent pants"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "parka",
    external_kolmafia_.Item.get("Jurassic Parka"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "clover",
    external_kolmafia_.Item.get("11-Leaf Clover"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lucky",
    external_kolmafia_.Effect.get("Lucky!"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "paths",
    []);QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "lefthandMan",
    external_kolmafia_.Familiar.get("left-hand man"));QuestL11RonProtesters_defineProperty(QuestL11RonProtesters_assertThisInitialized(_this2), "sleazeEquips",



    [
    _this2.deck,
    (0,external_kolmafia_.availableAmount)(_this2.sweatpants) > 0 ?
    _this2.sweatpants :
    external_kolmafia_.Item.get("Transparent pants"),
    _this2.parka]);return _this2;}QuestL11RonProtesters_createClass(QuestL11RonProtesters, [{ key: "getOutfit", value:


    function getOutfit() {var _this3 = this;
      return this.lyrndCostume.filter(
      function (i) {return i != _this3.lyrndShirt || (0,external_kolmafia_.haveSkill)(_this3.torsoAwareness);});

    } }, { key: "getRelation", value:

    function getRelation(id) {
      if (id == "Council / Peaks / Orcs" && !(0,external_kolmafia_.haveSkill)(this.smutSleazeSkill)) {
        return TaskRelation.WAIT_FOR;
      }

      if (
      id == "Council / Tower / Keys / Star" &&
      !GreySettings_GreySettings.shouldAvoidTowerRequirements() &&
      !(0,external_kolmafia_.haveSkill)(this.sleazeSkill2) &&
      (0,external_kolmafia_.availableAmount)(this.starChart) == 0)
      {
        return TaskRelation.WAIT_FOR;
      }

      return TaskRelation.UNRELATED;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this4 = this;
      var paths = [];

      // Combinations of sleaze equips, clover, costume
      var allPossible = [].concat(QuestL11RonProtesters_toConsumableArray(
      this.sleazeEquips.filter(
      function (i) {return (
          (i != _this4.parka || (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Torso Awareness"))) && (
          (0,external_kolmafia_.storageAmount)(i) > 0 || (0,external_kolmafia_.availableAmount)(i) > 0));})), QuestL11RonProtesters_toConsumableArray(

      this.lyrndCostume), [
      "Clover",
      "Clover",
      "Clover"]);


      if (!this.willHaveShirt()) {
        allPossible = allPossible.filter(function (i) {return i != _this4.lyrndShirt;});
      }var _iterator = QuestL11RonProtesters_createForOfIteratorHelper(

        getAllCombinations(allPossible)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combination = _step.value;
          if (
          (combination.includes(this.sweatpants) ||
          combination.includes(this.transparentPants)) &&
          combination.includes(this.lyrndPants))
          {
            continue;
          }

          if (
          combination.includes(this.lyrndShirt) &&
          combination.includes(this.parka))
          {
            continue;
          }

          var items = combination.filter(
          function (i) {return i instanceof external_kolmafia_.Item;});

          var clovers = combination.filter(function (i) {return i == "Clover";}).length;
          var toPull = items.filter(
          function (i) {return (
              _this4.lyrndCostume.includes(i) ||
              i == _this4.deck ||
              i == _this4.transparentPants);});


          var turns = this.getEstimatedTurns(assumeUnstarted, clovers, items);

          var path = new PossiblePathExtra(turns);

          for (var clover = 0; clover < clovers; clover++) {
            path.add(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER);
          }var _iterator2 = QuestL11RonProtesters_createForOfIteratorHelper(

            toPull),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var item = _step2.value;
              if (assumeUnstarted || (0,external_kolmafia_.availableAmount)(item) == 0) {
                path.addPull(item);
              }
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = QuestL11RonProtesters_createForOfIteratorHelper(

            items),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _item = _step3.value;
              path.equips.push(_item);
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          paths.push(path);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      this.paths = paths;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getEstimatedTurns", value:

    function getEstimatedTurns(
    assumeUnstarted,
    clovers,
    item)
    {var _this5 = this;
      var estimatedFires = 2;
      var lynyrdScares =
      3 + this.lyrndCostume.filter(function (i) {return item.includes(i);}).length * 5; // Do calcs without musk
      var sleazeScares = item.
      map(function (i) {return (
          i == _this5.sweatpants ?
          (0,external_kolmafia_.availableAmount)(_this5.sweatpants) > 0 ?
          120 :
          0 :
          i == _this5.parka ?
          (0,external_kolmafia_.haveSkill)(_this5.torsoAwareness) ?
          40 :
          0 :
          (0,external_kolmafia_.numericModifier)(i, "Sleaze Damage") +
          (0,external_kolmafia_.numericModifier)(i, "Sleaze Spell Damage"));}).

      reduce(function (p, n) {return p + n;}, 0);

      sleazeScares = Math.floor(Math.pow(sleazeScares, 0.5));
      // Assume we're running -20 so 65% chance of a combat
      var ncModifier = 0;
      // Minus 20 for skills
      ncModifier += 20;
      // Minus 5 if we're not wearing lynrd cap and can wear -5 hat
      if (
      !item.includes(this.lyrndHat) &&
      (0,external_kolmafia_.availableAmount)(this.vipInvitation) > 0)
      {
        ncModifier += 5;
      }
      // Minus 10 if we're not wearing sleaze deck and have umbrella
      if (!item.includes(this.deck) && (0,external_kolmafia_.availableAmount)(this.umbrella) > 0) {
        ncModifier += 10;
      }
      // Cap it
      if (ncModifier > 25) {
        ncModifier = 25 + (ncModifier - 25) / 5;
      }

      var toScare = assumeUnstarted ?
      80 :
      Math.max(0, this.getProtestersRemaining());

      var ncs = [
      function () {return sleazeScares;},
      function () {
        return estimatedFires-- > 0 ? 10 : 3;
      },
      function () {return lynyrdScares;}];

      // 1.5 instead of 1 for bad luck
      var ncEveryXTurns = Math.ceil(1.5 / (1 - (85 - ncModifier) / 100));
      var turnsTaken = 0;

      for (var c = 0; c < clovers; c++) {
        toScare -= Math.max(sleazeScares, lynyrdScares + 3); // 3 cos I assume we have musk
        turnsTaken++;
      }

      var turnsToNC = ncEveryXTurns;
      var nc = 0;
      while (toScare > 0) {
        turnsToNC--;
        turnsTaken++;

        if (turnsToNC <= 0) {
          toScare -= ncs[nc++ % 3]();
          turnsToNC = ncEveryXTurns;
        } else {
          toScare -= 1.1; // Assume cig lighter
        }
      }

      return turnsTaken;
    } }, { key: "isReady", value:

    function isReady() {
      return (
        (0,external_kolmafia_.getProperty)("questL11Ron") == "started" ||
        (0,external_kolmafia_.getProperty)("questL11Ron") == "step1" ||
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("zeppelinProtestors")) <= 80);

    } }, { key: "willHaveShirt", value:

    function willHaveShirt() {
      return (
        (0,external_kolmafia_.gnomadsAvailable)() ||
        (0,external_kolmafia_.availableAmount)(this.spoon) > 0 &&
        getMoonZone(GreySettings_GreySettings.greyTuneMoonSpoon) == "Gnomad" &&
        (0,external_kolmafia_.getProperty)("moonTuned") != "true");

    } }, { key: "waitingForShirt", value:

    function waitingForShirt() {
      return !(0,external_kolmafia_.haveSkill)(this.torsoAwareness) && this.willHaveShirt();
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Ron / Crowd";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Ron");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (!GreySettings_GreySettings.isHardcoreMode() && this.waitingForShirt()) {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.sweatpants) + (0,external_kolmafia_.equippedAmount)(this.sweatpants) > 0 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("sweat")) < 95)
      {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.gnomadsAvailable)() &&
      !(0,external_kolmafia_.haveSkill)(this.torsoAwareness) &&
      !GreySettings_GreySettings.isHardcoreMode())
      {
        return QuestStatus.NOT_READY;
      }

      // If we don't have max flaming boozes
      if (getQuestStatus("questL11Shen") <= 6) {
        return QuestStatus.NOT_READY;
      }

      if (
      !(0,external_kolmafia_.haveSkill)(this.sleazeSkill2) &&
      (0,external_kolmafia_.availableAmount)(this.starChart) == 0 &&
      !GreySettings_GreySettings.shouldAvoidTowerRequirements())
      {


        //   return QuestStatus.NOT_READY;
      }if (
      !(0,external_kolmafia_.haveSkill)(this.smutSleazeSkill) &&
      getQuestStatus("questL09Topping") < 1)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getLynyrdScares", value:

    function getLynyrdScares() {
      return (
        3 + (
        (0,external_kolmafia_.availableAmount)(this.musk) + (0,external_kolmafia_.haveEffect)(this.musky) > 0 ? 3 : 0) +
        this.getOutfit().filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;}).length * 5);

    } }, { key: "getSleazeScares", value:

    function getSleazeScares() {
      return Math.floor(
      Math.pow(
      this.sleazeEquips.
      map(function (i) {return (
          (0,external_kolmafia_.availableAmount)(i) == 0 || (0,external_kolmafia_.equippedAmount)(i) > 0 ?
          0 :
          (0,external_kolmafia_.numericModifier)(i, "Sleaze Damage") +
          (0,external_kolmafia_.numericModifier)(i, "Sleaze Spell Damage"));}).

      reduce(
      function (p, n) {return p + n;},
      (0,external_kolmafia_.numericModifier)("Sleaze Damage") +
      (0,external_kolmafia_.numericModifier)("Sleaze Spell Damage")),

      0.5));


    } }, { key: "runClover", value:

    function runClover(path) {var _this6 = this;
      var runSleaze = this.getSleazeScares() >= this.getLynyrdScares();
      var str = runSleaze ?
      "Sleaze Spell Damage +Sleaze Damage" :
      this.getOutfit().
      filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;}).
      map(function (i) {return "+equip " + i;}).
      join(" ") + (
      (0,external_kolmafia_.haveFamiliar)(this.lefthandMan) ? " +switch left-hand man" : "");
      var outfit = new GreyOutfit(str + " -tie");

      return {
        location: null,
        outfit: outfit,
        familiar: (0,external_kolmafia_.haveFamiliar)(this.lefthandMan) ? this.lefthandMan : null,
        disableFamOverride: (0,external_kolmafia_.haveFamiliar)(this.lefthandMan),
        run: function run() {
          while (
          path.canUse(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER) &&
          _this6.getProtestersRemaining() > 1)
          {
            var props = new Properties_PropertyManager();

            if (runSleaze) {
              props.setChoice(866, 2); // Clover
              props.setChoice(857, 1); // Sleaze
            } else {
              if (!(0,external_kolmafia_.haveEffect)(_this6.musky) && (0,external_kolmafia_.availableAmount)(_this6.musk) > 0) {
                (0,external_kolmafia_.use)(_this6.musk);
              }

              props.setChoice(866, 1); // Clover
              props.setChoice(856, 1); // Scare
            }

            (0,external_kolmafia_.use)(_this6.clover);

            if (!(0,external_kolmafia_.haveEffect)(_this6.lucky)) {
              throw "Expected lucky effect";
            }

            try {
              greyAdv(_this6.proLoc, outfit);

              // Dumb workaround
              if ((0,external_kolmafia_.haveEffect)(_this6.lucky)) {
                greyAdv(_this6.proLoc, outfit);
              }
            } finally {
              props.resetAll();
            }

            if ((0,external_kolmafia_.haveEffect)(_this6.lucky)) {
              throw "Expected not to have lucky effect";
            }

            path.addUsed(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER);
          }
        }
      };
    } }, { key: "run", value:

    function run(path) {var _this7 = this;
      if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {var _iterator4 = QuestL11RonProtesters_createForOfIteratorHelper(
              path.pulls.filter(
              function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;})),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;)
              {var item = _step4.value;
                GreyPulls.tryPull(item);
                path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
              }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
          }
        };
      }

      if (
      this.getProtestersRemaining() > 1 &&
      path.canUse(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER) &&
      this.toAbsorb.length == 0)
      {
        return this.runClover(path);
      }

      // If we can get more than 6
      var lynyrdScares = this.getLynyrdScares();
      // Calculate sleaze scares using our current sleaze stuff, skip equipped items so we can do our baseline
      var sleazeScares = this.getSleazeScares();

      var outfit = new GreyOutfit().setNoCombat().setNoCombat().setItemDrops();

      path.equips.forEach(function (i) {return outfit.addWeight(i);});

      if (sleazeScares * 2 >= lynyrdScares) {
        outfit.addWeight("sleaze dmg", 2).addWeight("sleaze spell dmg", 2);
      }

      var forceMan =
      this.toAbsorb.length == 0 &&
      (0,external_kolmafia_.haveFamiliar)(this.lefthandMan) &&
      (0,external_kolmafia_.availableAmount)(this.umbrella) +
      (0,external_kolmafia_.availableAmount)(this.deck) +
      Math.min(1, (0,external_kolmafia_.availableAmount)(this.sleazeBook)) >=
      2;

      if (forceMan) {
        if ((0,external_kolmafia_.availableAmount)(this.umbrella) > 0) {
          outfit.addWeight(this.umbrella);
        }
      } else if (
      (0,external_kolmafia_.availableAmount)(this.umbrella) > 0 &&
      !path.equips.includes(this.deck))
      {
        outfit.addWeight(this.umbrella);
      }

      // TODO Run left hand man?

      return {
        location: this.proLoc,
        outfit: outfit,
        olfaction: forceMan ? null : [this.cultist],
        mayFreeRun: false,
        familiar: forceMan ? this.lefthandMan : null,
        disableFamOverride: forceMan,
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            if (
            //    lynyrdScares > 3 &&
            (0,external_kolmafia_.haveEffect)(_this7.musky) <= 0 &&
            (0,external_kolmafia_.availableAmount)(_this7.musk) > 0)
            {
              (0,external_kolmafia_.use)(_this7.musk);
            }

            var doLynrd =
             true || 0;
            var doSleaze =  true || 0;
            var doFire =
             true ||
            0;

            props.setChoice(856, doLynrd ? 1 : 2); // Lynrd
            props.setChoice(857, doSleaze ? 1 : 2); // Bench warrent
            props.setChoice(858, doFire ? 1 : 2);

            var settings = new AdventureSettings();
            settings.setFinishingBlowMacro(
            new MacroBuilder/* Macro */.LE().tryItem(_this7.cig).step(greyKillingBlow(outfit)));

            settings.addNoBanish(_this7.cultist);
            settings.addNoBanish(external_kolmafia_.Monster.get("Lynyrd Skinner"));

            greyAdv(_this7.proLoc, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getProtestersRemaining", value:

    function getProtestersRemaining() {
      return 80 - (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("zeppelinProtestors"));
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.proLoc];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11RonProtesters;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Ron.ts
function QuestL11Ron_typeof(obj) {"@babel/helpers - typeof";return QuestL11Ron_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Ron_typeof(obj);}function QuestL11Ron_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Ron_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Ron_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Ron_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Ron_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Ron_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Ron_defineProperty(obj, key, value) {key = QuestL11Ron_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Ron_toPropertyKey(arg) {var key = QuestL11Ron_toPrimitive(arg, "string");return QuestL11Ron_typeof(key) === "symbol" ? key : String(key);}function QuestL11Ron_toPrimitive(input, hint) {if (QuestL11Ron_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Ron_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11Ron = /*#__PURE__*/function () {


  function QuestL11Ron() {QuestL11Ron_classCallCheck(this, QuestL11Ron);QuestL11Ron_defineProperty(this, "children", []);
    this.children.push(new QuestL11RonProtesters());
    this.children.push(new QuestL11RonAirship());
  }QuestL11Ron_createClass(QuestL11Ron, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Ron / Parent";
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }]);return QuestL11Ron;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenBats.ts
function QuestL11ShenBats_typeof(obj) {"@babel/helpers - typeof";return QuestL11ShenBats_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ShenBats_typeof(obj);}function QuestL11ShenBats_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenBats_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ShenBats_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ShenBats_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenBats_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenBats_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenBats_defineProperty(obj, key, value) {key = QuestL11ShenBats_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ShenBats_toPropertyKey(arg) {var key = QuestL11ShenBats_toPrimitive(arg, "string");return QuestL11ShenBats_typeof(key) === "symbol" ? key : String(key);}function QuestL11ShenBats_toPrimitive(input, hint) {if (QuestL11ShenBats_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ShenBats_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11ShenBats = /*#__PURE__*/function () {function QuestL11ShenBats() {QuestL11ShenBats_classCallCheck(this, QuestL11ShenBats);QuestL11ShenBats_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Batrat and Ratbat Burrow"));}QuestL11ShenBats_createClass(QuestL11ShenBats, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / Bats";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL04Bat") < 1) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (getQuestStatus("questL04Bat") <= 3) {
        outfit.setItemDrops();
      }

      return {
        location: this.location,
        outfit: outfit,
        freeRun: function freeRun() {return getQuestStatus("questL04Bat") > 3;},
        run: function run() {
          greyAdv(_this.location);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL11ShenBats;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenGiants.ts
function QuestL11ShenGiants_typeof(obj) {"@babel/helpers - typeof";return QuestL11ShenGiants_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ShenGiants_typeof(obj);}function QuestL11ShenGiants_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenGiants_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ShenGiants_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ShenGiants_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenGiants_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenGiants_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenGiants_defineProperty(obj, key, value) {key = QuestL11ShenGiants_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ShenGiants_toPropertyKey(arg) {var key = QuestL11ShenGiants_toPrimitive(arg, "string");return QuestL11ShenGiants_typeof(key) === "symbol" ? key : String(key);}function QuestL11ShenGiants_toPrimitive(input, hint) {if (QuestL11ShenGiants_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ShenGiants_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11ShenGiants = /*#__PURE__*/function () {function QuestL11ShenGiants() {QuestL11ShenGiants_classCallCheck(this, QuestL11ShenGiants);QuestL11ShenGiants_defineProperty(this, "modelAirShip",
    external_kolmafia_.Item.get("Model airship"));QuestL11ShenGiants_defineProperty(this, "wig",
    external_kolmafia_.Item.get("Mohawk Wig"));QuestL11ShenGiants_defineProperty(this, "record",
    external_kolmafia_.Item.get("drum 'n' bass 'n' drum 'n' bass record"));QuestL11ShenGiants_defineProperty(this, "rocketToStars",
    external_kolmafia_.Item.get("steam-powered model rocketship"));QuestL11ShenGiants_defineProperty(this, "loc",
    external_kolmafia_.Location.get(
    "The Castle in the Clouds in the Sky (Top Floor)"));QuestL11ShenGiants_defineProperty(this, "steamNC",

    677);QuestL11ShenGiants_defineProperty(this, "raverNC",
    676);QuestL11ShenGiants_defineProperty(this, "punkNC",
    678);QuestL11ShenGiants_defineProperty(this, "gothNC",
    675);}QuestL11ShenGiants_createClass(QuestL11ShenGiants, [{ key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (
      (0,external_kolmafia_.availableAmount)(this.rocketToStars) == 0 ||
      (0,external_kolmafia_.getProperty)("questL10Garbage") != "finished")
      {
        outfit.setNoCombat();
      }

      if ((0,external_kolmafia_.availableAmount)(this.wig) > 0) {
        outfit.addWeight(this.wig);
      }

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            // Goth and steam love each other
            if ((0,external_kolmafia_.availableAmount)(_this.modelAirShip) > 0) {
              props.setChoice(_this.steamNC, 1); // Use model ship
              props.setChoice(_this.gothNC, 4); // Crawl to copper
            } else if ((0,external_kolmafia_.availableAmount)(_this.record) > 0) {
              // We have the record, lets end this.
              props.setChoice(_this.steamNC, 4); // Crawl to goth
              props.setChoice(_this.gothNC, 2); // Grab record
            } else if ((0,external_kolmafia_.availableAmount)(_this.rocketToStars) == 0) {
              // We don't have airship or record, to avoid fighting lets just grab the rocket if we can
              props.setChoice(_this.steamNC, 2); // Grab rocket
              props.setChoice(_this.gothNC, 4); // Crawl to steam
            } else {
              // This adv is a waste, just fight.
              props.setChoice(_this.steamNC, 1); // Fight steam
              props.setChoice(_this.gothNC, 1); // Fight goth
            }

            // Punk and raver love each other
            if ((0,external_kolmafia_.equippedAmount)(_this.wig) > 0) {
              // If we can end this with the wig
              props.setChoice(_this.punkNC, 1); // Use wig
              props.setChoice(_this.raverNC, 4); // Crawl to punk rock
            } else if ((0,external_kolmafia_.availableAmount)(_this.record) == 0) {
              // If we can grab a record
              props.setChoice(_this.punkNC, 4); // Crawl to raver
              props.setChoice(_this.raverNC, 3); // Grab record
            } else {
              // We're going to waste an adventure
              props.setChoice(_this.punkNC, 4); // Crawl to raver
              props.setChoice(_this.raverNC, 1); // Fight the raver for their advs
            }

            props.setChoice(679, 1); // Turn dat wheel

            greyAdv(_this.loc, outfit);

            if ((0,external_kolmafia_.lastChoice)() == 679) {
              (0,external_kolmafia_.council)();
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / Giants";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 5) {
        return QuestStatus.COMPLETED;
      }

      if (status < 5) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL10Garbage") < 9) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL11ShenGiants;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenNinja.ts
function QuestL11ShenNinja_typeof(obj) {"@babel/helpers - typeof";return QuestL11ShenNinja_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ShenNinja_typeof(obj);}function QuestL11ShenNinja_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenNinja_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ShenNinja_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ShenNinja_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenNinja_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenNinja_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenNinja_defineProperty(obj, key, value) {key = QuestL11ShenNinja_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ShenNinja_toPropertyKey(arg) {var key = QuestL11ShenNinja_toPrimitive(arg, "string");return QuestL11ShenNinja_typeof(key) === "symbol" ? key : String(key);}function QuestL11ShenNinja_toPrimitive(input, hint) {if (QuestL11ShenNinja_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ShenNinja_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11ShenNinja = /*#__PURE__*/function () {function QuestL11ShenNinja() {QuestL11ShenNinja_classCallCheck(this, QuestL11ShenNinja);QuestL11ShenNinja_defineProperty(this, "location",
    external_kolmafia_.Location.get("Lair of the Ninja Snowmen"));QuestL11ShenNinja_defineProperty(this, "assassin",

    external_kolmafia_.Monster.get("Ninja Snowman Assassin"));}QuestL11ShenNinja_createClass(QuestL11ShenNinja, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / Ninjas";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL08Trapper") < 2) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (getQuestStatus("questL08Trapper") <= 2) {
        outfit.setPlusCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        freeRun: function freeRun(monster) {return monster != _this.assassin;},
        run: function run() {
          greyAdv(_this.location, outfit);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return getQuestStatus("questL08Trapper") > 2;
    } }]);return QuestL11ShenNinja;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/shen/QuestL11ShenTurnIn.ts
function QuestL11ShenTurnIn_typeof(obj) {"@babel/helpers - typeof";return QuestL11ShenTurnIn_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ShenTurnIn_typeof(obj);}function QuestL11ShenTurnIn_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11ShenTurnIn_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL11ShenTurnIn_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11ShenTurnIn_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11ShenTurnIn_arrayLikeToArray(o, minLen);}function QuestL11ShenTurnIn_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL11ShenTurnIn_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShenTurnIn_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ShenTurnIn_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ShenTurnIn_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShenTurnIn_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShenTurnIn_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShenTurnIn_defineProperty(obj, key, value) {key = QuestL11ShenTurnIn_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ShenTurnIn_toPropertyKey(arg) {var key = QuestL11ShenTurnIn_toPrimitive(arg, "string");return QuestL11ShenTurnIn_typeof(key) === "symbol" ? key : String(key);}function QuestL11ShenTurnIn_toPrimitive(input, hint) {if (QuestL11ShenTurnIn_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ShenTurnIn_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL11ShenTurnIn = /*#__PURE__*/function () {function QuestL11ShenTurnIn() {QuestL11ShenTurnIn_classCallCheck(this, QuestL11ShenTurnIn);QuestL11ShenTurnIn_defineProperty(this, "disguise",
    external_kolmafia_.Item.get("Crappy Waiter Disguise"));QuestL11ShenTurnIn_defineProperty(this, "shenClub",
    external_kolmafia_.Location.get("The Copperhead Club"));QuestL11ShenTurnIn_defineProperty(this, "crappy",
    external_kolmafia_.Effect.get("Crappily Disguised as a Waiter"));QuestL11ShenTurnIn_defineProperty(this, "crappyDisguises",
    [
    "Waiter dressed as a ninja",
    "Ninja dressed as a waiter"].
    map(function (s) {return external_kolmafia_.Monster.get(s);}));QuestL11ShenTurnIn_defineProperty(this, "toAbsorb", void 0);QuestL11ShenTurnIn_defineProperty(this, "nanovision",

    external_kolmafia_.Skill.get("Double Nanovision"));QuestL11ShenTurnIn_defineProperty(this, "cocktail",
    external_kolmafia_.Item.get("Unnamed cocktail"));QuestL11ShenTurnIn_defineProperty(this, "penguin",
    external_kolmafia_.Monster.get("Mob Penguin Capo"));QuestL11ShenTurnIn_defineProperty(this, "robor",
    external_kolmafia_.Familiar.get("Robortender"));QuestL11ShenTurnIn_defineProperty(this, "ball",
    external_kolmafia_.Item.get("miniature crystal ball"));}QuestL11ShenTurnIn_createClass(QuestL11ShenTurnIn, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / TurnIn";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return this.haveEffect();
    } }, { key: "free", value:

    function free() {
      return this.haveEffect();
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 6) {
        return QuestStatus.COMPLETED;
      }

      if (
      currentPredictions().get(this.shenClub) == this.penguin && (
      this.toAbsorb.includes(this.penguin) || (0,external_kolmafia_.haveFamiliar)(this.robor)))
      {
        return QuestStatus.READY;
      }

      if (status < 2) {
        return QuestStatus.NOT_READY;
      }

      if (status % 2 == 1) {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.nanovision)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "needToDeliver", value:

    function needToDeliver() {
      var prop = (0,external_kolmafia_.getProperty)("questL11Shen");

      return prop == "step2" || prop == "step4" || prop == "step6";
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      /*  if (
        getProperty("copperheadClubHazard") != "lantern" ||
        availableAmount(this.cocktail) < 2
      )*/{
        outfit.setItemDrops();
      }

      var fishHuntTime =
      (0,external_kolmafia_.haveFamiliar)(this.robor) &&
      !(0,external_kolmafia_.isBanished)(this.penguin) &&
      this.toAbsorb.length == 0;
      var roboTime =
      fishHuntTime && currentPredictions().get(this.shenClub) == this.penguin;

      return {
        location: this.shenClub,
        outfit: outfit,
        familiar: roboTime ? this.robor : null,
        olfaction: (0,external_kolmafia_.haveFamiliar)(this.robor) ? [this.penguin] : null,
        mayFreeRun: false,
        run: function run() {
          if (!_this.hittingNC()) {
            if (!_this.haveEffect() && (0,external_kolmafia_.availableAmount)(_this.disguise) > 0) {
              (0,external_kolmafia_.use)(_this.disguise);
            }
          }

          if (
          !roboTime &&
          _this.toAbsorb.length == 0 &&
          DelayBurners.isTryingForDupeableGoblin())
          {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          var props = new Properties_PropertyManager();

          try {
            if ((0,external_kolmafia_.getProperty)("copperheadClubHazard") != "lantern") {
              props.setChoice(855, 3); // Light lanterns on fire
            } else {
              props.setChoice(855, 4); // Get unnamed cocktails

              if (_this.toAbsorb.length == 0) {
                var ready = DelayBurners.getReadyDelayBurner();

                if (ready != null) {
                  ready.doFightSetup();
                } else {
                  DelayBurners.tryReplaceCombats();
                }
              }
            }

            props.setChoice(1074, 1); // Approach table
            props.setChoice(851, 1); // Sip poison
            props.setChoice(852, 1); // Sip poison
            props.setChoice(853, 1); // Sip poison
            props.setChoice(854, 1); // Sip poison

            var settings = new AdventureSettings();var _iterator = QuestL11ShenTurnIn_createForOfIteratorHelper(

              _this.crappyDisguises),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var m = _step.value;
                settings.addNoBanish(m);
              }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

            if ((0,external_kolmafia_.haveFamiliar)(_this.robor)) {
              settings.addNoBanish(_this.penguin);
            }

            greyAdv(_this.shenClub, outfit, settings);

            if (_this.haveEffect()) {
              (0,external_kolmafia_.refreshStatus)();

              if (_this.haveEffect()) {
                greyAdv(_this.shenClub, outfit, settings);
              }
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "hittingNC", value:

    function hittingNC() {
      var turnsSpent = this.shenClub.turnsSpent;
      var nextMeeting = Math.floor(getQuestStatus("questL11Shen") / 2) * 5;

      return turnsSpent > nextMeeting - 1;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.shenClub];
    } }, { key: "haveEffect", value:

    function haveEffect() {
      return (0,external_kolmafia_.haveEffect)(this.crappy) > 0;
    } }]);return QuestL11ShenTurnIn;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Shen.ts
function QuestL11Shen_typeof(obj) {"@babel/helpers - typeof";return QuestL11Shen_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Shen_typeof(obj);}function QuestL11Shen_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Shen_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Shen_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Shen_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Shen_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Shen_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Shen_defineProperty(obj, key, value) {key = QuestL11Shen_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Shen_toPropertyKey(arg) {var key = QuestL11Shen_toPrimitive(arg, "string");return QuestL11Shen_typeof(key) === "symbol" ? key : String(key);}function QuestL11Shen_toPrimitive(input, hint) {if (QuestL11Shen_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Shen_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL11Shen = /*#__PURE__*/function () {








  function QuestL11Shen() {QuestL11Shen_classCallCheck(this, QuestL11Shen);QuestL11Shen_defineProperty(this, "shenClub", external_kolmafia_.Location.get("The Copperhead Club"));QuestL11Shen_defineProperty(this, "shenItems", new Map());QuestL11Shen_defineProperty(this, "children", []);
    this.children.push(new QuestL11ShenTurnIn());
    this.children.push(new QuestL11ShenGiants());
    this.children.push(new QuestL11ShenNinja());
    this.children.push(new QuestL11ShenBats());
  }QuestL11Shen_createClass(QuestL11Shen, [{ key: "getLocations", value: function getLocations() {return [];} }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Shen / Meet";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Shen");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(1074, 1); // Approach table
          props.setChoice(851, 1);

          try {
            greyAdv(_this.shenClub);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11Shen;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleBowling.ts
function QuestL11TempleBowling_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleBowling_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleBowling_typeof(obj);}function QuestL11TempleBowling_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleBowling_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleBowling_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleBowling_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleBowling_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleBowling_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleBowling_defineProperty(obj, key, value) {key = QuestL11TempleBowling_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleBowling_toPropertyKey(arg) {var key = QuestL11TempleBowling_toPrimitive(arg, "string");return QuestL11TempleBowling_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleBowling_toPrimitive(input, hint) {if (QuestL11TempleBowling_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleBowling_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL11Bowling = /*#__PURE__*/function () {function QuestL11Bowling() {QuestL11TempleBowling_classCallCheck(this, QuestL11Bowling);QuestL11TempleBowling_defineProperty(this, "bowl",
    external_kolmafia_.Item.get("Bowl of Scorpions"));QuestL11TempleBowling_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Hidden Bowling Alley"));QuestL11TempleBowling_defineProperty(this, "bowlingBall",
    external_kolmafia_.Item.get("Bowling Ball"));QuestL11TempleBowling_defineProperty(this, "cosmicBall",
    external_kolmafia_.Item.get("Cosmic Bowling Ball"));QuestL11TempleBowling_defineProperty(this, "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestL11TempleBowling_defineProperty(this, "cosmicBowled",
    "_greyCosmicBowled");QuestL11TempleBowling_defineProperty(this, "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestL11TempleBowling_defineProperty(this, "drunk",
    external_kolmafia_.Monster.get("Drunk pygmy"));QuestL11TempleBowling_defineProperty(this, "book",
    external_kolmafia_.Item.get("Book of matches"));QuestL11TempleBowling_defineProperty(this, "bowler",
    external_kolmafia_.Monster.get("Pygmy Bowler"));QuestL11TempleBowling_defineProperty(this, "sweep",
    external_kolmafia_.Skill.get("System Sweep"));QuestL11TempleBowling_defineProperty(this, "toAbsorb", void 0);}QuestL11TempleBowling_createClass(QuestL11Bowling, [{ key: "hasCosmicBowled", value:


    function hasCosmicBowled() {
      return (0,external_kolmafia_.getProperty)(this.cosmicBowled) == "true";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "ownCosmicBall", value:

    function ownCosmicBall() {
      return (0,external_kolmafia_.getProperty)("hasCosmicBowlingBall") == "true";
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Bowling";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getProgress", value:

    function getProgress() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hiddenBowlingAlleyProgress"));
    } }, { key: "isCosmicBallNextCombat", value:

    function isCosmicBallNextCombat() {
      return (
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cosmicBowlingBallReturnCombats")) <= 0 ||
        (0,external_kolmafia_.availableAmount)(this.cosmicBall) > 0);

    } }, { key: "mustBeDone", value:

    function mustBeDone(insists) {
      if (insists) {
        return false;
      }

      if (this.toAbsorb.length > 0 && (0,external_kolmafia_.familiarWeight)(this.goose) < 6) {
        return false;
      }

      if (!this.ownCosmicBall()) {
        return false;
      }

      if ((0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Ultrahydrated"))) {
        return false;
      }

      if (this.status() != QuestStatus.READY) {
        return false;
      }

      if (this.getProgress() != 1 || !this.isCosmicBallNextCombat()) {
        return false;
      }

      return true;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL11Spare");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Worship") != "step3") {
        return QuestStatus.NOT_READY;
      }

      if (!this.barUnlocked() && (0,external_kolmafia_.haveSkill)(this.nanovision)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.bowlingBall) > 0) {
        return QuestStatus.READY;
      }

      // If we don't have nanovision yet
      if (!(0,external_kolmafia_.haveSkill)(this.nanovision) && !(0,external_kolmafia_.isBanished)(this.drunk)) {
        return QuestStatus.READY;
      }

      // If we have the cosmic ball, but have not bowled yet. Lets delay this until we can definitely score some progress.
      if (
      this.ownCosmicBall() &&
      !this.hasCosmicBowled() &&
      this.getProgress() <= 3 &&
      !this.isCosmicBallNextCombat())
      {
        return QuestStatus.NOT_READY;
      }

      // If we can't skip a drunk, faster later
      if ((0,external_kolmafia_.myMeat)() < 1000 && (0,external_kolmafia_.availableAmount)(this.bowl) == 0) {
        return QuestStatus.FASTER_LATER;
      }

      if (this.getProgress() > 6) {
        throw "Shouldn't be at this point for bowling. Did we cosmic ball late?";
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (this.getProgress() >= 5 && (0,external_kolmafia_.availableAmount)(this.bowlingBall) > 0) {
        outfit.addWeight("elemental dmg", 1, null, 0.1);
      } else {
        outfit.setItemDrops();
      }

      var orbs = [];

      var cosmicBall =
      !this.hasCosmicBowled() &&
      this.ownCosmicBall() &&
      this.isCosmicBallNextCombat();
      var bowlingBall = !cosmicBall && (0,external_kolmafia_.closetAmount)(this.bowlingBall) > 0;

      if (!(0,external_kolmafia_.haveSkill)(this.sweep)) {
        orbs.push(this.drunk);
      }

      // Banishers
      return {
        location: this.loc,
        outfit: outfit,
        orbs: orbs,
        olfaction: [this.bowler],
        freeRun: function freeRun() {return true;},
        run: function run() {
          var macro = null;
          var couldBeBowling = false;

          if (cosmicBall) {
            macro = new MacroBuilder/* Macro */.LE().item(_this.cosmicBall);
            couldBeBowling = true;

            if ((0,external_kolmafia_.itemAmount)(_this.bowlingBall) > 0) {
              (0,external_kolmafia_.putCloset)(_this.bowlingBall, (0,external_kolmafia_.availableAmount)(_this.bowlingBall));
            }
          } else if (bowlingBall) {
            (0,external_kolmafia_.takeCloset)(_this.bowlingBall, (0,external_kolmafia_.closetAmount)(_this.bowlingBall));
          }

          if ((0,external_kolmafia_.availableAmount)(_this.book) > 0 && !_this.barUnlocked()) {
            (0,external_kolmafia_.use)(_this.book);
          }

          if ((0,external_kolmafia_.itemAmount)(_this.bowlingBall) == 0 && _this.barUnlocked()) {
            (0,external_kolmafia_.retrieveItem)(_this.bowl);
          }

          var progressPrior = _this.getProgress();

          var props = new Properties_PropertyManager();
          props.setChoice(788, 1);

          try {
            var settings = new AdventureSettings();
            settings.setStartOfFightMacro(macro);
            settings.addNoBanish(_this.bowler);

            if (!(0,external_kolmafia_.haveSkill)(_this.nanovision)) {
              settings.addNoBanish(_this.drunk);
            }

            greyAdv(_this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }

          if (couldBeBowling && _this.getProgress() > progressPrior) {
            (0,external_kolmafia_.setProperty)(_this.cosmicBowled, "true");
          }
        }
      };
    } }, { key: "barUnlocked", value:

    function barUnlocked() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_.myAscensions)();
    } }]);return QuestL11Bowling;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleBusiness.ts
function QuestL11TempleBusiness_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleBusiness_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleBusiness_typeof(obj);}function QuestL11TempleBusiness_slicedToArray(arr, i) {return QuestL11TempleBusiness_arrayWithHoles(arr) || QuestL11TempleBusiness_iterableToArrayLimit(arr, i) || QuestL11TempleBusiness_unsupportedIterableToArray(arr, i) || QuestL11TempleBusiness_nonIterableRest();}function QuestL11TempleBusiness_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL11TempleBusiness_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL11TempleBusiness_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL11TempleBusiness_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11TempleBusiness_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL11TempleBusiness_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11TempleBusiness_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11TempleBusiness_arrayLikeToArray(o, minLen);}function QuestL11TempleBusiness_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL11TempleBusiness_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleBusiness_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleBusiness_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleBusiness_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleBusiness_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleBusiness_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleBusiness_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11TempleBusiness_setPrototypeOf(subClass, superClass);}function QuestL11TempleBusiness_setPrototypeOf(o, p) {QuestL11TempleBusiness_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11TempleBusiness_setPrototypeOf(o, p);}function QuestL11TempleBusiness_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11TempleBusiness_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11TempleBusiness_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11TempleBusiness_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11TempleBusiness_possibleConstructorReturn(this, result);};}function QuestL11TempleBusiness_possibleConstructorReturn(self, call) {if (call && (QuestL11TempleBusiness_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11TempleBusiness_assertThisInitialized(self);}function QuestL11TempleBusiness_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11TempleBusiness_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11TempleBusiness_getPrototypeOf(o) {QuestL11TempleBusiness_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11TempleBusiness_getPrototypeOf(o);}function QuestL11TempleBusiness_defineProperty(obj, key, value) {key = QuestL11TempleBusiness_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleBusiness_toPropertyKey(arg) {var key = QuestL11TempleBusiness_toPrimitive(arg, "string");return QuestL11TempleBusiness_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleBusiness_toPrimitive(input, hint) {if (QuestL11TempleBusiness_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleBusiness_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL11Business = /*#__PURE__*/function (_TaskInfo) {QuestL11TempleBusiness_inherits(QuestL11Business, _TaskInfo);var _super = QuestL11TempleBusiness_createSuper(QuestL11Business);function QuestL11Business() {var _this;QuestL11TempleBusiness_classCallCheck(this, QuestL11Business);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "files",
    [
    "McClusky file (page 1)",
    "McClusky file (page 2)",
    "McClusky file (page 3)",
    "McClusky file (page 4)",
    "McClusky file (page 5)"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "completeFile",
    external_kolmafia_.Item.get("McClusky file (complete)"));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "binderClip",
    external_kolmafia_.Item.get("Boring Binder Clip"));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("the hidden office building"));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "apartment",
    external_kolmafia_.Location.get("The Hidden Apartment Building"));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "accountant",
    external_kolmafia_.Monster.get("Pygmy witch accountant"));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "spirit",
    (0,external_kolmafia_.toMonster)(444));QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "toAbsorb", void 0);QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "paths", void 0);QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "savedEncounters",


    []);QuestL11TempleBusiness_defineProperty(QuestL11TempleBusiness_assertThisInitialized(_this), "encountersSaved",
    0);return _this;}QuestL11TempleBusiness_createClass(QuestL11Business, [{ key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Accountants";
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      var firstTurns = this.hasFirstNC() ?
      0 :
      assumeUnstarted ?
      5 :
      this.delayUntilNextNC();
      var secondTurns =
      !this.hasFirstNC() || assumeUnstarted ? 4 : this.delayUntilNextNC();

      this.paths = [new PossiblePath(firstTurns + secondTurns)];

      var combos = [];

      if (firstTurns > 0) {
        combos.push([ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC, 0]);
        combos.push([null, firstTurns]);
      }

      if (secondTurns > 0) {
        combos.push([ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC, 0]);
        combos.push([null, secondTurns]);
      }

      if (combos.length == 0) {
        return;
      }var _iterator = QuestL11TempleBusiness_createForOfIteratorHelper(

        getAllCombinations(combos)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          if (combo.length != combos.length / 2) {
            continue;
          }

          var path = new PossiblePath(
          combo.map(function (_ref) {var _ref2 = QuestL11TempleBusiness_slicedToArray(_ref, 2),t = _ref2[1];return t;}).reduce(function (p, v) {return p + v;}, 0));var _iterator2 = QuestL11TempleBusiness_createForOfIteratorHelper(


            combo),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _step2$value = QuestL11TempleBusiness_slicedToArray(_step2.value, 1),res = _step2$value[0];
              if (res == null) {
                continue;
              }

              path.add(res);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          this.paths.push(path);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc, this.apartment];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "delayUntilNextNC", value:

    function delayUntilNextNC() {
      if (this.encountersSaved != this.loc.turnsSpent) {
        this.encountersSaved = this.loc.turnsSpent;
        this.savedEncounters = getEncounters("The Hidden Office Building", [
        "Working Holiday"]).
        reverse();
      }

      var turnsSpent = 0;
      var lastTurnSpent = -1;
      var ncAfter = 5;var _iterator3 = QuestL11TempleBusiness_createForOfIteratorHelper(

        this.savedEncounters),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _step3$value = QuestL11TempleBusiness_slicedToArray(_step3.value, 2),encounter = _step3$value[0],turn = _step3$value[1];
          if (encounter == "Working Holiday") {
            ncAfter = 4;

            if (turn == lastTurnSpent) {
              turnsSpent--;
            }

            break;
          }

          turnsSpent++;
          lastTurnSpent = turn;
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

      if (turnsSpent > ncAfter) {
        (0,external_kolmafia_.print)(
        "Weird. Parsing is wrong. Expected to hit the apartment NC after " +
        ncAfter +
        " delay, but we have " +
        turnsSpent +
        " spent.. Encounters: " +
        this.savedEncounters.map(function (_ref3) {var _ref4 = QuestL11TempleBusiness_slicedToArray(_ref3, 2),e = _ref4[0],turn = _ref4[1];return e + ": " + turn;}).join(", "),
        "red");

      }

      var delay = Math.max(0, ncAfter - turnsSpent);

      return delay;
    } }, { key: "isDelayBurning", value:

    function isDelayBurning() {
      return (
        this.delayUntilNextNC() > 0 && (
        (0,external_kolmafia_.availableAmount)(this.completeFile) > 0 || this.filesRemaining() == 0));

    } }, { key: "hasFirstNC", value:

    function hasFirstNC() {
      return (
        (0,external_kolmafia_.availableAmount)(this.binderClip) + (0,external_kolmafia_.availableAmount)(this.completeFile) > 0);

    } }, { key: "canRun", value:

    function canRun() {
      return (
        (0,external_kolmafia_.getProperty)("questL11Business") != "unstarted" &&
        (0,external_kolmafia_.getProperty)("questL11Worship") == "step3");

    } }, { key: "status", value:

    function status(path) {
      var status = (0,external_kolmafia_.getProperty)("questL11Business");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (path == null || !this.canRun()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.binderClip) > 0 && this.filesRemaining() == 0) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Curses") != "finished" && this.goCurses(path)) {
        return QuestStatus.NOT_READY;
      }

      if (this.wantToForceNextNC(path)) {
        if (path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC).primed()) {
          return QuestStatus.READY;
        }

        // Only run the first NC when primed
        if (!this.hasFirstNC()) {
          return QuestStatus.NOT_READY;
        }

        // Only run the second NC when primed and no files remaining
        if (this.toAbsorb.length == 0 && (0,external_kolmafia_.availableAmount)(this.completeFile) > 0) {
          return QuestStatus.NOT_READY;
        }
      }

      if ((0,external_kolmafia_.isBanished)(this.accountant)) {
        return QuestStatus.NOT_READY;
      }

      if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "goCurses", value:

    function goCurses(path) {
      return this.farmFiles() && this.delayUntilNextNC() == 0;
    } }, { key: "farmFiles", value:

    function farmFiles() {
      return (0,external_kolmafia_.availableAmount)(this.binderClip) > 0 && this.filesRemaining() > 0;
    } }, { key: "wantToForceNextNC", value:

    function wantToForceNextNC(path) {
      if (path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC) == 0) {
        return false;
      }

      if (this.delayUntilNextNC() == 0) {
        return false;
      }

      // If we haven't had our first NC, force that
      if (!this.hasFirstNC()) {
        return true;
      }

      // If we've picked up our absorb
      return this.toAbsorb.length == 0;
    } }, { key: "readyToForceNC", value:

    function readyToForceNC() {
      return !this.hasFirstNC() ?
      !this.farmFiles() :
      (0,external_kolmafia_.availableAmount)(this.completeFile) > 0 && this.toAbsorb.length == 0;
    } }, { key: "attemptPrime", value:

    function attemptPrime(path) {
      if (!this.wantToForceNextNC(path) || !this.canRun()) {
        return false;
      }

      if (!this.readyToForceNC()) {
        return false;
      }

      setPrimedResource(this, path, path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC));

      return true;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if ((0,external_kolmafia_.availableAmount)(this.binderClip) > 0 && this.filesRemaining() == 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            _this2.tryCreate();
          }
        };
      }

      if (path != null && this.goCurses(path)) {
        //
        return {
          location: this.apartment,
          orbs: [this.accountant],
          run: function run() {
            var props = new Properties_PropertyManager();

            props.setChoice(780, 6); // Skip
            var settings = new AdventureSettings().addBanish(
            external_kolmafia_.Monster.get("pygmy witch lawyer"));


            try {
              greyAdv(_this2.apartment, null, settings);

              _this2.tryCreate();
            } finally {
              props.resetAll();
            }
          }
        };
      }

      return {
        location:
        path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC) &&
        path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC).primed() ?
        null :
        this.loc,
        orbs: this.filesRemaining() > 0 ? [this.accountant] : null,
        forcedFight:
        (0,external_kolmafia_.availableAmount)(this.completeFile) > 0 ?
        [this.delayUntilNextNC(), this.spirit] :
        null,
        mayFreeRun: this.delayUntilNextNC() > 0,
        freeRun: function freeRun(monster) {return (
            _this2.filesRemaining() == 0 || monster != _this2.accountant);},
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            if ((0,external_kolmafia_.availableAmount)(_this2.completeFile) > 0) {
              props.setChoice(786, 1); // Have complete file, fight
            } else if ((0,external_kolmafia_.availableAmount)(_this2.binderClip) == 0) {
              props.setChoice(786, 2); // Get binder clip
            } else {
              props.setChoice(786, 3); // Fight accountant
            }

            if (
            (0,external_kolmafia_.availableAmount)(_this2.completeFile) > 0 &&
            _this2.filesRemaining() == 0)
            {
              var ready = DelayBurners.getReadyDelayBurner();

              if (ready != null) {
                ready.doFightSetup();
              } else {
                DelayBurners.tryReplaceCombats();
              }
            }

            if (DelayBurners.isTryingForDupeableGoblin()) {
              (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
            }

            var settings = new AdventureSettings().addBanish(
            external_kolmafia_.Monster.get("pygmy headhunter"));


            greyAdv(_this2.loc, null, settings);

            _this2.tryCreate();
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "tryCreate", value:

    function tryCreate() {
      if (this.filesRemaining() > 0 || (0,external_kolmafia_.availableAmount)(this.binderClip) == 0) {
        return;
      }

      (0,external_kolmafia_.use)(this.binderClip);
    } }, { key: "filesRemaining", value:

    function filesRemaining() {
      return (0,external_kolmafia_.availableAmount)(this.completeFile) > 0 ?
      0 :
      this.files.filter(function (f) {return (0,external_kolmafia_.availableAmount)(f) == 0;}).length;
    } }]);return QuestL11Business;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleCurses.ts
function QuestL11TempleCurses_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleCurses_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleCurses_typeof(obj);}function QuestL11TempleCurses_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleCurses_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleCurses_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleCurses_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleCurses_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleCurses_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleCurses_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11TempleCurses_setPrototypeOf(subClass, superClass);}function QuestL11TempleCurses_setPrototypeOf(o, p) {QuestL11TempleCurses_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11TempleCurses_setPrototypeOf(o, p);}function QuestL11TempleCurses_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11TempleCurses_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11TempleCurses_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11TempleCurses_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11TempleCurses_possibleConstructorReturn(this, result);};}function QuestL11TempleCurses_possibleConstructorReturn(self, call) {if (call && (QuestL11TempleCurses_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11TempleCurses_assertThisInitialized(self);}function QuestL11TempleCurses_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11TempleCurses_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11TempleCurses_getPrototypeOf(o) {QuestL11TempleCurses_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11TempleCurses_getPrototypeOf(o);}function QuestL11TempleCurses_defineProperty(obj, key, value) {key = QuestL11TempleCurses_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleCurses_toPropertyKey(arg) {var key = QuestL11TempleCurses_toPrimitive(arg, "string");return QuestL11TempleCurses_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleCurses_toPrimitive(input, hint) {if (QuestL11TempleCurses_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleCurses_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestL11Curses = /*#__PURE__*/function (_TaskInfo) {QuestL11TempleCurses_inherits(QuestL11Curses, _TaskInfo);var _super = QuestL11TempleCurses_createSuper(QuestL11Curses);function QuestL11Curses() {var _this;QuestL11TempleCurses_classCallCheck(this, QuestL11Curses);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "curse1",
    external_kolmafia_.Effect.get("Once-Cursed"));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "curse2",
    external_kolmafia_.Effect.get("Twice-Cursed"));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "curse3",
    external_kolmafia_.Effect.get("Thrice-Cursed"));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "apartment",
    external_kolmafia_.Location.get("The Hidden Apartment Building"));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "shaman",
    external_kolmafia_.Monster.get("pygmy shaman"));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "spirit",
    (0,external_kolmafia_.toMonster)(442));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "toAbsorb", void 0);QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "files",

    [
    "McClusky file (page 1)",
    "McClusky file (page 2)",
    "McClusky file (page 3)",
    "McClusky file (page 4)",
    "McClusky file (page 5)"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "completeFile",
    external_kolmafia_.Item.get("McClusky file (complete)"));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "accountant",
    external_kolmafia_.Monster.get("Pygmy witch accountant"));QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "paths", void 0);QuestL11TempleCurses_defineProperty(QuestL11TempleCurses_assertThisInitialized(_this), "needRecalculate", void 0);return _this;}QuestL11TempleCurses_createClass(QuestL11Curses, [{ key: "getPossiblePaths", value:



    function getPossiblePaths() {
      return this.paths;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];

      if (assumeUnstarted || !this.shouldLookAtForcingNC()) {
        this.paths.push(new PossiblePath(0));
        return;
      }

      this.paths.push(
      new PossiblePath(this.filesRemaining() == 0 ? this.delayForNextNC() : 7));

      this.paths.push(new PossiblePath(0).add(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC));
    } }, { key: "shouldLookAtForcingNC", value:

    function shouldLookAtForcingNC() {
      var turns = this.delayForNextNC();

      if (turns <= 1) {
        return false;
      }

      var effect = (0,external_kolmafia_.haveEffect)(this.curse3);

      if (effect == 0) {
        return false;
      }

      if (effect < turns) {
        return true;
      }

      return this.filesRemaining() == 0;
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.apartment];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Curses";
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      var turns =
      (0,external_kolmafia_.haveEffect)(this.curse1) +
      (0,external_kolmafia_.haveEffect)(this.curse2) +
      (0,external_kolmafia_.haveEffect)(this.curse3);

      if (turns == 0) {
        return false;
      }

      var delay = this.delayForNextNC();
      var hasGracePeriod = delay < turns;
      var mayAsWellResetOrb =
      hasGracePeriod && currentPredictions().has(this.apartment);

      if (!(0,external_kolmafia_.haveEffect)(this.curse3) && mayAsWellResetOrb) {
        return false;
      }

      return turns <= delay + 4;
    } }, { key: "canRun", value:

    function canRun() {
      return (
        (0,external_kolmafia_.getProperty)("questL11Curses") != "unstarted" &&
        (0,external_kolmafia_.getProperty)("questL11Worship") == "step3");

    } }, { key: "status", value:

    function status(path) {
      var status = (0,external_kolmafia_.getProperty)("questL11Curses");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (path == null || !this.canRun()) {
        return QuestStatus.NOT_READY;
      }

      if (
      path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC) &&
      path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC).primed())
      {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hiddenBowlingAlleyProgress")) <= 1) {
        return QuestStatus.NOT_READY;
      }

      if (this.needRecalculate == null && this.shouldLookAtForcingNC()) {
        this.needRecalculate = true;
      }

      if (this.needRecalculate || path == null) {
        return QuestStatus.READY;
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC)) {
        if (path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC).primed()) {
          return QuestStatus.READY;
        }

        if (!this.mustBeDone()) {
          return QuestStatus.NOT_READY;
        }
      }

      if ((0,external_kolmafia_.haveEffect)(this.curse3) && this.delayForNextNC() == 0) {
        return QuestStatus.READY;
      }

      return QuestStatus.READY;
    } }, { key: "delayForNextNC", value:

    function delayForNextNC() {
      var totalTurns = this.apartment.turnsSpent;

      if (totalTurns < 9) {
        return 8 - totalTurns;
      }

      return 7 - (totalTurns - 9) % 8;
    } }, { key: "filesRemaining", value:

    function filesRemaining() {
      return (0,external_kolmafia_.availableAmount)(this.completeFile) > 0 ?
      0 :
      this.files.filter(function (f) {return (0,external_kolmafia_.availableAmount)(f) == 0;}).length;
    } }, { key: "attemptPrime", value:

    function attemptPrime(path) {
      if (
      !path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC) ||
      !this.shouldLookAtForcingNC())
      {
        return false;
      }

      setPrimedResource(this, path, path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC));

      return true;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if (this.needRecalculate) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            _this2.needRecalculate = false;

            AdventureFinder.recalculatePath();
          }
        };
      }

      var needCurses = (0,external_kolmafia_.haveEffect)(this.curse3) <= this.delayForNextNC();
      var needFiles =
      (0,external_kolmafia_.getProperty)("questL11Business") != "finished" &&
      this.filesRemaining() > 0 &&
      (0,external_kolmafia_.availableAmount)(this.completeFile) == 0;

      var orb = [];

      if (needCurses) {
        orb.push(this.shaman);
      }

      if (needFiles && (0,external_kolmafia_.haveEffect)(this.curse3)) {
        orb.push(this.accountant);
      }

      return {
        location: this.apartment,
        orbs: orb,
        olfaction: needCurses ? [this.shaman] : null,
        forcedFight:
        (0,external_kolmafia_.haveEffect)(this.curse3) > 0 ?
        [this.delayForNextNC(), this.spirit] :
        null,
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return (
            (monster != _this2.accountant || !needFiles) && (
            monster != _this2.shaman || !needCurses));},
        run: function run() {
          (0,external_kolmafia_.print)("Next curse NC in " + _this2.delayForNextNC(), "gray");

          var props = new Properties_PropertyManager();

          if ((0,external_kolmafia_.haveEffect)(_this2.curse3)) {
            props.setChoice(780, 1);

            if (_this2.delayForNextNC() > 0) {
              var ready = DelayBurners.getReadyDelayBurner();

              if (ready != null) {
                ready.doFightSetup();
              } else {
                DelayBurners.tryReplaceCombats();
              }
            }
          } else {
            props.setChoice(780, 2);
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          var settings = new AdventureSettings().addBanish(
          external_kolmafia_.Monster.get("pygmy witch lawyer"));


          try {
            greyAdv(_this2.apartment, null, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes(quest) {
      if (quest == this) {
        return true;
      }

      var turns =
      (0,external_kolmafia_.haveEffect)(this.curse1) +
      (0,external_kolmafia_.haveEffect)(this.curse2) +
      (0,external_kolmafia_.haveEffect)(this.curse3);

      return turns == 0 || turns > 10;
    } }]);return QuestL11Curses;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/shrines/QuestL11TempleDoctor.ts
function QuestL11TempleDoctor_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleDoctor_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleDoctor_typeof(obj);}function QuestL11TempleDoctor_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11TempleDoctor_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL11TempleDoctor_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11TempleDoctor_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11TempleDoctor_arrayLikeToArray(o, minLen);}function QuestL11TempleDoctor_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL11TempleDoctor_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleDoctor_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleDoctor_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleDoctor_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleDoctor_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleDoctor_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleDoctor_defineProperty(obj, key, value) {key = QuestL11TempleDoctor_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleDoctor_toPropertyKey(arg) {var key = QuestL11TempleDoctor_toPrimitive(arg, "string");return QuestL11TempleDoctor_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleDoctor_toPrimitive(input, hint) {if (QuestL11TempleDoctor_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleDoctor_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11Doctor = /*#__PURE__*/function () {function QuestL11Doctor() {QuestL11TempleDoctor_classCallCheck(this, QuestL11Doctor);QuestL11TempleDoctor_defineProperty(this, "equips",
    [
    "bloodied surgical dungarees",
    "half-size scalpel",
    "surgical apron",
    "head mirror",
    "surgical mask"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestL11TempleDoctor_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Hidden Hospital"));QuestL11TempleDoctor_defineProperty(this, "surgeon",
    external_kolmafia_.Monster.get("pygmy witch surgeon"));QuestL11TempleDoctor_defineProperty(this, "shirt",
    external_kolmafia_.Item.get("Surgical apron"));QuestL11TempleDoctor_defineProperty(this, "torso",
    external_kolmafia_.Skill.get("Torso Awareness"));}QuestL11TempleDoctor_createClass(QuestL11Doctor, [{ key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Doctor";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL11Doctor");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Worship") != "step3") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      var seekingOutfit = false;var _iterator = QuestL11TempleDoctor_createForOfIteratorHelper(

        this.equips),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if (i == this.shirt && !(0,external_kolmafia_.haveSkill)(this.torso)) {
            continue;
          }

          if ((0,external_kolmafia_.availableAmount)(i) == 0) {
            seekingOutfit = true;
            continue;
          }

          outfit.addWeight(i);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return {
        location: this.loc,
        outfit: outfit,
        olfaction: seekingOutfit ? [this.surgeon] : null,
        freeRun: function freeRun(mons) {return mons != _this.surgeon || !seekingOutfit;},
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(784, 1);

          try {
            greyAdv(
            _this.loc,
            outfit,
            new AdventureSettings().addNoBanish(_this.surgeon));

          } finally {
            props.resetAll();
          }
        }
      };
    } }]);return QuestL11Doctor;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/QuestL11ShrineVines.ts
function QuestL11ShrineVines_typeof(obj) {"@babel/helpers - typeof";return QuestL11ShrineVines_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11ShrineVines_typeof(obj);}function QuestL11ShrineVines_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11ShrineVines_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL11ShrineVines_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11ShrineVines_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11ShrineVines_arrayLikeToArray(o, minLen);}function QuestL11ShrineVines_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL11ShrineVines_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11ShrineVines_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11ShrineVines_toPropertyKey(descriptor.key), descriptor);}}function QuestL11ShrineVines_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11ShrineVines_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11ShrineVines_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11ShrineVines_defineProperty(obj, key, value) {key = QuestL11ShrineVines_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11ShrineVines_toPropertyKey(arg) {var key = QuestL11ShrineVines_toPrimitive(arg, "string");return QuestL11ShrineVines_typeof(key) === "symbol" ? key : String(key);}function QuestL11ShrineVines_toPrimitive(input, hint) {if (QuestL11ShrineVines_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11ShrineVines_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL11ShrineVines = /*#__PURE__*/function () {function QuestL11ShrineVines() {QuestL11ShrineVines_classCallCheck(this, QuestL11ShrineVines);QuestL11ShrineVines_defineProperty(this, "locs",
    [
    [
    "hiddenBowlingAlleyProgress",
    external_kolmafia_.Location.get("An Overgrown Shrine (Southeast)"),
    external_kolmafia_.Item.get("scorched stone sphere"),
    787],

    [
    "hiddenApartmentProgress",
    external_kolmafia_.Location.get("An Overgrown Shrine (Northwest)"),
    external_kolmafia_.Item.get("moss-covered stone sphere"),
    781],

    [
    "hiddenOfficeProgress",
    external_kolmafia_.Location.get("An Overgrown Shrine (Northeast)"),
    external_kolmafia_.Item.get("crackling stone sphere"),
    785],

    [
    "hiddenHospitalProgress",
    external_kolmafia_.Location.get("An Overgrown Shrine (Southwest)"),
    external_kolmafia_.Item.get("dripping stone sphere"),
    783],

    [null, external_kolmafia_.Location.get("A Massive Ziggurat"), null, null]]);QuestL11ShrineVines_defineProperty(this, "machete",

    external_kolmafia_.Item.get("Antique Machete"));}QuestL11ShrineVines_createClass(QuestL11ShrineVines, [{ key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return this.locs.map(function (l) {return l[1];});
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 4) {
        return QuestStatus.COMPLETED;
      }

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (this.shrineNeedsDoing() == null) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.machete) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Vines";
    } }, { key: "lianaCleared", value:

    function lianaCleared(loc) {
      if (loc.noncombatQueue.includes("Legend of the Temple in the Hidden Cit")) {
        return true;
      }

      //need to check the combat names due to wanderers
      //we are assuming victory. you could have potentially fought liana without machete and then ran away. but you we are assuming you didn't
      var dense_liana_defeated = 0;
      var area_combats_seen = loc.combatQueue.split("; ");var _iterator = QuestL11ShrineVines_createForOfIteratorHelper(

        area_combats_seen),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var s = _step.value;
          if (s == "dense liana") {
            dense_liana_defeated += 1;
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return dense_liana_defeated > 2;
    } }, { key: "run", value:

    function run() {
      var adv = this.shrineNeedsDoing();

      if (adv == null) {
        return {
          location: null,
          run: function run() {
            throw "??? Shrine not ready";
          }
        };
      }

      var outfit;

      if (adv[2]) {
        outfit = new GreyOutfit().addWeight(this.machete);
      } else {
        outfit = GreyOutfit.IGNORE_OUTFIT;
      }

      return {
        location: adv[0],
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();

          if (adv[1] != null) {
            props.setChoice(adv[1], adv[2] ? 1 : 2);
          }

          try {
            greyAdv(adv[0], outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    }

    // Location, choice adv number, needs to clear vines
  }, { key: "shrineNeedsDoing", value: function shrineNeedsDoing() {var _iterator2 = QuestL11ShrineVines_createForOfIteratorHelper(
        this.locs),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var l = _step2.value;
          if (
          l[0] != null ? (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)(l[0])) <= 0 : !this.lianaCleared(l[1]))
          {
            return [l[1], l[3], true];
          }

          if (l[2] != null && (0,external_kolmafia_.availableAmount)(l[2]) > 0) {
            return [l[1], l[3], false];
          }
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return null;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11ShrineVines;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/QuestL11HiddenPark.ts
function QuestL11HiddenPark_typeof(obj) {"@babel/helpers - typeof";return QuestL11HiddenPark_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11HiddenPark_typeof(obj);}function QuestL11HiddenPark_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11HiddenPark_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11HiddenPark_toPropertyKey(descriptor.key), descriptor);}}function QuestL11HiddenPark_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11HiddenPark_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11HiddenPark_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11HiddenPark_defineProperty(obj, key, value) {key = QuestL11HiddenPark_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11HiddenPark_toPropertyKey(arg) {var key = QuestL11HiddenPark_toPrimitive(arg, "string");return QuestL11HiddenPark_typeof(key) === "symbol" ? key : String(key);}function QuestL11HiddenPark_toPrimitive(input, hint) {if (QuestL11HiddenPark_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11HiddenPark_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL11HiddenPark = /*#__PURE__*/function () {function QuestL11HiddenPark() {QuestL11HiddenPark_classCallCheck(this, QuestL11HiddenPark);QuestL11HiddenPark_defineProperty(this, "matches",
    external_kolmafia_.Item.get("Book of Matches"));QuestL11HiddenPark_defineProperty(this, "sword",
    external_kolmafia_.Item.get("Antique Machete"));QuestL11HiddenPark_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Hidden Park"));QuestL11HiddenPark_defineProperty(this, "book",
    external_kolmafia_.Item.get("Book of matches"));QuestL11HiddenPark_defineProperty(this, "janitor",
    external_kolmafia_.Monster.get("Pygmy Janitor"));}QuestL11HiddenPark_createClass(QuestL11HiddenPark, [{ key: "level", value:

    function level() {
      return 11;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status < 3) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (!this.needsSword() && this.hasRelocatedJanitors()) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / HiddenPark";
    } }, { key: "hasRelocatedJanitors", value:

    function hasRelocatedJanitors() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("relocatePygmyJanitor")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "barUnlocked", value:

    function barUnlocked() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "needsSword", value:

    function needsSword() {
      return (0,external_kolmafia_.availableAmount)(this.sword) <= 0;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat().setItemDrops();
      var bottle =
      !this.barUnlocked() &&
      (0,external_kolmafia_.availableAmount)(this.book) == 0 &&
      this.hasRelocatedJanitors();

      var pred = currentPredictions().get(this.loc);

      if (bottle && (pred == null || pred == this.janitor)) {
        outfit.setChampagneBottle();
      }

      return {
        location: this.loc,
        outfit: outfit,
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return bottle || monster != _this.janitor;},
        orbs: bottle ? [this.janitor] : null,
        run: function run() {
          var props = new Properties_PropertyManager();

          if (!_this.hasRelocatedJanitors()) {
            props.setChoice(789, 2);
          } else {
            props.setChoice(789, 1);
          }

          var settings = new AdventureSettings();

          if (bottle) {
            settings.addNoBanish(_this.janitor);
          }

          try {
            greyAdv(_this.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }]);return QuestL11HiddenPark;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/hiddencity/QuestL11HiddenBookMatches.ts
function QuestL11HiddenBookMatches_typeof(obj) {"@babel/helpers - typeof";return QuestL11HiddenBookMatches_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11HiddenBookMatches_typeof(obj);}function QuestL11HiddenBookMatches_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11HiddenBookMatches_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11HiddenBookMatches_toPropertyKey(descriptor.key), descriptor);}}function QuestL11HiddenBookMatches_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11HiddenBookMatches_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11HiddenBookMatches_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11HiddenBookMatches_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11HiddenBookMatches_setPrototypeOf(subClass, superClass);}function QuestL11HiddenBookMatches_setPrototypeOf(o, p) {QuestL11HiddenBookMatches_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11HiddenBookMatches_setPrototypeOf(o, p);}function QuestL11HiddenBookMatches_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11HiddenBookMatches_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11HiddenBookMatches_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11HiddenBookMatches_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11HiddenBookMatches_possibleConstructorReturn(this, result);};}function QuestL11HiddenBookMatches_possibleConstructorReturn(self, call) {if (call && (QuestL11HiddenBookMatches_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11HiddenBookMatches_assertThisInitialized(self);}function QuestL11HiddenBookMatches_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11HiddenBookMatches_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11HiddenBookMatches_getPrototypeOf(o) {QuestL11HiddenBookMatches_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11HiddenBookMatches_getPrototypeOf(o);}function QuestL11HiddenBookMatches_defineProperty(obj, key, value) {key = QuestL11HiddenBookMatches_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11HiddenBookMatches_toPropertyKey(arg) {var key = QuestL11HiddenBookMatches_toPrimitive(arg, "string");return QuestL11HiddenBookMatches_typeof(key) === "symbol" ? key : String(key);}function QuestL11HiddenBookMatches_toPrimitive(input, hint) {if (QuestL11HiddenBookMatches_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11HiddenBookMatches_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestL11HiddenBookMatches = /*#__PURE__*/function (_TaskInfo) {QuestL11HiddenBookMatches_inherits(QuestL11HiddenBookMatches, _TaskInfo);var _super = QuestL11HiddenBookMatches_createSuper(QuestL11HiddenBookMatches);function QuestL11HiddenBookMatches() {var _this;QuestL11HiddenBookMatches_classCallCheck(this, QuestL11HiddenBookMatches);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "book",
    external_kolmafia_.Item.get("Book of matches"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "monster",
    external_kolmafia_.Monster.get("pygmy janitor"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "location",
    external_kolmafia_.Location.get("The Hidden Park"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "toAbsorb", void 0);QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "noPull",

    new PossiblePath(5));QuestL11HiddenBookMatches_defineProperty(QuestL11HiddenBookMatches_assertThisInitialized(_this), "doPull", void 0);return _this;}QuestL11HiddenBookMatches_createClass(QuestL11HiddenBookMatches, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / HiddenCity / BookOfMatches";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.noPull = new PossiblePath(5);
      this.doPull = new PossiblePath(0);

      if (
      assumeUnstarted ||
      (0,external_kolmafia_.availableAmount)(this.book) == 0 && !this.barUnlocked())
      {
        this.doPull.addConsumablePull(this.book);
      }
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      return (0,external_kolmafia_.availableAmount)(this.book) > 0;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.noPull, this.doPull];
    } }, { key: "status", value:

    function status() {
      if (this.barUnlocked() || (0,external_kolmafia_.getProperty)("questL11Spare") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL11Worship") < 3) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.book) > 0) {
        return QuestStatus.READY;
      }

      // Might still hit the drop!
      if (
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("relocatePygmyJanitor")) < (0,external_kolmafia_.myAscensions)() &&
      //getProperty("questL11Business") != "finished" ||
      // getProperty("questL11Doctor") != "finished" ||
      (0,external_kolmafia_.getProperty)("questL11Curses") != "finished")
      {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.nanovision)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "barUnlocked", value:

    function barUnlocked() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = new GreyOutfit();

      if (!path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
        outfit.setItemDrops();
        outfit.setPlusCombat();
        outfit.setChampagneBottle();
      } else {
        outfit = GreyOutfit.IGNORE_OUTFIT;
      }

      return {
        location: this.location,
        outfit: outfit,
        olfaction: [this.monster],
        run: function run() {
          if ((0,external_kolmafia_.availableAmount)(_this2.book) == 0) {
            if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
              GreyPulls.pullBoxOfMatches();
            } else {
              var settings = new AdventureSettings().addNoBanish(_this2.monster);

              greyAdv(_this2.location, outfit, settings);
            }
          }

          if ((0,external_kolmafia_.availableAmount)(_this2.book) > 0) {
            (0,external_kolmafia_.use)(_this2.book);

            if (!_this2.barUnlocked()) {
              throw "Bar should be unlocked";
            }
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11HiddenBookMatches;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleGrabWool.ts
function QuestL11TempleGrabWool_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleGrabWool_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleGrabWool_typeof(obj);}function QuestL11TempleGrabWool_slicedToArray(arr, i) {return QuestL11TempleGrabWool_arrayWithHoles(arr) || QuestL11TempleGrabWool_iterableToArrayLimit(arr, i) || QuestL11TempleGrabWool_unsupportedIterableToArray(arr, i) || QuestL11TempleGrabWool_nonIterableRest();}function QuestL11TempleGrabWool_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL11TempleGrabWool_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL11TempleGrabWool_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL11TempleGrabWool_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL11TempleGrabWool_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL11TempleGrabWool_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL11TempleGrabWool_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL11TempleGrabWool_arrayLikeToArray(o, minLen);}function QuestL11TempleGrabWool_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL11TempleGrabWool_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleGrabWool_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleGrabWool_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleGrabWool_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleGrabWool_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleGrabWool_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleGrabWool_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL11TempleGrabWool_setPrototypeOf(subClass, superClass);}function QuestL11TempleGrabWool_setPrototypeOf(o, p) {QuestL11TempleGrabWool_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL11TempleGrabWool_setPrototypeOf(o, p);}function QuestL11TempleGrabWool_createSuper(Derived) {var hasNativeReflectConstruct = QuestL11TempleGrabWool_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL11TempleGrabWool_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL11TempleGrabWool_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL11TempleGrabWool_possibleConstructorReturn(this, result);};}function QuestL11TempleGrabWool_possibleConstructorReturn(self, call) {if (call && (QuestL11TempleGrabWool_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL11TempleGrabWool_assertThisInitialized(self);}function QuestL11TempleGrabWool_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL11TempleGrabWool_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL11TempleGrabWool_getPrototypeOf(o) {QuestL11TempleGrabWool_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL11TempleGrabWool_getPrototypeOf(o);}function QuestL11TempleGrabWool_defineProperty(obj, key, value) {key = QuestL11TempleGrabWool_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleGrabWool_toPropertyKey(arg) {var key = QuestL11TempleGrabWool_toPrimitive(arg, "string");return QuestL11TempleGrabWool_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleGrabWool_toPrimitive(input, hint) {if (QuestL11TempleGrabWool_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleGrabWool_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL11TempleGrabWool = /*#__PURE__*/function (_TaskInfo) {QuestL11TempleGrabWool_inherits(QuestL11TempleGrabWool, _TaskInfo);var _super = QuestL11TempleGrabWool_createSuper(QuestL11TempleGrabWool);function QuestL11TempleGrabWool() {var _this;QuestL11TempleGrabWool_classCallCheck(this, QuestL11TempleGrabWool);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "wool",
    external_kolmafia_.Item.get("Stone Wool"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("The Hidden Temple"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "woolMonster",
    external_kolmafia_.Monster.get("Baa-relief sheep"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "luckyWoolMonster",
    external_kolmafia_.Monster.get("Baa'baa'bu'ran"));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "deck",
    new PossiblePath(0).add(
    ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD */.s6.DECK_OF_EVERY_CARD));QuestL11TempleGrabWool_defineProperty(QuestL11TempleGrabWool_assertThisInitialized(_this), "paths",

    []);return _this;}QuestL11TempleGrabWool_createClass(QuestL11TempleGrabWool, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this2 = this;
      this.paths = []; //[this.clover, this.fax, this.deck];

      var amountNeeded = 2 - (assumeUnstarted ? 0 : (0,external_kolmafia_.availableAmount)(this.wool));

      if (amountNeeded <= 0) {
        this.paths.push(new PossiblePath(0));
        return;
      }

      var combos = [];
      combos.push([ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX, 0]);
      combos.push([ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX, 0]);
      combos.push([ResourceTypes/* ResourceCategory.HUGS_AND_KISSES */.s6.HUGS_AND_KISSES, 0]);
      combos.push([ResourceTypes/* ResourceCategory.HUGS_AND_KISSES */.s6.HUGS_AND_KISSES, 1]);
      combos.push([null, 4]);
      combos.push([null, 4]);var _iterator = QuestL11TempleGrabWool_createForOfIteratorHelper(

        getAllCombinations(combos, true)),_step;try {var _loop = function _loop() {var combination = _step.value;
          if (combination.length != amountNeeded) {return "continue";

          }

          var fightsNeeded =
          1 +
          combination.map(function (_ref) {var _ref2 = QuestL11TempleGrabWool_slicedToArray(_ref, 2),turns = _ref2[1];return turns;}).reduce(function (t1, t2) {return t1 + t2;}, 0);

          var path = new PossiblePath(fightsNeeded, fightsNeeded * 3);

          combination.filter(function (_ref3) {var _ref4 = QuestL11TempleGrabWool_slicedToArray(_ref3, 1),r = _ref4[0];return r != null;}).forEach(function (_ref5) {var _ref6 = QuestL11TempleGrabWool_slicedToArray(_ref5, 1),r = _ref6[0];return path.add(r);});

          _this2.paths.push(path);
        };for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;}} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Temple / GrabWool";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 1 || (0,external_kolmafia_.availableAmount)(this.wool) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || !this.templeFound()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_.getProperty)("questM16Temple") == "finished";
    } }, { key: "run", value:

    function run(path) {var _this3 = this;
      var outfit = new GreyOutfit().setItemDrops().setPlusCombat();
      var polarVortex = path.getResource(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX);

      if (polarVortex != null) {
        polarVortex.prepare(outfit);
      }

      var hugs = path.getResource(ResourceTypes/* ResourceCategory.HUGS_AND_KISSES */.s6.HUGS_AND_KISSES);

      return {
        location: this.loc,
        outfit: outfit,
        familiar: hugs === null || hugs === void 0 ? void 0 : hugs.familiar,
        disableFamOverride: (hugs === null || hugs === void 0 ? void 0 : hugs.familiar) != null,
        orbs: [this.woolMonster],
        olfaction: path.canUse(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX) ?
        null :
        [this.woolMonster],
        freeRun: function freeRun(monster) {return _this3.woolMonster != monster;},
        run: function run() {
          var settings = new AdventureSettings();
          settings.addNoBanish(_this3.woolMonster);

          if (polarVortex != null || hugs != null) {
            var macro = new MacroBuilder/* Macro */.LE();

            if (hugs != null) {
              macro.step(hugs.macro());
            }

            if (polarVortex != null) {
              for (
              var i = 0;
              i < path.canUse(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX);
              i++)
              {
                macro.step(polarVortex.macro());
              }
            }

            settings.setStartOfFightMacro(MacroBuilder/* Macro.if_ */.LE.if_(_this3.woolMonster, macro));
          }

          var props = new Properties_PropertyManager();
          props.setChoice(580, 1); // Hidden heart of temple
          props.setChoice(583, 1); // Such confusing buttons
          props.setChoice(581, 3); // Fight cave bears
          props.setChoice(579, 2); // Such great heights, grab the nostril

          try {
            greyAdv(_this3.loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "shouldGrabWool", value:

    function shouldGrabWool() {
      return (0,external_kolmafia_.availableAmount)(this.wool) == 0;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11TempleGrabWool;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleNostril.ts
function QuestL11TempleNostril_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleNostril_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleNostril_typeof(obj);}function QuestL11TempleNostril_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleNostril_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleNostril_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleNostril_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleNostril_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleNostril_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleNostril_defineProperty(obj, key, value) {key = QuestL11TempleNostril_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleNostril_toPropertyKey(arg) {var key = QuestL11TempleNostril_toPrimitive(arg, "string");return QuestL11TempleNostril_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleNostril_toPrimitive(input, hint) {if (QuestL11TempleNostril_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleNostril_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11TempleNostril = /*#__PURE__*/function () {function QuestL11TempleNostril() {QuestL11TempleNostril_classCallCheck(this, QuestL11TempleNostril);QuestL11TempleNostril_defineProperty(this, "wool",
    external_kolmafia_.Item.get("Stone Wool"));QuestL11TempleNostril_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Hidden Temple"));QuestL11TempleNostril_defineProperty(this, "nostril",
    external_kolmafia_.Item.get("The Nostril of the Serpent"));QuestL11TempleNostril_defineProperty(this, "choices", void 0);}QuestL11TempleNostril_createClass(QuestL11TempleNostril, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / Temple / Nostril";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_.getProperty)("questM16Temple") == "finished";
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.nostril) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || !this.templeFound()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.wool) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.use)(_this.wool);

          _this.runTempleChoices();

          greyAdv(
          external_kolmafia_.Location.get("The Hidden Temple"),
          null,
          new AdventureSettings().setChoices(_this.choices));

        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "runTempleChoices", value:

    function runTempleChoices() {
      this.choices = new TempleChoices();

      this.choices.runChoice(582, 1); // Grab nostril
      this.choices.runChoice(579, 2); // Grab nostil
    } }]);return QuestL11TempleNostril;}();var


TempleChoices = /*#__PURE__*/function () {function TempleChoices() {QuestL11TempleNostril_classCallCheck(this, TempleChoices);QuestL11TempleNostril_defineProperty(this, "choices",
    []);}QuestL11TempleNostril_createClass(TempleChoices, [{ key: "calledOutOfScopeChoiceBehavior", value:

    function calledOutOfScopeChoiceBehavior(choiceNo) {
      return false;
    } }, { key: "runChoice", value:

    function runChoice(choiceNo, choicePick) {
      this.choices.push([choiceNo, choicePick]);
    } }, { key: "handleChoice", value:

    function handleChoice(choiceNo) {
      if (this.choices.length == 0) {
        throw "Expected to be handling a choice but uh, wasn't";
      }

      if (this.choices[0][0] != choiceNo) {
        return null;
        /*   throw (
          "Expected to be in choice " +
          this.choices[0][0] +
          " but instead was in choice " +
          choiceNo
        );*/
      }

      var toReturn = this.choices[0][1];
      this.choices.splice(0, 1);

      return toReturn;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return TempleChoices;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleUnlock.ts
function QuestL11TempleUnlock_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleUnlock_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleUnlock_typeof(obj);}function QuestL11TempleUnlock_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleUnlock_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleUnlock_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleUnlock_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleUnlock_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleUnlock_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleUnlock_defineProperty(obj, key, value) {key = QuestL11TempleUnlock_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleUnlock_toPropertyKey(arg) {var key = QuestL11TempleUnlock_toPrimitive(arg, "string");return QuestL11TempleUnlock_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleUnlock_toPrimitive(input, hint) {if (QuestL11TempleUnlock_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleUnlock_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL11TempleUnlock = /*#__PURE__*/function () {function QuestL11TempleUnlock() {QuestL11TempleUnlock_classCallCheck(this, QuestL11TempleUnlock);QuestL11TempleUnlock_defineProperty(this, "coin",
    external_kolmafia_.Item.get("Tree-holed coin"));QuestL11TempleUnlock_defineProperty(this, "map",
    external_kolmafia_.Item.get("Spooky Temple Map"));QuestL11TempleUnlock_defineProperty(this, "fertilizer",
    external_kolmafia_.Item.get("Spooky-Gro Fertilizer"));QuestL11TempleUnlock_defineProperty(this, "sapling",
    external_kolmafia_.Item.get("Spooky Sapling"));QuestL11TempleUnlock_defineProperty(this, "spookyLoc",
    external_kolmafia_.Location.get("The Spooky Forest"));QuestL11TempleUnlock_defineProperty(this, "choices", void 0);QuestL11TempleUnlock_defineProperty(this, "latte",

    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL11TempleUnlock_defineProperty(this, "toAbsorb", void 0);}QuestL11TempleUnlock_createClass(QuestL11TempleUnlock, [{ key: "shouldWearLatte", value:


    function shouldWearLatte() {
      return (
        (0,external_kolmafia_.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.FAMILIAR_WEIGHT));

    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Temple / Unlock";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if (this.templeFound()) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("questL02Larva") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if (isGhostBustingTime(this.spookyLoc)) {
        if (shouldAvoidGhosts()) {
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.READY;
      }

      if (!hasNonCombatSkillsReady(false) && (0,external_kolmafia_.myLevel)() >= 5) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady(true)) {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_.getProperty)("questM16Temple") == "unstarted") {


        //   return QuestStatus.NOT_READY;
      }if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_.getProperty)("questM16Temple") == "finished";
    } }, { key: "tryUnlockTemple", value:

    function tryUnlockTemple() {
      if (
      (0,external_kolmafia_.itemAmount)(this.sapling) == 0 ||
      (0,external_kolmafia_.itemAmount)(this.fertilizer) == 0 ||
      (0,external_kolmafia_.itemAmount)(this.map) == 0)
      {
        return;
      }

      (0,external_kolmafia_.use)(this.map);
    } }, { key: "runSpookyChoices", value:

    function runSpookyChoices() {
      this.choices = new QuestL11TempleUnlock_TempleChoices();

      if ((0,external_kolmafia_.itemAmount)(this.coin) == 0 && (0,external_kolmafia_.itemAmount)(this.map) == 0) {
        this.choices.runChoice(502, 2);
        this.choices.runChoice(505, 2);
      } else if ((0,external_kolmafia_.itemAmount)(this.map) == 0) {
        this.choices.runChoice(502, 3);
        this.choices.runChoice(506, 3);
        this.choices.runChoice(507, 1);
      } else if ((0,external_kolmafia_.itemAmount)(this.fertilizer) == 0) {
        this.choices.runChoice(502, 3);
        this.choices.runChoice(506, 3);
        this.choices.runChoice(506, 2);
      } else if ((0,external_kolmafia_.itemAmount)(this.sapling) == 0) {
        this.choices.runChoice(502, 1);
        this.choices.runChoice(503, 3);

        // Sell skins
        if ((0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("bar skin")) > 1) {
          this.choices.runChoice(504, 2);
        } else if ((0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("bar skin")) > 0) {
          this.choices.runChoice(504, 1);
        }

        this.choices.runChoice(504, 3);
        this.choices.runChoice(504, 4);
      }
    } }, { key: "isDelayBurning", value:

    function isDelayBurning() {
      return this.spookyLoc.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      if (reallyMustBeDone) {
        return false;
      }

      return isGhostBustingTime(this.spookyLoc);
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return !isGhostBustingTime(this.spookyLoc);
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = isGhostBustingTime(this.spookyLoc) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      if (this.spookyLoc.turnsSpent >= 5) {
        outfit.setNoCombat();
      }

      return {
        location: isGhostBustingTime(this.spookyLoc) ? null : this.spookyLoc,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          _this.tryUnlockTemple();

          if (_this.templeFound()) {
            return;
          }

          var settings = new AdventureSettings();

          if (isGhostBustingTime(_this.spookyLoc)) {
            settings.setStartOfFightMacro(getGhostBustingMacro());
          } else if (!_this.shouldWearLatte() && _this.toAbsorb.length == 0) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            } else if (hasNonCombatSkillsReady()) {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          _this.runSpookyChoices();

          settings.setChoices(_this.choices);

          greyAdv(_this.spookyLoc, outfit, settings);

          _this.tryUnlockTemple();
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.spookyLoc];
    } }]);return QuestL11TempleUnlock;}();var


QuestL11TempleUnlock_TempleChoices = /*#__PURE__*/function () {function TempleChoices() {QuestL11TempleUnlock_classCallCheck(this, TempleChoices);QuestL11TempleUnlock_defineProperty(this, "choices",
    []);}QuestL11TempleUnlock_createClass(TempleChoices, [{ key: "calledOutOfScopeChoiceBehavior", value:

    function calledOutOfScopeChoiceBehavior(choiceNo) {
      return false;
    } }, { key: "runChoice", value:

    function runChoice(choiceNo, choicePick) {
      this.choices.push([choiceNo, choicePick]);
    } }, { key: "handleChoice", value:

    function handleChoice(choiceNo) {
      if (this.choices.length == 0) {
        throw "Expected to be handling a choice but uh, wasn't";
      }

      if (this.choices[0][0] != choiceNo) {
        return null;
        /*  throw (
          "Expected to be in choice " +
          this.choices[0][0] +
          " but instead was in choice " +
          choiceNo
        );*/
      }

      var toReturn = this.choices[0][1];
      this.choices.splice(0, 1);

      return toReturn;
    } }]);return TempleChoices;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/temple/QuestL11TempleHiddenCity.ts
function QuestL11TempleHiddenCity_typeof(obj) {"@babel/helpers - typeof";return QuestL11TempleHiddenCity_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11TempleHiddenCity_typeof(obj);}function QuestL11TempleHiddenCity_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11TempleHiddenCity_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11TempleHiddenCity_toPropertyKey(descriptor.key), descriptor);}}function QuestL11TempleHiddenCity_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11TempleHiddenCity_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11TempleHiddenCity_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11TempleHiddenCity_defineProperty(obj, key, value) {key = QuestL11TempleHiddenCity_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11TempleHiddenCity_toPropertyKey(arg) {var key = QuestL11TempleHiddenCity_toPrimitive(arg, "string");return QuestL11TempleHiddenCity_typeof(key) === "symbol" ? key : String(key);}function QuestL11TempleHiddenCity_toPrimitive(input, hint) {if (QuestL11TempleHiddenCity_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11TempleHiddenCity_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL11TempleHiddenCity = /*#__PURE__*/function () {function QuestL11TempleHiddenCity() {QuestL11TempleHiddenCity_classCallCheck(this, QuestL11TempleHiddenCity);QuestL11TempleHiddenCity_defineProperty(this, "wool",
    external_kolmafia_.Item.get("Stone Wool"));QuestL11TempleHiddenCity_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Hidden Temple"));QuestL11TempleHiddenCity_defineProperty(this, "nostril",
    external_kolmafia_.Item.get("The Nostril of the Serpent"));QuestL11TempleHiddenCity_defineProperty(this, "choices", void 0);}QuestL11TempleHiddenCity_createClass(QuestL11TempleHiddenCity, [{ key: "getId", value:


    function getId() {
      return "Council / MacGruffin / Temple / HiddenCity";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL11Worship");

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || !this.templeFound()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.wool) == 0) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.nostril) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "templeFound", value:

    function templeFound() {
      return (0,external_kolmafia_.getProperty)("questM16Temple") == "finished";
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.use)(_this.wool);

          _this.runTempleChoices();

          greyAdv(
          external_kolmafia_.Location.get("The Hidden Temple"),
          null,
          new AdventureSettings().setChoices(_this.choices));

        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "runTempleChoices", value:

    function runTempleChoices() {
      this.choices = new QuestL11TempleHiddenCity_TempleChoices();

      this.choices.runChoice(582, 2);
      this.choices.runChoice(580, 2);
      this.choices.runChoice(584, 4);
      this.choices.runChoice(580, 1);
      this.choices.runChoice(123, 2); // Go to puzzle
      // Script should run the banana solver
      this.choices.runChoice(125, 3); // Unlock city
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL11TempleHiddenCity;}();var


QuestL11TempleHiddenCity_TempleChoices = /*#__PURE__*/function () {function TempleChoices() {QuestL11TempleHiddenCity_classCallCheck(this, TempleChoices);QuestL11TempleHiddenCity_defineProperty(this, "choices",
    []);}QuestL11TempleHiddenCity_createClass(TempleChoices, [{ key: "calledOutOfScopeChoiceBehavior", value:

    function calledOutOfScopeChoiceBehavior(choiceNo) {
      (0,external_kolmafia_.print)("Temple now has choice: " + choiceNo);
      if (choiceNo != 0) {
        return false;
      }

      //   let url = "choice.php?pwd=&whichchoice=" + 123 + "&option=" + 2;
      // visitUrl(url);
      (0,external_kolmafia_.cliExecute)("dvorak"); // Solve puzzle
    } }, { key: "runChoice", value:

    function runChoice(choiceNo, choicePick) {
      this.choices.push([choiceNo, choicePick]);
    } }, { key: "handleChoice", value:

    function handleChoice(choiceNo) {
      if (this.choices.length == 0) {
        throw "Expected to be handling a choice but uh, wasn't";
      }

      if (this.choices[0][0] != choiceNo) {
        return null;
        /*   throw (
          "Expected to be in choice " +
          this.choices[0][0] +
          " but instead was in choice " +
          choiceNo
        );*/
      }

      var toReturn = this.choices[0][1];
      this.choices.splice(0, 1);

      return toReturn;
    } }]);return TempleChoices;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11Temple.ts
function QuestL11Temple_typeof(obj) {"@babel/helpers - typeof";return QuestL11Temple_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11Temple_typeof(obj);}function QuestL11Temple_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11Temple_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11Temple_toPropertyKey(descriptor.key), descriptor);}}function QuestL11Temple_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11Temple_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11Temple_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11Temple_defineProperty(obj, key, value) {key = QuestL11Temple_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11Temple_toPropertyKey(arg) {var key = QuestL11Temple_toPrimitive(arg, "string");return QuestL11Temple_typeof(key) === "symbol" ? key : String(key);}function QuestL11Temple_toPrimitive(input, hint) {if (QuestL11Temple_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11Temple_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}
















var QuestL11Temple = /*#__PURE__*/function () {


  function QuestL11Temple() {QuestL11Temple_classCallCheck(this, QuestL11Temple);QuestL11Temple_defineProperty(this, "buildings", []);
    this.buildings.push(new QuestL11Bowling());
    this.buildings.push(new QuestL11Curses());
    this.buildings.push(new QuestL11Business());
    this.buildings.push(new QuestL11Doctor());
    this.buildings.push(new QuestL11HiddenBookMatches());
    this.buildings.push(new QuestL11ShrineVines());
    this.buildings.push(new QuestL11TempleGrabWool());
    this.buildings.push(new QuestL11TempleNostril());
    this.buildings.push(new QuestL11TempleUnlock());
    this.buildings.push(new QuestL11TempleHiddenCity());
    this.buildings.push(new QuestL11HiddenPark());
  }QuestL11Temple_createClass(QuestL11Temple, [{ key: "level", value:

    function level() {
      return 11;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / HiddenCity / Boss";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.buildings;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL11Worship");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("questL11MacGuffin") != "step2") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("questM16Temple") == "unstarted" || this.bossReady()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {
      if (this.bossReady()) {
        return this.fightBoss();
      }

      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=woods&action=woods_dakota_anim");
        }
      };
    } }, { key: "bossReady", value:

    function bossReady() {
      return (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("stone triangle")) >= 4;
    } }, { key: "fightBoss", value:

    function fightBoss() {
      return {
        location: external_kolmafia_.Location.get("A Massive Ziggurat"),
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(791, 1);

          try {
            greyAdv(external_kolmafia_.Location.get("A Massive Ziggurat"));
          } finally {
            props.resetAll();
          }
        }
      };
    } }]);return QuestL11Temple;}();
;// CONCATENATED MODULE: ./src/quests/council/macgruffin/QuestL11VacationAccess.ts
function QuestL11VacationAccess_typeof(obj) {"@babel/helpers - typeof";return QuestL11VacationAccess_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11VacationAccess_typeof(obj);}function QuestL11VacationAccess_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11VacationAccess_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11VacationAccess_toPropertyKey(descriptor.key), descriptor);}}function QuestL11VacationAccess_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11VacationAccess_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11VacationAccess_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11VacationAccess_toPropertyKey(arg) {var key = QuestL11VacationAccess_toPrimitive(arg, "string");return QuestL11VacationAccess_typeof(key) === "symbol" ? key : String(key);}function QuestL11VacationAccess_toPrimitive(input, hint) {if (QuestL11VacationAccess_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11VacationAccess_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestL11ShoreAccess = /*#__PURE__*/function () {function QuestL11ShoreAccess() {QuestL11VacationAccess_classCallCheck(this, QuestL11ShoreAccess);}QuestL11VacationAccess_createClass(QuestL11ShoreAccess, [{ key: "getId", value:
    function getId() {
      return "Council / MacGruffin / Shore";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) == (0,external_kolmafia_.myAscensions)()) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.myMeat)() < 6000 || (0,external_kolmafia_.knollAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.buy)(external_kolmafia_.Item.get("Desert Bus pass"));

          if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_.myAscensions)()) {
            throw "Expected desert access";
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL11ShoreAccess;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL11MacGruffin.ts
function QuestL11MacGruffin_typeof(obj) {"@babel/helpers - typeof";return QuestL11MacGruffin_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11MacGruffin_typeof(obj);}function QuestL11MacGruffin_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11MacGruffin_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11MacGruffin_toPropertyKey(descriptor.key), descriptor);}}function QuestL11MacGruffin_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11MacGruffin_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11MacGruffin_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11MacGruffin_defineProperty(obj, key, value) {key = QuestL11MacGruffin_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11MacGruffin_toPropertyKey(arg) {var key = QuestL11MacGruffin_toPrimitive(arg, "string");return QuestL11MacGruffin_typeof(key) === "symbol" ? key : String(key);}function QuestL11MacGruffin_toPrimitive(input, hint) {if (QuestL11MacGruffin_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11MacGruffin_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}















var QuestL11MacGruffin = /*#__PURE__*/function () {





  function QuestL11MacGruffin() {QuestL11MacGruffin_classCallCheck(this, QuestL11MacGruffin);QuestL11MacGruffin_defineProperty(this, "questInfo", []);QuestL11MacGruffin_defineProperty(this, "forged", external_kolmafia_.Item.get("Forged Identification Documents"));QuestL11MacGruffin_defineProperty(this, "diary", external_kolmafia_.Item.get("Your Father's Macguffin Diary"));QuestL11MacGruffin_defineProperty(this, "holidaySale", external_kolmafia_.Item.get("post-holiday sale coupon"));
    // Register the subquests
    this.questInfo.push(new QuestL11ShoreAccess());
    this.questInfo.push(new QuestL11Black());
    this.questInfo.push(new QuestL11Palin());
    this.questInfo.push(new QuestL11Shen());
    this.questInfo.push(new QuestL11Desert());
    this.questInfo.push(new QuestL11Manor());
    this.questInfo.push(new QuestL11Pyramid());
    this.questInfo.push(new QuestL11Ron());
    this.questInfo.push(new QuestL11Temple());
  }QuestL11MacGruffin_createClass(QuestL11MacGruffin, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questL11Black") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.getProperty)("questL11Black") != "step2" ||
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_.myAscensions)())
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.myMeat)() <= 6000) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.questInfo;
    } }, { key: "getId", value:

    function getId() {
      return "Council / MacGruffin / Vacation";
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          if ((0,external_kolmafia_.availableAmount)(_this.diary) == 0) {
            if ((0,external_kolmafia_.availableAmount)(_this.forged) == 0) {
              // 10% off coupon from pantsgiving
              if ((0,external_kolmafia_.availableAmount)(_this.holidaySale) > 0) {
                (0,external_kolmafia_.use)(_this.holidaySale);
              }

              (0,external_kolmafia_.retrieveItem)(_this.forged);

              if ((0,external_kolmafia_.availableAmount)(_this.forged) == 0) {
                throw _this.forged + " wasn't acquired!";
              }
            }

            var props = new Properties_PropertyManager();

            try {
              props.setChoice(793, 1);

              greyAdv(external_kolmafia_.Location.get("The Shore, Inc. Travel Agency"));

              if ((0,external_kolmafia_.availableAmount)(_this.diary) == 0) {
                throw (
                  "Unexpectably, " +
                  _this.diary +
                  " was not available! Try refresh inventory? Maybe we don't have forged documents");

              }
            } finally {
              props.resetAll();
            }
          }

          if ((0,external_kolmafia_.getProperty)("questL11Desert") != "started") {
            (0,external_kolmafia_.use)(_this.diary);
          }
        }
      };
    } }]);return QuestL11MacGruffin;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12Battlefield.ts
function QuestL12Battlefield_typeof(obj) {"@babel/helpers - typeof";return QuestL12Battlefield_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12Battlefield_typeof(obj);}function QuestL12Battlefield_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12Battlefield_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12Battlefield_toPropertyKey(descriptor.key), descriptor);}}function QuestL12Battlefield_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12Battlefield_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12Battlefield_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12Battlefield_defineProperty(obj, key, value) {key = QuestL12Battlefield_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12Battlefield_toPropertyKey(arg) {var key = QuestL12Battlefield_toPrimitive(arg, "string");return QuestL12Battlefield_typeof(key) === "symbol" ? key : String(key);}function QuestL12Battlefield_toPrimitive(input, hint) {if (QuestL12Battlefield_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12Battlefield_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL12Battlefield = /*#__PURE__*/function () {function QuestL12Battlefield() {QuestL12Battlefield_classCallCheck(this, QuestL12Battlefield);QuestL12Battlefield_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Battlefield (Frat Uniform)"));QuestL12Battlefield_defineProperty(this, "pole",
    external_kolmafia_.Item.get("eleven-foot pole"));QuestL12Battlefield_defineProperty(this, "ring",
    external_kolmafia_.Item.get("ring of Detect Boring Doors"));QuestL12Battlefield_defineProperty(this, "picklocks",
    external_kolmafia_.Item.get("Pick-O-Matic lockpicks"));QuestL12Battlefield_defineProperty(this, "gelCube",
    external_kolmafia_.Familiar.get("Gelatinous Cubeling"));QuestL12Battlefield_defineProperty(this, "jellyfish",
    external_kolmafia_.Familiar.get("Space Jellyfish"));QuestL12Battlefield_defineProperty(this, "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestL12Battlefield_defineProperty(this, "orchadAt",
    64);QuestL12Battlefield_defineProperty(this, "nunsAt",
    192);}QuestL12Battlefield_createClass(QuestL12Battlefield, [{ key: "level", value:

    function level() {
      return 12;
    } }, { key: "getDefeatedEachTurn", value:

    function getDefeatedEachTurn() {
      var defeated = 1;

      if ((0,external_kolmafia_.getProperty)("sidequestArenaCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_.getProperty)("sidequestJunkyardCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_.getProperty)("sidequestJunkyardCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_.getProperty)("sidequestNunsCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_.getProperty)("sidequestOrchardCompleted") == "fratboy") {
        defeated *= 2;
      }

      if ((0,external_kolmafia_.getProperty)("sidequestFarmCompleted") == "fratboy") {
        defeated *= 2;
      }

      return defeated;
    } }, { key: "status", value:

    function status() {
      if (
      !this.isArenaDone() ||
      !this.isLobsterDone() ||
      !this.isGremlinsDone())
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("warProgress") == "finished") {
        return QuestStatus.COMPLETED;
      }

      var defeated = this.getHippiesDefeated();

      if (defeated >= 64 && !this.isFilthyDone()) {
        return QuestStatus.NOT_READY;
      }

      if (defeated >= 192 && !this.isNunsDone()) {
        return QuestStatus.NOT_READY;
      }

      if (defeated >= 1000) {
        return QuestStatus.COMPLETED;
      }

      if (
      getQuestStatus("questL11Pyramid") == 3 &&
      (0,external_kolmafia_.getProperty)("pyramidBombUsed") == "true")
      {
        return QuestStatus.READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Battlefield";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(external_kolmafia_.Item.get("Beer Helmet"));
      outfit.addWeight(external_kolmafia_.Item.get("distressed denim pants"));
      outfit.addWeight(external_kolmafia_.Item.get("bejeweled pledge pin"));

      var fam = null;

      if (
      (0,external_kolmafia_.haveFamiliar)(this.gelCube) &&
      !GreySettings_GreySettings.shouldAvoidTowerRequirements() && (
      (0,external_kolmafia_.availableAmount)(this.pole) == 0 ||
      (0,external_kolmafia_.availableAmount)(this.ring) == 0 ||
      (0,external_kolmafia_.availableAmount)(this.picklocks) == 0))
      {
        fam = this.gelCube;
      } else if (
      (0,external_kolmafia_.haveFamiliar)(this.jellyfish) && (
      !GreySettings_GreySettings.greyPrepareLevelingResources ||
      (0,external_kolmafia_.familiarWeight)(this.goose) >= 20 ||
      GreyAbsorber_AbsorbsProvider.remainingAdvAbsorbs == null ||
      GreyAbsorber_AbsorbsProvider.remainingAdvAbsorbs.length > 3))
      {
        fam = this.jellyfish;
      }

      if (fam == this.goose && (0,external_kolmafia_.familiarWeight)(this.goose) >= 6) {
        outfit.addWeight(external_kolmafia_.Item.get("Mafia Thumb Ring"), 50);
      }

      return {
        outfit: outfit,
        location: this.loc,
        familiar: fam,
        disableFamOverride: fam == this.gelCube,
        mayFreeRun: false,
        run: function run() {
          var burner = DelayBurners.getReadyDelayBurner();

          if (burner != null) {
            burner.doFightSetup();
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(fam);
          }

          greyAdv(_this.loc, outfit);

          var turns = Math.ceil(
          (1000 - _this.getHippiesDefeated()) / _this.getDefeatedEachTurn());


          if (turns > 0) {
            (0,external_kolmafia_.print)("".concat(
            turns, " turn").concat(
            turns == 1 ? "" : "s", " until the battlefield is cleared at current sidequest completion."),

            "blue");

          } else {
            (0,external_kolmafia_.print)(
            "Battlefield has been cleared! Hipster boss spotted eating BBQ'd sushi before it's cool! This enrages you!",
            "blue");

          }
        }
      };
    } }, { key: "getHippiesDefeated", value:

    function getHippiesDefeated() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hippiesDefeated"));
    } }, { key: "isGremlinsDone", value:

    function isGremlinsDone() {
      return (0,external_kolmafia_.getProperty)("sidequestJunkyardCompleted") != "none";
    } }, { key: "isArenaDone", value:

    function isArenaDone() {
      return (0,external_kolmafia_.getProperty)("sidequestArenaCompleted") != "none";
    } }, { key: "isLobsterDone", value:

    function isLobsterDone() {
      return (0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") != "none";
    } }, { key: "isFilthyDone", value:

    function isFilthyDone() {
      return (0,external_kolmafia_.getProperty)("sidequestOrchardCompleted") != "none";
    } }, { key: "isNunsDone", value:

    function isNunsDone() {
      return (0,external_kolmafia_.getProperty)("sidequestNunsCompleted") != "none";
    } }]);return QuestL12Battlefield;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12FratOutfit.ts
function QuestL12FratOutfit_typeof(obj) {"@babel/helpers - typeof";return QuestL12FratOutfit_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12FratOutfit_typeof(obj);}function QuestL12FratOutfit_slicedToArray(arr, i) {return QuestL12FratOutfit_arrayWithHoles(arr) || QuestL12FratOutfit_iterableToArrayLimit(arr, i) || QuestL12FratOutfit_unsupportedIterableToArray(arr, i) || QuestL12FratOutfit_nonIterableRest();}function QuestL12FratOutfit_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL12FratOutfit_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL12FratOutfit_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL12FratOutfit_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12FratOutfit_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL12FratOutfit_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12FratOutfit_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12FratOutfit_arrayLikeToArray(o, minLen);}function QuestL12FratOutfit_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL12FratOutfit_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12FratOutfit_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12FratOutfit_toPropertyKey(descriptor.key), descriptor);}}function QuestL12FratOutfit_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12FratOutfit_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12FratOutfit_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12FratOutfit_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL12FratOutfit_setPrototypeOf(subClass, superClass);}function QuestL12FratOutfit_setPrototypeOf(o, p) {QuestL12FratOutfit_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL12FratOutfit_setPrototypeOf(o, p);}function QuestL12FratOutfit_createSuper(Derived) {var hasNativeReflectConstruct = QuestL12FratOutfit_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL12FratOutfit_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL12FratOutfit_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL12FratOutfit_possibleConstructorReturn(this, result);};}function QuestL12FratOutfit_possibleConstructorReturn(self, call) {if (call && (QuestL12FratOutfit_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL12FratOutfit_assertThisInitialized(self);}function QuestL12FratOutfit_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL12FratOutfit_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL12FratOutfit_getPrototypeOf(o) {QuestL12FratOutfit_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL12FratOutfit_getPrototypeOf(o);}function QuestL12FratOutfit_defineProperty(obj, key, value) {key = QuestL12FratOutfit_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12FratOutfit_toPropertyKey(arg) {var key = QuestL12FratOutfit_toPrimitive(arg, "string");return QuestL12FratOutfit_typeof(key) === "symbol" ? key : String(key);}function QuestL12FratOutfit_toPrimitive(input, hint) {if (QuestL12FratOutfit_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12FratOutfit_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var


WarTag;(function (WarTag) {WarTag["BEFORE_WAR"] = "Before War";WarTag["DURING_WAR"] = "During War";})(WarTag || (WarTag = {}));var



YROutfit;(function (YROutfit) {YROutfit["YR_HIPPY"] = "YR Hippy";YROutfit["YR_FRAT"] = "YR Frat";})(YROutfit || (YROutfit = {}));




var QuestL12FratOutfit = /*#__PURE__*/function (_TaskInfo) {QuestL12FratOutfit_inherits(QuestL12FratOutfit, _TaskInfo);var _super = QuestL12FratOutfit_createSuper(QuestL12FratOutfit);








  function QuestL12FratOutfit() {var _this;QuestL12FratOutfit_classCallCheck(this, QuestL12FratOutfit);
    _this = _super.call(this);QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "fratBoySpy", external_kolmafia_.Monster.get("Orcish Frat Boy Spy"));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "hippyDisguise", "Filthy Hippy Disguise");QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "fratDisguise", "Frat Warrior Fatigues");QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "hippyCamp", external_kolmafia_.Location.get("Hippy Camp"));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "fratCamp", external_kolmafia_.Location.get("Wartime Frat House (Hippy Disguise)"));QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "paths", void 0);QuestL12FratOutfit_defineProperty(QuestL12FratOutfit_assertThisInitialized(_this), "recalculateTime", void 0);return _this;
  }QuestL12FratOutfit_createClass(QuestL12FratOutfit, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.recalculateTime = false;

      var hippyNeeded = (0,external_kolmafia_.outfitPieces)(this.hippyDisguise).filter(
      function (i) {return assumeUnstarted || (0,external_kolmafia_.availableAmount)(i) == 0;});

      var fratNeeded = (0,external_kolmafia_.outfitPieces)(this.fratDisguise).filter(
      function (i) {return assumeUnstarted || (0,external_kolmafia_.availableAmount)(i) == 0;});


      this.paths = [];

      var pullTask = new PossiblePath(0);var _iterator = QuestL12FratOutfit_createForOfIteratorHelper(

        fratNeeded),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var item = _step.value;
          pullTask.addPull(item);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      this.paths.push(pullTask);

      if (fratNeeded.length == 0) {
        return;
      }

      this.paths.push(
      new PossiblePath(1).
      addFax(this.fratBoySpy).
      add(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY));

      this.paths.push(
      new PossiblePath(0).
      add(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS).
      add(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).
      addIgnored("Cosplay Saber"));


      // During the war, lets say 60% chance to hit a combat

      // Tag, Resources, Turns
      var type = [];
      var needHippies = hippyNeeded.length > 0;

      if (needHippies) {
        if (assumeUnstarted || (0,external_kolmafia_.myLevel)() < 12) {
          type.push(["Hippy", WarTag.BEFORE_WAR, YROutfit.YR_HIPPY, 1]);
        }

        type.push(["Hippy", WarTag.DURING_WAR, null, hippyNeeded.length * 6]);
        type.push(["Hippy", WarTag.DURING_WAR, YROutfit.YR_HIPPY, 3]);
      }

      type.push(["Frat", WarTag.DURING_WAR, YROutfit.YR_FRAT, 1]);
      type.push(["Frat", WarTag.DURING_WAR, null, fratNeeded.length * 6]);var _iterator2 = QuestL12FratOutfit_createForOfIteratorHelper(

        getAllCombinations(type, true)),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var combo = _step2.value;
          if (combo.length != (needHippies ? 2 : 1)) {
            continue;
          }

          if (needHippies && combo[0][0] == combo[1][0]) {
            continue;
          }

          var path = new PossiblePath(
          combo.map(function (_ref) {var _ref2 = QuestL12FratOutfit_slicedToArray(_ref, 4),turns = _ref2[3];return turns;}).reduce(function (t1, t2) {return t1 + t2;}, 0));var _iterator3 = QuestL12FratOutfit_createForOfIteratorHelper(


            combo),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _step3$value = QuestL12FratOutfit_slicedToArray(_step3.value, 3),tag = _step3$value[1],resource = _step3$value[2];
              path.addTag(tag);

              if (resource != null) {
                path.add(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);
                path.addTag(resource);
              }
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          this.paths.push(path);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Frat Outfit";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return this.recalculateTime;
    } }, { key: "free", value:

    function free() {
      return this.recalculateTime;
    } }, { key: "status", value:

    function status(path) {
      GreySettings_GreySettings.greyHippyMode = false;

      if (this.haveOutfit(this.fratDisguise)) {
        return QuestStatus.COMPLETED;
      }

      if (path == null) {
        return QuestStatus.READY;
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
        if ((0,external_kolmafia_.myLevel)() < 12) {
          return QuestStatus.NOT_READY;
        } else {
          return QuestStatus.READY;
        }
      }

      if (path.hasTag(WarTag.BEFORE_WAR)) {
        if (this.haveOutfit(this.hippyDisguise)) {
          path.removeTag(WarTag.BEFORE_WAR);
        } else if ((0,external_kolmafia_.myLevel)() >= 12) {
          this.recalculateTime = true;

          return QuestStatus.READY;
        }
      }

      GreySettings_GreySettings.greyHippyMode = path.hasTag(WarTag.BEFORE_WAR);

      if (
      path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) &&
      !path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).ready())
      {
        return QuestStatus.NOT_READY;
      }

      if (
      path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) ||
      path.canUse(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS))
      {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.myLevel)() >= 12 && (0,external_kolmafia_.getProperty)("questL12War") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (path.hasTag(WarTag.BEFORE_WAR) && (0,external_kolmafia_.myLevel)() >= 12) {
        this.recalculateTime = true;

        return QuestStatus.READY;
      }

      if (
      !path.hasTag(WarTag.BEFORE_WAR) &&
      path.hasTag(WarTag.DURING_WAR) &&
      (0,external_kolmafia_.getProperty)("questL12War") == "unstarted")
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastIslandUnlock")) != (0,external_kolmafia_.myAscensions)()) {
        return QuestStatus.NOT_READY;
      }

      if (!path.hasTag(WarTag.BEFORE_WAR) && (0,external_kolmafia_.myLevel)() < 12) {
        return QuestStatus.NOT_READY;
      }

      // Doesn't meet stat requirements
      if (
      this.haveOutfit(this.hippyDisguise) &&
      !(0,external_kolmafia_.haveOutfit)(this.hippyDisguise))
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      if (this.recalculateTime) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            AdventureFinder.recalculatePath();
          }
        };
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            GreyPulls.pullFratWarOutfit();
          }
        };
      }

      if (
      path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) ||
      path.canUse(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS))
      {
        return this.runFaxFight(path);
      }

      if (path.hasTag(WarTag.BEFORE_WAR)) {
        if (this.haveOutfit(this.hippyDisguise) || (0,external_kolmafia_.myLevel)() >= 12) {
          throw "Unable to grab hippy disguise, war has already started";
        }

        return this.runPreWar(path);
      } else if ((0,external_kolmafia_.myLevel)() < 12) {
        throw "Eh? War hasn't started yet";
      }

      return this.runDuringWar(path);
    } }, { key: "runDuringWar", value:

    function runDuringWar(path) {var _this2 = this;
      var outfit = new GreyOutfit();
      outfit.setPlusCombat();

      var grabbingHippyOutfit = !this.haveOutfit(this.hippyDisguise);
      var grabbingFratOutfit = !grabbingHippyOutfit;

      if (grabbingFratOutfit) {
        outfit.addExtra("+outfit " + this.hippyDisguise);
      }

      var yellowRay = path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);

      if (yellowRay != null) {
        if (!path.hasTag(YROutfit.YR_HIPPY) && !path.hasTag(YROutfit.YR_FRAT)) {
          yellowRay.prepare(outfit);
        } else if (path.hasTag(YROutfit.YR_HIPPY) && grabbingHippyOutfit) {
          yellowRay.prepare(outfit);
        } else if (path.hasTag(YROutfit.YR_FRAT) && grabbingFratOutfit) {
          yellowRay.prepare(outfit);
        } else {
          yellowRay = null;
        }
      }

      if (yellowRay == null) {
        outfit.setItemDrops();
      }

      var loc = grabbingFratOutfit ? this.fratCamp : this.hippyCamp;

      return {
        location: loc,
        outfit: outfit,
        run: function run() {
          if (grabbingFratOutfit && !(0,external_kolmafia_.isWearingOutfit)(_this2.hippyDisguise)) {
            throw "Expected to be dressed like a grubby hippy";
          }

          var props = new Properties_PropertyManager();

          props.setChoice(139, 3);
          props.setChoice(140, 3);
          props.setChoice(141, 3);
          props.setChoice(142, 4);

          props.setChoice(143, 3); // Fight
          props.setChoice(144, 3); // Fight
          props.setChoice(145, 2); // Items
          props.setChoice(146, 2); // Items

          try {
            var settings = new AdventureSettings();

            if (yellowRay != null) {
              yellowRay.prepare(null, props);
              var macro = new MacroBuilder/* Macro */.LE();

              macro = macro.if_("monstername Hippy", yellowRay.macro());
              macro = macro.if_("monstername War Pledge", yellowRay.macro());
              macro = macro.if_(
              "monstername Frat Warrior drill sergeant",
              yellowRay.macro());

              settings.setStartOfFightMacro(macro);
            }

            greyAdv(loc, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "runPreWar", value:

    function runPreWar(path) {var _this3 = this;
      var outfit = new GreyOutfit();

      var yr = path.hasTag(YROutfit.YR_HIPPY) ?
      path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) :
      null;

      if (yr != null) {
        yr.prepare(outfit, null);
      } else {
        outfit.setItemDrops();

        if ((0,external_kolmafia_.myLevel)() >= 9) {
          outfit.setNoCombat();
        }
      }

      return {
        location: this.hippyCamp,
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();

          var settings = new AdventureSettings();
          var hasPants = (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("filthy corduroys")) > 0;

          props.setChoice(136, hasPants ? 2 : 1);
          props.setChoice(137, hasPants ? 1 : 2);

          if (yr != null) {
            yr.prepare(null, props);

            settings.setStartOfFightMacro(
            MacroBuilder/* Macro.if_ */.LE.if_("monstername Hippy", yr.macro()));

          }

          try {
            greyAdv(_this3.hippyCamp, outfit, settings);
          } finally {
            props.resetAll();
          }

          if (_this3.haveOutfit(_this3.hippyDisguise)) {
            path.removeTag(WarTag.BEFORE_WAR);
          }
        }
      };
    } }, { key: "haveOutfit", value:

    function haveOutfit(outfit) {
      return (0,external_kolmafia_.outfitPieces)(outfit).find(function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;}) == null;
    } }, { key: "runFaxFight", value:

    function runFaxFight(path) {var _this4 = this;
      var outfit = new GreyOutfit();

      var yr = path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);
      yr.prepare(outfit);

      var faxing = path.getResource(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);

      if (faxing != null) {
        faxing.prepare(outfit);
      }

      return {
        location: null,
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            yr.prepare(null, props);

            if (faxing != null) {
              faxing.fax(_this4.fratBoySpy);
            } else {
              path.getResource(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS).pocket(568);
            }

            if ((0,external_kolmafia_.currentRound)() == 0) {
              throw "Expected to be in combat!";
            }

            path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).macro().submit();

            greyAdv("main.php");

            if ((0,external_kolmafia_.currentRound)() != 0 || (0,external_kolmafia_.handlingChoice)()) {
              throw "Expected to have finished combat!";
            }

            if (!_this4.haveOutfit(_this4.fratDisguise)) {
              throw "Expected to have outfit!";
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL12FratOutfit;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12Nuns.ts
function QuestL12Nuns_typeof(obj) {"@babel/helpers - typeof";return QuestL12Nuns_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12Nuns_typeof(obj);}function QuestL12Nuns_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12Nuns_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12Nuns_toPropertyKey(descriptor.key), descriptor);}}function QuestL12Nuns_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12Nuns_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12Nuns_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12Nuns_defineProperty(obj, key, value) {key = QuestL12Nuns_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12Nuns_toPropertyKey(arg) {var key = QuestL12Nuns_toPrimitive(arg, "string");return QuestL12Nuns_typeof(key) === "symbol" ? key : String(key);}function QuestL12Nuns_toPrimitive(input, hint) {if (QuestL12Nuns_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12Nuns_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var Quest12WarNuns = /*#__PURE__*/function () {function Quest12WarNuns() {QuestL12Nuns_classCallCheck(this, Quest12WarNuns);QuestL12Nuns_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Themthar Hills"));QuestL12Nuns_defineProperty(this, "lep",
    external_kolmafia_.Familiar.get("Leprechaun"));QuestL12Nuns_defineProperty(this, "hobo",
    external_kolmafia_.Familiar.get("Hobo Monkey"));QuestL12Nuns_defineProperty(this, "robor",
    external_kolmafia_.Familiar.get("Robortender"));QuestL12Nuns_defineProperty(this, "tot",
    external_kolmafia_.Familiar.get("Trick-or-Treating Tot"));QuestL12Nuns_defineProperty(this, "item",
    external_kolmafia_.Item.get("li'l pirate costume"));QuestL12Nuns_defineProperty(this, "hotness",

    external_kolmafia_.Item.get("Mick's IcyVapoHotness Inhaler"));QuestL12Nuns_defineProperty(this, "effect",
    (0,external_kolmafia_.effectModifier)(this.hotness, "Effect"));QuestL12Nuns_defineProperty(this, "winkles",
    external_kolmafia_.Effect.get("Winklered"));QuestL12Nuns_defineProperty(this, "bowlStraightUp",
    external_kolmafia_.Effect.get("Cosmic Ball in the Air"));QuestL12Nuns_defineProperty(this, "cosmicBall",
    external_kolmafia_.Item.get("Cosmic Bowling Ball"));QuestL12Nuns_defineProperty(this, "asdonMartin",
    external_kolmafia_.Item.get("Asdon Martin keyfob"));QuestL12Nuns_defineProperty(this, "driving",
    external_kolmafia_.Effect.get("Driving Observantly"));QuestL12Nuns_defineProperty(this, "savingsBond",
    external_kolmafia_.Item.get("Savings bond"));QuestL12Nuns_defineProperty(this, "autumnDollar",
    external_kolmafia_.Item.get("Autumn Dollar"));QuestL12Nuns_defineProperty(this, "fishHead",

    external_kolmafia_.Item.get("Fish Head"));QuestL12Nuns_defineProperty(this, "boxedWine",
    external_kolmafia_.Item.get("Boxed Wine"));QuestL12Nuns_defineProperty(this, "piscatini",
    external_kolmafia_.Item.get("Piscatini"));QuestL12Nuns_defineProperty(this, "grapefruit",
    external_kolmafia_.Item.get("Grapefruit"));QuestL12Nuns_defineProperty(this, "driveby",
    external_kolmafia_.Item.get("Drive-by shooting"));QuestL12Nuns_defineProperty(this, "grapes",
    external_kolmafia_.Item.get("Bunch of square grapes"));QuestL12Nuns_defineProperty(this, "roborDrinks",

    [this.fishHead, this.piscatini, this.driveby]);}QuestL12Nuns_createClass(Quest12WarNuns, [{ key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "hasMeatBooze", value:

    function hasMeatBooze() {
      return this.roborDrinks.find(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;}) != null;
    } }, { key: "hasDrunkMeat", value:

    function hasDrunkMeat() {
      return (0,external_kolmafia_.getProperty)("_roboDrinks").includes("drive-by shooting");
    } }, { key: "getFamiliarToUse", value:

    function getFamiliarToUse(allownNull) {
      if (
      !allownNull &&
      (0,external_kolmafia_.haveFamiliar)(this.tot) &&
      (0,external_kolmafia_.availableAmount)(this.item) > 0)
      {
        return this.tot;
      }

      if (
      (0,external_kolmafia_.haveFamiliar)(this.robor) && (
      this.hasMeatBooze() || this.hasDrunkMeat()))
      {
        return this.robor;
      }

      if (allownNull) {
        return null;
      }

      return (0,external_kolmafia_.haveFamiliar)(this.hobo) ?
      this.hobo :
      (0,external_kolmafia_.haveFamiliar)(this.lep) ?
      this.lep :
      null;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      var toLevel = this.getFamiliarToUse(true);

      if (toLevel == this.tot) {
        return;
      }

      if (toLevel != null && (0,external_kolmafia_.familiarWeight)(toLevel) < 20) {
        return toLevel;
      }

      return null;
    } }, { key: "doRoboDrinks", value:

    function doRoboDrinks() {
      if (
      !(0,external_kolmafia_.haveFamiliar)(this.robor) ||
      this.hasDrunkMeat() ||
      !this.hasMeatBooze())
      {
        return;
      }

      // If no driveby on hand
      if ((0,external_kolmafia_.availableAmount)(this.driveby) == 0) {
        // If no way to get grapefruit
        if (
        (0,external_kolmafia_.availableAmount)(this.grapefruit) == 0 &&
        (0,external_kolmafia_.getProperty)("sidequestOrchardCompleted") == "none")
        {
          return;
        }

        // If we need pisc
        if ((0,external_kolmafia_.availableAmount)(this.piscatini) == 0) {
          // If we can't make pisc
          if (
          (0,external_kolmafia_.availableAmount)(this.fishHead) == 0 ||
          (0,external_kolmafia_.availableAmount)(this.boxedWine) == 0)
          {
            return;
          }
        }
      }

      // Now check if we can make this

      if ((0,external_kolmafia_.availableAmount)(this.driveby) == 0) {
        (0,external_kolmafia_.cliExecute)("create " + this.driveby.name);
      }

      (0,external_kolmafia_.useFamiliar)(this.robor);
      (0,external_kolmafia_.cliExecute)("robo drive-by shooting");
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Nuns";
    } }, { key: "isBowlingBallNextCombat", value:

    function isBowlingBallNextCombat() {
      return (
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cosmicBowlingBallReturnCombats")) <= 0 ||
        (0,external_kolmafia_.availableAmount)(this.cosmicBall) > 0);

    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("sidequestNunsCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.item) == 0) {
        this.doRoboDrinks();
      }

      if (
      (0,external_kolmafia_.getProperty)("warProgress") != "started" ||
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hippiesDefeated")) < 192)
      {
        return QuestStatus.NOT_READY;
      }

      if (
      !(0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Financial Spreadsheets")) &&
      GreySettings_GreySettings.greyMeatSkill != "No")
      {
        return QuestStatus.FASTER_LATER;
      }

      if (
      !this.mustBeDone() &&
      (0,external_kolmafia_.getProperty)("hasCosmicBowlingBall") == "true" &&
      !(0,external_kolmafia_.haveEffect)(this.bowlStraightUp) &&
      !this.isBowlingBallNextCombat())
      {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(external_kolmafia_.Item.get("Beer Helmet"));
      outfit.addWeight(external_kolmafia_.Item.get("distressed denim pants"));
      outfit.addWeight(external_kolmafia_.Item.get("bejeweled pledge pin"));
      outfit.meatDropWeight = 10;

      var fam = this.getFamiliarToUse(false);

      if (fam == this.tot) {
        outfit.addWeight(this.item);
      }

      return {
        familiar: fam,
        location: this.loc,
        outfit: outfit,
        disableFamOverride: fam != null,
        run: function run() {
          if (_this.getMeat() == 0) {
            _this.visitNuns();
            (0,external_kolmafia_.cliExecute)("boombox meat");
          }

          _this.tryToBuff();

          var meat = _this.getMeat();

          greyAdv(
          _this.loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          MacroBuilder/* Macro.trySkill */.LE.trySkill("sing along").trySkill(external_kolmafia_.Skill.get("Bowl Straight Up"))));



          if (meat >= _this.getMeat() || _this.getMeat() >= 100000) {
            _this.visitNuns();

            if (_this.status() == QuestStatus.COMPLETED) {
              (0,external_kolmafia_.cliExecute)("boombox food");
            }
          }

          (0,external_kolmafia_.print)("Turns Taken: ".concat(
          _this.loc.turnsSpent, ", that's approx ").concat(Math.round(
          _this.getMeat() / _this.loc.turnsSpent), " meat per adventure! ").concat(
          _this.getMeat(), " / 100,000 collected."),
          "blue");

        }
      };
    } }, { key: "visitNuns", value:

    function visitNuns() {
      (0,external_kolmafia_.visitUrl)("bigisland.php?place=nunnery");
    } }, { key: "getMeat", value:

    function getMeat() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("currentNunneryMeat"));
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_.haveEffect)(this.effect) + (0,external_kolmafia_.haveEffect)(this.winkles) > 0;
    } }, { key: "tryToBuff", value:

    function tryToBuff() {
      if (
      (0,external_kolmafia_.getWorkshed)() == this.asdonMartin &&
      (0,external_kolmafia_.getFuel)() > 37 &&
      (0,external_kolmafia_.haveEffect)(this.driving) == 0)
      {
        (0,external_kolmafia_.cliExecute)("asdonmartin drive Observantly");
      }

      /* if (!this.hasAlreadyPulled()) {
        GreyPulls.pullMeatBuffers();
         use(this.hotness);
      }*/


      if (!(0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("concertVisited"))) {
        (0,external_kolmafia_.cliExecute)("concert 2"); // Feeling wrinkled
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.savingsBond) > 0 &&
      (0,external_kolmafia_.haveEffect)((0,external_kolmafia_.effectModifier)(this.savingsBond, "Effect")) == 0)
      {
        (0,external_kolmafia_.use)(this.savingsBond);
      }

      if (
      GreySettings_GreySettings.greyValueOfAdventure * 1.3 >
      (0,external_kolmafia_.historicalPrice)(this.autumnDollar) &&
      (0,external_kolmafia_.availableAmount)(this.autumnDollar) > 0 &&
      (0,external_kolmafia_.haveEffect)((0,external_kolmafia_.effectModifier)(this.autumnDollar, "Effect")) == 0)
      {
        (0,external_kolmafia_.use)(this.autumnDollar);
      }
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return Quest12WarNuns;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12StartWar.ts
function QuestL12StartWar_typeof(obj) {"@babel/helpers - typeof";return QuestL12StartWar_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12StartWar_typeof(obj);}function QuestL12StartWar_slicedToArray(arr, i) {return QuestL12StartWar_arrayWithHoles(arr) || QuestL12StartWar_iterableToArrayLimit(arr, i) || QuestL12StartWar_unsupportedIterableToArray(arr, i) || QuestL12StartWar_nonIterableRest();}function QuestL12StartWar_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL12StartWar_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL12StartWar_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL12StartWar_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12StartWar_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL12StartWar_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12StartWar_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12StartWar_arrayLikeToArray(o, minLen);}function QuestL12StartWar_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL12StartWar_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12StartWar_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12StartWar_toPropertyKey(descriptor.key), descriptor);}}function QuestL12StartWar_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12StartWar_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12StartWar_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12StartWar_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL12StartWar_setPrototypeOf(subClass, superClass);}function QuestL12StartWar_setPrototypeOf(o, p) {QuestL12StartWar_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL12StartWar_setPrototypeOf(o, p);}function QuestL12StartWar_createSuper(Derived) {var hasNativeReflectConstruct = QuestL12StartWar_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL12StartWar_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL12StartWar_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL12StartWar_possibleConstructorReturn(this, result);};}function QuestL12StartWar_possibleConstructorReturn(self, call) {if (call && (QuestL12StartWar_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL12StartWar_assertThisInitialized(self);}function QuestL12StartWar_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL12StartWar_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL12StartWar_getPrototypeOf(o) {QuestL12StartWar_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL12StartWar_getPrototypeOf(o);}function QuestL12StartWar_defineProperty(obj, key, value) {key = QuestL12StartWar_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12StartWar_toPropertyKey(arg) {var key = QuestL12StartWar_toPrimitive(arg, "string");return QuestL12StartWar_typeof(key) === "symbol" ? key : String(key);}function QuestL12StartWar_toPrimitive(input, hint) {if (QuestL12StartWar_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12StartWar_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestL12StartWar = /*#__PURE__*/function (_TaskInfo) {QuestL12StartWar_inherits(QuestL12StartWar, _TaskInfo);var _super = QuestL12StartWar_createSuper(QuestL12StartWar);function QuestL12StartWar() {var _this;QuestL12StartWar_classCallCheck(this, QuestL12StartWar);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL12StartWar_defineProperty(QuestL12StartWar_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("Hippy Camp"));QuestL12StartWar_defineProperty(QuestL12StartWar_assertThisInitialized(_this), "umbrella",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL12StartWar_defineProperty(QuestL12StartWar_assertThisInitialized(_this), "familiar",
    external_kolmafia_.Familiar.get("Trick-or-Treating Tot"));QuestL12StartWar_defineProperty(QuestL12StartWar_assertThisInitialized(_this), "item",
    external_kolmafia_.Item.get("li'l pirate costume"));QuestL12StartWar_defineProperty(QuestL12StartWar_assertThisInitialized(_this), "paths", void 0);return _this;}QuestL12StartWar_createClass(QuestL12StartWar, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [];

      var combos = [];

      for (var i = 0; i < 3; i++) {
        combos.push([null, 4]);
        combos.push([ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC, 1]);
      }var _iterator = QuestL12StartWar_createForOfIteratorHelper(

        getAllCombinations(combos)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          if (combo.length != 3) {
            continue;
          }

          // Dumb queue manipulation, subtract 1 turn for every NC we hit on a non-forced
          var turns =
          combo.map(function (_ref) {var _ref2 = QuestL12StartWar_slicedToArray(_ref, 2),t = _ref2[1];return t;}).reduce(function (p, v) {return p + v;}, 0) -
          combo.filter(function (_ref3) {var _ref4 = QuestL12StartWar_slicedToArray(_ref3, 1),res = _ref4[0];return res == null;}).length;

          var path = new PossiblePath(turns);var _iterator2 = QuestL12StartWar_createForOfIteratorHelper(

            combo),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _step2$value = QuestL12StartWar_slicedToArray(_step2.value, 1),res = _step2$value[0];
              if (res == null) {
                continue;
              }

              path.add(res);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          this.paths.push(path);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "attemptPrime", value:

    function attemptPrime(path) {
      if (!path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC) || !this.canStartWar()) {
        return false;
      }

      setPrimedResource(this, path, path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC));

      return true;
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "canStartWar", value:

    function canStartWar() {
      if (!this.hasBoat() || !this.hasOutfit()) {
        return false;
      }

      if (external_kolmafia_.Stat.all().find(function (s) {return (0,external_kolmafia_.myBasestat)(s) < 70;}) != null) {
        return false;
      }

      return true;
    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_.getProperty)("warProgress") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if (path == null || !this.canStartWar()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.haveFamiliar)(this.familiar) && (0,external_kolmafia_.availableAmount)(this.item) == 0) {
        return QuestStatus.NOT_READY;
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC)) {
        if (path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC).primed()) {
          return QuestStatus.READY;
        }

        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady(true)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "hasBoat", value:

    function hasBoat() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastIslandUnlock")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "hasOutfit", value:

    function hasOutfit() {
      return (0,external_kolmafia_.haveOutfit)("Frat Warrior Fatigues");
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(external_kolmafia_.Item.get("Beer Helmet"));
      outfit.addWeight(external_kolmafia_.Item.get("distressed denim pants"));
      outfit.addWeight(external_kolmafia_.Item.get("bejeweled pledge pin"));

      var nc = path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC);

      if (nc == null) {
        outfit.setNoCombat().setNoCombat();

        if (
        (0,external_kolmafia_.availableAmount)(this.umbrella) > 0 &&
        !DelayBurners.isDelayBurnerReady())
        {
          outfit.addWeight(this.umbrella);
        }
      }

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          // If we can cast both NC skills
          if (
          nc == null &&
          DelayBurners.isDelayBurnerReady() &&
          (0,external_kolmafia_.equippedAmount)(_this2.umbrella) == 0)
          {
            DelayBurners.tryReplaceCombats();
          }

          var props = new Properties_PropertyManager();
          props.setChoice(139, 3);
          props.setChoice(140, 3);
          props.setChoice(141, 3);
          props.setChoice(142, 3);

          try {
            greyAdv(_this2.loc, outfit);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_.getProperty)("warProgress") != "unstarted") {
            _this2.visitArena();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Start";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "visitArena", value:

    function visitArena() {
      (0,external_kolmafia_.outfit)("Frat Warrior Fatigues");
      (0,external_kolmafia_.visitUrl)("bigisland.php?place=concert&pwd");
    } }]);return QuestL12StartWar;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarBoss.ts
function QuestL12WarBoss_typeof(obj) {"@babel/helpers - typeof";return QuestL12WarBoss_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12WarBoss_typeof(obj);}function QuestL12WarBoss_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12WarBoss_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL12WarBoss_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12WarBoss_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12WarBoss_arrayLikeToArray(o, minLen);}function QuestL12WarBoss_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL12WarBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12WarBoss_toPropertyKey(descriptor.key), descriptor);}}function QuestL12WarBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12WarBoss_toPropertyKey(arg) {var key = QuestL12WarBoss_toPrimitive(arg, "string");return QuestL12WarBoss_typeof(key) === "symbol" ? key : String(key);}function QuestL12WarBoss_toPrimitive(input, hint) {if (QuestL12WarBoss_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12WarBoss_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL12WarBoss = /*#__PURE__*/function () {function QuestL12WarBoss() {QuestL12WarBoss_classCallCheck(this, QuestL12WarBoss);}QuestL12WarBoss_createClass(QuestL12WarBoss, [{ key: "getId", value:
    function getId() {
      return "Council / War / Boss";
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("warProgress") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hippiesDefeated")) >= 1000) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(external_kolmafia_.Item.get("Beer Helmet"));
      outfit.addWeight(external_kolmafia_.Item.get("distressed denim pants"));
      outfit.addWeight(external_kolmafia_.Item.get("bejeweled pledge pin"));

      return {
        outfit: outfit,
        location: null,
        run: function run() {
          _this.sellBuyCrap();

          (0,external_kolmafia_.visitUrl)("bigisland.php?place=camp&whichcamp=1");
          (0,external_kolmafia_.visitUrl)("bigisland.php?place=camp&whichcamp=2");

          greyAdv(
          "bigisland.php?action=bossfight&pwd",
          null,
          new AdventureSettings().setFinishingBlowMacro(MacroBuilder/* Macro.attack */.LE.attack().repeat()));


          (0,external_kolmafia_.council)();
        }
      };
    } }, { key: "sellBuyCrap", value:

    function sellBuyCrap() {
      var crap = [
      "pink clay bead",
      "purple clay bead",
      "green clay bead",
      "communications windchimes",
      "bullet-proof corduroys",
      "round purple sunglasses",
      "reinforced beaded headband"].
      map(function (s) {return external_kolmafia_.Item.get(s);});var _iterator = QuestL12WarBoss_createForOfIteratorHelper(

        crap),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var s = _step.value;
          var keep = (0,external_kolmafia_.toSlot)(s) == (0,external_kolmafia_.toSlot)("none") ? 1 : 0;

          if ((0,external_kolmafia_.itemAmount)(s) <= keep) {
            continue;
          }

          (0,external_kolmafia_.sell)(s.buyer, (0,external_kolmafia_.itemAmount)(s) - keep, s);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      var master = crap[0].buyer;
      var garter = external_kolmafia_.Item.get("gauze garter");
      var gartersHave = (0,external_kolmafia_.itemAmount)(garter);

      if (GreySettings_GreySettings.shouldAvoidTowerRequirements()) {
        gartersHave += (0,external_kolmafia_.storageAmount)(garter);
      }

      var needHealers = 10 - gartersHave;
      needHealers = Math.min(needHealers, Math.floor(master.availableTokens / 2));

      if (needHealers > 0) {
        (0,external_kolmafia_.cliExecute)("make " + needHealers + " gauze garter");
      }

      while (master.availableTokens >= 5) {
        (0,external_kolmafia_.cliExecute)(
        "make " +
        Math.floor(master.availableTokens / 5) +
        " commemorative war stein");

      }

      while (master.availableTokens >= 2) {
        (0,external_kolmafia_.cliExecute)(
        "make " + Math.floor(master.availableTokens / 2) + " gauze garter");

      }

      while (master.availableTokens >= 1) {
        (0,external_kolmafia_.cliExecute)("make " + master.availableTokens + " beer bomb");
      }
    } }]);return QuestL12WarBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarFlyers.ts
function QuestL12WarFlyers_typeof(obj) {"@babel/helpers - typeof";return QuestL12WarFlyers_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12WarFlyers_typeof(obj);}function QuestL12WarFlyers_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarFlyers_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12WarFlyers_toPropertyKey(descriptor.key), descriptor);}}function QuestL12WarFlyers_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarFlyers_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarFlyers_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12WarFlyers_defineProperty(obj, key, value) {key = QuestL12WarFlyers_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12WarFlyers_toPropertyKey(arg) {var key = QuestL12WarFlyers_toPrimitive(arg, "string");return QuestL12WarFlyers_typeof(key) === "symbol" ? key : String(key);}function QuestL12WarFlyers_toPrimitive(input, hint) {if (QuestL12WarFlyers_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12WarFlyers_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestL12WarFlyers = /*#__PURE__*/function () {function QuestL12WarFlyers() {QuestL12WarFlyers_classCallCheck(this, QuestL12WarFlyers);QuestL12WarFlyers_defineProperty(this, "flyers",
    external_kolmafia_.Item.get("Rock band flyers"));}QuestL12WarFlyers_createClass(QuestL12WarFlyers, [{ key: "getId", value:

    function getId() {
      return "Council / War / Flyers";
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "status", value:

    function status() {
      if (this.isArenaDone()) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.flyers) == 0) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("flyeredML")) < 10000) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          _this.visitArena();
        }
      };
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "isArenaDone", value:

    function isArenaDone() {
      return (0,external_kolmafia_.getProperty)("sidequestArenaCompleted") != "none";
    } }, { key: "visitArena", value:

    function visitArena() {
      (0,external_kolmafia_.outfit)("Frat Warrior Fatigues");
      (0,external_kolmafia_.visitUrl)("bigisland.php?place=concert&pwd");

      // If something borked, lets just make us flyer another
      if (
      (0,external_kolmafia_.availableAmount)(this.flyers) > 0 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("flyeredML")) >= 10000)
      {
        (0,external_kolmafia_.setProperty)("flyeredML", "9900");
      }
    } }]);return QuestL12WarFlyers;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarGremlins.ts
function QuestL12WarGremlins_typeof(obj) {"@babel/helpers - typeof";return QuestL12WarGremlins_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12WarGremlins_typeof(obj);}function QuestL12WarGremlins_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarGremlins_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12WarGremlins_toPropertyKey(descriptor.key), descriptor);}}function QuestL12WarGremlins_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarGremlins_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarGremlins_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12WarGremlins_defineProperty(obj, key, value) {key = QuestL12WarGremlins_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12WarGremlins_toPropertyKey(arg) {var key = QuestL12WarGremlins_toPrimitive(arg, "string");return QuestL12WarGremlins_typeof(key) === "symbol" ? key : String(key);}function QuestL12WarGremlins_toPrimitive(input, hint) {if (QuestL12WarGremlins_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12WarGremlins_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var WarGremlins = /*#__PURE__*/function () {




  function WarGremlins() {QuestL12WarGremlins_classCallCheck(this, WarGremlins);QuestL12WarGremlins_defineProperty(this, "magnet", external_kolmafia_.Item.get("molybdenum magnet"));QuestL12WarGremlins_defineProperty(this, "sealTooth", external_kolmafia_.Item.get("Seal Tooth"));QuestL12WarGremlins_defineProperty(this, "children", []);
    this.children.push(
    new GremlinQuest(
    "Council / War / Gremlins / Burning Barrel",
    external_kolmafia_.Location.get("Next to that barrel with something burning in it"),
    external_kolmafia_.Monster.get("batwinged gremlin (tool)"),
    external_kolmafia_.Item.get("molybdenum hammer"),
    "It whips out a hammer"));


    this.children.push(
    new GremlinQuest(
    "Council / War / Gremlins / Abandoned Refrigerator",
    external_kolmafia_.Location.get("near an abandoned refrigerator"),
    external_kolmafia_.Monster.get("spider gremlin (tool)"),
    external_kolmafia_.Item.get("Molybdenum Pliers"),
    "It whips out a pair of pliers"));


    this.children.push(
    new GremlinQuest(
    "Council / War / Gremlins / Old Tires",
    external_kolmafia_.Location.get("over where the old tires are"),
    external_kolmafia_.Monster.get("erudite gremlin (tool)"),
    external_kolmafia_.Item.get("molybdenum crescent wrench"),
    "He whips out a crescent wrench"));


    this.children.push(
    new GremlinQuest(
    "Council / War / Gremlins / Rusted Car",
    external_kolmafia_.Location.get("Out by that rusted-out car"),
    external_kolmafia_.Monster.get("vegetable gremlin (tool)"),
    external_kolmafia_.Item.get("molybdenum screwdriver"),
    "It whips out a screwdriver"));


  }QuestL12WarGremlins_createClass(WarGremlins, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_.itemAmount)(this.magnet) == 0 || (0,external_kolmafia_.availableAmount)(this.sealTooth) == 0;
    } }, { key: "free", value:

    function free() {
      return this.mustBeDone();
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_.itemAmount)(this.magnet) == 0) {
        return this.visitJunkman();
      }

      if ((0,external_kolmafia_.availableAmount)(this.sealTooth) == 0) {
        return this.getSealTooth();
      }

      return this.visitJunkman();
    } }, { key: "getSealTooth", value:

    function getSealTooth() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.retrieveItem)(external_kolmafia_.Item.get("Seal tooth"));
        }
      };
    } }, { key: "visitJunkman", value:

    function visitJunkman() {
      var outfit = new GreyOutfit();
      outfit.addWeight(external_kolmafia_.Item.get("Beer Helmet"));
      outfit.addWeight(external_kolmafia_.Item.get("distressed denim pants"));
      outfit.addWeight(external_kolmafia_.Item.get("bejeweled pledge pin"));
      outfit.addExtra("-tie");

      return {
        outfit: outfit,
        location: null,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("bigisland.php?action=junkman&pwd");
        }
      };
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("sidequestJunkyardCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.sealTooth) > 0 &&
      (0,external_kolmafia_.availableAmount)(this.magnet) > 0 &&
      this.children.find(function (c) {return c.status() != QuestStatus.COMPLETED;}) != null)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Gremlins";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return WarGremlins;}();var


GremlinQuest = /*#__PURE__*/function () {










  function GremlinQuest(
  id,
  loc,
  monster,
  item,
  toolString)
  {QuestL12WarGremlins_classCallCheck(this, GremlinQuest);QuestL12WarGremlins_defineProperty(this, "id", void 0);QuestL12WarGremlins_defineProperty(this, "loc", void 0);QuestL12WarGremlins_defineProperty(this, "monster", void 0);QuestL12WarGremlins_defineProperty(this, "item", void 0);QuestL12WarGremlins_defineProperty(this, "toolString", void 0);QuestL12WarGremlins_defineProperty(this, "magnet", external_kolmafia_.Item.get("molybdenum magnet"));QuestL12WarGremlins_defineProperty(this, "flyers", external_kolmafia_.Item.get("Rock band flyers"));QuestL12WarGremlins_defineProperty(this, "sealTooth", external_kolmafia_.Item.get("Seal Tooth"));QuestL12WarGremlins_defineProperty(this, "pants", external_kolmafia_.Item.get("Greatest American Pants"));
    this.id = id;
    this.loc = loc;
    this.monster = monster;
    this.item = item;
    this.toolString = toolString;
  }QuestL12WarGremlins_createClass(GremlinQuest, [{ key: "getId", value:

    function getId() {
      return this.id;
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("sidequestJunkyardCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.sealTooth) == 0 ||
      (0,external_kolmafia_.availableAmount)(this.magnet) == 0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.item) > 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Subatomic Hardening"))) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().
      addWeight("ML", -1, null, -70).
      addWeight("DA").
      addWeight("DR", 5);
      outfit.hpWeight = 1;

      if (
      (0,external_kolmafia_.availableAmount)(this.pants) > 0 &&
      currentPredictions().get(this.loc) != this.monster)
      {
        outfit.addWeight(this.pants);
      }

      var macro2 = MacroBuilder/* Macro.if_ */.LE.if_(
      "match " + this.toolString,
      MacroBuilder/* Macro.item */.LE.item(this.magnet).step("abort")).
      item(this.sealTooth);

      var macro = new MacroBuilder/* Macro */.LE().if_(
      this.monster,
      MacroBuilder/* Macro.while_ */.LE.while_("!pastround 25 && !hpbelow 50", macro2));


      var orbs = [
      this.monster,
      external_kolmafia_.Monster.get(this.monster.name.replace(" (tool)", ""))];


      return {
        location: this.loc,
        outfit: outfit,
        orbs: orbs,
        mayFreeRun: true,
        freeRun: function freeRun(mons) {return mons != _this.monster;},
        run: function run() {
          var settings = new AdventureSettings();
          settings.setDuringFightMacro(macro);

          settings.addBanish(external_kolmafia_.Monster.get("A.M.C Gremlin"));
          // settings.addBanish(Monster.get("vegetable gremlin"));
          // settings.addBanish(Monster.get("batwinged gremlin"));
          // settings.addBanish(Monster.get("spider gremlin"));
          // settings.addBanish(Monster.get("batwinged gremlin"));

          greyAdv(_this.loc, outfit, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return GremlinQuest;}();
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12WarLobster.ts
function QuestL12WarLobster_typeof(obj) {"@babel/helpers - typeof";return QuestL12WarLobster_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12WarLobster_typeof(obj);}function QuestL12WarLobster_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12WarLobster_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL12WarLobster_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12WarLobster_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12WarLobster_arrayLikeToArray(o, minLen);}function QuestL12WarLobster_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL12WarLobster_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12WarLobster_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12WarLobster_toPropertyKey(descriptor.key), descriptor);}}function QuestL12WarLobster_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12WarLobster_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12WarLobster_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12WarLobster_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL12WarLobster_setPrototypeOf(subClass, superClass);}function QuestL12WarLobster_setPrototypeOf(o, p) {QuestL12WarLobster_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL12WarLobster_setPrototypeOf(o, p);}function QuestL12WarLobster_createSuper(Derived) {var hasNativeReflectConstruct = QuestL12WarLobster_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL12WarLobster_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL12WarLobster_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL12WarLobster_possibleConstructorReturn(this, result);};}function QuestL12WarLobster_possibleConstructorReturn(self, call) {if (call && (QuestL12WarLobster_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL12WarLobster_assertThisInitialized(self);}function QuestL12WarLobster_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL12WarLobster_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL12WarLobster_getPrototypeOf(o) {QuestL12WarLobster_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL12WarLobster_getPrototypeOf(o);}function QuestL12WarLobster_defineProperty(obj, key, value) {key = QuestL12WarLobster_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12WarLobster_toPropertyKey(arg) {var key = QuestL12WarLobster_toPrimitive(arg, "string");return QuestL12WarLobster_typeof(key) === "symbol" ? key : String(key);}function QuestL12WarLobster_toPrimitive(input, hint) {if (QuestL12WarLobster_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12WarLobster_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestL12Lobster = /*#__PURE__*/function (_TaskInfo) {QuestL12WarLobster_inherits(QuestL12Lobster, _TaskInfo);var _super = QuestL12WarLobster_createSuper(QuestL12Lobster);












  function QuestL12Lobster() {var _this;QuestL12WarLobster_classCallCheck(this, QuestL12Lobster);
    _this = _super.call(this);QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "loc", external_kolmafia_.Location.get("Sonofa Beach"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "item", external_kolmafia_.Item.get("barrel of gunpowder"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "monster", external_kolmafia_.Monster.get("Lobsterfrogman"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "bossBat", external_kolmafia_.Monster.get("Boss Bat"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "cursedMagnifyingGlass", external_kolmafia_.Item.get("Cursed Magnifying Glass"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "powerfulGlove", external_kolmafia_.Item.get("Powerful Glove"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "backupCamera", external_kolmafia_.Item.get("Backup Camera"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "votedSticker", external_kolmafia_.Item.get("&quot;I Voted!&quot; sticker"));QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "paths", []);QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "hasAutumn", (0,external_kolmafia_.getProperty)("hasAutumnaton") == "true");QuestL12WarLobster_defineProperty(QuestL12WarLobster_assertThisInitialized(_this), "fallbotTag", "Fallbot");return _this;
  }QuestL12WarLobster_createClass(QuestL12Lobster, [{ key: "level", value:

    function level() {
      return this.hasAutumn ? 13 : 15;
    } }, { key: "getFriendsRemaining", value:

    function getFriendsRemaining() {
      if ((0,external_kolmafia_.toMonster)((0,external_kolmafia_.getProperty)("_saberForceMonster")) != this.monster) {
        return 0;
      }

      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_saberForceMonsterCount"));
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];

      if (this.hasAutumn) {
        this.paths.push(
        new PossiblePath(
        assumeUnstarted ? 1 : this.loc.turnsSpent > 0 ? 0 : 1).
        addTag(this.fallbotTag));

        return;
      }

      var barrelsNeeded =
      5 - (assumeUnstarted ? 0 : (0,external_kolmafia_.availableAmount)(this.item));
      var turnsManual = 8;
      var possibleCombo = [];

      for (var i = 0; i < barrelsNeeded; i++) {
        if (i < this.getFriendsRemaining()) {
          possibleCombo.push("Friend");
        } else {
          possibleCombo.push("Manual");
        }

        possibleCombo.push(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);

        if (i <= 1) {
          possibleCombo.push(ResourceTypes/* ResourceCategory.OLFACT_COPIER */.s6.OLFACT_COPIER);
        }
      }

      // If we're doing voted, or mag class. Then we can do a replace
      if (
      (this.hasPortScan() ||
      (0,external_kolmafia_.availableAmount)(this.votedSticker) +
      (0,external_kolmafia_.availableAmount)(this.cursedMagnifyingGlass) >
      0) && (
      !this.isBackupReady() || this.getFriendsRemaining() == 0))
      {
        possibleCombo.push(ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE);
      }var _iterator = QuestL12WarLobster_createForOfIteratorHelper(

        getAllCombinations(possibleCombo)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          // If a combo would do something silly, like request a glove replace when its not needed
          if (!assumeUnstarted && combo.includes(ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE)) {
            // If we'd ask for a replace when we're doing friends.. Or have a void copier
            if (this.getFriendsRemaining() > 0) {
              continue;
            }

            // If we'd ask for a replace when we can do backups
            if (
            this.lastMonster() == this.monster &&
            combo.includes(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER))
            {
              continue;
            }
          }

          // If a combo would do something silly, like expect lobster without a source
          if (
          !combo.includes("Manual") &&
          !combo.includes(ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE) && (
          assumeUnstarted ||
          this.getFriendsRemaining() == 0 &&
          !(
          combo.includes(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) &&
          this.lastMonster() == this.monster)))

          {
            continue;
          }

          var turnsTaken = 0;
          var barrelsGained = 0;var _iterator2 = QuestL12WarLobster_createForOfIteratorHelper(

            combo),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var type = _step2.value;
              if (type == "Friend") {
                turnsTaken += 1;
                barrelsGained += 1;
              } else if (type == "Manual") {
                turnsTaken += turnsManual;
                barrelsGained++;
              } else if (type == ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) {
                // Skip turns taken as we're burning delay as a rule
                // turnsTaken++;
                barrelsGained++;
              } else if (type == ResourceTypes/* ResourceCategory.OLFACT_COPIER */.s6.OLFACT_COPIER) {
                // Each one of these gives us another 2 effectively
                // Since the first fight we'd saber on won't give us a barrel and is pretty much moved to the last fight
                turnsTaken += 2;
                barrelsGained += 2;
              } else if (type == ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE) {
                turnsTaken++;
                barrelsGained++;
              } else {
                throw "Lobster calcs didn't account for " + type;
              }
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          if (barrelsGained < barrelsNeeded) {
            continue;
          }

          // If we're doing olfact, then doing an extra copy when our saber would do it anyways is a waste
          var extraTurns = combo.filter(
          function (c) {return c == "Manual" || c == ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER;}).
          length;
          var extraBarrels = barrelsGained - barrelsNeeded;

          if (extraBarrels > 0 && extraTurns > 1) {
            continue;
          }

          var path = new PossiblePath(turnsTaken);var _iterator3 = QuestL12WarLobster_createForOfIteratorHelper(

            combo),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _type = _step3.value;
              if (typeof _type != "number") {
                continue;
              }

              if (_type == ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE && this.hasPortScan()) {
                path.add(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT);
              }

              path.add(_type);
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          this.paths.push(path);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if (barrelsNeeded <= 0) {
        this.paths.push(new PossiblePath(0));
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "status", value:

    function status(path) {
      var status = this.getStatus(path);

      if ((0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") != "none") {
        return status;
      }

      if (
      path != null &&
      path.canUse(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT) &&
      path.getResource(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT).primed())
      {
        return QuestStatus.READY;
      }

      if (status == null) {
        if (!path.canUse(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT)) {
          return QuestStatus.READY;
        }

        return QuestStatus.NOT_READY;
      }

      return status;
    } }, { key: "getStatus", value:

    function getStatus(path) {
      if ((0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.item) >= 5) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.myAdventures)() < 22 || path == null) {
        return QuestStatus.NOT_READY;
      }

      if (path.hasTag(this.fallbotTag)) {
        if (this.loc.turnsSpent < 1) {
          return QuestStatus.READY;
        }

        return QuestStatus.NOT_READY;
      }

      if (this.getFriendsRemaining() > 0) {
        return QuestStatus.READY;
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) && this.shouldDelayForBats()) {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.backupCamera) > 0 &&
      this.isBackupReady() &&
      path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER))
      {
        return QuestStatus.READY;
      }

      if (
      path.canUse(ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE) &&
      path.canUse(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT))
      {
        if (
        (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) > 2 &&
        (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) < 6)
        {
          return QuestStatus.NOT_READY;
        }

        return null;
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE)) {
        if (this.getMonsterReplacer() == null) {
          return QuestStatus.NOT_READY;
        }
      } else if (!hasCombatSkillReady()) {
        return QuestStatus.FASTER_LATER;
      }

      if (
      (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) > 2 &&
      (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) < 6)
      {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "isVoidReady", value:

    function isVoidReady() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cursedMagnifyingGlassCount")) == 13;
    } }, { key: "isVoterReady", value:

    function isVoterReady() {
      return (
        (0,external_kolmafia_.totalTurnsPlayed)() % 11 == 1 &&
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastVoteMonsterTurn")) < (0,external_kolmafia_.totalTurnsPlayed)());

    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Lobsters";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "turnInQuest", value:

    function turnInQuest() {
      var outfit = new GreyOutfit();
      outfit.addWeight(external_kolmafia_.Item.get("Beer Helmet"));
      outfit.addWeight(external_kolmafia_.Item.get("distressed denim pants"));
      outfit.addWeight(external_kolmafia_.Item.get("bejeweled pledge pin"));

      return {
        location: null,
        outfit: outfit,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("bigisland.php?place=lighthouse&action=pyro&pwd");
          (0,external_kolmafia_.visitUrl)("bigisland.php?place=lighthouse&action=pyro&pwd");
          (0,external_kolmafia_.visitUrl)("bigisland.php?place=lighthouse&action=pyro&pwd");
        }
      };
    } }, { key: "getMonsterReplacer", value:

    function getMonsterReplacer() {
      if ((0,external_kolmafia_.availableAmount)(this.votedSticker) > 0 && this.isVoterReady()) {
        return this.votedSticker;
      }

      if ((0,external_kolmafia_.availableAmount)(this.cursedMagnifyingGlass) && this.isVoidReady()) {
        return this.cursedMagnifyingGlass;
      }

      return null;
    } }, { key: "hasPortScan", value:

    function hasPortScan() {
      return (0,external_kolmafia_.getProperty)("sourceTerminalEducateKnown").includes("portscan");
    } }, { key: "hasMonsterForcer", value:

    function hasMonsterForcer() {
      return (
        (this.hasPortScan() ||
        (0,external_kolmafia_.availableAmount)(this.cursedMagnifyingGlass) +
        (0,external_kolmafia_.availableAmount)(this.votedSticker) >
        0) &&
        (0,external_kolmafia_.availableAmount)(this.powerfulGlove) > 0);

    } }, { key: "hasBackups", value:

    function hasBackups() {
      return 11 - (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_backUpUses"));
    } }, { key: "lastMonster", value:

    function lastMonster() {
      return (0,external_kolmafia_.getProperty)("lastCopyableMonster") == "" ?
      null :
      (0,external_kolmafia_.toMonster)((0,external_kolmafia_.getProperty)("lastCopyableMonster"));
    } }, { key: "isBackupReady", value:

    function isBackupReady() {
      return this.hasBackups() > 0 && this.lastMonster() == this.monster;
    } }, { key: "shouldDelayForBats", value:

    function shouldDelayForBats() {
      return getQuestStatus("questL04Bat") < 3;
    } }, { key: "isBatsAvailable", value:

    function isBatsAvailable() {
      var status = getQuestStatus("questL04Bat");

      return status >= 3 && status < 100;
    } }, { key: "runBackup", value:

    function runBackup(path) {var _this2 = this;
      var outfit = new GreyOutfit();
      outfit.addWeight("ML", -1);

      var copierResource = path.getResource(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);
      copierResource.prepare(outfit);

      var loc;

      if (this.isBatsAvailable()) {
        loc = external_kolmafia_.Location.get("The Boss Bat's Lair");
      } else {
        loc = external_kolmafia_.Location.get("The Dire Warren");
      }

      return {
        outfit: outfit,
        location: loc,
        run: function run() {
          greyAdv(
          loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          new MacroBuilder/* Macro */.LE().ifNot_(_this2.monster, copierResource.macro())));


        }
      };
    } }, { key: "runFriends", value:

    function runFriends(path) {var _this3 = this;
      var copier = path.getResource(ResourceTypes/* ResourceCategory.OLFACT_COPIER */.s6.OLFACT_COPIER);
      var makeMoreFriends =
      this.getFriendsRemaining() == 1 &&
      (0,external_kolmafia_.availableAmount)(this.item) < 4 &&
      copier != null;

      var outfit = new GreyOutfit();
      outfit.addWeight("ML", -1);

      if (makeMoreFriends) {
        copier.prepare(outfit);
      }

      return {
        outfit: outfit,
        location: this.loc,
        run: function run() {
          var props = new Properties_PropertyManager();
          var macro;

          if (makeMoreFriends) {
            copier.prepare(null, props);
            macro = MacroBuilder/* Macro.if_ */.LE.if_(_this3.monster, copier.macro());
          }

          var uses = (0,external_kolmafia_.getProperty)("_saberForceUses");

          try {
            greyAdv(
            _this3.loc,
            outfit,
            new AdventureSettings().setStartOfFightMacro(macro));


            if (uses != (0,external_kolmafia_.getProperty)("_saberForceUses")) {
              if (_this3.getFriendsRemaining() <= 0) {
                throw "Used the force, but no friends? Something went wrong!";
              }
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "attemptPrime", value:

    function attemptPrime(path) {
      if (!path.canUse(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT)) {
        return false;
      }

      var status = this.getStatus(path);

      if (status != null) {
        return false;
      }

      setPrimedResource(
      this,
      path,
      path.getResource(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT));


      return true;
    } }, { key: "run", value:

    function run(path) {var _this4 = this;
      // Try to turn in quest
      if ((0,external_kolmafia_.itemAmount)(this.item) >= 5) {
        return this.turnInQuest();
      }

      // Going here just to unlock fallbot~!
      if (path.hasTag(this.fallbotTag)) {
        return {
          location: this.loc,
          run: function run() {
            greyAdv(_this4.loc);
          }
        };
      }

      if (this.getFriendsRemaining() > 0) {
        return this.runFriends(path);
      }

      if (this.isBackupReady() && path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER)) {
        return this.runBackup(path);
      }

      var outfit = new GreyOutfit();

      var gloveReplace = path.getResource(ResourceTypes/* ResourceCategory.GLOVE_REPLACE */.s6.GLOVE_REPLACE);

      var primed = path.getResource(ResourceTypes/* ResourceCategory.FORCE_FIGHT */.s6.FORCE_FIGHT);

      if (primed != null) {
        if (!primed.primed()) {




          // Need to handle primed better, like resumes..
          //   throw "Unable to run lobster fights, we're supposed to prime it but it isn't primed!";
        }if (gloveReplace == null) {throw "Unable to run lobster fights, we're forcing a fight but don't have a replacer!";}
      }

      var replaceFight =
      primed != null ||
      this.getMonsterReplacer() != null && gloveReplace != null;

      if (gloveReplace != null) {
        gloveReplace.prepare(outfit);

        if (primed == null) {
          outfit.addWeight(this.getMonsterReplacer());
        }
      } else {
        outfit.setPlusCombat();
      }

      outfit.addWeight("ML", -1);

      var copier = path.getResource(ResourceTypes/* ResourceCategory.OLFACT_COPIER */.s6.OLFACT_COPIER);

      if (copier != null) {
        copier.prepare(outfit);
      }

      return {
        location: this.loc,
        outfit: outfit,
        run: function run() {
          var macro;
          var props = new Properties_PropertyManager();
          var uses = (0,external_kolmafia_.getProperty)("_saberForceUses");

          if (copier != null) {
            copier.prepare(null, props);

            if (macro == null) {
              macro = new MacroBuilder/* Macro */.LE();
            }

            macro.if_(_this4.monster, copier.macro());
          }

          try {
            if (replaceFight) {
              (0,external_kolmafia_.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_.toInt)(_this4.loc));

              MacroBuilder/* Macro.ifNot_ */.LE.ifNot_(
              _this4.monster,
              MacroBuilder/* Macro.ifNot_ */.LE.ifNot_(_this4.bossBat, gloveReplace.macro())).
              submit();
            }

            greyAdv(
            _this4.loc,
            outfit,
            new AdventureSettings().setStartOfFightMacro(macro));


            if (uses != (0,external_kolmafia_.getProperty)("_saberForceUses")) {
              if (_this4.getFriendsRemaining() <= 0) {
                throw "Used the force, but no friends? Something went wrong!";
              }
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if ((0,external_kolmafia_.itemAmount)(this.item) >= 5) {
        if (
        (0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") == "none" &&
        (0,external_kolmafia_.getProperty)("warProgress") == "started")
        {
          return true;
        }

        return false;
      }

      if (this.getFriendsRemaining() > 0) {
        return false;
      }

      if (this.lastMonster() != this.monster) {
        return false;
      }

      if (this.hasBackups() <= 0) {
        return false;
      }

      return true;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL12Lobster;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/islandwar/QuestL12Worms.ts
function QuestL12Worms_typeof(obj) {"@babel/helpers - typeof";return QuestL12Worms_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12Worms_typeof(obj);}function QuestL12Worms_slicedToArray(arr, i) {return QuestL12Worms_arrayWithHoles(arr) || QuestL12Worms_iterableToArrayLimit(arr, i) || QuestL12Worms_unsupportedIterableToArray(arr, i) || QuestL12Worms_nonIterableRest();}function QuestL12Worms_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL12Worms_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL12Worms_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL12Worms_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL12Worms_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL12Worms_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL12Worms_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL12Worms_arrayLikeToArray(o, minLen);}function QuestL12Worms_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL12Worms_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12Worms_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12Worms_toPropertyKey(descriptor.key), descriptor);}}function QuestL12Worms_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12Worms_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12Worms_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12Worms_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL12Worms_setPrototypeOf(subClass, superClass);}function QuestL12Worms_setPrototypeOf(o, p) {QuestL12Worms_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL12Worms_setPrototypeOf(o, p);}function QuestL12Worms_createSuper(Derived) {var hasNativeReflectConstruct = QuestL12Worms_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL12Worms_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL12Worms_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL12Worms_possibleConstructorReturn(this, result);};}function QuestL12Worms_possibleConstructorReturn(self, call) {if (call && (QuestL12Worms_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL12Worms_assertThisInitialized(self);}function QuestL12Worms_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL12Worms_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL12Worms_getPrototypeOf(o) {QuestL12Worms_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL12Worms_getPrototypeOf(o);}function QuestL12Worms_defineProperty(obj, key, value) {key = QuestL12Worms_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12Worms_toPropertyKey(arg) {var key = QuestL12Worms_toPrimitive(arg, "string");return QuestL12Worms_typeof(key) === "symbol" ? key : String(key);}function QuestL12Worms_toPrimitive(input, hint) {if (QuestL12Worms_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12Worms_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL12Worms = /*#__PURE__*/function (_TaskInfo) {QuestL12Worms_inherits(QuestL12Worms, _TaskInfo);var _super = QuestL12Worms_createSuper(QuestL12Worms);





  function QuestL12Worms() {var _this;QuestL12Worms_classCallCheck(this, QuestL12Worms);
    _this = _super.call(this);QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "nanovision", external_kolmafia_.Skill.get("Double Nanovision"));QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "worms", []);QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "heart", external_kolmafia_.Item.get("heart of the filthworm queen"));QuestL12Worms_defineProperty(QuestL12Worms_assertThisInitialized(_this), "paths", []);

    _this.worms.push(
    new WormProgress(
    external_kolmafia_.Location.get("The Queen's Chamber"),
    external_kolmafia_.Item.get("filthworm royal guard scent gland"),
    false));


    _this.worms.push(
    new WormProgress(
    external_kolmafia_.Location.get("The Royal Guard Chamber"),
    external_kolmafia_.Item.get("filthworm drone scent gland")));


    _this.worms.push(
    new WormProgress(
    external_kolmafia_.Location.get("The Feeding Chamber"),
    external_kolmafia_.Item.get("Filthworm hatchling scent gland")));


    _this.worms.push(
    new WormProgress(external_kolmafia_.Location.get("The Hatching Chamber"), null));return _this;

  }QuestL12Worms_createClass(QuestL12Worms, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this2 = this;
      this.paths = [];

      // At turn in!
      if (!assumeUnstarted && (0,external_kolmafia_.availableAmount)(this.heart) > 0) {
        this.paths.push(new PossiblePath(0));
        return;
      }

      var wormsRemaining = [];var _iterator = QuestL12Worms_createForOfIteratorHelper(

        this.worms),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var worm = _step.value;
          wormsRemaining.push(worm);

          if (!assumeUnstarted && worm.isDoable()) {
            break;
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      var yrsNeeded = wormsRemaining.filter(function (w) {return w.dropsItem;}).length;
      var killsNeeded = wormsRemaining.length;

      var mixup = [];
      mixup.push([null, 1]);

      for (var i = 0; i < yrsNeeded; i++) {
        // So we run 300% item drop lets assume
        // That's 30 chance a fight. That's eh, 4 fights? Lets call it 6 cos we're bad luck.
        mixup.push([null, 6]);
        mixup.push([ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX, 1]);
        mixup.push([ResourceTypes/* ResourceCategory.HUGS_AND_KISSES */.s6.HUGS_AND_KISSES, 1]);
        mixup.push([ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY, 1]);
      }var _iterator2 = QuestL12Worms_createForOfIteratorHelper(

        getAllCombinations(mixup)),_step2;try {var _loop = function _loop() {var combo = _step2.value;
          if (
          combo.length != killsNeeded ||
          combo.find(function (_ref) {var _ref2 = QuestL12Worms_slicedToArray(_ref, 2),res = _ref2[0],turn = _ref2[1];return res == null && turn == 1;}) == null)
          {return "continue";

          }

          var path = new PossiblePath(
          combo.map(function (_ref3) {var _ref4 = QuestL12Worms_slicedToArray(_ref3, 2),turns = _ref4[1];return turns;}).reduce(function (p, n) {return p + n;}, 0));


          path.addIgnored("Cosplay Saber");

          combo.forEach(function (_ref5) {var _ref6 = QuestL12Worms_slicedToArray(_ref5, 1),resource = _ref6[0];
            if (resource == null) {
              return;
            }

            path.add(resource);
          });

          _this2.paths.push(path);
        };for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Filthworms";
    } }, { key: "getLocations", value:

    function getLocations() {
      return this.worms.map(function (e) {return e.location;});
    } }, { key: "level", value:

    function level() {
      return 12;
    } }, { key: "isHeistReady", value:

    function isHeistReady() {
      return (
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("catBurglarBankHeists")) > 0 ||
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_catBurglarCharge")) >= 10);

    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_.getProperty)("sidequestOrchardCompleted") != "none") {
        return QuestStatus.COMPLETED;
      }

      // If we can't access this place yet
      if ((0,external_kolmafia_.getProperty)("warProgress") != "started") {
        return QuestStatus.NOT_READY;
      }

      // If we can't turn this in
      if (
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hippiesDefeated")) < 64 &&
      (0,external_kolmafia_.availableAmount)(this.heart) > 0)
      {
        return QuestStatus.NOT_READY;
      }

      if (this.isKillingQueen()) {
        return QuestStatus.FASTER_LATER;
      }

      if (path == null) {
        return QuestStatus.READY;
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY)) {
        // If we're going to YR
        if (!path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).ready()) {
          // If we can't afford to YR
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.READY;
      }

      if (
      !path.canUse(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX) &&
      !path.canUse(ResourceTypes/* ResourceCategory.HUGS_AND_KISSES */.s6.HUGS_AND_KISSES) &&
      !(0,external_kolmafia_.haveSkill)(this.nanovision))
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "isKillingQueen", value:

    function isKillingQueen() {
      return (
        (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get("filthworm royal guard scent gland")) > 0 ||
        (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Filthworm Guard Stench")) > 0);

    } }, { key: "run", value:

    function run(path) {var _resource,_resource2,_this3 = this;
      if ((0,external_kolmafia_.itemAmount)(this.heart) > 0) {
        var _outfit = new GreyOutfit();
        _outfit.addWeight(external_kolmafia_.Item.get("Beer Helmet"));
        _outfit.addWeight(external_kolmafia_.Item.get("distressed denim pants"));
        _outfit.addWeight(external_kolmafia_.Item.get("bejeweled pledge pin"));
        _outfit.addExtra("-tie");

        return {
          outfit: _outfit,
          location: null,
          run: function run() {
            (0,external_kolmafia_.visitUrl)("bigisland.php?place=orchard&action=stand&pwd=");
            (0,external_kolmafia_.visitUrl)("bigisland.php?place=orchard&action=stand&pwd=");
            (0,external_kolmafia_.visitUrl)("shop.php?whichshop=hippy");
          }
        };
      }

      var outfit = new GreyOutfit();

      var resource = path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);

      if (resource == null) {
        resource = path.getResource(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX);
      }

      if (resource == null) {
        resource = path.getResource(ResourceTypes/* ResourceCategory.HUGS_AND_KISSES */.s6.HUGS_AND_KISSES);
      }

      if (this.isKillingQueen()) {
        outfit.meatDropWeight = 4;
      } else if (resource != null) {
        resource.prepare(outfit);
      } else {
        outfit.setItemDrops().setChampagneBottle();
      }

      var chamber = this.worms.find(function (worm) {return worm.isDoable();});

      return {
        location: chamber.location,
        outfit: outfit,
        familiar: (_resource = resource) === null || _resource === void 0 ? void 0 : _resource.familiar,
        disableFamOverride: ((_resource2 = resource) === null || _resource2 === void 0 ? void 0 : _resource2.familiar) != null,
        mayFreeRun:
        resource != null && resource.type != ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY,
        freeRun: function freeRun(monster) {return !monster.name.includes("filthworm");},
        run: function run() {
          if (chamber.effect != null && (0,external_kolmafia_.haveEffect)(chamber.effect) == 0) {
            (0,external_kolmafia_.use)(chamber.glandsRequired);
          }

          var tryRun =
          (0,external_kolmafia_.equippedAmount)(external_kolmafia_.Item.get("Greatest American Pants")) +
          (0,external_kolmafia_.equippedAmount)(external_kolmafia_.Item.get("navel ring of navel gazing")) >
          0;
          var killingBlow;
          var props = new Properties_PropertyManager();
          var killingSkill = (0,external_kolmafia_.haveSkill)(_this3.nanovision) ?
          _this3.nanovision :
          external_kolmafia_.Skill.get("Infinite Loop");

          if (resource != null && !_this3.isKillingQueen()) {
            resource.prepare(null, props);
            killingBlow = MacroBuilder/* Macro.if_ */.LE.if_("monstername filthworm", resource.macro());

            if (tryRun) {
              killingBlow.runaway();
            } else {
              killingBlow.skill(killingSkill).repeat();
            }
          } else {
            killingBlow = MacroBuilder/* Macro.skill */.LE.skill(killingSkill).repeat();
          }

          try {
            greyAdv(
            chamber.location,
            outfit,
            new AdventureSettings().setFinishingBlowMacro(killingBlow));

          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "free", value:

    function free() {
      return (0,external_kolmafia_.availableAmount)(this.heart) > 0;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {var _iterator3 = QuestL12Worms_createForOfIteratorHelper(
        this.worms),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var worm = _step3.value;
          if (worm.effect == null) {
            continue;
          }

          // If the gland is in operation
          if ((0,external_kolmafia_.haveEffect)(worm.effect) > 0) {
            return true;
          }

          // If the gland is available
          if ((0,external_kolmafia_.availableAmount)(worm.glandsRequired) > 0) {
            return false;
          }
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

      return false;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL12Worms;}(TaskInfo);var


WormProgress = /*#__PURE__*/function () {





  function WormProgress(
  location,
  itemRequired)

  {var dropsItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;QuestL12Worms_classCallCheck(this, WormProgress);QuestL12Worms_defineProperty(this, "glandsRequired", void 0);QuestL12Worms_defineProperty(this, "effect", void 0);QuestL12Worms_defineProperty(this, "location", void 0);QuestL12Worms_defineProperty(this, "dropsItem", void 0);
    this.location = location;
    this.glandsRequired = itemRequired;
    this.dropsItem = dropsItem;

    if (itemRequired == null) {
      return;
    }

    this.effect = (0,external_kolmafia_.effectModifier)(itemRequired, "Effect");
  }QuestL12Worms_createClass(WormProgress, [{ key: "isDoable", value:

    function isDoable() {
      return (
        this.glandsRequired == null ||
        (0,external_kolmafia_.haveEffect)(this.effect) > 0 ||
        (0,external_kolmafia_.availableAmount)(this.glandsRequired) > 0);

    } }]);return WormProgress;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL12War.ts
function QuestL12War_typeof(obj) {"@babel/helpers - typeof";return QuestL12War_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL12War_typeof(obj);}function QuestL12War_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL12War_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL12War_toPropertyKey(descriptor.key), descriptor);}}function QuestL12War_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL12War_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL12War_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL12War_defineProperty(obj, key, value) {key = QuestL12War_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL12War_toPropertyKey(arg) {var key = QuestL12War_toPrimitive(arg, "string");return QuestL12War_typeof(key) === "symbol" ? key : String(key);}function QuestL12War_toPrimitive(input, hint) {if (QuestL12War_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL12War_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}












var QuestL12War = /*#__PURE__*/function () {function QuestL12War() {QuestL12War_classCallCheck(this, QuestL12War);QuestL12War_defineProperty(this, "children",
    [
    new QuestL12Battlefield(),
    new WarGremlins(),
    new Quest12WarNuns(),
    new QuestL12Worms(),
    new QuestL12StartWar(),
    new QuestL12WarBoss(),
    new QuestL12Lobster(),
    new QuestL12WarFlyers(),
    new QuestL12FratOutfit()]);}QuestL12War_createClass(QuestL12War, [{ key: "getLocations", value:


    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getId", value:

    function getId() {
      return "Council / War / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }]);return QuestL12War;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/QuestDigitalKey.ts
function QuestDigitalKey_typeof(obj) {"@babel/helpers - typeof";return QuestDigitalKey_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestDigitalKey_typeof(obj);}function QuestDigitalKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestDigitalKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestDigitalKey_toPropertyKey(descriptor.key), descriptor);}}function QuestDigitalKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestDigitalKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestDigitalKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestDigitalKey_defineProperty(obj, key, value) {key = QuestDigitalKey_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestDigitalKey_toPropertyKey(arg) {var key = QuestDigitalKey_toPrimitive(arg, "string");return QuestDigitalKey_typeof(key) === "symbol" ? key : String(key);}function QuestDigitalKey_toPrimitive(input, hint) {if (QuestDigitalKey_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestDigitalKey_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestDigitalKey = /*#__PURE__*/function () {function QuestDigitalKey() {QuestDigitalKey_classCallCheck(this, QuestDigitalKey);QuestDigitalKey_defineProperty(this, "location",
    external_kolmafia_.Location.get("8-Bit Realm"));QuestDigitalKey_defineProperty(this, "wPixel",
    external_kolmafia_.Item.get("White Pixel"));QuestDigitalKey_defineProperty(this, "rPixel",
    external_kolmafia_.Item.get("Red Pixel"));QuestDigitalKey_defineProperty(this, "gPixel",
    external_kolmafia_.Item.get("Green Pixel"));QuestDigitalKey_defineProperty(this, "bPixel",
    external_kolmafia_.Item.get("Blue Pixel"));QuestDigitalKey_defineProperty(this, "transfomer",
    external_kolmafia_.Item.get("continuum transfunctioner"));QuestDigitalKey_defineProperty(this, "key",
    external_kolmafia_.Item.get("Digital key"));}QuestDigitalKey_createClass(QuestDigitalKey, [{ key: "level", value:

    function level() {
      return 4;
    } }, { key: "atDoor", value:

    function atDoor() {
      return getQuestStatus("questL13Final") == 5;
    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_.availableAmount)(this.key) > 0 ||
      (0,external_kolmafia_.getProperty)("nsTowerDoorKeysUsed").includes(this.key.name))
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.transfomer) == 0) {
        return QuestStatus.READY;
      }

      var status = getQuestStatus("questL13Final");

      // If we're not at the keys, don't farm yet. We can still hit it from powerful glove
      if (status < 5 && GreySettings_GreySettings.shouldAvoidTowerRequirements()) {
        return QuestStatus.NOT_READY;
      }

      // If we can make white pixels, or we have enough pixels
      if (this.needPixels() - this.canMakePixelCount() <= 0) {
        return QuestStatus.READY;
      }

      if (GreySettings_GreySettings.shouldAvoidTowerRequirements() && (0,external_kolmafia_.pullsRemaining)() != -1) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "canMakePixels", value:

    function canMakePixels() {
      return this.canMakePixelCount() > 0;
    } }, { key: "canMakePixelCount", value:

    function canMakePixelCount() {
      return Math.min(
      (0,external_kolmafia_.itemAmount)(this.rPixel),
      (0,external_kolmafia_.itemAmount)(this.bPixel),
      (0,external_kolmafia_.itemAmount)(this.gPixel));

    } }, { key: "needPixels", value:

    function needPixels() {
      return Math.max(0, 30 - (0,external_kolmafia_.itemAmount)(this.wPixel));
    } }, { key: "run", value:

    function run() {var _this = this;
      if ((0,external_kolmafia_.availableAmount)(this.transfomer) == 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=forestvillage&action=fv_mystic");

            while ((0,external_kolmafia_.handlingChoice)()) {
              (0,external_kolmafia_.runChoice)(1);
            }
            (0,external_kolmafia_.print)("Grabbed " + _this.transfomer, "gray");
          }
        };
      }

      if (
      this.needPixels() - this.canMakePixelCount() <= 0 &&
      this.needPixels() > 0)
      {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            var toMake = Math.min(_this.canMakePixelCount(), _this.needPixels());

            (0,external_kolmafia_.print)("Creating " + toMake + " white pixels..", "gray");

            (0,external_kolmafia_.create)(_this.wPixel, toMake);
          }
        };
      }

      if (this.needPixels() <= 0 || (0,external_kolmafia_.pullsRemaining)() == -1) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.cliExecute)("acquire " + _this.key);

            if ((0,external_kolmafia_.availableAmount)(_this.key) == 0) {
              throw "Expected to have a digital key on hand!";
            }
          }
        };
      }

      var outfit = new GreyOutfit().setItemDrops();
      outfit.addWeight(this.transfomer);
      var settings = new AdventureSettings();
      settings.addNoBanish(external_kolmafia_.Monster.get("Blooper"));
      settings.addNoBanish(external_kolmafia_.Monster.get("Buzzy Beetle"));
      settings.addNoBanish(external_kolmafia_.Monster.get("Goomba"));
      settings.addNoBanish(external_kolmafia_.Monster.get("Koopa Troopa"));
      settings.addNoBanish(external_kolmafia_.Monster.get("Tektite"));

      return {
        location: this.location,
        outfit: outfit,
        olfaction: [external_kolmafia_.Monster.get("Blooper")],
        run: function run() {
          greyAdv(_this.location, outfit, settings);
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Digital";
    } }, { key: "getLocations", value:

    function getLocations() {
      // Don't hog this location when we're not sure we need to
      if (!this.atDoor()) {
        return [];
      }

      return [this.location];
    } }]);return QuestDigitalKey;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/QuestSkeletonKey.ts
function QuestSkeletonKey_typeof(obj) {"@babel/helpers - typeof";return QuestSkeletonKey_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSkeletonKey_typeof(obj);}function QuestSkeletonKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkeletonKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSkeletonKey_toPropertyKey(descriptor.key), descriptor);}}function QuestSkeletonKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkeletonKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkeletonKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkeletonKey_defineProperty(obj, key, value) {key = QuestSkeletonKey_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSkeletonKey_toPropertyKey(arg) {var key = QuestSkeletonKey_toPrimitive(arg, "string");return QuestSkeletonKey_typeof(key) === "symbol" ? key : String(key);}function QuestSkeletonKey_toPrimitive(input, hint) {if (QuestSkeletonKey_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSkeletonKey_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestSkeletonKey = /*#__PURE__*/function () {function QuestSkeletonKey() {QuestSkeletonKey_classCallCheck(this, QuestSkeletonKey);QuestSkeletonKey_defineProperty(this, "key",
    external_kolmafia_.Item.get("Skeleton Key"));QuestSkeletonKey_defineProperty(this, "bone",
    external_kolmafia_.Item.get("skeleton bone"));QuestSkeletonKey_defineProperty(this, "teeth",
    external_kolmafia_.Item.get("loose teeth"));QuestSkeletonKey_defineProperty(this, "location",
    external_kolmafia_.Location.get(" The Skeleton Store"));QuestSkeletonKey_defineProperty(this, "priceTag",
    external_kolmafia_.Item.get("bone with a price tag on it"));}QuestSkeletonKey_createClass(QuestSkeletonKey, [{ key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Skeleton";
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_.availableAmount)(this.key) > 0 ||
      (0,external_kolmafia_.getProperty)("nsTowerDoorKeysUsed").includes(this.key.name))
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.bone) > 0 && (0,external_kolmafia_.availableAmount)(this.teeth) > 0) {
        if ((0,external_kolmafia_.myMeat)() > 100) {
          return QuestStatus.READY;
        } else {
          return QuestStatus.NOT_READY;
        }
      }

      if ((0,external_kolmafia_.pullsRemaining)() == -1) {
        return QuestStatus.READY;
      }

      if (!canGreyAdventure(this.location)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        (0,external_kolmafia_.pullsRemaining)() == -1 ||
        (0,external_kolmafia_.availableAmount)(this.bone) > 0 && (0,external_kolmafia_.availableAmount)(this.teeth) > 0);

    } }, { key: "free", value:

    function free() {
      return this.mustBeDone();
    } }, { key: "run", value:

    function run() {
      if (
      (0,external_kolmafia_.pullsRemaining)() == -1 ||
      (0,external_kolmafia_.availableAmount)(this.bone) > 0 && (0,external_kolmafia_.availableAmount)(this.teeth) > 0)
      {
        return this.craft();
      }

      return this.adventure();
    } }, { key: "craft", value:

    function craft() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.cliExecute)("acquire " + _this.key);

          if ((0,external_kolmafia_.availableAmount)(_this.key) == 0) {
            throw "Failed to acquire " + _this.key;
          }
        }
      };
    } }, { key: "adventure", value:

    function adventure() {var _this2 = this;
      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.location,
        outfit: outfit,
        run: function run() {
          greyAdv(_this2.location, outfit);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestSkeletonKey;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/QuestStarKey.ts
function QuestStarKey_typeof(obj) {"@babel/helpers - typeof";return QuestStarKey_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestStarKey_typeof(obj);}function QuestStarKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestStarKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestStarKey_toPropertyKey(descriptor.key), descriptor);}}function QuestStarKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestStarKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestStarKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestStarKey_defineProperty(obj, key, value) {key = QuestStarKey_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestStarKey_toPropertyKey(arg) {var key = QuestStarKey_toPrimitive(arg, "string");return QuestStarKey_typeof(key) === "symbol" ? key : String(key);}function QuestStarKey_toPrimitive(input, hint) {if (QuestStarKey_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestStarKey_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestStarKey = /*#__PURE__*/function () {function QuestStarKey() {QuestStarKey_classCallCheck(this, QuestStarKey);QuestStarKey_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Hole in the sky"));QuestStarKey_defineProperty(this, "rocket",
    external_kolmafia_.Item.get("steam-powered model rocketship"));QuestStarKey_defineProperty(this, "star",
    external_kolmafia_.Item.get("Star"));QuestStarKey_defineProperty(this, "map",
    external_kolmafia_.Item.get("Star Chart"));QuestStarKey_defineProperty(this, "line",
    external_kolmafia_.Item.get("Line"));QuestStarKey_defineProperty(this, "key",
    external_kolmafia_.Item.get("Richard's star key"));QuestStarKey_defineProperty(this, "toAbsorb", void 0);}QuestStarKey_createClass(QuestStarKey, [{ key: "level", value:


    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL13Final") > 5 ||
      (0,external_kolmafia_.availableAmount)(this.key) > 0 ||
      (0,external_kolmafia_.getProperty)("nsTowerDoorKeysUsed").includes(this.key.name))
      {
        return QuestStatus.COMPLETED;
      }

      if (
      !this.hasEnoughMaterials() &&
      GreySettings_GreySettings.shouldAvoidTowerRequirements())
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.rocket) == 0) {
        return QuestStatus.NOT_READY;
      }

      /*if (getQuestStatus("questL13Final") < 5) {
        return QuestStatus.NOT_READY;
      }*/

      if (
      this.toAbsorb.length == 0 &&
      GreySettings_GreySettings.shouldAvoidTowerRequirements() &&
      (0,external_kolmafia_.getProperty)("_greyReachedTower") != "true")
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "hasEnoughMaterials", value:

    function hasEnoughMaterials() {
      return (
        (0,external_kolmafia_.pullsRemaining)() == -1 ||
        (0,external_kolmafia_.availableAmount)(this.map) > 0 &&
        (0,external_kolmafia_.availableAmount)(this.line) >= 7 &&
        (0,external_kolmafia_.availableAmount)(this.star) >= 8);

    } }, { key: "run", value:

    function run() {var _this = this;
      if (this.hasEnoughMaterials()) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.retrieveItem)(_this.key);
          }
        };
      }

      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.location,
        outfit: outfit,
        run: function run() {
          greyAdv(_this.location, outfit);
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Star";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestStarKey;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestKeyStuffAbstract.ts
function QuestKeyStuffAbstract_typeof(obj) {"@babel/helpers - typeof";return QuestKeyStuffAbstract_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestKeyStuffAbstract_typeof(obj);}function QuestKeyStuffAbstract_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestKeyStuffAbstract_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestKeyStuffAbstract_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestKeyStuffAbstract_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestKeyStuffAbstract_arrayLikeToArray(o, minLen);}function QuestKeyStuffAbstract_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestKeyStuffAbstract_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestKeyStuffAbstract_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestKeyStuffAbstract_toPropertyKey(descriptor.key), descriptor);}}function QuestKeyStuffAbstract_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestKeyStuffAbstract_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestKeyStuffAbstract_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestKeyStuffAbstract_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestKeyStuffAbstract_setPrototypeOf(subClass, superClass);}function QuestKeyStuffAbstract_setPrototypeOf(o, p) {QuestKeyStuffAbstract_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestKeyStuffAbstract_setPrototypeOf(o, p);}function QuestKeyStuffAbstract_createSuper(Derived) {var hasNativeReflectConstruct = QuestKeyStuffAbstract_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestKeyStuffAbstract_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestKeyStuffAbstract_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestKeyStuffAbstract_possibleConstructorReturn(this, result);};}function QuestKeyStuffAbstract_possibleConstructorReturn(self, call) {if (call && (QuestKeyStuffAbstract_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestKeyStuffAbstract_assertThisInitialized(self);}function QuestKeyStuffAbstract_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestKeyStuffAbstract_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestKeyStuffAbstract_getPrototypeOf(o) {QuestKeyStuffAbstract_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestKeyStuffAbstract_getPrototypeOf(o);}function QuestKeyStuffAbstract_defineProperty(obj, key, value) {key = QuestKeyStuffAbstract_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestKeyStuffAbstract_toPropertyKey(arg) {var key = QuestKeyStuffAbstract_toPrimitive(arg, "string");return QuestKeyStuffAbstract_typeof(key) === "symbol" ? key : String(key);}function QuestKeyStuffAbstract_toPrimitive(input, hint) {if (QuestKeyStuffAbstract_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestKeyStuffAbstract_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var QuestKeyStuffAbstract = /*#__PURE__*/function (_TaskInfo) {QuestKeyStuffAbstract_inherits(QuestKeyStuffAbstract, _TaskInfo);var _super = QuestKeyStuffAbstract_createSuper(QuestKeyStuffAbstract);function QuestKeyStuffAbstract() {var _this;QuestKeyStuffAbstract_classCallCheck(this, QuestKeyStuffAbstract);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestKeyStuffAbstract_defineProperty(QuestKeyStuffAbstract_assertThisInitialized(_this), "keys",
    ["Boris's key", "Sneaky Pete's key", "Jarlsberg's key"].map(
    function (s) {return external_kolmafia_.Item.get(s);}));QuestKeyStuffAbstract_defineProperty(QuestKeyStuffAbstract_assertThisInitialized(_this), "zappables",

    []);QuestKeyStuffAbstract_defineProperty(QuestKeyStuffAbstract_assertThisInitialized(_this), "token",
    external_kolmafia_.Item.get("Fat loot token"));return _this;}QuestKeyStuffAbstract_createClass(QuestKeyStuffAbstract, [{ key: "getKeysUsed", value:

    function getKeysUsed() {var _this2 = this;
      return (0,external_kolmafia_.getProperty)("nsTowerDoorKeysUsed").
      split(",").
      filter(function (s) {return s.length > 0;}).
      map(function (s) {return external_kolmafia_.Item.get(s);}).
      filter(function (k) {return _this2.keys.includes(k);});
    } }, { key: "getUnusedKeys", value:



    function getUnusedKeys() {
      var used = this.getKeysUsed();

      return this.keys.filter(function (i) {return !used.includes(i);});
    } }, { key: "getKeysUnavailable", value:

    function getKeysUnavailable() {
      var used = this.getKeysUsed();

      return this.keys.filter(
      function (k) {return !used.includes(k) && (0,external_kolmafia_.availableAmount)(k) == 0;});

    } }, { key: "getOwnedZappables", value:

    function getOwnedZappables() {
      var owned = [];var _iterator = QuestKeyStuffAbstract_createForOfIteratorHelper(

        this.getZappableItems()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          for (var a = 0; a < (0,external_kolmafia_.availableAmount)(i); a++) {
            owned.push(i);
          }
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return owned;
    } }, { key: "getOwnedKeys", value:

    function getOwnedKeys() {
      return this.keys.filter(function (k) {return (0,external_kolmafia_.availableAmount)(k) > 0;});
    } }, { key: "getViableKeyCount", value:

    function getViableKeyCount() {
      var keys =
      (0,external_kolmafia_.availableAmount)(this.token) +
      this.getKeysUsed().length +
      this.getOwnedKeys().length;

      if ((0,external_kolmafia_.getProperty)("dailyDungeonDone") == "false") {
        keys += 1;

        if (
        !GreySettings_GreySettings.isHardcoreMode() &&
        (0,external_kolmafia_.getProperty)("dailyDungeonMalwareUsed") == "false")
        {
          keys += 1;
        }
      }

      /* // If we can fight bandit
      if (toInt(getProperty("_foughtFantasyRealm")) < 5) {
        // If we own fantasyrealm
        if (
          getProperty("frAlways") == "true" ||
          getProperty("_frToday") == "true"
        ) {
          keys++;
        } else if (
          canCombatLocket(Monster.get("Fantasy Bandit")) &&
          11 - toInt(getProperty("_backUpUses")) >= 4
        ) {
          keys += 1;
        }
      }*/

      return keys;
    } }, { key: "getZappableItems", value:

    function getZappableItems() {var _this3 = this;
      if (this.zappables.length == 0) {var _iterator2 = QuestKeyStuffAbstract_createForOfIteratorHelper(
          this.keys),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var i = _step2.value;
            Object.keys((0,external_kolmafia_.getRelated)(i, "zap")).forEach(function (s) {
              var i = external_kolmafia_.Item.get(s);

              if (_this3.zappables.includes(i) || _this3.keys.includes(i)) {
                return;
              }

              _this3.zappables.push(i);
            });
          }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
      }

      return this.zappables;
    } }]);return QuestKeyStuffAbstract;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestDailyDungeon.ts
function QuestDailyDungeon_typeof(obj) {"@babel/helpers - typeof";return QuestDailyDungeon_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestDailyDungeon_typeof(obj);}function QuestDailyDungeon_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestDailyDungeon_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestDailyDungeon_toPropertyKey(descriptor.key), descriptor);}}function QuestDailyDungeon_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestDailyDungeon_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestDailyDungeon_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestDailyDungeon_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestDailyDungeon_setPrototypeOf(subClass, superClass);}function QuestDailyDungeon_setPrototypeOf(o, p) {QuestDailyDungeon_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestDailyDungeon_setPrototypeOf(o, p);}function QuestDailyDungeon_createSuper(Derived) {var hasNativeReflectConstruct = QuestDailyDungeon_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestDailyDungeon_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestDailyDungeon_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestDailyDungeon_possibleConstructorReturn(this, result);};}function QuestDailyDungeon_possibleConstructorReturn(self, call) {if (call && (QuestDailyDungeon_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestDailyDungeon_assertThisInitialized(self);}function QuestDailyDungeon_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestDailyDungeon_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestDailyDungeon_getPrototypeOf(o) {QuestDailyDungeon_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestDailyDungeon_getPrototypeOf(o);}function QuestDailyDungeon_defineProperty(obj, key, value) {key = QuestDailyDungeon_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestDailyDungeon_toPropertyKey(arg) {var key = QuestDailyDungeon_toPrimitive(arg, "string");return QuestDailyDungeon_typeof(key) === "symbol" ? key : String(key);}function QuestDailyDungeon_toPrimitive(input, hint) {if (QuestDailyDungeon_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestDailyDungeon_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}












var QuestDailyDungeon = /*#__PURE__*/function (_TaskInfo) {QuestDailyDungeon_inherits(QuestDailyDungeon, _TaskInfo);var _super = QuestDailyDungeon_createSuper(QuestDailyDungeon);









  function QuestDailyDungeon(useMalware) {var _this;QuestDailyDungeon_classCallCheck(this, QuestDailyDungeon);
    _this = _super.call(this);QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "pole", external_kolmafia_.Item.get("eleven-foot pole"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "ring", external_kolmafia_.Item.get("ring of Detect Boring Doors"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "picklocks", external_kolmafia_.Item.get("Pick-O-Matic lockpicks"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "location", external_kolmafia_.Location.get("The Daily Dungeon"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "fam", external_kolmafia_.Familiar.get("Gelatinous Cubeling"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "malware", external_kolmafia_.Item.get("Daily dungeon malware"));QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "paths", void 0);QuestDailyDungeon_defineProperty(QuestDailyDungeon_assertThisInitialized(_this), "usingMalware", void 0);

    _this.usingMalware = useMalware;return _this;
  }QuestDailyDungeon_createClass(QuestDailyDungeon, [{ key: "getKeys", value:

    function getKeys() {
      return this.usingMalware && !this.isMalwareUsed() ? 2 : 1;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "isDailyDoneToday", value:

    function isDailyDoneToday() {
      return (0,external_kolmafia_.getProperty)("dailyDungeonDone") == "true";
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      if (
      !assumeUnstarted &&
      GreySettings_GreySettings.shouldAvoidTowerRequirements() &&
      !GreySettings_GreySettings.greyReachedTower)
      {
        this.paths = null;
        return;
      }

      var mustDoMalware = GreySettings_GreySettings.greyDailyMalware == "Always";
      var mustNeverDoMalware = GreySettings_GreySettings.greyDailyMalware == "Never";

      if (
      mustDoMalware && (
      GreySettings_GreySettings.isHardcoreMode() || !this.usingMalware))
      {
        this.paths = null;
        return;
      } else if (mustNeverDoMalware && this.usingMalware) {
        this.paths = null;
        return;
      }

      this.paths = [];

      var path = new PossiblePath(4);

      this.paths.push(path);

      if (!this.usingMalware) {
        return;
      }

      var usedMalware = (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("_dailyDungeonMalwareUsed"));

      if (!assumeUnstarted && usedMalware) {
        return;
      }

      path.addConsumablePull(this.malware);
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      if (
      GreySettings_GreySettings.shouldAvoidTowerRequirements() ||
      !(0,external_kolmafia_.haveFamiliar)(this.fam))
      {
        return null;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.pole) > 0 &&
      (0,external_kolmafia_.availableAmount)(this.ring) > 0 &&
      (0,external_kolmafia_.availableAmount)(this.picklocks) > 0)
      {
        return null;
      }

      return this.fam;
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if (getQuestStatus("questL13Final") > 5 || this.isDailyDoneToday()) {
        return QuestStatus.COMPLETED;
      }

      if (this.usingMalware) {
        if (
        GreySettings_GreySettings.isHardcoreMode() ||
        GreySettings_GreySettings.greyDailyMalware == "Never")
        {
          return QuestStatus.COMPLETED;
        } else if (GreySettings_GreySettings.shouldAvoidTowerRequirements()) {
          if (GreySettings_GreySettings.greyReachedTower) {
            return QuestStatus.READY;
          }

          return QuestStatus.NOT_READY;
        }
      }

      if (this.hasFamiliarRecommendation() != null && (0,external_kolmafia_.pullsRemaining)() >= 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "isMalwareUsed", value:

    function isMalwareUsed() {
      return (0,external_kolmafia_.getProperty)("_dailyDungeonMalwareUsed") == "true";
    } }, { key: "grabMalware", value:

    function grabMalware(path) {
      if (
      (0,external_kolmafia_.itemAmount)(this.malware) != 0 ||
      this.isMalwareUsed() ||
      !path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL))
      {
        return;
      }

      if ((0,external_kolmafia_.pullsRemaining)() == -1) {
        (0,external_kolmafia_.cliExecute)("acquire " + this.malware);
      } else {
        GreyPulls.tryPull(this.malware, 80000);
        path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
      }

      if ((0,external_kolmafia_.itemAmount)(this.malware) == 0) {
        throw (
          "Expected to have " +
          this.malware +
          " on hand, something went wrong obviously.");

      }
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(this.ring);

      return {
        outfit: outfit,
        location: this.location,
        freeRun: function freeRun() {return (0,external_kolmafia_.itemAmount)(_this2.malware) == 0 || _this2.isMalwareUsed();},
        run: function run() {
          var dontHave = [_this2.ring, _this2.picklocks, _this2.pole].filter(
          function (i) {return (0,external_kolmafia_.itemAmount)(i) + (0,external_kolmafia_.equippedAmount)(i) == 0;});


          if ((0,external_kolmafia_.pullsRemaining)() == -1 && dontHave.length > 0) {
            dontHave.forEach(function (i) {
              GreyPulls.tryPull(i, 5000);
              path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);

              if ((0,external_kolmafia_.itemAmount)(i) == 0) {
                throw "Expected to have " + i;
              }
            });
            return;
          } /*else if (dontHave.length > 0) {
          print("Uh oh! Missing " + dontHave.join(", ") + "!", "red");
          throw "Expected to have dungeon items, didn't.";
          }*/

          var props = new Properties_PropertyManager();
          var settings = new AdventureSettings();

          if (_this2.usingMalware) {
            _this2.grabMalware(path);

            if ((0,external_kolmafia_.itemAmount)(_this2.malware) > 0 && !_this2.isMalwareUsed()) {
              settings.setStartOfFightMacro(MacroBuilder/* Macro.item */.LE.item(_this2.malware));
            }
          }

          props.setChoice(689, 1);
          props.setChoice(690, 2);
          props.setChoice(691, 2);
          props.setChoice(692, 3);
          props.setChoice(693, 2);

          try {
            greyAdv(_this2.location, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      if (this.usingMalware) {
        return "Council / Tower / Keys / Heroes / DailyDungeon + Malware";
      }

      return "Council / Tower / Keys / Heroes / DailyDungeon";
    } }]);return QuestDailyDungeon;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestFantasyBandits.ts
function QuestFantasyBandits_typeof(obj) {"@babel/helpers - typeof";return QuestFantasyBandits_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestFantasyBandits_typeof(obj);}function QuestFantasyBandits_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestFantasyBandits_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestFantasyBandits_toPropertyKey(descriptor.key), descriptor);}}function QuestFantasyBandits_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestFantasyBandits_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestFantasyBandits_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestFantasyBandits_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestFantasyBandits_setPrototypeOf(subClass, superClass);}function QuestFantasyBandits_setPrototypeOf(o, p) {QuestFantasyBandits_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestFantasyBandits_setPrototypeOf(o, p);}function QuestFantasyBandits_createSuper(Derived) {var hasNativeReflectConstruct = QuestFantasyBandits_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestFantasyBandits_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestFantasyBandits_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestFantasyBandits_possibleConstructorReturn(this, result);};}function QuestFantasyBandits_possibleConstructorReturn(self, call) {if (call && (QuestFantasyBandits_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestFantasyBandits_assertThisInitialized(self);}function QuestFantasyBandits_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestFantasyBandits_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestFantasyBandits_getPrototypeOf(o) {QuestFantasyBandits_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestFantasyBandits_getPrototypeOf(o);}function QuestFantasyBandits_defineProperty(obj, key, value) {key = QuestFantasyBandits_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestFantasyBandits_toPropertyKey(arg) {var key = QuestFantasyBandits_toPrimitive(arg, "string");return QuestFantasyBandits_typeof(key) === "symbol" ? key : String(key);}function QuestFantasyBandits_toPrimitive(input, hint) {if (QuestFantasyBandits_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestFantasyBandits_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestFantasyBandit = /*#__PURE__*/function (_TaskInfo) {QuestFantasyBandits_inherits(QuestFantasyBandit, _TaskInfo);var _super = QuestFantasyBandits_createSuper(QuestFantasyBandit);function QuestFantasyBandit() {var _this;QuestFantasyBandits_classCallCheck(this, QuestFantasyBandit);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "fought",
    "_foughtFantasyRealm");QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "monster",
    external_kolmafia_.Monster.get("Fantasy Bandit"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "camera",
    external_kolmafia_.Item.get("Backup Camera"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "location",
    external_kolmafia_.Location.get("The Bandit Crossroads"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "equip",
    external_kolmafia_.Item.get("FantasyRealm G. E. M."));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "token",
    external_kolmafia_.Item.get("fat loot token"));QuestFantasyBandits_defineProperty(QuestFantasyBandits_assertThisInitialized(_this), "path", void 0);return _this;}QuestFantasyBandits_createClass(QuestFantasyBandit, [{ key: "getKeys", value:


    function getKeys() {
      return 1;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      // We copy 4 times, fax 1 time
      // How many copies we want to perform
      var fightsRemaining = 5 - (assumeUnstarted ? 0 : this.getFoughtToday());

      this.path = new PossiblePath(fightsRemaining);

      // If we have realm access, no need for further resources.
      if (this.hasRealmAccess()) {
        return;
      }

      // If the last monster was is a bandit, no need to fax
      // But we still need to fight X more bandits.
      if (this.lastBackup() != this.monster || assumeUnstarted) {
        this.path.addFax(this.monster);
      } else {
        // We need to fax, so one of those copies is a fax and can be removed
        fightsRemaining--;
      }

      this.path.add(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER, fightsRemaining - 1);

      // If we're assuming we've unstarted, no need to add this stuff
      if (assumeUnstarted) {
        return;
      }

      // Assuming we're at fought = 1, so 4 bandits remaining.
      // If last monster is sheep, then we'd need to do a fax and 3 copies = 4
      // If last monster is bandit, then we'd need to do 4 copies
      for (var i = fightsRemaining; i < 4; i++) {


        //  this.path.addUsed(ResourceCategory.COPIER);
      }} }, { key: "grabFantasyGem", value:
    function grabFantasyGem() {var _this2 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=realm_fantasy&action=fr_initcenter");
          (0,external_kolmafia_.runChoice)(3);

          if ((0,external_kolmafia_.availableAmount)(_this2.equip) == 0) {
            throw "I unexpectedly didn't acquire the fantasyrealm gem!";
          }
        }
      };
    } }, { key: "runFantasyRealm", value:

    function runFantasyRealm() {var _this3 = this;
      if ((0,external_kolmafia_.availableAmount)(this.equip) == 0) {
        return this.grabFantasyGem();
      }

      var outfit = new GreyOutfit();
      // Try avoid exp stuff being added cos we're not running a fam
      outfit.addWeight("familiar exp", -100);
      outfit.addWeight(this.equip);

      return {
        location: this.location,
        familiar: external_kolmafia_.Familiar.none,
        disableFamOverride: true,
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(1281, 0); // Don't handle

          if ((0,external_kolmafia_.myFamiliar)() != external_kolmafia_.Familiar.none) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.none);
          }

          var tokens = (0,external_kolmafia_.availableAmount)(_this3.token);

          try {
            greyAdv(_this3.location, outfit);
            _this3.addFought();
          } catch (e) {
            (0,external_kolmafia_.print)(
            "We errored, did we hit crossroads choice? We deliberately should not hit that if we still haven't finished fantasy bandits. You may need to set '_foughtFantasyRealm' to 5",
            "red");

            throw e;
          } finally {
            props.resetAll();
          }

          if (_this3.hasFoughtEnough() && (0,external_kolmafia_.availableAmount)(_this3.token) == tokens) {
            throw "Expected to have a fat loot token from fantasyland, didn't!";
          }
        }
      };
    } }, { key: "hasRealmAccess", value:

    function hasRealmAccess() {
      return (
        (0,external_kolmafia_.getProperty)("frAlways") == "true" || (0,external_kolmafia_.getProperty)("_frToday") == "true");

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.path];
    } }, { key: "getFoughtToday", value:

    function getFoughtToday() {
      var setting = (0,external_kolmafia_.getProperty)(this.fought);

      if (setting == "") {
        return 0;
      }

      return (0,external_kolmafia_.toInt)(setting);
    } }, { key: "addFought", value:

    function addFought() {
      (0,external_kolmafia_.setProperty)(this.fought, (this.getFoughtToday() + 1).toString());
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes / FantasyBandit";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "hasFoughtEnough", value:

    function hasFoughtEnough() {
      return this.getFoughtToday() >= 5;
    } }, { key: "status", value:

    function status() {
      if (this.hasFoughtEnough()) {
        return QuestStatus.COMPLETED;
      }

      /*if (!GreySettings.greyFantasyBandits)
       {
        if (
          GreySettings.shouldAvoidTowerRequirements() ||
          GreySettings.isHardcoreMode()
        ) {
          return QuestStatus.NOT_READY;
        }
      }*/

      if (getQuestStatus("questL08Trapper") <= 1) {
        return QuestStatus.NOT_READY;
      }

      if (!this.hasRealmAccess() && this.lastBackup() == this.monster) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.myAdventures)() < 30) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "lastBackup", value:

    function lastBackup() {
      return (0,external_kolmafia_.getProperty)("lastCopyableMonster") == "" ?
      null :
      external_kolmafia_.Monster.get((0,external_kolmafia_.getProperty)("lastCopyableMonster"));
    } }, { key: "run", value:

    function run(path) {
      if (this.hasRealmAccess()) {
        return this.runFantasyRealm();
      }

      return this.doFaxingBandits(path);
    } }, { key: "doFaxingBandits", value:

    function doFaxingBandits(path) {var _this4 = this;
      if (
      !path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) &&
      this.lastBackup() != this.monster)
      {
        throw "Unable to do fantasy bandits";
      }

      if (
      path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) &&
      this.lastBackup() != this.monster)
      {
        var _resource = path.getResource(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);

        return {
          location: null,
          run: function run() {
            _resource.fax(_this4.monster);

            greyAdv("main.php");

            _this4.addFought();
            path.addUsed(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);
          }
        };
      }

      var outfit = new GreyOutfit();
      var loc = external_kolmafia_.Location.get("The Dire Warren");
      var resource = path.getResource(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);
      resource.prepare(outfit);

      // TODO Backup and ruin other zones delay
      return {
        outfit: outfit,
        location: null,
        mayFreeRun: false,
        run: function run() {
          greyAdv(
          loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          new MacroBuilder/* Macro */.LE().if_(external_kolmafia_.Monster.get("Fluffy Bunny"), resource.macro())));


          _this4.addFought();
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        this.getFoughtToday() > 0 &&
        !this.hasFoughtEnough() &&
        !this.hasRealmAccess());

    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestFantasyBandit;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestPackOfCardsKey.ts
function QuestPackOfCardsKey_typeof(obj) {"@babel/helpers - typeof";return QuestPackOfCardsKey_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestPackOfCardsKey_typeof(obj);}function QuestPackOfCardsKey_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestPackOfCardsKey_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestPackOfCardsKey_toPropertyKey(descriptor.key), descriptor);}}function QuestPackOfCardsKey_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestPackOfCardsKey_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestPackOfCardsKey_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestPackOfCardsKey_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestPackOfCardsKey_setPrototypeOf(subClass, superClass);}function QuestPackOfCardsKey_setPrototypeOf(o, p) {QuestPackOfCardsKey_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestPackOfCardsKey_setPrototypeOf(o, p);}function QuestPackOfCardsKey_createSuper(Derived) {var hasNativeReflectConstruct = QuestPackOfCardsKey_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestPackOfCardsKey_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestPackOfCardsKey_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestPackOfCardsKey_possibleConstructorReturn(this, result);};}function QuestPackOfCardsKey_possibleConstructorReturn(self, call) {if (call && (QuestPackOfCardsKey_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestPackOfCardsKey_assertThisInitialized(self);}function QuestPackOfCardsKey_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestPackOfCardsKey_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestPackOfCardsKey_getPrototypeOf(o) {QuestPackOfCardsKey_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestPackOfCardsKey_getPrototypeOf(o);}function QuestPackOfCardsKey_defineProperty(obj, key, value) {key = QuestPackOfCardsKey_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestPackOfCardsKey_toPropertyKey(arg) {var key = QuestPackOfCardsKey_toPrimitive(arg, "string");return QuestPackOfCardsKey_typeof(key) === "symbol" ? key : String(key);}function QuestPackOfCardsKey_toPrimitive(input, hint) {if (QuestPackOfCardsKey_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestPackOfCardsKey_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestPackOfCardsKey = /*#__PURE__*/function (_TaskInfo) {QuestPackOfCardsKey_inherits(QuestPackOfCardsKey, _TaskInfo);var _super = QuestPackOfCardsKey_createSuper(QuestPackOfCardsKey);function QuestPackOfCardsKey() {var _this;QuestPackOfCardsKey_classCallCheck(this, QuestPackOfCardsKey);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestPackOfCardsKey_defineProperty(QuestPackOfCardsKey_assertThisInitialized(_this), "pickCard", void 0);return _this;}QuestPackOfCardsKey_createClass(QuestPackOfCardsKey, [{ key: "getKeys", value:


    function getKeys() {
      return 1;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.pickCard = new PossiblePath(0).add(
      ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT);

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return [this.pickCard];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes / DeckOfCards";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_.getProperty)("_deckCardsSeen").includes("XVI - The Tower")) {
        return QuestStatus.COMPLETED;
      }

      if (
      path != null &&
      !path.canUse(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT))
      {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          path.
          getResource(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT).
          pickCard("XVI - The Tower");
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "needAdventures", value:

    function needAdventures() {
      return 0;
    } }]);return QuestPackOfCardsKey;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestPullAndZapKeys.ts
function QuestPullAndZapKeys_typeof(obj) {"@babel/helpers - typeof";return QuestPullAndZapKeys_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestPullAndZapKeys_typeof(obj);}function QuestPullAndZapKeys_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestPullAndZapKeys_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestPullAndZapKeys_toConsumableArray(arr) {return QuestPullAndZapKeys_arrayWithoutHoles(arr) || QuestPullAndZapKeys_iterableToArray(arr) || QuestPullAndZapKeys_unsupportedIterableToArray(arr) || QuestPullAndZapKeys_nonIterableSpread();}function QuestPullAndZapKeys_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestPullAndZapKeys_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestPullAndZapKeys_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestPullAndZapKeys_arrayLikeToArray(o, minLen);}function QuestPullAndZapKeys_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestPullAndZapKeys_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestPullAndZapKeys_arrayLikeToArray(arr);}function QuestPullAndZapKeys_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestPullAndZapKeys_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestPullAndZapKeys_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestPullAndZapKeys_toPropertyKey(descriptor.key), descriptor);}}function QuestPullAndZapKeys_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestPullAndZapKeys_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestPullAndZapKeys_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestPullAndZapKeys_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestPullAndZapKeys_setPrototypeOf(subClass, superClass);}function QuestPullAndZapKeys_setPrototypeOf(o, p) {QuestPullAndZapKeys_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestPullAndZapKeys_setPrototypeOf(o, p);}function QuestPullAndZapKeys_createSuper(Derived) {var hasNativeReflectConstruct = QuestPullAndZapKeys_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestPullAndZapKeys_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestPullAndZapKeys_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestPullAndZapKeys_possibleConstructorReturn(this, result);};}function QuestPullAndZapKeys_possibleConstructorReturn(self, call) {if (call && (QuestPullAndZapKeys_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestPullAndZapKeys_assertThisInitialized(self);}function QuestPullAndZapKeys_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestPullAndZapKeys_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestPullAndZapKeys_getPrototypeOf(o) {QuestPullAndZapKeys_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestPullAndZapKeys_getPrototypeOf(o);}function QuestPullAndZapKeys_defineProperty(obj, key, value) {key = QuestPullAndZapKeys_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestPullAndZapKeys_toPropertyKey(arg) {var key = QuestPullAndZapKeys_toPrimitive(arg, "string");return QuestPullAndZapKeys_typeof(key) === "symbol" ? key : String(key);}function QuestPullAndZapKeys_toPrimitive(input, hint) {if (QuestPullAndZapKeys_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestPullAndZapKeys_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestPullAndZapKeys = /*#__PURE__*/function (_QuestKeyStuffAbstrac) {QuestPullAndZapKeys_inherits(QuestPullAndZapKeys, _QuestKeyStuffAbstrac);var _super = QuestPullAndZapKeys_createSuper(QuestPullAndZapKeys);






  function QuestPullAndZapKeys(keys) {var _this;QuestPullAndZapKeys_classCallCheck(this, QuestPullAndZapKeys);
    _this = _super.call(this);QuestPullAndZapKeys_defineProperty(QuestPullAndZapKeys_assertThisInitialized(_this), "paths", void 0);QuestPullAndZapKeys_defineProperty(QuestPullAndZapKeys_assertThisInitialized(_this), "keysToAcquire", void 0);

    if (keys > 2) {
      throw "We can't do more than 2 zaps!";
    }

    _this.keysToAcquire = keys;return _this;
  }QuestPullAndZapKeys_createClass(QuestPullAndZapKeys, [{ key: "getKeys", value:

    function getKeys() {
      return this.keysToAcquire;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes / Buy and Zap Keys";
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this2 = this;
      if (
      this.keysToAcquire == 0 ||
      !assumeUnstarted && GreySettings_GreySettings.isHardcoreMode())
      {
        this.paths = null;
        return;
      }

      var pullableKeys = GreyPulls.getPullableKeys();

      if (!assumeUnstarted && (0,external_kolmafia_.pullsRemaining)() >= 0) {
        pullableKeys = pullableKeys.filter(
        function (i) {return !hasPulled(i) || (0,external_kolmafia_.availableAmount)(i) > 0;});

      } else {
        // Since we have unlimited pulls..
        for (var i = 1; i < Math.min(2, this.keysToAcquire); i++) {var _pullableKeys;
          (_pullableKeys = pullableKeys).push.apply(_pullableKeys, QuestPullAndZapKeys_toConsumableArray(GreyPulls.getPullableKeys()));
        }
      }

      if (pullableKeys.length < this.keysToAcquire) {
        this.paths = null;
        return;
      }

      this.paths = [];var _iterator = QuestPullAndZapKeys_createForOfIteratorHelper(

        getAllCombinations(pullableKeys)),_step;try {var _loop = function _loop() {var combination = _step.value;
          if (combination.length != _this2.keysToAcquire) {return "continue";

          }

          var path = new PossiblePath(0);

          combination.forEach(function (i) {
            path.addConsumablePull(i);

            path.add(ResourceTypes/* ResourceCategory.ZAP */.s6.ZAP);
          });

          _this2.paths.push(path);
        };for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;}} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status(path) {
      if (this.keysToAcquire == 0) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL13Final");

      if (status < 5 || path == null) {
        return QuestStatus.NOT_READY;
      }

      if (status > 5) {
        return QuestStatus.COMPLETED;
      }

      if (!path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this3 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          var wand = (0,external_kolmafia_.getZapWand)();

          if (wand == external_kolmafia_.Item.none) {
            throw "Expected a wand! What happened!";
          }

          var toPull = path.pulls.find(function (i) {return !hasPulled(i);});

          if (toPull == null) {
            throw "Failed to find a zappable key to pull?";
          }

          GreyPulls.tryRetrieve(toPull, 80000);

          if ((0,external_kolmafia_.itemAmount)(toPull) == 0) {
            throw "Expected to have a zappable key grabbed";
          }

          var toZap = _this3.getOwnedZappables();
          var zapped = (0,external_kolmafia_.zap)(toZap[0]);

          if (!_this3.keys.includes(zapped)) {
            throw (
              "Ugh, we failed to zap " +
              toZap[0] +
              " properly. We got " +
              zapped +
              " instead.");

          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestPullAndZapKeys;}(QuestKeyStuffAbstract);
;// CONCATENATED MODULE: ./src/quests/council/tower/keys/heroes/QuestHeroKeys.ts
function QuestHeroKeys_typeof(obj) {"@babel/helpers - typeof";return QuestHeroKeys_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestHeroKeys_typeof(obj);}function QuestHeroKeys_slicedToArray(arr, i) {return QuestHeroKeys_arrayWithHoles(arr) || QuestHeroKeys_iterableToArrayLimit(arr, i) || QuestHeroKeys_unsupportedIterableToArray(arr, i) || QuestHeroKeys_nonIterableRest();}function QuestHeroKeys_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestHeroKeys_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestHeroKeys_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestHeroKeys_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestHeroKeys_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestHeroKeys_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestHeroKeys_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestHeroKeys_arrayLikeToArray(o, minLen);}function QuestHeroKeys_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestHeroKeys_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestHeroKeys_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestHeroKeys_toPropertyKey(descriptor.key), descriptor);}}function QuestHeroKeys_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestHeroKeys_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestHeroKeys_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestHeroKeys_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestHeroKeys_setPrototypeOf(subClass, superClass);}function QuestHeroKeys_setPrototypeOf(o, p) {QuestHeroKeys_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestHeroKeys_setPrototypeOf(o, p);}function QuestHeroKeys_createSuper(Derived) {var hasNativeReflectConstruct = QuestHeroKeys_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestHeroKeys_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestHeroKeys_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestHeroKeys_possibleConstructorReturn(this, result);};}function QuestHeroKeys_possibleConstructorReturn(self, call) {if (call && (QuestHeroKeys_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestHeroKeys_assertThisInitialized(self);}function QuestHeroKeys_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestHeroKeys_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestHeroKeys_getPrototypeOf(o) {QuestHeroKeys_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestHeroKeys_getPrototypeOf(o);}function QuestHeroKeys_defineProperty(obj, key, value) {key = QuestHeroKeys_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestHeroKeys_toPropertyKey(arg) {var key = QuestHeroKeys_toPrimitive(arg, "string");return QuestHeroKeys_typeof(key) === "symbol" ? key : String(key);}function QuestHeroKeys_toPrimitive(input, hint) {if (QuestHeroKeys_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestHeroKeys_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}












var QuestHeroKeys = /*#__PURE__*/function (_TaskInfo) {QuestHeroKeys_inherits(QuestHeroKeys, _TaskInfo);var _super = QuestHeroKeys_createSuper(QuestHeroKeys);














  function QuestHeroKeys() {var _this;QuestHeroKeys_classCallCheck(this, QuestHeroKeys);
    _this = _super.call(this);QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this), "keys", ["Boris's key", "Sneaky Pete's key", "Jarlsberg's key"].map(function (s) {return external_kolmafia_.Item.get(s);}));QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this), "token", external_kolmafia_.Item.get("Fat loot token"));QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this), "quests", []);QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this), "paths", void 0);QuestHeroKeys_defineProperty(QuestHeroKeys_assertThisInitialized(_this), "conflicts", [["Council / Tower / Keys / Heroes / DailyDungeon", "Council / Tower / Keys / Heroes / DailyDungeon + Malware"], ["Council / Tower / Keys / Heroes / Buy and Zap Keys"]]);

    _this.quests.push(new QuestDailyDungeon(true));
    _this.quests.push(new QuestDailyDungeon(false));
    _this.quests.push(new QuestFantasyBandit());
    _this.quests.push(new QuestPackOfCardsKey());

    for (var i = 1; i <= 2; i++) {
      _this.quests.push(new QuestPullAndZapKeys(i));
    }return _this;
  }QuestHeroKeys_createClass(QuestHeroKeys, [{ key: "getTokensAvailable", value:

    function getTokensAvailable() {
      return (
        (0,external_kolmafia_.itemAmount)(this.token) + (
        (0,external_kolmafia_.pullsRemaining)() == -1 ? (0,external_kolmafia_.storageAmount)(this.token) : 0));

    } }, { key: "getMissingKeys", value:

    function getMissingKeys() {
      return Math.max(
      0,
      3 - (
      this.getTokensAvailable() +
      this.keys.filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;}).length));

    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this2 = this;
      // If we're avoiding the tower requirements, and haven't reached tower yet.
      // Don't use our resources on key stuff
      if (
      !assumeUnstarted && (
      GreySettings_GreySettings.shouldAvoidTowerRequirements() &&
      !GreySettings_GreySettings.greyReachedTower ||
      getQuestStatus("questL13Final") > 5))
      {
        this.paths = null;
        return;
      }

      var allPaths = [];var _iterator = QuestHeroKeys_createForOfIteratorHelper(

        this.quests),_step;try {var _loop = function _loop() {var quest = _step.value;
          if (!(quest instanceof TaskInfo)) {
            (0,external_kolmafia_.print)("Unknown key path " + quest.getId(), "red");return "continue";

          }

          quest.createPaths(assumeUnstarted);

          var paths = quest.getPossiblePaths();

          // This shouldn't be done at this point
          if (paths == null) {
            //   print("Can't do " + quest.getId());
            return "continue";
          }

          if (paths.length == 0) {
            (0,external_kolmafia_.print)("Empty paths found for key path, " + quest.getId(), "red");return "continue";

          }

          paths = paths.filter(
          function (p) {return (
              assumeUnstarted ||
              quest.status(p) != QuestStatus.COMPLETED);});


          if (paths.length == 0) {return "continue";

          }

          quest.getPossiblePaths().forEach(function (path) {
            allPaths.push([quest, path]);
          });
        };for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;}} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if ((0,ResourceTypes/* getResourcesLeft */.r)("Pull", assumeUnstarted) <= 0) {
        allPaths = allPaths.filter(
        function (_ref) {var _ref2 = QuestHeroKeys_slicedToArray(_ref, 2),p = _ref2[1];return p.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL) == 0;});

      }

      var keysNeeded = assumeUnstarted ? 3 : this.getMissingKeys();
      var shouldDoDaily =
      GreySettings_GreySettings.greyDailyDungeon && (
      assumeUnstarted || (0,external_kolmafia_.getProperty)("dailyDungeonDone") != "true");

      this.paths = [];

      if (keysNeeded <= 0 && !shouldDoDaily) {
        this.paths.push(new PossibleMultiPath(0));
        return;
      }var _iterator2 = QuestHeroKeys_createForOfIteratorHelper(

        getAllCombinations(allPaths)),_step2;try {var _loop2 = function _loop2() {var combination = _step2.value;
          // Detect conflicts
          var _iterator4 = QuestHeroKeys_createForOfIteratorHelper(_this2.conflicts),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var conflicts = _step4.value;
              var hits = conflicts.filter(function (c) {return (
                  combination.find(function (_ref9) {var _ref10 = QuestHeroKeys_slicedToArray(_ref9, 1),c1 = _ref10[0];return c1.getId() == c;}));}).
              length;

              if (hits > 1) {return "continue|loop";

              }
            }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

          var hittingMalware =
          combination.find(
          function (_ref3) {var _ref4 = QuestHeroKeys_slicedToArray(_ref3, 1),q = _ref4[0];return (
              q.getId() ==
              "Council / Tower / Keys / Heroes / DailyDungeon + Malware");}) !=
          null;

          var keysGiven = combination.
          map(function (_ref5) {var _ref6 = QuestHeroKeys_slicedToArray(_ref5, 1),c = _ref6[0];return c.getKeys();}).
          reduce(function (r1, r2) {return r1 + r2;});

          // If we won't get enough keys
          if (keysGiven < keysNeeded) {return "continue";

          }

          var maxKeys = keysNeeded;

          if (hittingMalware) {
            maxKeys++;
          }

          // If we're getting too many keys
          if (keysGiven > maxKeys) {return "continue";

          }

          // If we need to do daily dungeon as per settings, and this combination doesn't let us do that..
          if (
          shouldDoDaily &&
          combination.find(function (_ref7) {var _ref8 = QuestHeroKeys_slicedToArray(_ref7, 1),q = _ref8[0];return q instanceof QuestDailyDungeon;}) == null)
          {return "continue";

          }

          var path = new PossibleMultiPath(0);
          path.printUsing = true;

          combination.forEach(function (c) {
            path.addPath(c[0], c[1]);
          });

          _this2.paths.push(path);
        };loop: for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _ret2 = _loop2();if (_ret2 === "continue|loop") continue loop;if (_ret2 === "continue") continue;}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      if (this.paths.length == 0) {
        (0,external_kolmafia_.print)(
        "Failed to find a way to do the hero keys! Looking for " + keysNeeded,
        "red");


        (0,external_kolmafia_.print)("Hero Key Sources..", "red");var _iterator3 = QuestHeroKeys_createForOfIteratorHelper(

          this.quests),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var quest = _step3.value;
            (0,external_kolmafia_.print)(
            quest.getId() +
            " - Gives " +
            quest.getKeys() +
            " keys. Doable? " + (
            quest.status() != QuestStatus.COMPLETED) +
            ". Possible path count: " +
            quest.getPossiblePaths().length,
            "red");

          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status(path) {
      throw new Error("Method not implemented.");
    } }, { key: "run", value:

    function run(path) {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Keys / Heroes";
    } }]);return QuestHeroKeys;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerKeys.ts
function QuestTowerKeys_typeof(obj) {"@babel/helpers - typeof";return QuestTowerKeys_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerKeys_typeof(obj);}function QuestTowerKeys_slicedToArray(arr, i) {return QuestTowerKeys_arrayWithHoles(arr) || QuestTowerKeys_iterableToArrayLimit(arr, i) || QuestTowerKeys_unsupportedIterableToArray(arr, i) || QuestTowerKeys_nonIterableRest();}function QuestTowerKeys_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestTowerKeys_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestTowerKeys_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestTowerKeys_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerKeys_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestTowerKeys_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerKeys_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerKeys_arrayLikeToArray(o, minLen);}function QuestTowerKeys_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestTowerKeys_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerKeys_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerKeys_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerKeys_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerKeys_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerKeys_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerKeys_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestTowerKeys_setPrototypeOf(subClass, superClass);}function QuestTowerKeys_setPrototypeOf(o, p) {QuestTowerKeys_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestTowerKeys_setPrototypeOf(o, p);}function QuestTowerKeys_createSuper(Derived) {var hasNativeReflectConstruct = QuestTowerKeys_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestTowerKeys_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestTowerKeys_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestTowerKeys_possibleConstructorReturn(this, result);};}function QuestTowerKeys_possibleConstructorReturn(self, call) {if (call && (QuestTowerKeys_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestTowerKeys_assertThisInitialized(self);}function QuestTowerKeys_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestTowerKeys_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestTowerKeys_getPrototypeOf(o) {QuestTowerKeys_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestTowerKeys_getPrototypeOf(o);}function QuestTowerKeys_defineProperty(obj, key, value) {key = QuestTowerKeys_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTowerKeys_toPropertyKey(arg) {var key = QuestTowerKeys_toPrimitive(arg, "string");return QuestTowerKeys_typeof(key) === "symbol" ? key : String(key);}function QuestTowerKeys_toPrimitive(input, hint) {if (QuestTowerKeys_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerKeys_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestTowerKeys = /*#__PURE__*/function (_QuestKeyStuffAbstrac) {QuestTowerKeys_inherits(QuestTowerKeys, _QuestKeyStuffAbstrac);var _super = QuestTowerKeys_createSuper(QuestTowerKeys);function QuestTowerKeys() {var _this;QuestTowerKeys_classCallCheck(this, QuestTowerKeys);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestTowerKeys_defineProperty(QuestTowerKeys_assertThisInitialized(_this), "keyItems",
    [
    ["ns_lock1", external_kolmafia_.Item.get("Boris's Key")],
    ["ns_lock2", external_kolmafia_.Item.get("Jarlsberg's Key")],
    ["ns_lock3", external_kolmafia_.Item.get("Sneaky Pete's Key")],
    ["ns_lock4", external_kolmafia_.Item.get("Richard's Star Key")],
    ["ns_lock5", external_kolmafia_.Item.get("Digital Key")],
    ["ns_lock6", external_kolmafia_.Item.get("Skeleton Key")]]);QuestTowerKeys_defineProperty(QuestTowerKeys_assertThisInitialized(_this), "children",

    [
    new QuestSkeletonKey(),
    new QuestStarKey(),
    new QuestDigitalKey(),
    new QuestHeroKeys()]);QuestTowerKeys_defineProperty(QuestTowerKeys_assertThisInitialized(_this), "refreshedStorage",


    false);return _this;}QuestTowerKeys_createClass(QuestTowerKeys, [{ key: "getTokensAvailable", value:



    function getTokensAvailable() {
      if ((0,external_kolmafia_.pullsRemaining)() == -1 && !this.refreshedStorage) {
        (0,external_kolmafia_.cliExecute)("refresh storage");
        this.refreshedStorage = true;
      }

      return (
        (0,external_kolmafia_.itemAmount)(this.token) + (
        (0,external_kolmafia_.pullsRemaining)() == -1 ? (0,external_kolmafia_.storageAmount)(this.token) : 0));

    } }, { key: "isReadyToRedeemTokens", value:

    function isReadyToRedeemTokens() {
      var keysAvailable = this.keys.filter(
      function (k) {return (0,external_kolmafia_.availableAmount)(k) > 0;}).
      length;

      if (keysAvailable >= 3) {
        return false;
      }

      return keysAvailable + this.getTokensAvailable() >= 3;
    } }, { key: "redeemKeys", value:

    function redeemKeys() {
      var keys = this.keys.filter(function (k) {return (0,external_kolmafia_.availableAmount)(k) == 0;});

      return {
        location: null,
        run: function run() {var _iterator = QuestTowerKeys_createForOfIteratorHelper(
            keys),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var k = _step.value;
              (0,external_kolmafia_.retrieveItem)(k);
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / KeyDoor";
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "getNotDone", value:

    function getNotDone() {
      var used = this.getKeysUsed();

      return this.keyItems.filter(function (k) {return !used.includes(k[1]);});
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 5) {
        return QuestStatus.NOT_READY;
      }

      if (status > 5) {
        return QuestStatus.COMPLETED;
      }

      if (this.isReadyToRedeemTokens()) {
        return QuestStatus.READY;
      }

      if (this.getNotDone().find(function (_ref) {var _ref2 = QuestTowerKeys_slicedToArray(_ref, 2),item = _ref2[1];return (0,external_kolmafia_.itemAmount)(item) == 0;}) != null) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this2 = this;
      if (this.isReadyToRedeemTokens()) {
        return this.redeemKeys();
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          var notDone = _this2.getNotDone();var _iterator2 = QuestTowerKeys_createForOfIteratorHelper(

            notDone),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var s = _step2.value;
              if ((0,external_kolmafia_.availableAmount)(s[1]) == 0) {
                continue;
              }

              (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower_door&action=" + s[0]);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower_door&action=ns_doorknob");
        }
      };
    } }]);return QuestTowerKeys;}(QuestKeyStuffAbstract);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerContestants.ts
function QuestTowerContestants_typeof(obj) {"@babel/helpers - typeof";return QuestTowerContestants_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerContestants_typeof(obj);}function QuestTowerContestants_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerContestants_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestTowerContestants_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerContestants_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerContestants_arrayLikeToArray(o, minLen);}function QuestTowerContestants_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestTowerContestants_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerContestants_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerContestants_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerContestants_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerContestants_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerContestants_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerContestants_toPropertyKey(arg) {var key = QuestTowerContestants_toPrimitive(arg, "string");return QuestTowerContestants_typeof(key) === "symbol" ? key : String(key);}function QuestTowerContestants_toPrimitive(input, hint) {if (QuestTowerContestants_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerContestants_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestTowerContestants = /*#__PURE__*/function () {function QuestTowerContestants() {QuestTowerContestants_classCallCheck(this, QuestTowerContestants);}QuestTowerContestants_createClass(QuestTowerContestants, [{ key: "getId", value:
    function getId() {
      return "Council / Tower / Contests";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var status = getQuestStatus("questL13Final");

      if (status == 0) {
        return this.learnAndSetMyPlace();
      }

      if (status == 1) {
        return this.fightContests();
      }

      return this.claimPrize();
    } }, { key: "claimPrize", value:

    function claimPrize() {
      return {
        location: null,
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            props.setChoice(1020, 1);
            props.setChoice(1021, 1);
            props.setChoice(1022, 1);
            props.setChoice(1003, 4);

            (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
            (0,external_kolmafia_.visitUrl)("choice.php?pwd=&whichchoice=1003&option=4", true);
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_02_coronation");
            (0,external_kolmafia_.visitUrl)("choice.php?pwd=&whichchoice=1020&option=1", true);
            (0,external_kolmafia_.visitUrl)("choice.php?pwd=&whichchoice=1021&option=1", true);
            (0,external_kolmafia_.visitUrl)("choice.php?pwd=&whichchoice=1022&option=1", true);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "fightContests", value:

    function fightContests() {
      // place.php?whichplace=nstower&action=ns_01_crowd1
      var match = (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower").match(
      /(place.php\?whichplace=nstower&action=ns_01_crowd\d)/);


      return {
        location: null,
        run: function run() {
          if (match == null) {
            throw "Unable to parse the contestants which we shall be fighting.";
          }

          greyAdv(match[1]);
        }
      };
    } }, { key: "learnAndSetMyPlace", value:

    function learnAndSetMyPlace() {var _this = this;
      return {
        location: null,
        run: function run() {var _iterator = QuestTowerContestants_createForOfIteratorHelper(
            _this.getNeededQuests()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var quest = _step.value;
              quest.call(_this);
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

          (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower");
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      if ((0,external_kolmafia_.getProperty)("questL13Final") != "step1") {
        return [];
      }

      var locs = [];

      var page = (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower");

      if (page.includes("ns_01_crowd1")) {
        locs.push(external_kolmafia_.Location.get("Fastest Adventurer Contest"));
      }

      if (page.includes("ns_01_crowd2")) {
        switch ((0,external_kolmafia_.getProperty)("nsChallenge1")) {
          case "Mysticality":
            locs.push(external_kolmafia_.Location.get("Smartest Adventurer Contest"));
            break;
          case "Moxie":
            locs.push(external_kolmafia_.Location.get("Smoothest Adventurer Contest"));
            break;
          case "Muscle":
            locs.push(external_kolmafia_.Location.get("Strongest Adventurer Contest"));
            break;}

      }

      if (page.includes("ns_01_crowd3")) {
        switch ((0,external_kolmafia_.getProperty)("nsChallenge2")) {
          case "cold":
            locs.push(external_kolmafia_.Location.get("Coldest Adventurer Contest"));
            break;
          case "hot":
            locs.push(external_kolmafia_.Location.get("Hottest Adventurer Contest"));
            break;
          case "sleaze":
            locs.push(external_kolmafia_.Location.get("Sleaziest Adventurer Contest"));
            break;
          case "spooky":
            locs.push(external_kolmafia_.Location.get("Spookiest Adventurer Contest"));
            break;
          case "stench":
            locs.push(external_kolmafia_.Location.get("Stinkiest Adventurer Contest"));
            break;}

      }

      return locs;
    } }, { key: "turnInQuest", value:

    function turnInQuest(questNo) {
      (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      (0,external_kolmafia_.visitUrl)("choice.php?pwd=&whichchoice=1003&option=" + questNo, true);
      (0,external_kolmafia_.visitUrl)("main.php");
    } }, { key: "getNeededQuests", value:

    function getNeededQuests() {
      if (
      (0,external_kolmafia_.getProperty)("nsChallenge1") == "none" ||
      (0,external_kolmafia_.getProperty)("nsChallenge2") == "none")
      {
        (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_01_contestbooth");
      }

      var quests = [];

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("nsContestants1")) == -1) {
        quests.push(this.doQuest1);
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("nsContestants2")) == -1) {
        quests.push(this.doQuest2);
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("nsContestants3")) == -1) {
        quests.push(this.doQuest3);
      }

      return quests;
    } }, { key: "doQuest1", value:

    function doQuest1() {
      (0,external_kolmafia_.maximize)(
      "init +switch left-hand man +switch Oily woim +switch Xiblaxian Holo-Companion -tie",
      false);

      this.turnInQuest(1);
    } }, { key: "doQuest2", value:

    function doQuest2() {
      (0,external_kolmafia_.maximize)(
      (0,external_kolmafia_.getProperty)("nsChallenge1") + " +switch left-hand man -tie",
      false);

      this.turnInQuest(2);
    } }, { key: "doQuest3", value:

    function doQuest3() {
      var element = (0,external_kolmafia_.getProperty)("nsChallenge2");

      (0,external_kolmafia_.maximize)(
      element + " dmg +" + element + " spell dmg +switch left-hand man -tie",
      false);

      this.turnInQuest(3);
    } }]);return QuestTowerContestants;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerMaze.ts
function QuestTowerMaze_typeof(obj) {"@babel/helpers - typeof";return QuestTowerMaze_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerMaze_typeof(obj);}function QuestTowerMaze_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerMaze_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerMaze_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerMaze_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerMaze_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerMaze_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerMaze_toPropertyKey(arg) {var key = QuestTowerMaze_toPrimitive(arg, "string");return QuestTowerMaze_typeof(key) === "symbol" ? key : String(key);}function QuestTowerMaze_toPrimitive(input, hint) {if (QuestTowerMaze_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerMaze_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestTowerMaze = /*#__PURE__*/function () {function QuestTowerMaze() {QuestTowerMaze_classCallCheck(this, QuestTowerMaze);}QuestTowerMaze_createClass(QuestTowerMaze, [{ key: "getId", value:
    function getId() {
      return "Council / Tower / Maze";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      if (getQuestStatus("questL13Final") < 4) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questL13Final") > 4) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      var outfit = new GreyOutfit("+hot res +spooky res +stench res -tie");

      return {
        location: null,
        outfit: outfit,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_03_hedgemaze");
          (0,external_kolmafia_.runChoice)(2);
          (0,external_kolmafia_.runChoice)(2);
          (0,external_kolmafia_.runChoice)(2);
          (0,external_kolmafia_.runChoice)(1);
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower_door");
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTowerMaze;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerWallMeat.ts
function QuestTowerWallMeat_typeof(obj) {"@babel/helpers - typeof";return QuestTowerWallMeat_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerWallMeat_typeof(obj);}function QuestTowerWallMeat_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerWallMeat_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerWallMeat_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerWallMeat_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerWallMeat_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerWallMeat_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerWallMeat_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestTowerWallMeat_setPrototypeOf(subClass, superClass);}function QuestTowerWallMeat_setPrototypeOf(o, p) {QuestTowerWallMeat_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestTowerWallMeat_setPrototypeOf(o, p);}function QuestTowerWallMeat_createSuper(Derived) {var hasNativeReflectConstruct = QuestTowerWallMeat_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestTowerWallMeat_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestTowerWallMeat_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestTowerWallMeat_possibleConstructorReturn(this, result);};}function QuestTowerWallMeat_possibleConstructorReturn(self, call) {if (call && (QuestTowerWallMeat_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestTowerWallMeat_assertThisInitialized(self);}function QuestTowerWallMeat_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestTowerWallMeat_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestTowerWallMeat_getPrototypeOf(o) {QuestTowerWallMeat_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestTowerWallMeat_getPrototypeOf(o);}function QuestTowerWallMeat_defineProperty(obj, key, value) {key = QuestTowerWallMeat_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTowerWallMeat_toPropertyKey(arg) {var key = QuestTowerWallMeat_toPrimitive(arg, "string");return QuestTowerWallMeat_typeof(key) === "symbol" ? key : String(key);}function QuestTowerWallMeat_toPrimitive(input, hint) {if (QuestTowerWallMeat_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerWallMeat_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestTowerWallMeat = /*#__PURE__*/function (_TaskInfo) {QuestTowerWallMeat_inherits(QuestTowerWallMeat, _TaskInfo);var _super = QuestTowerWallMeat_createSuper(QuestTowerWallMeat);function QuestTowerWallMeat() {var _this;QuestTowerWallMeat_classCallCheck(this, QuestTowerWallMeat);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestTowerWallMeat_defineProperty(QuestTowerWallMeat_assertThisInitialized(_this), "paths", void 0);return _this;}QuestTowerWallMeat_createClass(QuestTowerWallMeat, [{ key: "getId", value:


    function getId() {
      return "Council / Tower / WallOfMeat";
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [
      new PossiblePath(0).addMeat(2000),
      new PossiblePath(0).add(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 7) {
        return QuestStatus.NOT_READY;
      }

      if (status > 7) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "hasDrunkMeat", value:

    function hasDrunkMeat() {
      return (0,external_kolmafia_.getProperty)("_roboDrinks").includes("drive-by shooting");
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      return {
        outfit: GreyOutfit.IGNORE_OUTFIT,
        location: null,
        run: function run() {
          var robo = external_kolmafia_.Familiar.get("Grey Goose");

          if ((0,external_kolmafia_.haveFamiliar)(robo) && _this2.hasDrunkMeat()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Robortender"));
          } else if ((0,external_kolmafia_.haveFamiliar)(external_kolmafia_.Familiar.get("Hobo Monkey"))) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Hobo Monkey"));
          }

          (0,external_kolmafia_.cliExecute)("maximize +5 meat +0.03 moxie +100 hp 200 min 500 max");

          if ((0,external_kolmafia_.myMaxhp)() < 200) {
            throw "Max HP too low! Run +meat and kill the wall of meat yourself?";
          }

          if ((0,external_kolmafia_.myHp)() < (0,external_kolmafia_.myMaxhp)()) {
            if (path.canUse(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB)) {
              (0,external_kolmafia_.cliExecute)("hottub");
            } else {
              restoreHPTo(Math.min((0,external_kolmafia_.myMaxhp)(), 600));
            }
          }

          if ((0,external_kolmafia_.myHp)() < 200) {
            throw "HP too low";
          }

          greyAdv(
          "place.php?whichplace=nstower&action=ns_06_monster2",
          null,
          new AdventureSettings().setFinishingBlowMacro(
          MacroBuilder/* Macro.trySkillRepeat */.LE.trySkillRepeat(external_kolmafia_.Skill.get("Infinite Loop"))));


        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTowerWallMeat;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerWallBones.ts
function QuestTowerWallBones_typeof(obj) {"@babel/helpers - typeof";return QuestTowerWallBones_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerWallBones_typeof(obj);}function QuestTowerWallBones_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerWallBones_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerWallBones_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerWallBones_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerWallBones_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerWallBones_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerWallBones_defineProperty(obj, key, value) {key = QuestTowerWallBones_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTowerWallBones_toPropertyKey(arg) {var key = QuestTowerWallBones_toPrimitive(arg, "string");return QuestTowerWallBones_typeof(key) === "symbol" ? key : String(key);}function QuestTowerWallBones_toPrimitive(input, hint) {if (QuestTowerWallBones_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerWallBones_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestTowerWallBones = /*#__PURE__*/function () {function QuestTowerWallBones() {QuestTowerWallBones_classCallCheck(this, QuestTowerWallBones);QuestTowerWallBones_defineProperty(this, "knife",
    external_kolmafia_.Item.get("Electric Boning Knife"));QuestTowerWallBones_defineProperty(this, "killer",
    new QuestTowerKillBones());QuestTowerWallBones_defineProperty(this, "toAbsorb", void 0);QuestTowerWallBones_defineProperty(this, "groundFloor",

    external_kolmafia_.Location.get(
    "The Castle in the Clouds in the Sky (Ground Floor)"));}QuestTowerWallBones_createClass(QuestTowerWallBones, [{ key: "getId", value:


    function getId() {
      return "Council / Tower / WallOfBones";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 8) {
        return QuestStatus.NOT_READY;
      }

      if (status > 8) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      if ((0,external_kolmafia_.availableAmount)(this.knife) == 0) {
        if (this.killer.isPossible()) {
          return this.killer.run();
        } else {
          return this.runKnife();
        }
      }

      return {
        location: null,
        run: function run() {
          var macro = new MacroBuilder/* Macro */.LE().tryItem(_this.knife);

          greyAdv(
          "place.php?whichplace=nstower&action=ns_07_monster3",
          null,
          new AdventureSettings().setStartOfFightMacro(macro));

        }
      };
    } }, { key: "runKnife", value:

    function runKnife() {var _this2 = this;
      var outfit = new GreyOutfit().setNoCombat().setNoCombat();

      return {
        location: this.groundFloor,
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();
          DelayBurners.tryReplaceCombats();

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          try {
            props.setChoice(672, 1);
            props.setChoice(673, 1);
            props.setChoice(674, 1);
            props.setChoice(1026, 2);

            greyAdv(_this2.groundFloor, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTowerWallBones;}();


var QuestTowerKillBones = /*#__PURE__*/function () {function QuestTowerKillBones() {QuestTowerWallBones_classCallCheck(this, QuestTowerKillBones);QuestTowerWallBones_defineProperty(this, "damageMultiplier",
    50.5);QuestTowerWallBones_defineProperty(this, "health",
    20000);QuestTowerWallBones_defineProperty(this, "drunkBell",
    external_kolmafia_.Item.get("Drunkula's bell"));QuestTowerWallBones_defineProperty(this, "rocket",
    external_kolmafia_.Item.get("Great Wolf's rocket launcher"));QuestTowerWallBones_defineProperty(this, "property",
    "_triedBossKillingBones");QuestTowerWallBones_defineProperty(this, "possible", void 0);}QuestTowerWallBones_createClass(QuestTowerKillBones, [{ key: "isRocketPossible", value:


    function isRocketPossible() {
      if ((0,external_kolmafia_.availableAmount)(this.rocket) == 0 && (0,external_kolmafia_.storageAmount)(this.rocket) == 0) {
        return false;
      }

      if (
      (0,external_kolmafia_.myPrimestat)() != external_kolmafia_.Stat.get("Moxie") &&
      !(0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Phairly Balanced")) &&
      (0,external_kolmafia_.mallPrice)(external_kolmafia_.Item.get("PH Balancer")) < 1000)
      {
        (0,external_kolmafia_.use)(external_kolmafia_.Item.get("PH Balancer"));
      }

      (0,external_kolmafia_.maximize)("moxie +equip " + this.rocket.name, true);

      var moxie = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Buffed Moxie");
      var damage = this.damageMultiplier * (moxie * 0.4);

      (0,external_kolmafia_.print)(
      "Using rocket, we predict " +
      Math.round(damage) +
      " / " +
      this.health +
      " damage (Worst scenario)",
      "blue");


      return damage > this.health;
    } }, { key: "isBellPossible", value:

    function isBellPossible() {
      if (
      (0,external_kolmafia_.availableAmount)(this.drunkBell) == 0 &&
      (0,external_kolmafia_.storageAmount)(this.drunkBell) == 0)
      {
        return false;
      }

      if (
      (0,external_kolmafia_.myPrimestat)() != external_kolmafia_.Stat.get("Mysticality") &&
      !(0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Phairly Balanced")) &&
      (0,external_kolmafia_.mallPrice)(external_kolmafia_.Item.get("PH Balancer")) < 1000)
      {
        (0,external_kolmafia_.use)(external_kolmafia_.Item.get("PH Balancer"));
      }

      (0,external_kolmafia_.maximize)("mys", true);

      var mys = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Buffed Mysticality");
      var damage = this.damageMultiplier * (mys * 0.15);

      (0,external_kolmafia_.print)(
      "Using " +
      this.drunkBell.name +
      ", we predict " +
      Math.round(damage) +
      " / " +
      this.health +
      " damage (Worst scenario)",
      "blue");


      return damage > this.health;
    } }, { key: "isPossible", value:

    function isPossible() {
      if ((0,external_kolmafia_.pullsRemaining)() != -1 || (0,external_kolmafia_.getProperty)(this.property) == "true") {
        return false;
      }

      if (this.possible != null) {
        return this.possible;
      }

      return this.possible = this.isRocketPossible() || this.isBellPossible();
    } }, { key: "run", value:

    function run() {var _this3 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          var macro;
          (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.none);

          if (_this3.isRocketPossible()) {
            (0,external_kolmafia_.maximize)("moxie +equip " + _this3.rocket.name, false);

            if ((0,external_kolmafia_.equippedAmount)(_this3.rocket) == 0) {
              throw "We don't have the " + _this3.rocket.name + " on hand?";
            }

            macro = MacroBuilder/* Macro.skill */.LE.skill("Fire Rocket");
          } else {
            if ((0,external_kolmafia_.itemAmount)(_this3.drunkBell) == 0) {
              (0,external_kolmafia_.retrieveItem)(_this3.drunkBell);
            }

            if ((0,external_kolmafia_.itemAmount)(_this3.drunkBell) == 0) {
              throw "We don't have the " + _this3.drunkBell.name + " on hand?";
            }

            (0,external_kolmafia_.maximize)("mys", false);

            macro = MacroBuilder/* Macro.item */.LE.item(_this3.drunkBell);
          }

          (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower&action=ns_07_monster3");

          if ((0,external_kolmafia_.currentRound)() == 0) {
            throw "Failed to start the bones attack";
          }

          (0,external_kolmafia_.setProperty)(_this3.property, "true");

          macro.submit();

          if ((0,external_kolmafia_.currentRound)() != 0) {
            throw "Failed to kill the wall of bones in a single hit.";
          }
        }
      };
    } }]);return QuestTowerKillBones;}();
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerShadow.ts
function QuestTowerShadow_typeof(obj) {"@babel/helpers - typeof";return QuestTowerShadow_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerShadow_typeof(obj);}function QuestTowerShadow_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerShadow_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestTowerShadow_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerShadow_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerShadow_arrayLikeToArray(o, minLen);}function QuestTowerShadow_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestTowerShadow_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerShadow_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerShadow_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerShadow_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerShadow_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerShadow_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerShadow_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestTowerShadow_setPrototypeOf(subClass, superClass);}function QuestTowerShadow_setPrototypeOf(o, p) {QuestTowerShadow_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestTowerShadow_setPrototypeOf(o, p);}function QuestTowerShadow_createSuper(Derived) {var hasNativeReflectConstruct = QuestTowerShadow_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestTowerShadow_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestTowerShadow_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestTowerShadow_possibleConstructorReturn(this, result);};}function QuestTowerShadow_possibleConstructorReturn(self, call) {if (call && (QuestTowerShadow_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestTowerShadow_assertThisInitialized(self);}function QuestTowerShadow_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestTowerShadow_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestTowerShadow_getPrototypeOf(o) {QuestTowerShadow_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestTowerShadow_getPrototypeOf(o);}function QuestTowerShadow_defineProperty(obj, key, value) {key = QuestTowerShadow_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTowerShadow_toPropertyKey(arg) {var key = QuestTowerShadow_toPrimitive(arg, "string");return QuestTowerShadow_typeof(key) === "symbol" ? key : String(key);}function QuestTowerShadow_toPrimitive(input, hint) {if (QuestTowerShadow_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerShadow_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestTowerShadow = /*#__PURE__*/function (_TaskInfo) {QuestTowerShadow_inherits(QuestTowerShadow, _TaskInfo);var _super = QuestTowerShadow_createSuper(QuestTowerShadow);function QuestTowerShadow() {var _this;QuestTowerShadow_classCallCheck(this, QuestTowerShadow);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "badge",
    external_kolmafia_.Item.get("Attorney's badge"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "potato",
    external_kolmafia_.Familiar.get("Levitating Potato"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "guaze",
    external_kolmafia_.Item.get("Gauze garter"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "cape",
    external_kolmafia_.Item.get("Unwrapped knock-off retro superhero cape"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "overclocking",
    external_kolmafia_.Skill.get("Overclocking"));QuestTowerShadow_defineProperty(QuestTowerShadow_assertThisInitialized(_this), "paths", void 0);return _this;}QuestTowerShadow_createClass(QuestTowerShadow, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [
      new PossiblePath(0).addMeat(1000),
      new PossiblePath(0).add(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Shadow";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 10) {
        return QuestStatus.NOT_READY;
      }

      if (status > 10) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "getBestEquips", value:

    function getBestEquips(modifier) {
      var equips = [];
      var none = (0,external_kolmafia_.toSlot)("none");
      var weapon = external_kolmafia_.Slot.get("weapon");var _iterator = QuestTowerShadow_createForOfIteratorHelper(

        external_kolmafia_.Item.all()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if ((0,external_kolmafia_.availableAmount)(i) == 0) {
            continue;
          }

          var slot = (0,external_kolmafia_.toSlot)(i);

          if (slot == none || !(0,external_kolmafia_.canEquip)(i)) {
            continue;
          }

          if (slot == weapon && (0,external_kolmafia_.weaponHands)(i) > 1) {
            continue;
          }

          var mod = (0,external_kolmafia_.numericModifier)(i, modifier);

          if (mod <= 0) {
            continue;
          }

          equips.push([slot, i, mod]);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      equips.sort(function (e1, e2) {return e2[2] - e1[2];});
      var items = [];
      var toReturn = [];var _iterator2 = QuestTowerShadow_createForOfIteratorHelper(

        [
        "Hat",
        "Weapon",
        "Offhand",
        "Back",
        "Pants",
        "Acc1",
        "Acc2",
        "Acc3"].
        map(function (s) {return external_kolmafia_.Slot.get(s);})),_step2;try {var _loop = function _loop() {var slot = _step2.value;
          var lookFor = slot;

          if (slot == external_kolmafia_.Slot.get("acc2") || slot == external_kolmafia_.Slot.get("acc3")) {
            lookFor = external_kolmafia_.Slot.get("acc1");
          }

          var item = equips.reduce(function (p, i) {
            if (i[0] != lookFor || items.includes(i[1])) {
              return p;
            }

            if (p != null && p[2] > i[2]) {
              return p;
            }

            return i;
          }, null);

          if (item != null) {
            items.push(item[1]);
            toReturn.push([slot, item[1]]);
          }
        };for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {_loop();}} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return toReturn;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var map = new Map();

      if ((0,external_kolmafia_.availableAmount)(this.badge) > 0) {
        map.set(external_kolmafia_.Slot.get("acc3"), this.badge);
      }

      if ((0,external_kolmafia_.availableAmount)(this.cape) > 0) {
        map.set(external_kolmafia_.Slot.get("back"), this.cape);
      }

      var outfit = new GreyOutfit();
      outfit.hpWeight = 0;
      outfit.addWeight("init", 500, null, 151);
      outfit.addWeight("hp", 100, null, 500);

      return {
        familiar: this.potato,
        outfit: outfit,
        location: null,
        run: function run() {
          if ((0,external_kolmafia_.equippedAmount)(_this2.cape) > 0) {
            (0,external_kolmafia_.cliExecute)("retrocape heck hold"); // Make sure we stun the shadow
          }

          if ((0,external_kolmafia_.itemAmount)(_this2.guaze) < 6) {
            if ((0,external_kolmafia_.pullsRemaining)() == -1 && (0,external_kolmafia_.storageAmount)(_this2.guaze) > 6) {
              (0,external_kolmafia_.cliExecute)(
              "pull " + (0,external_kolmafia_.storageAmount)(_this2.guaze) + " " + _this2.guaze.name);

            } else {
              throw (
                "We don't have enough " +
                _this2.guaze.name +
                " to take on the shadow!");

            }
          }

          if ((0,external_kolmafia_.myHp)() < (0,external_kolmafia_.myMaxhp)()) {
            if (path.canUse(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB)) {
              (0,external_kolmafia_.cliExecute)("hottub");
              path.addUsed(ResourceTypes/* ResourceCategory.HOT_TUB */.s6.HOT_TUB);
            } else {
              restoreHPTo((0,external_kolmafia_.myMaxhp)());
            }
          }

          if ((0,external_kolmafia_.myHp)() < (0,external_kolmafia_.myMaxhp)()) {
            throw "Expected full health";
          }

          var macro = MacroBuilder/* Macro.item */.LE.item(_this2.guaze).repeat();

          greyAdv(
          "place.php?whichplace=nstower&action=ns_09_monster5",
          outfit,
          new AdventureSettings().setStartOfFightMacro(macro));

        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTowerShadow;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerMirror.ts
function QuestTowerMirror_typeof(obj) {"@babel/helpers - typeof";return QuestTowerMirror_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerMirror_typeof(obj);}function QuestTowerMirror_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestTowerMirror_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestTowerMirror_slicedToArray(arr, i) {return QuestTowerMirror_arrayWithHoles(arr) || QuestTowerMirror_iterableToArrayLimit(arr, i) || QuestTowerMirror_unsupportedIterableToArray(arr, i) || QuestTowerMirror_nonIterableRest();}function QuestTowerMirror_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestTowerMirror_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTowerMirror_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTowerMirror_arrayLikeToArray(o, minLen);}function QuestTowerMirror_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestTowerMirror_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestTowerMirror_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestTowerMirror_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerMirror_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerMirror_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerMirror_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerMirror_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerMirror_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerMirror_defineProperty(obj, key, value) {key = QuestTowerMirror_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTowerMirror_toPropertyKey(arg) {var key = QuestTowerMirror_toPrimitive(arg, "string");return QuestTowerMirror_typeof(key) === "symbol" ? key : String(key);}function QuestTowerMirror_toPrimitive(input, hint) {if (QuestTowerMirror_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerMirror_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestTowerMirror = /*#__PURE__*/function () {function QuestTowerMirror() {QuestTowerMirror_classCallCheck(this, QuestTowerMirror);QuestTowerMirror_defineProperty(this, "wand",
    external_kolmafia_.Item.get(" Wand of Nagamar"));QuestTowerMirror_defineProperty(this, "lW",
    external_kolmafia_.Item.get("ruby W"));QuestTowerMirror_defineProperty(this, "lA",
    external_kolmafia_.Item.get("metallic A"));QuestTowerMirror_defineProperty(this, "lN",
    external_kolmafia_.Item.get("lowercase N"));QuestTowerMirror_defineProperty(this, "lD",
    external_kolmafia_.Item.get("heavy D"));QuestTowerMirror_defineProperty(this, "wa",
    external_kolmafia_.Item.get("WA"));QuestTowerMirror_defineProperty(this, "nd",
    external_kolmafia_.Item.get("ND"));QuestTowerMirror_defineProperty(this, "locations",
    [
    ["Ruby W", "W imp", "Pandamonium Slums"],
    ["Metallic A", "MagiMechTech MechaMech", "The Penultimate Fantasy Airship"],
    ["lowercase N", "XXX pr0n", "The Valley of Rof L'm Fao"],
    [
    "heavy D",
    "Alphabet Giant",
    "The Castle in the Clouds in the Sky (Basement)"]].

    map(function (s) {return [external_kolmafia_.Item.get(s[0]), external_kolmafia_.Monster.get(s[1]), external_kolmafia_.Location.get(s[2])];}));QuestTowerMirror_defineProperty(this, "clover",
    external_kolmafia_.Item.get("11-leaf Clover"));}QuestTowerMirror_createClass(QuestTowerMirror, [{ key: "getId", value:

    function getId() {
      return "Council / Tower / Mirror";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 9) {
        return QuestStatus.NOT_READY;
      }

      if (status > 9) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "tryClover", value:

    function tryClover() {var _this = this;
      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.use)(_this.clover);
          greyAdv(external_kolmafia_.Location.get("The Castle in the Clouds in the Sky (Basement)"));
        }
      };
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_.availableAmount)(this.wand) == 0) {
        return this.createWand();
      }

      // Equip outfit early to try save some hp
      var outfit = GreyOutfit.IGNORE_OUTFIT;

      return {
        location: null,
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(1015, 2); // Break mirror

          try {
            greyAdv("place.php?whichplace=nstower&action=ns_08_monster4", outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "createWand", value:

    function createWand() {var _this2 = this;
      var toGrab = this.locations.filter(function (_ref) {var _ref2 = QuestTowerMirror_slicedToArray(_ref, 1),i = _ref2[0];return (0,external_kolmafia_.availableAmount)(i) == 0;});

      if (
      toGrab.length > 0 && (
      GreySettings_GreySettings.isHardcoreMode() || (0,external_kolmafia_.pullsRemaining)() != -1))
      {var _iterator = QuestTowerMirror_createForOfIteratorHelper(
          toGrab),_step;try {var _loop = function _loop() {var _step$value = QuestTowerMirror_slicedToArray(_step.value, 3),monster = _step$value[1],loc = _step$value[2];
            if ((0,external_kolmafia_.availableAmount)(_this2.clover) > 0) {return { v:
                _this2.tryClover() };
            }

            var outfit = new GreyOutfit().setItemDrops();return { v:

              {
                location: loc,
                outfit: outfit,
                run: function run() {
                  var settings = new AdventureSettings();
                  settings.addNoBanish(monster);

                  greyAdv(loc, outfit, settings);
                }
              } };
          };for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (QuestTowerMirror_typeof(_ret) === "object") return _ret.v;}} catch (err) {_iterator.e(err);} finally {_iterator.f();}
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.retrieveItem)(_this2.wand);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTowerMirror;}();
;// CONCATENATED MODULE: ./src/typings/TaskManager.ts
function TaskManager_typeof(obj) {"@babel/helpers - typeof";return TaskManager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskManager_typeof(obj);}function TaskManager_toConsumableArray(arr) {return TaskManager_arrayWithoutHoles(arr) || TaskManager_iterableToArray(arr) || TaskManager_unsupportedIterableToArray(arr) || TaskManager_nonIterableSpread();}function TaskManager_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskManager_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function TaskManager_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return TaskManager_arrayLikeToArray(arr);}function TaskManager_slicedToArray(arr, i) {return TaskManager_arrayWithHoles(arr) || TaskManager_iterableToArrayLimit(arr, i) || TaskManager_unsupportedIterableToArray(arr, i) || TaskManager_nonIterableRest();}function TaskManager_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskManager_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function TaskManager_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function TaskManager_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskManager_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function TaskManager_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskManager_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskManager_arrayLikeToArray(o, minLen);}function TaskManager_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function TaskManager_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskManager_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskManager_toPropertyKey(descriptor.key), descriptor);}}function TaskManager_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskManager_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskManager_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskManager_defineProperty(obj, key, value) {key = TaskManager_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskManager_toPropertyKey(arg) {var key = TaskManager_toPrimitive(arg, "string");return TaskManager_typeof(key) === "symbol" ? key : String(key);}function TaskManager_toPrimitive(input, hint) {if (TaskManager_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskManager_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);} // The biggest failures are
// 1. Key sources, we want to get 3 key sources. Some key sources might return more than 1
// 2. Possible paths. Sometimes there's two questlines we can pick
// 3. Crypts, the boat technically means the boat should be in all four crypts or something
// 4. Giving negative adventures, if we provide -50 then we expect to save 50 advs.
// 5. Paths that have so many variables on what could be provided, but basically just initial pulls
// 6. Paths that are a one and done, but the quest can still be done
// 7. Quests that are optional, but entirely depend on the path being picked. We can either provide a dummy path, or something else







var SimmedPath = /*#__PURE__*/function () {








  function SimmedPath(assumeUnused) {var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;TaskManager_classCallCheck(this, SimmedPath);TaskManager_defineProperty(this, "resourcesRemaining", new Map());TaskManager_defineProperty(this, "resourcesUsed", []);TaskManager_defineProperty(this, "thisPath", []);TaskManager_defineProperty(this, "totalCost", void 0);TaskManager_defineProperty(this, "advsSaved", void 0);TaskManager_defineProperty(this, "profitLost", void 0);TaskManager_defineProperty(this, "desiredYR", void 0);
    if (skip) {
      return;
    }var _iterator = TaskManager_createForOfIteratorHelper(

      (0,ResourceTypes/* getResources */.jh)()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var resource = _step.value;
        this.resourcesRemaining.set(
        resource.resource,
        (0,ResourceTypes/* getResourcesLeft */.r)(resource.resource, assumeUnused));

      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }TaskManager_createClass(SimmedPath, [{ key: "isRecalculateNeeded", value:

    function isRecalculateNeeded() {
      var unused = this.thisPath.find(
      function (_ref) {var _ref2 = TaskManager_slicedToArray(_ref, 2),quest = _ref2[0],path = _ref2[1];return (
          path != null &&
          path.resourcesAvailable.length > 0 &&
          quest.status(path) == QuestStatus.COMPLETED);});


      if (unused == null) {
        if (
        this.desiredYR == null ||
        this.desiredYR > 0 && this.desiredYR > (0,ResourceTypes/* getResourcesLeft */.r)("Yellow Ray"))
        {
          this.desiredYR = 0;var _iterator2 = TaskManager_createForOfIteratorHelper(

            this.thisPath),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _step2$value = TaskManager_slicedToArray(_step2.value, 2),path = _step2$value[1];
              if (path == null) {
                continue;
              }var _iterator3 = TaskManager_createForOfIteratorHelper(

                path.resourcesAvailable),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _resource$resourcesUs;var resource = _step3.value;
                  if (resource.resource != "Yellow Ray") {
                    continue;
                  }

                  this.desiredYR += (_resource$resourcesUs = resource.resourcesUsed) !== null && _resource$resourcesUs !== void 0 ? _resource$resourcesUs : 1;
                }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          if (
          this.desiredYR > 0 &&
          this.desiredYR > (0,ResourceTypes/* getResourcesLeft */.r)("Yellow Ray"))
          {
            (0,external_kolmafia_.print)("It appears that we do not have enough turns left for every Yellow Ray, wanted ".concat(

            this.desiredYR, " but have ").concat(
            (0,ResourceTypes/* getResourcesLeft */.r)("Yellow Ray"), ".. Recalculating.."),
            "red");


            return true;
          }
        }

        return false;
      }

      var resources = [];

      unused[1].resourcesAvailable.forEach(function (r) {
        var res = resources.find(
        function (_ref3) {var _ref4 = TaskManager_slicedToArray(_ref3, 2),r1 = _ref4[0],r2 = _ref4[1];return r1 == r.name && r2 == ResourceTypes/* ResourceCategory */.s6[r.type];});


        if (res == null) {
          res = [r.name, ResourceTypes/* ResourceCategory */.s6[r.type], 0];
          resources.push(res);
        }

        res[2] += 1;
      });

      (0,external_kolmafia_.print)(
      unused[0].getId() +
      " reports that it has resources left over despite being finished. This is not an error. Resources: " +
      resources.map(
      function (name, type, uses) {return name + " x " + type + " (Uses " + uses + ")";}),

      "red");


      (0,external_kolmafia_.print)(
      "Used resources: " +
      unused[1].resourceUsed.map(function (r) {return ResourceTypes/* ResourceCategory */.s6[r];}).join(", "));


      return true;
    } }, { key: "isThisBetterThan", value:

    function isThisBetterThan(compareAgainst, eachTurnWorth) {
      var oldProfit = compareAgainst.getProfitLost(eachTurnWorth);
      var newProfit = this.getProfitLost(eachTurnWorth);

      if (oldProfit[0] + oldProfit[1] < newProfit[0] + newProfit[1]) {
        return false;
      }

      return true;
    } }, { key: "printInfo", value:

    function printInfo() {var _this = this;







      var used = new Map();var _iterator4 = TaskManager_createForOfIteratorHelper(

        this.resourcesUsed),_step4;try {var _loop = function _loop() {var _step4$value = TaskManager_slicedToArray(_step4.value, 2),quest = _step4$value[0],resource = _step4$value[1];
          var key = resource.name;

          if (!used.has(key)) {
            used.set(key, []);
          }

          var id = quest.getId();

          var pair = used.get(key).find(function (p) {return p.questName == id;});

          if (pair == null) {
            var path = _this.thisPath.find(
            function (_ref5) {var _ref6 = TaskManager_slicedToArray(_ref5, 2),questInfo = _ref6[0],possiblePath = _ref6[1];return questInfo.getId() === id;})[
            1];

            used.get(key).push(
            pair = {
              level: quest.level(),
              questName: id,
              resourcesUsed: 0,
              turnsSaved: path.getAverageTurns(),
              path: path
            });

          }

          pair.resourcesUsed++;
        };for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {_loop();}} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

      var index1 = 0;
      var lines = [];

      used.forEach(function (details, resourceName) {
        index1++;

        var resourcesUsed = details.
        map(function (d) {return d.resourcesUsed;}).
        reduce(function (p, n) {return p + n;}, 0);

        details.sort(function (d1, d2) {
          if (d1.level != d2.level) {
            return d1.level - d2.level;
          }

          return d1.questName.localeCompare(d2.questName);
        });

        var paths = details.
        map(
        function (d, index) {return "<font color='".concat(
          (index + index1) % 2 == 0 ? "gray" : "", "'>").concat(
          d.questName, " x ").concat(
          d.resourcesUsed, " (").concat(d.turnsSaved, " advs)").concat(
          resourceName == "Pull" && d.path.pulls.length > 0 ? " <font color='purple'>(".concat(
          d.path.pulls.join(", "), ")</font>") :
          "", "</font>");}).


        join(", ");

        lines.push("<font color='blue'>".concat(
        resourceName, " x ").concat(resourcesUsed, "</font> => ").concat(paths));

      });

      lines.sort(function (l1, l2) {return l1.localeCompare(l2);});

      lines.forEach(function (l) {return (0,external_kolmafia_.printHtml)(l, true);});

      var advs = this.getAdvs();

      (0,external_kolmafia_.print)(
      "With mpa of " +
      GreySettings_GreySettings.greyValueOfAdventure +
      " and using estimated " +
      Math.floor(this.getTotalCost()) +
      " meat of resources, save " +
      advs[0] +
      " to " +
      advs[1] +
      " adventures compared to the worst alternatives");

    } }, { key: "setPath", value:

    function setPath(paths) {
      this.thisPath = paths;
    } }, { key: "assignResources", value:

    function assignResources() {var _this2 = this;var _iterator5 = TaskManager_createForOfIteratorHelper(
        this.resourcesUsed),_step5;try {var _loop2 = function _loop2() {var _step5$value = TaskManager_slicedToArray(_step5.value, 2),quest = _step5$value[0],resource = _step5$value[1];
          var _this2$thisPath$find = _this2.thisPath.find(function (_ref7) {var _ref8 = TaskManager_slicedToArray(_ref7, 1),q = _ref8[0];return q === quest;}),_this2$thisPath$find2 = TaskManager_slicedToArray(_this2$thisPath$find, 2),path = _this2$thisPath$find2[1];

          path.resourcesAvailable.push(resource);
        };for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {_loop2();}} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}
    } }, { key: "getAdvs", value:

    function getAdvs() {
      if (this.advsSaved == null) {
        this.advsSaved = [0, 0];var _iterator6 = TaskManager_createForOfIteratorHelper(

          this.thisPath),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var _step6$value = TaskManager_slicedToArray(_step6.value, 2),path = _step6$value[1];
            if (path == null) {
              continue;
            }

            this.advsSaved[0] += path.advsSavedMin;
            this.advsSaved[1] += path.advsSavedMax;
          }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}
      }

      return this.advsSaved;
    } }, { key: "clone", value:

    function clone() {
      var newPath = new SimmedPath(false, true);
      newPath.resourcesRemaining = new Map(this.resourcesRemaining);
      newPath.resourcesUsed = TaskManager_toConsumableArray(this.resourcesUsed);
      newPath.thisPath = TaskManager_toConsumableArray(this.thisPath);

      return newPath;
    } }, { key: "addUse", value:

    function addUse(quest, resource, chance) {
      this.resourcesUsed.push([quest, resource, chance]);
      this.resourcesRemaining.set(
      resource.resource,
      this.resourcesRemaining.get(resource.resource) - (
      resource.resourcesUsed || 1));

    } }, { key: "canUse", value:

    function canUse(resource) {
      return (
        this.resourcesRemaining.get(resource.resource) >= (
        resource.resourcesUsed || 1));

    } }, { key: "getTotalCost", value:

    function getTotalCost() {
      this.totalCost = this.thisPath.
      map(function (p) {return p[1] != null ? p[1].miscMeat : 0;}).
      reduce(function (p, n) {return p + n;}, 0);var _iterator7 = TaskManager_createForOfIteratorHelper(

        this.resourcesUsed),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var resource = _step7.value;
          this.totalCost += resource[1].worthInAftercore * 1; //resource[2];

          if (resource[1].freeTurn == true) {
            this.totalCost -= GreySettings_GreySettings.greyValueOfAdventure;
          }
        }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}

      return this.totalCost;
    }

    /**
     * Returns how much profit was lost following this path
     */ }, { key: "getProfitLost", value:
    function getProfitLost(advsWorth) {
      if (this.profitLost == null) {
        // Costs are a negative
        var meatGain = this.getTotalCost();

        this.profitLost = [
        meatGain - this.getAdvs()[0] * advsWorth,
        meatGain - this.getAdvs()[1] * advsWorth];

      }

      return this.profitLost;
    } }]);return SimmedPath;}();


var TaskManager_FigureOutPath = /*#__PURE__*/function () {function FigureOutPath() {TaskManager_classCallCheck(this, FigureOutPath);TaskManager_defineProperty(this, "resources",
    (0,ResourceTypes/* getResources */.jh)());}TaskManager_createClass(FigureOutPath, [{ key: "getPaths", value:

    function getPaths(quests) {var _this3 = this;var assumeUnstarted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      (0,external_kolmafia_.print)(
      "Now calculating resources.. " + (
      GreySettings_GreySettings.greyBreakAtTower ?
      "" :
      "As you're not breaking at tower, this might take a while.."));

      var allPaths = [];
      var miscPaths = [];
      var uncompleteable = [];

      // What we need to do is sort the paths by the most profitable. Ideally we want to eliminate the ones that are just not feasible asap.
      // If it wants 2 faxes but we only want 1, then we can immediately eliminate the least profitable.
      var _iterator8 = TaskManager_createForOfIteratorHelper(quests),_step8;try {var _loop3 = function _loop3() {var quest = _step8.value;
          var q = quest;

          if (q.getPossiblePaths == null) {
            miscPaths.push(quest);return "continue";

          }

          if (q.createPaths != null) {
            q.createPaths(assumeUnstarted);
          }

          var paths = q.getPossiblePaths();

          if (paths == null) {
            //miscPaths.push(quest);
            return "continue";
          }

          if (paths.length == 0) {
            (0,external_kolmafia_.print)(
            "We should never have empty paths, assume this is a bug. If we want to avoid doing the quest, return null and status() instead.",
            "red");

          }

          if (
          paths.find(
          function (p) {return p.resourcesAvailable.length + p.resourceUsed.length > 0;}) !=
          null)
          {
            throw "Resources not cleared for " + quest.getId();
          }

          if (
          quest.level() >= 1 &&
          !assumeUnstarted &&
          quest.status() == QuestStatus.COMPLETED)
          {return "continue";

          }var _iterator10 = TaskManager_createForOfIteratorHelper(

            paths),_step10;try {var _loop4 = function _loop4() {var path = _step10.value;var _iterator12 = TaskManager_createForOfIteratorHelper(
                ResourceTypes/* ResourceIds */.is),_step12;try {var _loop5 = function _loop5() {var res = _step12.value;
                  if (path.ignoreResources.includes(res)) {return "continue";

                  }

                  var possibles = (0,ResourceTypes/* getResources */.jh)().filter(
                  function (r) {return r.resource == res && path.canUse(r.type) > 0;});


                  if (possibles.length <= 1) {return "continue";

                  }

                  //print("Better check " + quest.getId() + " for " + res);
                };for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {var _ret2 = _loop5();if (_ret2 === "continue") continue;}} catch (err) {_iterator12.e(err);} finally {_iterator12.f();}
            };for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {_loop4();}} catch (err) {_iterator10.e(err);} finally {_iterator10.f();}

          paths = paths.filter(function (p) {
            var resources = new Map();var _iterator11 = TaskManager_createForOfIteratorHelper(

              ResourceTypes/* ResourceIds */.is),_step11;try {for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {var resourceId = _step11.value;
                resources.set(
                resourceId,
                (0,ResourceTypes/* getResourcesLeft */.r)(resourceId, assumeUnstarted));

              }} catch (err) {_iterator11.e(err);} finally {_iterator11.f();}

            var resourcesToComplete = _this3.getResourcesToComplete(
            resources,
            quest,
            p);


            if (resourcesToComplete == null) {
              return false;
            }

            p.setRoughPathCost(resourcesToComplete);

            return true;
          });

          if (paths.length == 0) {
            uncompleteable.push(quest);return "continue";

          }

          // Now we figure out how many advs each path would save compared to the other
          var mostAdvsCouldveUsed = paths.
          map(function (p) {return [p.advsSavedMin, p.advsSavedMax];}).
          reduce(function (p, n) {return [Math.max(p[0], n[0]), Math.max(p[1], n[1])];});

          paths.forEach(function (p) {
            // If this path would take 2 to 5 adventures
            // And the most adventures are 1 to 30
            // That means we would profit -1 to 25
            p.advsSavedMin = mostAdvsCouldveUsed[0] - p.advsSavedMin;
            p.advsSavedMax = mostAdvsCouldveUsed[1] - p.advsSavedMax;
          });

          // We want the cheapest paths to go first
          paths.sort(function (p1, p2) {
            var cost1 = p1.getCostOfPath();
            var cost2 = p2.getCostOfPath();

            if (cost1 == cost2) {
              return 0;
            }

            return cost1 - cost2;
          });

          var cheapestNoResource = paths.find(
          function (p) {return p.resourcesNeeded.length == 0;});


          if (cheapestNoResource != null) {
            var meatSavedOnPath =
            cheapestNoResource.pathCost -
            (cheapestNoResource.advsSavedMin + cheapestNoResource.advsSavedMax) /
            2 *
            GreySettings_GreySettings.greyValueOfAdventure;
          }

          allPaths.push([quest, paths]);
        };for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var _ret = _loop3();if (_ret === "continue") continue;}} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}

      if (uncompleteable.length > 0) {var _iterator9 = TaskManager_createForOfIteratorHelper(
          uncompleteable),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var q = _step9.value;
            (0,external_kolmafia_.print)(
            "Unable to plot a path! Not enough resources to complete `" +
            q.getId() +
            "`",
            "red");

            var combos = q.
            getPossiblePaths().
            map(function (p) {return (
                p.resourcesNeeded.map(
                function (_ref9) {var _ref10 = TaskManager_slicedToArray(_ref9, 2),r = _ref10[0],amount = _ref10[1];return ResourceTypes/* ResourceCategory */.s6[r] + " x " + amount;}));});



            (0,external_kolmafia_.print)("Combinations of resources needed are: ".concat(combos.join(" OR ")));
          }} catch (err) {_iterator9.e(err);} finally {_iterator9.f();}

        return null;
      }

      // We want the most expensive paths to go first, the cheapest paths are always the first in each path
      allPaths.sort(function (_ref11, _ref12) {var _ref13 = TaskManager_slicedToArray(_ref11, 2),paths1 = _ref13[1];var _ref14 = TaskManager_slicedToArray(_ref12, 2),paths2 = _ref14[1];
        if (
        paths1.length != paths2.length &&
        Math.min(paths1.length, paths2.length) == 1)
        {
          return paths1.length - paths2.length;
        }

        var cost1 = paths1[0].getCostOfPath();
        var cost2 = paths2[0].getCostOfPath();

        if (cost1 == cost2) {
          return 0;
        }

        return cost1 - cost2;
      });

      var simmedPath = this.doAttempt(
      new SimmedPath(assumeUnstarted),
      0,
      allPaths);


      if (simmedPath == null) {
        return null;
      }

      simmedPath.assignResources();

      miscPaths.forEach(function (q) {
        simmedPath.thisPath.push([q, null]);
      });

      return simmedPath;
    } }, { key: "doAttempt", value:

    function doAttempt(
    currentPath,
    index,
    allPaths)
    {var _this4 = this;
      var _allPaths$index = TaskManager_slicedToArray(allPaths[index++], 2),quest = _allPaths$index[0],paths = _allPaths$index[1];

      var possible =



      [];var _iterator13 = TaskManager_createForOfIteratorHelper(

        paths),_step13;try {for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {var path = _step13.value;
          var resources =
          this.getResourcesToComplete(
          currentPath.resourcesRemaining,
          quest,
          path);


          if (resources == null) {
            continue;
          }

          var resourceCost = resources.
          map(
          function (r) {return (
              r[1].worthInAftercore * r[2] - (
              r[1].freeTurn == true ? GreySettings_GreySettings.greyValueOfAdventure : 0));}).

          reduce(function (p, n) {return p + n;}, 0);
          var extraAdvsWorth =
          GreySettings_GreySettings.greyValueOfAdventure * (
          (path.advsSavedMax - path.advsSavedMin) / 2 + path.advsSavedMin);

          possible.push([
          path,
          resources,
          path.miscMeat + resourceCost - extraAdvsWorth]);

        }} catch (err) {_iterator13.e(err);} finally {_iterator13.f();}

      possible.sort(function (_ref15, _ref16) {var _ref17 = TaskManager_slicedToArray(_ref15, 3),meat1 = _ref17[2];var _ref18 = TaskManager_slicedToArray(_ref16, 3),meat2 = _ref18[2];return meat1 - meat2;});

      var best;
      var addPath = function addPath(
      simmed,
      quest,
      path)
      {
        if (path instanceof PossibleMultiPath) {var _iterator14 = TaskManager_createForOfIteratorHelper(
            path.subpaths),_step14;try {for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {var _step14$value = TaskManager_slicedToArray(_step14.value, 2),_quest = _step14$value[0],p = _step14$value[1];
              addPath(simmed, _quest, p);
            }} catch (err) {_iterator14.e(err);} finally {_iterator14.f();}
        } else {
          simmed.thisPath.push([quest, path]);
        }
      };

      var tried = 0;var _loop6 = function _loop6()

      {var _possible$_i = TaskManager_slicedToArray(_possible[_i2], 2),path = _possible$_i[0],resources = _possible$_i[1];
        var simmed = currentPath.clone();

        addPath(simmed, quest, path);

        resources.forEach(function (_ref19) {var _ref20 = TaskManager_slicedToArray(_ref19, 3),quest = _ref20[0],resource = _ref20[1],amount = _ref20[2];
          simmed.addUse(quest, resource, amount);
        });

        tried++;

        if (index < allPaths.length) {
          simmed = _this4.doAttempt(simmed, index, allPaths);

          if (simmed == null) {return "continue";

          }
        }

        if (
        best == null ||
        simmed.isThisBetterThan(best, GreySettings_GreySettings.greyValueOfAdventure))
        {
          best = simmed;
        }

        if (tried >= (path.pathCost <= 5000 ? 1 : 2)) {return { v:
            best };
        }
      };for (var _i2 = 0, _possible = possible; _i2 < _possible.length; _i2++) {var _ret3 = _loop6();if (_ret3 === "continue") continue;if (TaskManager_typeof(_ret3) === "object") return _ret3.v;}

      return best;
    }

    /**
     * @returns [QuestInfo, Resource, Chance of use][]
     */ }, { key: "getResourcesToComplete", value:
    function getResourcesToComplete(
    resourcesAvailable,
    quest,
    path)
    {
      return this.doResourcesToComplete(
      quest,
      path,
      new Map(resourcesAvailable),
      []);

    } }, { key: "doResourcesToComplete", value:

    function doResourcesToComplete(
    quest,
    path,
    resourcesAvailable,
    resources)
    {
      if (path instanceof PossibleMultiPath) {var _iterator15 = TaskManager_createForOfIteratorHelper(
          path.subpaths),_step15;try {for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {var _step15$value = TaskManager_slicedToArray(_step15.value, 2),q = _step15$value[0],p = _step15$value[1];
            var result = this.doResourcesToComplete(
            q,
            p,
            resourcesAvailable,
            resources);


            if (result == null) {
              return null;
            }
          }} catch (err) {_iterator15.e(err);} finally {_iterator15.f();}
      } else {
        var skip = new Map();var _iterator16 = TaskManager_createForOfIteratorHelper(
          path.resourcesNeeded),_step16;try {for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {var _r$resourcesUsed;var _step16$value = TaskManager_slicedToArray(_step16.value, 2),res = _step16$value[0],chance = _step16$value[1];
            if (!skip.has(res)) {
              skip.set(res, path.getUsed(res));
            }

            if (skip.get(res) > 0) {
              skip.set(res, skip.get(res) - 1);
              continue;
            }

            var r = this.getResource(
            resourcesAvailable,
            res,
            path.ignoreResources);


            if (r == null) {
              return null;
            }

            resources.push([quest, r, chance]);
            resourcesAvailable.set(
            r.resource,
            resourcesAvailable.get(r.resource) - ((_r$resourcesUsed = r.resourcesUsed) !== null && _r$resourcesUsed !== void 0 ? _r$resourcesUsed : 1));

          }} catch (err) {_iterator16.e(err);} finally {_iterator16.f();}
      }

      return resources;
    } }, { key: "getResource", value:

    function getResource(
    used,
    resourceType,
    unsupported)
    {var _iterator17 = TaskManager_createForOfIteratorHelper(
        this.resources),_step17;try {for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {var resource = _step17.value;
          if (
          resource.type != resourceType ||
          unsupported.includes(resource.resource))
          {
            continue;
          }

          if (used.get(resource.resource) >= (resource.resourcesUsed || 1)) {
            return resource;
          }
        }} catch (err) {_iterator17.e(err);} finally {_iterator17.f();}

      return null;
    } }]);return FigureOutPath;}();
;// CONCATENATED MODULE: ./src/utils/GreyTimings.ts
function GreyTimings_typeof(obj) {"@babel/helpers - typeof";return GreyTimings_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyTimings_typeof(obj);}function GreyTimings_slicedToArray(arr, i) {return GreyTimings_arrayWithHoles(arr) || GreyTimings_iterableToArrayLimit(arr, i) || GreyTimings_unsupportedIterableToArray(arr, i) || GreyTimings_nonIterableRest();}function GreyTimings_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyTimings_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyTimings_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyTimings_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyTimings_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyTimings_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyTimings_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyTimings_arrayLikeToArray(o, minLen);}function GreyTimings_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyTimings_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyTimings_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyTimings_toPropertyKey(descriptor.key), descriptor);}}function GreyTimings_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyTimings_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyTimings_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyTimings_defineProperty(obj, key, value) {key = GreyTimings_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyTimings_toPropertyKey(arg) {var key = GreyTimings_toPrimitive(arg, "string");return GreyTimings_typeof(key) === "symbol" ? key : String(key);}function GreyTimings_toPrimitive(input, hint) {if (GreyTimings_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyTimings_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}

var GreyTimings_GreyTimings = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyTimings() {GreyTimings_classCallCheck(this, GreyTimings);GreyTimings_defineProperty(this, "prop",
    "_greyScriptTimings");GreyTimings_defineProperty(this, "expectingStart",
    true);}GreyTimings_createClass(GreyTimings, [{ key: "doStart", value:

    function doStart() {
      if (!this.expectingStart) {
        throw "Expected a end, not a start";
      }

      this.expectingStart = false;

      var times = getProperty(this.prop).
      split(",").
      filter(function (s) {return s.length > 0;});

      times.push(this.getTime().toString());

      setProperty(this.prop, times.join(","));
    } }, { key: "doEnd", value:

    function doEnd() {
      if (this.expectingStart) {
        throw "Expected a start, not a end";
      }

      this.expectingStart = true;

      var time = this.getTime();
      var prop = getProperty(this.prop) + ":" + time;
      var secs = this.getTotalSeconds(prop);

      setProperty(this.prop, time - secs + ":" + time);
    } }, { key: "getTimings", value:

    function getTimings(prop) {
      var timings = [];var _iterator = GreyTimings_createForOfIteratorHelper(

        prop.split(",").map(function (s) {return s.split(":");})),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = GreyTimings_slicedToArray(_step.value, 2),t1 = _step$value[0],t2 = _step$value[1];
          timings.push([toInt(t1), t2 ? toInt(t2) : null]);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return timings;
    } }, { key: "getTotalSeconds", value:

    function getTotalSeconds() {var prop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getProperty(this.prop);
      var timeTaken = 0;
      var timings = this.getTimings(prop);

      for (var i = 0; i < timings.length; i++) {
        var _timings$i = GreyTimings_slicedToArray(timings[i], 2),started = _timings$i[0],ended = _timings$i[1];

        if (!ended) {
          ended = i + 1 < timings.length ? timings[i + 1][1] : this.getTime();
        }

        timeTaken += ended - started;
      }

      return timeTaken;
    } }, { key: "getTime", value:

    function getTime() {
      return Math.round(Date.now() / 1000);
    } }, { key: "getTimeAsString", value:

    function getTimeAsString(time) {
      var hours = Math.floor(time / 3600).toString();
      var minutes = Math.floor(time % 3600 / 60).toString();
      var seconds = (time % 60).toString();

      if (hours.length <= 1) {
        hours = "0" + hours;
      }

      if (minutes.length <= 1) {
        minutes = "0" + minutes;
      }

      if (seconds.length <= 1) {
        seconds = "0" + seconds;
      }

      return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
    } }]);return GreyTimings;}()));
;// CONCATENATED MODULE: ./src/GreyYouMain.ts
function GreyYouMain_typeof(obj) {"@babel/helpers - typeof";return GreyYouMain_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyYouMain_typeof(obj);}function GreyYouMain_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyYouMain_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyYouMain_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyYouMain_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyYouMain_arrayLikeToArray(o, minLen);}function GreyYouMain_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyYouMain_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyYouMain_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyYouMain_toPropertyKey(descriptor.key), descriptor);}}function GreyYouMain_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyYouMain_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyYouMain_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyYouMain_defineProperty(obj, key, value) {key = GreyYouMain_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyYouMain_toPropertyKey(arg) {var key = GreyYouMain_toPrimitive(arg, "string");return GreyYouMain_typeof(key) === "symbol" ? key : String(key);}function GreyYouMain_toPrimitive(input, hint) {if (GreyYouMain_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyYouMain_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}












var

GreyYouMain = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {function GreyYouMain() {GreyYouMain_classCallCheck(this, GreyYouMain);GreyYouMain_defineProperty(this, "adventures", void 0);GreyYouMain_defineProperty(this, "svn_name",

    "libraryaddict-Greyday-branches-release");GreyYouMain_defineProperty(this, "git_name",
    "libraryaddict-Greyday-release");}GreyYouMain_createClass(GreyYouMain, [{ key: "isRevisionPass", value:

    function isRevisionPass() {
      var required = 27017;

      if (getRevision() > 0 && getRevision() < required) {
        print("Please update your mafia. You are using ".concat(
        getRevision(), " but we need at least ").concat(required),
        "red");

        return false;
      }

      return true;
    } }, { key: "getTick", value:

    function getTick() {
      return "<font color='green'>✔</font>";
    } }, { key: "getCross", value:

    function getCross() {
      return "<font color='red'>✘</font>";
    } }, { key: "doSettings", value:

    function doSettings() {
      var settings = getGreySettings();

      printHtml(centerText("====== Grey Settings ======", "blue"));

      var html = "";var _iterator = GreyYouMain_createForOfIteratorHelper(

        settings),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var setting = _step.value;
          if (setting.viable == false) {
            continue;
          }

          html += "<br>";

          var val = getProperty(setting.name);

          html += "<font color='blue'>".concat(setting.name, "</font> - <font color='gray'>").concat(setting.description, "</font>");
          html += "<br>";

          if (setting.valid(val)) {
            html += "".concat(this.getTick(), " <font color='green'>Setting '").concat(val, "' is valid</font>");
          } else if (val == "") {
            html += "".concat(this.getTick(), " <font color=>Using default").concat(
            setting["default"] != null ? " '".concat(setting["default"], "'") : "", "</font>");

          } else {
            html += "".concat(this.getCross(), " <font color='red'>Invalid setting '").concat(val, "'</font>");
          }
          html += "<br>";
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      html += "<br>You can change these settings by using the following in CLI:";
      html += "<br>";
      html += "<font color='purple'>set settingName = value</font>";

      printHtml(centerText(html));

      print("");
      printHtml(
      "<div style=\"text-align: center;\" color='blue'>======================</div>");


      this.clickThis();
    } }, { key: "clickThis", value:

    function clickThis() {
      printHtml(
      "It's easiest to use the <a href='relay_Greyday.js?relay=true'><u>relay page</u></a>");

    } }, { key: "doHelp", value:

    function doHelp() {
      printHtml(centerText("======================================"));
      print("help - Shows this message", "blue");
      printHtml(
      "<font color='blue'>settings - Manage settings (Try the <a color='purple' href='relay_Greyday.js?relay=true'><u>relay page</u></a> instead!)</font>");

      print("required - Prints off a series of requirements.", "blue");
      print(
      "resources - A debug command that predicts what resources it would try to use in Grey You using your current settings",
      "blue");


      var color = myPath() == Path.get("Grey You") ? "blue" : "red";

      if (color == "red") {
        print("You are not in Grey You, and cannot use these commands.", "gray");
      }

      print(
      "run <Turns> - Run X amount of turns, or 999 if turns are not provided",
      color);

      print(
      "sim - Equips and gets ready to adventure, showing where it would go. But will not take the action.",
      color);

      print(
      "absorbs - Prints off what adventure absorbs have not yet been grabbed",
      color);

      printHtml(centerText("======================================"));
    } }, { key: "checkVersion", value:

    function checkVersion() {
      // Copied from Kasekopf's loopgyou
      print("Running Greyday version [".concat(

      lastCommitHash !== null && lastCommitHash !== void 0 ? lastCommitHash : "custom-built", "] in KoLmafia r").concat(
      getRevision()), "grey");



      if (
      lastCommitHash !== undefined && (
      svnExists(this.svn_name) || gitExists(this.git_name)))
      {
        if (
        gitExists(this.git_name) ?
        !gitAtHead(this.git_name) :
        !svnAtHead(this.svn_name))
        {
          print(
          'A newer version of this script is available and can be obtained with "git update".',
          "red");

        } else {
          print("This script is up to date.", "blue");
        }
      }
    } }, { key: "handleCommand", value:

    function handleCommand(command) {
      command = command.toLowerCase();

      if (!this.isRevisionPass()) {
        return;
      }

      this.checkVersion();

      if (
      currentRound() != 0 ||
      handlingChoice() ||
      choiceFollowsFight() ||
      fightFollowsChoice())
      {
        visitUrl("main.php");

        if (currentRound() != 0 || handlingChoice()) {
          print(
          "In a fight or in a choice, please resolve before continuing..",
          "red");

          return;
        }
      }

      GreySettings.loadSettings();

      if (command == "resources") {
        var adv = new GreyAdventurer();
        var path = new FigureOutPath().getPaths(
        adv.adventureFinder.getAllRawQuests(),
        true);


        if (path == null) {
          print("Oh no! Path not found");
          return;
        }

        path.printInfo();
        return;
      }

      if (command == "" || command == "help") {
        this.doHelp();
        return;
      }

      var banishedAbsorbs = AbsorbsProvider.loadAbsorbs(true).filter(
      function (absorb) {return (
          getBanished().find(
          function (b) {return (
              b.banisher.type == BanishType.ICE_HOUSE &&
              b.monster == absorb.monster);}) !=
          null);});


      if (banishedAbsorbs.length > 0) {
        print(
        "Your Ice House contains a monster we'd like to absorb! Please release them.. " +
        banishedAbsorbs.map(function (a) {return a.monster;}).join(", "),
        "red");

        waitq(1);
      }

      if (command.includes("require")) {
        new GreyRequirements().hasRequired();
        return;
      }

      if (command == "settings") {
        this.doSettings();
        return;
      }

      if (command == "unprime") {var _iterator2 = GreyYouMain_createForOfIteratorHelper(
          getResources()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var resource = _step2.value;
            if (resource.primed == null || !resource.primed()) {
              continue;
            }

            resource.unprime();
            print("Unprimed " + resource.name);
          }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

        print("Unprimed resources.", "blue");
        return;
      }

      if (
      command != "absorbs" &&
      command != "run" &&
      !command.startsWith("run ") &&
      command != "sim" &&
      command != "status")
      {
        print("Unknown command.");
        return;
      }

      var settings = getGreySettings();
      var invalid = false;var _iterator3 = GreyYouMain_createForOfIteratorHelper(

        settings),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var setting = _step3.value;
          var val = getProperty(setting.name);

          if (val == "" || setting.valid(val)) {
            continue;
          }

          printHtml(
          "<font color='red'>The setting '" +
          setting.name +
          "' is invalid, please correct this or set it to empty. To reset it, use the CLI command <font color='blue'>set " +
          setting.name +
          " =</font></font>");

        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

      if (invalid) {
        return;
      }

      if (myPath() != Path.get("Grey You")) {
        print(
        "You're not in grey you. Use 'help' to see what you can use.",
        "red");

        return;
      }

      if (
      getProperty("greyBreakAtTower") == "" &&
      !GreySettings.isHardcoreMode())
      {
        print(
        "The 'greyBreakAtTower' setting has not been set, the script will break when it reaches the tower.",
        "red");

      }

      if (hasVIPInvitation() && !hasWhitelistToCurrentClan()) {
        print(
        "Do you not have a whitelist to your current clan, some VIP Invitation stuff will not work. You should ask for a whitelist so this script can switch clans as required.",
        "red");

      }

      if (
      GreySettings.greyValueOfAdventure < 1000 &&
      getProperty("greyValueOfAdventure") == "")
      {
        print(
        "Your value of a grey adventure is low.. It claims you value each adventure at " +
        GreySettings.greyValueOfAdventure +
        ", which means you'd be happier if you could trade each adventure for " +
        GreySettings.greyValueOfAdventure +
        " meat than run that adventure yourself. You can set `greyValueOfAdventure` if your valueOfAdventure is correct.",
        "red");

      }

      this.adventures = new GreyAdventurer();
      var s = command.split(" ");

      if (command == "absorbs") {
        this.adventures.adventureFinder.absorbs.printRemainingAbsorbs();
        return;
      }

      this.adventures.adventureFinder.calculatePath();

      if (this.adventures.adventureFinder.path == null) {
        print("Failed to find a way to accomplish Greyday!", "red");
        return;
      }

      if (command == "status") {
        this.adventures.adventureFinder.start(true);
        this.adventures.adventureFinder.possibleAdventures.sort(function (a1, a2) {
          if (a1.quest == null != (a2.quest == null)) {
            return a1.quest == null ? 1 : -1;
          }

          if (a1.quest != null) {
            return a1.quest.getId().localeCompare(a2.quest.getId());
          }

          if (a1.status != a2.status) {
            return a1.status - a2.status;
          }

          if (a1.considerPriority != a2.considerPriority) {
            return a1.considerPriority - a2.considerPriority;
          }

          return 0;
        });

        this.adventures.adventureFinder.printStatus(
        this.adventures.adventureFinder.possibleAdventures);

        return;
      } else if (command == "sim") {
        this.adventures.runTurn(false);
        return;
      } else if (s[0] == "go" || s[0] == "run") {
        var turns = toInt(s[1] || "999");

        var effect = Effect.get("Beaten Up");
        var lastBeaten = haveEffect(effect);

        var timings = new GreyTimings();
        var turnsRunAsFar = 0;

        if (turns > 0) {
          timings.doStart();
        }

        var pullsBeforeStart = getProperty("_roninStoragePulls");

        var props = new PropertyManager();

        try {
          props.setProperty("autoSatisfyWithNPCs", "true");
          props.setProperty("autoSatisfyWithMall", "true");
          props.setProperty("autoSatisfyWithStorage", "true");
          props.setProperty("autoSatisfyWithCoinmasters", "true");
          props.setProperty("requireBoxServants", "false");

          var autoAttack = getAutoAttack();

          if (autoAttack != 0) {
            props.addCleanup(function () {return setAutoAttack(autoAttack);});
            setAutoAttack(0);
          }

          if (!getIgnoreZoneWarnings()) {
            props.addCleanup(function () {return (
                visitUrl(
                "account.php?am=1&pwd&action=flag_ignorezonewarnings&value=0&ajax=1",
                true));});



            visitUrl(
            "account.php?am=1&pwd&action=flag_ignorezonewarnings&value=1&ajax=1",
            true);

          }

          for (;

          turnsRunAsFar < turns && haveEffect(effect) - lastBeaten != 3;
          turnsRunAsFar++)
          {
            if (shouldGreydayStop()) {
              return;
            }

            lastBeaten = haveEffect(effect);

            var run = this.adventures.runTurn(true);

            if (!run) {
              break;
            }

            if (handlingChoice() || currentRound() != 0) {
              visitUrl("main.php");
              if (handlingChoice() || currentRound() != 0) {
                print(
                "I'm currently in a choice or combat, this is unexpected!",
                "red");

                break;
              }
            }
          }
        } finally {
          if (turns > 0) {
            timings.doEnd();
          }

          props.resetAll();

          var extraPulls = getProperty(
          getProperty("_roninStoragePulls").replace(pullsBeforeStart, "")).

          split(",").
          filter(function (s) {return s.length > 0;});

          var greyPulls = getProperty("_greyPulls").
          split(",").
          filter(function (s) {return s.length > 0;});var _iterator4 = GreyYouMain_createForOfIteratorHelper(

            extraPulls),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var p = _step4.value;
              if (greyPulls.includes(p)) {
                continue;
              }

              greyPulls.push(p);
            }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

          if (greyPulls.length > 0) {
            setProperty("_greyPulls", greyPulls.join(","));
          }

          print(
          "Time to run this script as far today is: " +
          timings.getTimeAsString(timings.getTotalSeconds()),
          "blue");

        }

        if (haveEffect(effect) - lastBeaten == 3) {
          print("Oh no! We were beaten up..", "red");
        }

        print("Done running", "blue");
        return;
      }
    } }]);return GreyYouMain;}()));


var stopped = false;
var reachedTower = "_greyReachedTower";

function shouldGreydayStop() {
  if (stopped) {
    return stopped;
  }

  if (
  GreySettings_GreySettings.greyBreakAtTower &&
  (0,external_kolmafia_.getProperty)(reachedTower) != "true" &&
  getQuestStatus("questL13Final") >= 0)
  {
    (0,external_kolmafia_.setProperty)(reachedTower, "true");
    (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower");

    (0,external_kolmafia_.print)(
    "We've reached the tower! Now aborting script as set by preference 'greyBreakAtTower'!",
    "blue");

    (0,external_kolmafia_.print)("The script will continue when you run the script again.");

    printEndOfRun();
    stopped = true;
    return true;
  }

  if ((0,external_kolmafia_.getProperty)("greyday_interrupt") == "true") {
    (0,external_kolmafia_.setProperty)("greyday_interrupt", "false");
    (0,external_kolmafia_.print)("Interrupt requested as per relay page", "red");
    stopped = true;
    return true;
  }

  return false;
}

function printEndOfRun() {
  var pulls = (0,external_kolmafia_.getProperty)("_greyPulls").
  split(",").
  map(function (s) {return (0,external_kolmafia_.toItem)((0,external_kolmafia_.toInt)(s));});
  var playerPulls = (0,external_kolmafia_.getProperty)("_roninStoragePulls").
  split(",").
  map(function (s) {return (0,external_kolmafia_.toItem)((0,external_kolmafia_.toInt)(s));}).
  filter(function (i) {return !pulls.includes(i);});

  if (!GreySettings_GreySettings.isHardcoreMode()) {
    (0,external_kolmafia_.print)("Greyday pulled ".concat(
    pulls.length, " of allowed ").concat(
    GreySettings_GreySettings.greyPullsLimit, " pulls. ").concat(
    (0,external_kolmafia_.pullsRemaining)(), " total pull").concat(
    (0,external_kolmafia_.pullsRemaining)() == 1 ? "" : "s", " remain.."),

    "blue");

  }

  (0,external_kolmafia_.print)(
  "Took " +
  (0,external_kolmafia_.turnsPlayed)() +
  " turns this run! " +
  (0,external_kolmafia_.myAdventures)() +
  " turns left to play with!",
  "blue");

  new GreyAbsorber_AbsorbsProvider().printRemainingAbsorbs();

  if (playerPulls.length > 0) {
    (0,external_kolmafia_.print)("Player pulled: ".concat(
    playerPulls.length, " items, ").concat(playerPulls.join(", ")));

  }

  (0,external_kolmafia_.print)("Greyday Pulls: " + pulls.map(function (i) {return i.name;}).join(", "), "gray");
}

function main() {var parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  new GreyYouMain().handleCommand(parameter);
}
;// CONCATENATED MODULE: ./src/quests/council/tower/stages/QuestTowerKillWitch.ts
function QuestTowerKillWitch_typeof(obj) {"@babel/helpers - typeof";return QuestTowerKillWitch_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTowerKillWitch_typeof(obj);}function QuestTowerKillWitch_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTowerKillWitch_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTowerKillWitch_toPropertyKey(descriptor.key), descriptor);}}function QuestTowerKillWitch_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTowerKillWitch_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTowerKillWitch_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTowerKillWitch_defineProperty(obj, key, value) {key = QuestTowerKillWitch_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTowerKillWitch_toPropertyKey(arg) {var key = QuestTowerKillWitch_toPrimitive(arg, "string");return QuestTowerKillWitch_typeof(key) === "symbol" ? key : String(key);}function QuestTowerKillWitch_toPrimitive(input, hint) {if (QuestTowerKillWitch_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTowerKillWitch_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestTowerKillWitch = /*#__PURE__*/function () {function QuestTowerKillWitch() {QuestTowerKillWitch_classCallCheck(this, QuestTowerKillWitch);QuestTowerKillWitch_defineProperty(this, "seasoning",
    external_kolmafia_.Item.get("Special Seasoning"));}QuestTowerKillWitch_createClass(QuestTowerKillWitch, [{ key: "getId", value:

    function getId() {
      return "Council / Tower / NaughtyBoss";
    } }, { key: "level", value:

    function level() {
      return 13;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL13Final");

      if (status < 11) {
        return QuestStatus.NOT_READY;
      }

      if (status > 11) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return this.doBoss();
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "doBoss", value:

    function doBoss() {var _this = this;
      return {
        location: null,
        run: function run() {
          for (var i = 0; i < 2; i++) {
            try {
              greyAdv(
              "place.php?whichplace=nstower&action=ns_10_sorcfight",
              null,
              new AdventureSettings().setFinishingBlowMacro(
              MacroBuilder/* Macro.attack */.LE.attack().repeat()));


              (0,external_kolmafia_.visitUrl)("choice.php");
            } catch (e) {}
          }

          greyAdv("choice.php"); // Final fight
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=nstower");

          if ((0,external_kolmafia_.closetAmount)(_this.seasoning) > 0) {
            (0,external_kolmafia_.takeCloset)(_this.seasoning, (0,external_kolmafia_.closetAmount)(_this.seasoning));
          }

          (0,external_kolmafia_.print)("Should be all done", "blue");

          printEndOfRun();
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestTowerKillWitch;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL13Tower.ts
function QuestL13Tower_typeof(obj) {"@babel/helpers - typeof";return QuestL13Tower_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL13Tower_typeof(obj);}function QuestL13Tower_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL13Tower_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL13Tower_toPropertyKey(descriptor.key), descriptor);}}function QuestL13Tower_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL13Tower_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL13Tower_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL13Tower_defineProperty(obj, key, value) {key = QuestL13Tower_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL13Tower_toPropertyKey(arg) {var key = QuestL13Tower_toPrimitive(arg, "string");return QuestL13Tower_typeof(key) === "symbol" ? key : String(key);}function QuestL13Tower_toPrimitive(input, hint) {if (QuestL13Tower_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL13Tower_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}














var QuestL13 = /*#__PURE__*/function () {function QuestL13() {QuestL13Tower_classCallCheck(this, QuestL13);QuestL13Tower_defineProperty(this, "sideQuests",




    [
    new QuestTowerKeys(),
    new QuestTowerContestants(),
    new QuestTowerMaze(),
    new QuestTowerWallSkin(),
    new QuestTowerWallMeat(),
    new QuestTowerWallBones(),
    new QuestTowerMirror(),
    new QuestTowerShadow(),
    new QuestTowerKillWitch()]);}QuestL13Tower_createClass(QuestL13, [{ key: "getLocations", value: function getLocations() {return [];} }, { key: "getChildren", value:


    function getChildren() {
      return this.sideQuests;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tower / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;

      // Unstarted = Obvious
      // started= We've visited the booth? Not sure whats up there.
      // Step1 = We're fighting the contestants
      // Step2 = We've defeated the contestants
      // Step3 = Just got sash
      // Step4 = We're going into the maze
      // Step4 = We're in the maze
      // Step5 = We left the maze
      // Step6 = We've used all our keys
      // Step7 = Just killed wall of skin
      // Step8 = Just killed wall of meat
      // Step9 = Just killed wall of bones
      // Step10 = Just killed the shadow
      // Step11 = Just shattered the mirror, or didn't
      // Step12 = We've advanced to the 3rd stage of the witch and if you see this, you lost and can now find the wand NC
      // Step13 = Just killed the witch
    } }, { key: "run", value:

    function run() {
      throw "Not supported";
    } }]);return QuestL13;}();
;// CONCATENATED MODULE: ./src/utils/GreyTrainset.ts



var TrainsetPiece;(function (TrainsetPiece) {TrainsetPiece["UNKNOWN"] = "";TrainsetPiece["EMPTY"] = "empty";TrainsetPiece["GAIN_MEAT"] = "meat_mine";TrainsetPiece["EFFECT_MP"] = "tower_fizzy";TrainsetPiece["GAIN_STATS"] = "viewing_platform";TrainsetPiece["HOT_RES_COLD_DMG"] = "tower_frozen";TrainsetPiece["STENCH_RES_SPOOKY_DMG"] = "spooky_graveyard";TrainsetPiece["SMUT_BRIDGE_OR_STATS"] = "logging_mill";TrainsetPiece["CANDY"] = "candy_factory";TrainsetPiece["DOUBLE_NEXT_STATION"] = "coal_hopper";TrainsetPiece["COLD_RES_STENCH_DMG"] = "tower_sewage";TrainsetPiece["SPOOKY_RES_SLEAZE_DMG"] = "oil_refinery";TrainsetPiece["SLEAZE_RES_HOT_DMG"] = "oil_bridge";TrainsetPiece["MORE_ML"] = "water_bridge";TrainsetPiece["MOXIE_STATS"] = "groin_silo";TrainsetPiece["RANDOM_BOOZE"] = "grain_silo";TrainsetPiece["MYS_STATS"] = "brain_silo";TrainsetPiece["MUS_STATS"] = "brawn_silo";TrainsetPiece["BUFF_FOOD_DROP"] = "prawn_silo";TrainsetPiece["DROP_LAST_FOOD_OR_RANDOM"] = "trackside_diner";TrainsetPiece["ORE"] = "ore_hopper";})(TrainsetPiece || (TrainsetPiece = {}));























var pieces = [
TrainsetPiece.EMPTY,
TrainsetPiece.GAIN_MEAT,
TrainsetPiece.EFFECT_MP,
TrainsetPiece.GAIN_STATS,
TrainsetPiece.HOT_RES_COLD_DMG,
TrainsetPiece.STENCH_RES_SPOOKY_DMG,
TrainsetPiece.SMUT_BRIDGE_OR_STATS,
TrainsetPiece.CANDY,
TrainsetPiece.DOUBLE_NEXT_STATION,
TrainsetPiece.COLD_RES_STENCH_DMG,
TrainsetPiece.UNKNOWN,
TrainsetPiece.SPOOKY_RES_SLEAZE_DMG,
TrainsetPiece.SLEAZE_RES_HOT_DMG,
TrainsetPiece.MORE_ML,
TrainsetPiece.MOXIE_STATS,
TrainsetPiece.RANDOM_BOOZE,
TrainsetPiece.MYS_STATS,
TrainsetPiece.MUS_STATS,
TrainsetPiece.BUFF_FOOD_DROP,
TrainsetPiece.DROP_LAST_FOOD_OR_RANDOM,
TrainsetPiece.ORE];


var trainsetEffects = new Map([
[TrainsetPiece.EFFECT_MP, external_kolmafia_.Effect.get("Carbonated")],
[TrainsetPiece.HOT_RES_COLD_DMG, external_kolmafia_.Effect.get("Frozen")],
[TrainsetPiece.STENCH_RES_SPOOKY_DMG, external_kolmafia_.Effect.get("Shivering Spine")],
[TrainsetPiece.COLD_RES_STENCH_DMG, external_kolmafia_.Effect.get("Hot Soupy Garbage")],
[TrainsetPiece.SLEAZE_RES_HOT_DMG, external_kolmafia_.Effect.get("Burningly Oiled")],
[TrainsetPiece.SPOOKY_RES_SLEAZE_DMG, external_kolmafia_.Effect.get("Spookily Greasy")],
[TrainsetPiece.MORE_ML, external_kolmafia_.Effect.get("Troubled Waters")],
[TrainsetPiece.BUFF_FOOD_DROP, external_kolmafia_.Effect.get("Craving Prawns")]]);

var trainsetEffectsDoubled = new Map([
[TrainsetPiece.EFFECT_MP, external_kolmafia_.Effect.get("Double Carbonated")],
[TrainsetPiece.HOT_RES_COLD_DMG, external_kolmafia_.Effect.get("Double Frozen")],
[TrainsetPiece.STENCH_RES_SPOOKY_DMG, external_kolmafia_.Effect.get("Doubly Shivering Spine")],
[TrainsetPiece.COLD_RES_STENCH_DMG, external_kolmafia_.Effect.get("Double Hot Soupy Garbage")],
[TrainsetPiece.SLEAZE_RES_HOT_DMG, external_kolmafia_.Effect.get("Doubly Burningly Oiled")],
[TrainsetPiece.SPOOKY_RES_SLEAZE_DMG, external_kolmafia_.Effect.get("Doubly Spookily Greasy")],
[TrainsetPiece.MORE_ML, external_kolmafia_.Effect.get("Doubly Troubled Waters")],
[TrainsetPiece.BUFF_FOOD_DROP, external_kolmafia_.Effect.get("Doubly Craving Prawns")]]);


var trainset = external_kolmafia_.Item.get("model train set");

function isTrainsetInUse() {
  if ((0,external_kolmafia_.getWorkshed)() == trainset) {
    return true;
  }

  if (
  (0,external_kolmafia_.getWorkshed)() != external_kolmafia_.Item.none ||
  GreySettings_GreySettings.greyDefaultWorkshed != "Model train set" ||
  (0,external_kolmafia_.itemAmount)(trainset) == 0)
  {
    return false;
  }

  return true;
}

function getTrainsetEffect(piece) {
  return trainsetEffects.get(piece);
}

function getDoubledTrainsetEffect(piece) {
  return trainsetEffectsDoubled.get(piece);
}

function isTrainsetPieceEffectActive(piece) {
  return (
    trainsetEffects.has(piece) &&
    haveEffect(trainsetEffects.get(piece)) > 0 ||
    trainsetEffectsDoubled.has(piece) &&
    haveEffect(trainsetEffectsDoubled.get(piece)) > 0);

}

function getPieceId(piece) {
  return Math.max(0, pieces.indexOf(piece));
}

function getTrainsetConfiguration() {
  return (0,external_kolmafia_.getProperty)("trainsetConfiguration").split(",");
}

function getTrainsetPositionsUntilConfigurable() {
  var pos = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("trainsetPosition"));
  var configured = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastTrainsetConfiguration"));
  var turnsSinceConfigured = pos - configured;

  return Math.max(0, 40 - turnsSinceConfigured);
}

function isTrainsetConfigurable() {
  return (
    (0,external_kolmafia_.getWorkshed)() == trainset && getTrainsetPositionsUntilConfigurable() <= 0);

}

/**
 * Where [0] is your next encounter, [1] is the one after, [7] is the one you just had
 */
function getTrainsetEncounters() {
  var pieces = getTrainsetConfiguration();
  var newPieces = [];
  var offset = toInt(getProperty("trainsetPosition")) % 8;

  for (var i = 0; i < 8; i++) {
    var newPos = (i + offset) % 8;

    newPieces[newPos] = pieces[i];
  }

  return newPieces;
}

var foodProperty = "lastFoodDropped";

function trackLastFood(page) {
  if (getWorkshed() != trainset) {
    if (getProperty(foodProperty) != "") {
      setProperty(foodProperty, "");
    }

    return;
  }

  if (page.includes("<b>Trackside Diner.</b>")) {
    if (getProperty(foodProperty) != "") {
      setProperty(foodProperty, "");
    }

    // Remove the part of the page that lists what food dropped
    page = page.substring(
    page.indexOf("</table>", page.indexOf("<b>Trackside Diner.</b>")));

  }

  if (!page.includes("<!--WINWINWIN-->")) {
    return;
  }

  var items = extractItems(page);
  var food = null;

  for (var _i = 0, _Object$keys = Object.keys(items); _i < _Object$keys.length; _i++) {var key = _Object$keys[_i];
    var item = Item.get(key);

    if (item.fullness <= 0) {
      continue;
    }

    food = item;
  }

  if (food == null) {
    return;
  }

  setProperty(foodProperty, toInt(food).toString());
}

function getTrainsetFoodQueued() {
  // TODO Returns the food that will drop when we hit diner
  if (!propertyExists(foodProperty)) {
    return null;
  }

  var prop = getProperty(foodProperty);

  if (prop == "") {
    return null;
  }

  return Item.get(toInt(prop));
}

function setTrainsetConfiguration(pieces) {
  (0,external_kolmafia_.visitUrl)("campground.php?action=workshed");

  var pieceIds = pieces.
  map(function (p) {return getPieceId(p);}).
  map(function (pieceId, index) {return "slot[".concat(index, "]=").concat(pieceId);});

  // whichchoice=1485&option=1&pwd=86af819be25f6ee16d9b3736e362ef2b&slot%5B0%5D=12&slot%5B1%5D=0&slot%5B2%5D=0&slot%5B3%5D=0&slot%5B4%5D=0&slot%5B5%5D=0&slot%5B6%5D=0&slot%5B7%5D=0
  // choice.php?forceoption=0&whichchoice=1485&option=1&pwd&slot[0]=0&slot[1]=0&slot[2]=0&slot[3]=0&slot[4]=0&slot[5]=0&slot[6]=0&slot[7]=0

  var url = "choice.php?forceoption=0&whichchoice=1485&option=1&pwd&".concat(pieceIds.join(
  "&"));


  (0,external_kolmafia_.visitUrl)(url, true);
  (0,external_kolmafia_.visitUrl)("main.php");

  var expected = pieces.join(",");

  if (expected != (0,external_kolmafia_.getProperty)("trainsetConfiguration")) {
    throw "Expected trainset configuration to have changed, expected \"".concat(expected, "\" but instead got ").concat((0,external_kolmafia_.getProperty)(
    "trainsetConfiguration"));

  }
}
;// CONCATENATED MODULE: ./src/quests/council/QuestL1Toot.ts
function QuestL1Toot_typeof(obj) {"@babel/helpers - typeof";return QuestL1Toot_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL1Toot_typeof(obj);}function QuestL1Toot_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL1Toot_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL1Toot_toPropertyKey(descriptor.key), descriptor);}}function QuestL1Toot_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL1Toot_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL1Toot_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL1Toot_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL1Toot_setPrototypeOf(subClass, superClass);}function QuestL1Toot_setPrototypeOf(o, p) {QuestL1Toot_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL1Toot_setPrototypeOf(o, p);}function QuestL1Toot_createSuper(Derived) {var hasNativeReflectConstruct = QuestL1Toot_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL1Toot_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL1Toot_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL1Toot_possibleConstructorReturn(this, result);};}function QuestL1Toot_possibleConstructorReturn(self, call) {if (call && (QuestL1Toot_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL1Toot_assertThisInitialized(self);}function QuestL1Toot_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL1Toot_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL1Toot_getPrototypeOf(o) {QuestL1Toot_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL1Toot_getPrototypeOf(o);}function QuestL1Toot_defineProperty(obj, key, value) {key = QuestL1Toot_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL1Toot_toPropertyKey(arg) {var key = QuestL1Toot_toPrimitive(arg, "string");return QuestL1Toot_typeof(key) === "symbol" ? key : String(key);}function QuestL1Toot_toPrimitive(input, hint) {if (QuestL1Toot_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL1Toot_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestL1Toot = /*#__PURE__*/function (_TaskInfo) {QuestL1Toot_inherits(QuestL1Toot, _TaskInfo);var _super = QuestL1Toot_createSuper(QuestL1Toot);function QuestL1Toot() {var _this;QuestL1Toot_classCallCheck(this, QuestL1Toot);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "purq",
    external_kolmafia_.Item.get("porquoise"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "bacon",
    external_kolmafia_.Item.get("baconstone"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "ham",
    external_kolmafia_.Item.get("hamethyst"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "loop",
    external_kolmafia_.Skill.get("Infinite Loop"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "sellGems", void 0);QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "paths", void 0);QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "boombox",



    external_kolmafia_.Item.get("SongBoom&trade; BoomBox"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "deck",
    external_kolmafia_.Item.get("Deck of Every Card"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "ring",
    external_kolmafia_.Item.get("Gold Wedding Ring"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "gold",
    external_kolmafia_.Item.get("1,970 Carat Gold"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "mickyCard",
    external_kolmafia_.Item.get("1952 Mickey Mantle card"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "autosells",
    [_this.ring, _this.gold, _this.mickyCard]);QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "letter",
    external_kolmafia_.Item.get("Letter from King Ralph XI"));QuestL1Toot_defineProperty(QuestL1Toot_assertThisInitialized(_this), "sack",
    external_kolmafia_.Item.get("pork elf goodies sack"));return _this;}QuestL1Toot_createClass(QuestL1Toot, [{ key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM05Toot") == "finished") {
        if ((0,external_kolmafia_.pullsRemaining)() == -1) {
          return QuestStatus.COMPLETED;
        }

        if ((0,external_kolmafia_.turnsPlayed)() > 50) {
          return QuestStatus.COMPLETED;
        }

        if (
        (0,external_kolmafia_.availableAmount)(this.letter) + (0,external_kolmafia_.availableAmount)(this.sack) == 0 && (
        (0,external_kolmafia_.myMeat)() >= 300 || (0,external_kolmafia_.haveSkill)(this.loop)))
        {
          return QuestStatus.COMPLETED;
        }
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];

      var hasEnoughMeat = false;

      if (isTrainsetInUse()) {
        hasEnoughMeat = true;
      }

      if (this.autosells.find(function (i) {return (0,external_kolmafia_.itemAmount)(i) > 0;})) {
        hasEnoughMeat = true;
      }

      if ((0,external_kolmafia_.myMeat)() >= 5000) {
        hasEnoughMeat = true;
      }

      if (
      (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("hasMaydayContract")) &&
      (0,external_kolmafia_.availableAmount)(this.boombox) > 0)
      {
        hasEnoughMeat = true;
      }

      if (hasEnoughMeat) {
        this.paths.push(new PossiblePath(0));
        return;
      }

      if (assumeUnstarted || !(0,external_kolmafia_.getProperty)("_deckCardsSeen").includes("Mickey")) {
        this.paths.push(
        new PossiblePath(0).add(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT));

      }

      if (!assumeUnstarted && GreySettings_GreySettings.isHardcoreMode()) {
        this.paths.push(this.sellGems = new PossiblePath(20));
      }

      if (
      assumeUnstarted && (0,external_kolmafia_.availableAmount)(this.ring) > 0 ||
      (0,external_kolmafia_.storageAmount)(this.ring) > 0)
      {
        this.paths.push(new PossiblePath(0).addPull(this.ring));
      }

      this.paths.push(new PossiblePath(0).addPull(this.gold).addMeat(10000));
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          if ((0,external_kolmafia_.availableAmount)(_this2.letter) == 0) {
            (0,external_kolmafia_.council)();
            (0,external_kolmafia_.visitUrl)("tutorial.php?action=toot");
          }

          if ((0,external_kolmafia_.availableAmount)(_this2.letter) > 0) {
            (0,external_kolmafia_.use)(_this2.letter);
          }

          if ((0,external_kolmafia_.availableAmount)(_this2.sack) > 0) {
            (0,external_kolmafia_.use)(_this2.sack);
          }

          if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
            GreyPulls.tryPull(path.pulls[0]);
          } else if (path === _this2.sellGems) {
            for (var _i = 0, _arr = [_this2.purq, _this2.bacon, _this2.ham]; _i < _arr.length; _i++) {var i = _arr[_i];
              if ((0,external_kolmafia_.availableAmount)(i) > 0) {
                (0,external_kolmafia_.autosell)(i, (0,external_kolmafia_.availableAmount)(i));
              }
            }
          } else if (path.canUse(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT)) {
            path.
            getResource(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT).
            pickCard("Mickey");

            if ((0,external_kolmafia_.availableAmount)(_this2.mickyCard) > 0) {
              path.addUsed(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT);
              (0,external_kolmafia_.autosell)(_this2.mickyCard, 1);
            } else {
              throw "Expected to have sold a " + _this2.mickyCard;
            }
          }

          _this2.autosells.
          filter(function (i) {return (0,external_kolmafia_.itemAmount)(i) > 0;}).
          forEach(function (i) {return (0,external_kolmafia_.autosell)(i, (0,external_kolmafia_.itemAmount)(i));});

          // If we're poor, sell one of the gems for some starting meat
          if ((0,external_kolmafia_.myMeat)() < 500) {
            // Sell one of the gems, with purq last
            for (var _i2 = 0, _arr2 = [_this2.bacon, _this2.ham, _this2.purq]; _i2 < _arr2.length; _i2++) {var item = _arr2[_i2];
              if ((0,external_kolmafia_.itemAmount)(item) == 0) {
                continue;
              }

              (0,external_kolmafia_.autosell)(item, 1);
              break;
            }
          }

          (0,external_kolmafia_.council)();
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Toot";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL1Toot;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/QuestL2Larva.ts
function QuestL2Larva_typeof(obj) {"@babel/helpers - typeof";return QuestL2Larva_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL2Larva_typeof(obj);}function QuestL2Larva_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL2Larva_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL2Larva_toPropertyKey(descriptor.key), descriptor);}}function QuestL2Larva_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL2Larva_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL2Larva_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL2Larva_defineProperty(obj, key, value) {key = QuestL2Larva_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL2Larva_toPropertyKey(arg) {var key = QuestL2Larva_toPrimitive(arg, "string");return QuestL2Larva_typeof(key) === "symbol" ? key : String(key);}function QuestL2Larva_toPrimitive(input, hint) {if (QuestL2Larva_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL2Larva_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL2SpookyLarva = /*#__PURE__*/function () {function QuestL2SpookyLarva() {QuestL2Larva_classCallCheck(this, QuestL2SpookyLarva);QuestL2Larva_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Spooky Forest"));QuestL2Larva_defineProperty(this, "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL2Larva_defineProperty(this, "headless",
    external_kolmafia_.Monster.get("The Headless Horseman"));QuestL2Larva_defineProperty(this, "toAbsorb", void 0);}QuestL2Larva_createClass(QuestL2SpookyLarva, [{ key: "shouldWearLatte", value:


    function shouldWearLatte() {
      return (
        (0,external_kolmafia_.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.FAMILIAR_WEIGHT));

    } }, { key: "level", value:

    function level() {
      return 2;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Larva";
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL02Larva");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (isGhostBustingTime(this.location)) {
        if (shouldAvoidGhosts()) {
          return QuestStatus.NOT_READY;
        }
      } else if (this.isDelayBurning()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      } else if (
      this.location.turnsSpent >= 5 &&
      !hasNonCombatSkillsReady(false) &&
      (0,external_kolmafia_.myLevel)() >= 5)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "isDelayBurning", value:

    function isDelayBurning() {
      return this.location.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = isGhostBustingTime(this.location) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      if (this.shouldWearLatte()) {
        outfit.addWeight(this.latte);
      }

      if (this.location.turnsSpent >= 5) {
        outfit.setNoCombat();
      }

      return {
        location: isGhostBustingTime(this.location) ? null : this.location,
        outfit: outfit,
        forcedFight: isGhostBustingTime(this.location) ?
        [0, this.headless] :
        null,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();
          var settings = new AdventureSettings();

          props.setChoice(502, 2);
          props.setChoice(505, 1);

          if (isGhostBustingTime(_this.location)) {
            settings.setStartOfFightMacro(getGhostBustingMacro());
          } else if (!_this.shouldWearLatte() && _this.toAbsorb.length == 0) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            } else if (hasNonCombatSkillsReady()) {
              DelayBurners.tryReplaceCombats();
            }
          }

          if (
          _this.toAbsorb.length == 0 &&
          DelayBurners.isTryingForDupeableGoblin())
          {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          try {
            greyAdv(_this.location, outfit, settings);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("mosquito larva")) > 0) {
            (0,external_kolmafia_.council)();
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return !this.mustBeDone();
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return isGhostBustingTime(this.location);
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL2SpookyLarva;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL3Tavern.ts
function QuestL3Tavern_typeof(obj) {"@babel/helpers - typeof";return QuestL3Tavern_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL3Tavern_typeof(obj);}function QuestL3Tavern_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL3Tavern_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL3Tavern_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL3Tavern_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL3Tavern_arrayLikeToArray(o, minLen);}function QuestL3Tavern_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL3Tavern_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL3Tavern_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL3Tavern_toPropertyKey(descriptor.key), descriptor);}}function QuestL3Tavern_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL3Tavern_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL3Tavern_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL3Tavern_defineProperty(obj, key, value) {key = QuestL3Tavern_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL3Tavern_toPropertyKey(arg) {var key = QuestL3Tavern_toPrimitive(arg, "string");return QuestL3Tavern_typeof(key) === "symbol" ? key : String(key);}function QuestL3Tavern_toPrimitive(input, hint) {if (QuestL3Tavern_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL3Tavern_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL3Tavern = /*#__PURE__*/function () {function QuestL3Tavern() {QuestL3Tavern_classCallCheck(this, QuestL3Tavern);QuestL3Tavern_defineProperty(this, "layout",
    new TavernLayout());QuestL3Tavern_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Typical Tavern Cellar"));QuestL3Tavern_defineProperty(this, "tangle",
    external_kolmafia_.Item.get("tangle of rat tails"));QuestL3Tavern_defineProperty(this, "teleportis",
    external_kolmafia_.Effect.get("Teleportitis"));QuestL3Tavern_defineProperty(this, "umbrella",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL3Tavern_defineProperty(this, "king",
    external_kolmafia_.Monster.get("Drunken Rat King"));}QuestL3Tavern_createClass(QuestL3Tavern, [{ key: "level", value:

    function level() {
      return 3;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Tavern";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL03Rat");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.getProperty)("questL02Larva") != "finished" ||
      (0,external_kolmafia_.myLevel)() < 13 && (0,external_kolmafia_.haveEffect)(this.teleportis) == 0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.myLevel)() < 18) {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_.getProperty)("middleChamberUnlock") == "true") {
        return QuestStatus.READY;
      }

      // Always put this off as long as possible, aka until every quest wants to delay
      return QuestStatus.READY;
    } }, { key: "free", value:

    function free() {
      return getQuestStatus("questL03Rat") > 1;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (getQuestStatus("questL03Rat") > 1) {
        return true;
      }

      if (
      (0,external_kolmafia_.haveEffect)(this.teleportis) == 0 ||
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastPlusSignUnlock")) != (0,external_kolmafia_.myAscensions)())
      {
        return false;
      }

      return true;
    } }, { key: "run", value:

    function run() {var _this = this;
      var advTime = getQuestStatus("questL03Rat") == 1;

      var outfit;

      if (!advTime) {
        outfit = GreyOutfit.IGNORE_OUTFIT;
      } else {
        outfit = new GreyOutfit();

        if ((0,external_kolmafia_.getProperty)("pyramidBombUsed") != "true") {
          outfit.setPlusCombat();
          outfit.umbrellaSetting = UmbrellaState.MONSTER_LEVEL;
          outfit.addWeight("ML", 10);
          outfit.addExtra("-offhand");

          // Boost our damage
          if ((0,external_kolmafia_.myLevel)() < 16) {
            outfit.addWeight("mox");
          }
        } else {
          outfit.setNoCombat();
          outfit.
          addWeight("hot dmg").
          addWeight("hot spell dmg").
          addWeight("cold dmg").
          addWeight("cold spell dmg").
          addWeight("spooky dmg").
          addWeight("spooky spell dmg").
          addWeight("stench dmg").
          addWeight("stench spell dmg");
        }
      }

      return {
        location: this.location,
        outfit: outfit,
        freeRun: function freeRun(monster) {return monster != _this.king;},
        run: function run() {
          if (!advTime) {
            (0,external_kolmafia_.visitUrl)("tavern.php?place=barkeep");
            (0,external_kolmafia_.visitUrl)("cellar.php");
            (0,external_kolmafia_.council)();
            return;
          }

          var props = new Properties_PropertyManager();
          var eles = [
          ["Cold", 513],
          ["Hot", 496],
          ["Spooky", 515],
          ["Stench", 514]];


          for (var _i = 0, _eles = eles; _i < _eles.length; _i++) {var e = _eles[_i];
            var choice = (0,external_kolmafia_.numericModifier)(e[0] + " Damage") >= 20 ? 2 : 1;

            props.setChoice(e[1], choice);
          }

          props.setChoice(509, 1);
          props.setChoice(510, 1);

          try {
            if (
            outfit.umbrellaSetting == UmbrellaState.MONSTER_LEVEL &&
            (0,external_kolmafia_.availableAmount)(_this.umbrella) > 0)
            {
              setUmbrella(UmbrellaState.MONSTER_LEVEL);
              (0,external_kolmafia_.equip)(_this.umbrella);
            }

            var layout = (0,external_kolmafia_.getProperty)("tavernLayout");
            var turns = (0,external_kolmafia_.turnsPlayed)();

            (0,external_kolmafia_.changeMcd)(10);
            greyAdv(_this.layout.getLocation(), outfit);
            (0,external_kolmafia_.changeMcd)(0);

            if (getQuestStatus("questL03Rat") != 1 && (0,external_kolmafia_.turnsPlayed)() == turns) {
              (0,external_kolmafia_.visitUrl)("cellar.php");

              if (layout == (0,external_kolmafia_.getProperty)("tavernLayout")) {
                (0,external_kolmafia_.print)(
                "Something went wrong with Tavern, resetting the layout. You may see a bunch of attempts to adventure that do nothing.",
                "blue");

                (0,external_kolmafia_.setProperty)("tavernLayout", "0000000000000000000000000");
              }
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL3Tavern;}();var


TavernLayout = /*#__PURE__*/function () {function TavernLayout() {QuestL3Tavern_classCallCheck(this, TavernLayout);QuestL3Tavern_defineProperty(this, "locations",
    [3, 2, 1, 0, 5, 10, 15, 20, 16, 21]);}QuestL3Tavern_createClass(TavernLayout, [{ key: "getLocation", value:

    function getLocation() {
      var prop = (0,external_kolmafia_.getProperty)("tavernLayout");

      if (prop == "0000000000000000000000000") {
        (0,external_kolmafia_.visitUrl)("cellar.php");
      }var _iterator = QuestL3Tavern_createForOfIteratorHelper(

        this.locations),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if (prop.charAt(i) != "0") {
            continue;
          }

          return "cellar.php?action=explore&whichspot=" + (i + 1);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }]);return TavernLayout;}();
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsBoss.ts
function QuestL4BatsBoss_typeof(obj) {"@babel/helpers - typeof";return QuestL4BatsBoss_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL4BatsBoss_typeof(obj);}function QuestL4BatsBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL4BatsBoss_toPropertyKey(descriptor.key), descriptor);}}function QuestL4BatsBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsBoss_defineProperty(obj, key, value) {key = QuestL4BatsBoss_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL4BatsBoss_toPropertyKey(arg) {var key = QuestL4BatsBoss_toPrimitive(arg, "string");return QuestL4BatsBoss_typeof(key) === "symbol" ? key : String(key);}function QuestL4BatsBoss_toPrimitive(input, hint) {if (QuestL4BatsBoss_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL4BatsBoss_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL4BatsBoss = /*#__PURE__*/function () {function QuestL4BatsBoss() {QuestL4BatsBoss_classCallCheck(this, QuestL4BatsBoss);QuestL4BatsBoss_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Boss Bat's Lair"));QuestL4BatsBoss_defineProperty(this, "camera",
    external_kolmafia_.Item.get("Backup Camera"));QuestL4BatsBoss_defineProperty(this, "guard",
    external_kolmafia_.Monster.get("Beefy bodyguard bat"));}QuestL4BatsBoss_createClass(QuestL4BatsBoss, [{ key: "getId", value:

    function getId() {
      return "Council / Bats / Boss";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "shouldWaitForLobsters", value:

    function shouldWaitForLobsters() {
      return (
        (0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") == "none" &&
        (0,external_kolmafia_.availableAmount)(this.camera) > 0 &&
        getBackupsRemaining() > 0);

    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL04Bat");

      if (status < 3 || this.shouldWaitForLobsters()) {
        return QuestStatus.NOT_READY;
      }

      if (status == 100) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.meatDropWeight = 2;
      outfit.addWeight("Stench Res", 100, 1, 1);

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun(monster) {return (0,external_kolmafia_.myMeat)() > 5000 && monster == _this.guard;},
        run: function run() {
          greyAdv(_this.loc, outfit);

          if ((0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Grey Noise"))) {
            (0,external_kolmafia_.council)();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL4BatsBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsCenter.ts
function QuestL4BatsCenter_typeof(obj) {"@babel/helpers - typeof";return QuestL4BatsCenter_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL4BatsCenter_typeof(obj);}function QuestL4BatsCenter_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsCenter_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL4BatsCenter_toPropertyKey(descriptor.key), descriptor);}}function QuestL4BatsCenter_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsCenter_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsCenter_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsCenter_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL4BatsCenter_setPrototypeOf(subClass, superClass);}function QuestL4BatsCenter_setPrototypeOf(o, p) {QuestL4BatsCenter_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL4BatsCenter_setPrototypeOf(o, p);}function QuestL4BatsCenter_createSuper(Derived) {var hasNativeReflectConstruct = QuestL4BatsCenter_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL4BatsCenter_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL4BatsCenter_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL4BatsCenter_possibleConstructorReturn(this, result);};}function QuestL4BatsCenter_possibleConstructorReturn(self, call) {if (call && (QuestL4BatsCenter_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL4BatsCenter_assertThisInitialized(self);}function QuestL4BatsCenter_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL4BatsCenter_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL4BatsCenter_getPrototypeOf(o) {QuestL4BatsCenter_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL4BatsCenter_getPrototypeOf(o);}function QuestL4BatsCenter_defineProperty(obj, key, value) {key = QuestL4BatsCenter_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL4BatsCenter_toPropertyKey(arg) {var key = QuestL4BatsCenter_toPrimitive(arg, "string");return QuestL4BatsCenter_typeof(key) === "symbol" ? key : String(key);}function QuestL4BatsCenter_toPrimitive(input, hint) {if (QuestL4BatsCenter_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL4BatsCenter_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL4BatsCenter = /*#__PURE__*/function (_TaskInfo) {QuestL4BatsCenter_inherits(QuestL4BatsCenter, _TaskInfo);var _super = QuestL4BatsCenter_createSuper(QuestL4BatsCenter);function QuestL4BatsCenter() {var _this;QuestL4BatsCenter_classCallCheck(this, QuestL4BatsCenter);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("Guano Junction"));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "sonar",
    external_kolmafia_.Item.get("sonar-in-a-biscuit"));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "paths",
    []);QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "vampBat",
    external_kolmafia_.Monster.get("vampire bat"));QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "hasStenchRes",
    false);QuestL4BatsCenter_defineProperty(QuestL4BatsCenter_assertThisInitialized(_this), "lastStenchCheck", void 0);return _this;}QuestL4BatsCenter_createClass(QuestL4BatsCenter, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [];

      this.paths.push(new PossiblePath(3, Math.max(3, 8 - this.loc.turnsSpent)));

      if (
      assumeUnstarted ||
      (0,external_kolmafia_.getProperty)("fireExtinguisherBatHoleUsed") != "true")
      {
        this.paths.push(
        new PossiblePath(1).add(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE));

      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Bats / UnlockLeft";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status(path) {
      var status = getQuestStatus("questL04Bat");

      if (status < 0 || path == null) {
        return QuestStatus.NOT_READY;
      }

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!this.hasStenchRes) {
        if (
        this.lastStenchCheck == null ||
        this.lastStenchCheck + 10 < (0,external_kolmafia_.turnsPlayed)())
        {
          this.lastStenchCheck = (0,external_kolmafia_.turnsPlayed)();

          var maximizerString = "stench res -tie";

          if (path.canUse(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE)) {
            maximizerString += " +equip industrial fire extinguisher";
          }

          (0,external_kolmafia_.maximize)(maximizerString, true);

          this.hasStenchRes =
          (0,external_kolmafia_.numericModifier)("Generated:_spec", "Stench Resistance") > 0;
        }

        if (!this.hasStenchRes) {
          return QuestStatus.NOT_READY;
        }
      }

      if ((0,external_kolmafia_.familiarWeight)(this.goose) >= 6) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = new GreyOutfit();

      var resource = path.getResource(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE);

      if (resource != null) {
        resource.prepare(outfit);
      } else {
        outfit.setItemDrops();
      }

      outfit.addWeight("Stench Res", 100, 1, 1);

      return {
        outfit: outfit,
        location: this.loc,
        run: function run() {
          var settings = new AdventureSettings();

          if (resource != null) {
            settings.setStartOfFightMacro(
            resource.macro().trySkill(external_kolmafia_.Skill.get("Infinite Loop")).attack());

          }

          greyAdv(_this2.loc, outfit, settings);

          _this2.doSonars();
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "doSonars", value:

    function doSonars() {
      while (
      (0,external_kolmafia_.availableAmount)(this.sonar) > 0 &&
      getQuestStatus("questL04Bat") < 3)
      {
        (0,external_kolmafia_.use)(this.sonar);
      }
    } }]);return QuestL4BatsCenter;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsLeft.ts
function QuestL4BatsLeft_typeof(obj) {"@babel/helpers - typeof";return QuestL4BatsLeft_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL4BatsLeft_typeof(obj);}function QuestL4BatsLeft_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsLeft_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL4BatsLeft_toPropertyKey(descriptor.key), descriptor);}}function QuestL4BatsLeft_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsLeft_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsLeft_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsLeft_defineProperty(obj, key, value) {key = QuestL4BatsLeft_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL4BatsLeft_toPropertyKey(arg) {var key = QuestL4BatsLeft_toPrimitive(arg, "string");return QuestL4BatsLeft_typeof(key) === "symbol" ? key : String(key);}function QuestL4BatsLeft_toPrimitive(input, hint) {if (QuestL4BatsLeft_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL4BatsLeft_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestL4BatsLeft = /*#__PURE__*/function () {function QuestL4BatsLeft() {QuestL4BatsLeft_classCallCheck(this, QuestL4BatsLeft);QuestL4BatsLeft_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Batrat and Ratbat Burrow"));}QuestL4BatsLeft_createClass(QuestL4BatsLeft, [{ key: "getId", value:

    function getId() {
      return "Council / Bats / UnlockRight";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL04Bat");

      // If right has been unlocked
      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      var statusShen = getQuestStatus("questL11Shen");

      if (statusShen <= 1) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        outfit: new GreyOutfit().addWeight("Stench Res", 100, 1, 1),
        location: this.location,
        run: function run() {
          greyAdv(_this.location);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL4BatsLeft;}();
;// CONCATENATED MODULE: ./src/quests/council/bats/QuestL4BatsRight.ts
function QuestL4BatsRight_typeof(obj) {"@babel/helpers - typeof";return QuestL4BatsRight_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL4BatsRight_typeof(obj);}function QuestL4BatsRight_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4BatsRight_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL4BatsRight_toPropertyKey(descriptor.key), descriptor);}}function QuestL4BatsRight_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4BatsRight_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4BatsRight_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4BatsRight_defineProperty(obj, key, value) {key = QuestL4BatsRight_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL4BatsRight_toPropertyKey(arg) {var key = QuestL4BatsRight_toPrimitive(arg, "string");return QuestL4BatsRight_typeof(key) === "symbol" ? key : String(key);}function QuestL4BatsRight_toPrimitive(input, hint) {if (QuestL4BatsRight_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL4BatsRight_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL4BatsRight = /*#__PURE__*/function () {function QuestL4BatsRight() {QuestL4BatsRight_classCallCheck(this, QuestL4BatsRight);QuestL4BatsRight_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Beanbat Chamber"));QuestL4BatsRight_defineProperty(this, "bean",
    external_kolmafia_.Item.get("Enchanted Bean"));QuestL4BatsRight_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("beanbat"));QuestL4BatsRight_defineProperty(this, "toAbsorb", void 0);}QuestL4BatsRight_createClass(QuestL4BatsRight, [{ key: "getId", value:


    function getId() {
      return "Council / Bats / UnlockBoss";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "needsBean", value:

    function needsBean() {
      return (
        (0,external_kolmafia_.availableAmount)(this.bean) == 0 && getQuestStatus("questL10Garbage") <= 0);

    } }, { key: "status", value:

    function status() {
      if (getQuestStatus("questL04Bat") > 2 && !this.needsBean()) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL04Bat") < 2) {
        return QuestStatus.NOT_READY;
      }

      if (
      this.toAbsorb.length == 0 &&
      (0,external_kolmafia_.getProperty)("autumnatonQuestLocation") == this.loc.toString() &&
      currentPredictions().get(this.loc) != this.monster)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setItemDrops();
      outfit.addWeight("Stench Res", 100, 1, 1);

      return {
        location: this.loc,
        outfit: outfit,
        orbs: this.needsBean() ? [this.monster] : null,
        mayFreeRun: getQuestStatus("questL04Bat") > 2,
        freeRun: function freeRun(monster) {return (
            getQuestStatus("questL04Bat") > 2 && (
            monster != _this.monster || !_this.needsBean()));},
        run: function run() {
          greyAdv(_this.loc, outfit);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return QuestL4BatsRight;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL4Bats.ts
function QuestL4Bats_typeof(obj) {"@babel/helpers - typeof";return QuestL4Bats_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL4Bats_typeof(obj);}function QuestL4Bats_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL4Bats_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL4Bats_toPropertyKey(descriptor.key), descriptor);}}function QuestL4Bats_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL4Bats_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL4Bats_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL4Bats_defineProperty(obj, key, value) {key = QuestL4Bats_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL4Bats_toPropertyKey(arg) {var key = QuestL4Bats_toPrimitive(arg, "string");return QuestL4Bats_typeof(key) === "symbol" ? key : String(key);}function QuestL4Bats_toPrimitive(input, hint) {if (QuestL4Bats_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL4Bats_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL4Bats = /*#__PURE__*/function () {



  function QuestL4Bats() {QuestL4Bats_classCallCheck(this, QuestL4Bats);QuestL4Bats_defineProperty(this, "sonar", external_kolmafia_.Item.get("sonar-in-a-biscuit"));QuestL4Bats_defineProperty(this, "children", []);
    this.children.push(new QuestL4BatsCenter());
    this.children.push(new QuestL4BatsLeft());
    this.children.push(new QuestL4BatsRight());
    this.children.push(new QuestL4BatsBoss());
  }QuestL4Bats_createClass(QuestL4Bats, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL04Bat");

      if (status >= 3) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || (0,external_kolmafia_.availableAmount)(this.sonar) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          while (
          (0,external_kolmafia_.availableAmount)(_this.sonar) > 0 &&
          getQuestStatus("questL04Bat") < 3)
          {
            (0,external_kolmafia_.use)(_this.sonar);
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Bats / Sonars";
    } }]);return QuestL4Bats;}();
;// CONCATENATED MODULE: ./src/quests/council/goblins/QuestL5GoblinOutskirts.ts
function QuestL5GoblinOutskirts_typeof(obj) {"@babel/helpers - typeof";return QuestL5GoblinOutskirts_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL5GoblinOutskirts_typeof(obj);}function QuestL5GoblinOutskirts_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL5GoblinOutskirts_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL5GoblinOutskirts_toPropertyKey(descriptor.key), descriptor);}}function QuestL5GoblinOutskirts_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL5GoblinOutskirts_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL5GoblinOutskirts_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL5GoblinOutskirts_defineProperty(obj, key, value) {key = QuestL5GoblinOutskirts_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL5GoblinOutskirts_toPropertyKey(arg) {var key = QuestL5GoblinOutskirts_toPrimitive(arg, "string");return QuestL5GoblinOutskirts_typeof(key) === "symbol" ? key : String(key);}function QuestL5GoblinOutskirts_toPrimitive(input, hint) {if (QuestL5GoblinOutskirts_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL5GoblinOutskirts_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL5GoblinOutskirts = /*#__PURE__*/function () {function QuestL5GoblinOutskirts() {QuestL5GoblinOutskirts_classCallCheck(this, QuestL5GoblinOutskirts);QuestL5GoblinOutskirts_defineProperty(this, "map",
    external_kolmafia_.Item.get("Cobb's Knob map"));QuestL5GoblinOutskirts_defineProperty(this, "key",
    external_kolmafia_.Item.get("knob goblin encryption key"));QuestL5GoblinOutskirts_defineProperty(this, "location",
    external_kolmafia_.Location.get("the outskirts of cobb's knob"));}QuestL5GoblinOutskirts_createClass(QuestL5GoblinOutskirts, [{ key: "getId", value:

    function getId() {
      return "Council / Goblins / Outskirts";
    } }, { key: "level", value:

    function level() {
      return this.location.turnsSpent < 10 ? 4 : 5;
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      return (
        getQuestStatus("questL05Goblin") == 0 &&
        (0,external_kolmafia_.itemAmount)(this.map) > 0 &&
        (0,external_kolmafia_.itemAmount)(this.key) > 0);

    } }, { key: "free", value:

    function free() {
      return this.mustBeDone();
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return true;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL05Goblin");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (this.location.turnsSpent < 10) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: this.location,
        freeRun: function freeRun() {return true;},
        run: function run() {
          if ((0,external_kolmafia_.availableAmount)(_this.map) > 0 && (0,external_kolmafia_.availableAmount)(_this.key)) {
            (0,external_kolmafia_.use)(_this.map);
          } else {
            var ready = DelayBurners.getReadyDelayBurner();

            if (ready != null) {
              ready.doFightSetup();
            } else {
              DelayBurners.tryReplaceCombats();
            }

            var props = new Properties_PropertyManager();
            props.setChoice(113, 2);
            props.setChoice(111, 3);
            props.setChoice(118, 2);

            try {
              greyAdv(_this.location);
            } finally {
              props.resetAll();
            }
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestL5GoblinOutskirts;}();
;// CONCATENATED MODULE: ./src/quests/council/goblins/QuestL5GoblinHarem.ts
function QuestL5GoblinHarem_typeof(obj) {"@babel/helpers - typeof";return QuestL5GoblinHarem_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL5GoblinHarem_typeof(obj);}function QuestL5GoblinHarem_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL5GoblinHarem_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL5GoblinHarem_toConsumableArray(arr) {return QuestL5GoblinHarem_arrayWithoutHoles(arr) || QuestL5GoblinHarem_iterableToArray(arr) || QuestL5GoblinHarem_unsupportedIterableToArray(arr) || QuestL5GoblinHarem_nonIterableSpread();}function QuestL5GoblinHarem_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL5GoblinHarem_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL5GoblinHarem_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL5GoblinHarem_arrayLikeToArray(o, minLen);}function QuestL5GoblinHarem_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestL5GoblinHarem_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestL5GoblinHarem_arrayLikeToArray(arr);}function QuestL5GoblinHarem_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL5GoblinHarem_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL5GoblinHarem_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL5GoblinHarem_toPropertyKey(descriptor.key), descriptor);}}function QuestL5GoblinHarem_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL5GoblinHarem_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL5GoblinHarem_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL5GoblinHarem_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL5GoblinHarem_setPrototypeOf(subClass, superClass);}function QuestL5GoblinHarem_setPrototypeOf(o, p) {QuestL5GoblinHarem_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL5GoblinHarem_setPrototypeOf(o, p);}function QuestL5GoblinHarem_createSuper(Derived) {var hasNativeReflectConstruct = QuestL5GoblinHarem_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL5GoblinHarem_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL5GoblinHarem_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL5GoblinHarem_possibleConstructorReturn(this, result);};}function QuestL5GoblinHarem_possibleConstructorReturn(self, call) {if (call && (QuestL5GoblinHarem_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL5GoblinHarem_assertThisInitialized(self);}function QuestL5GoblinHarem_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL5GoblinHarem_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL5GoblinHarem_getPrototypeOf(o) {QuestL5GoblinHarem_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL5GoblinHarem_getPrototypeOf(o);}function QuestL5GoblinHarem_defineProperty(obj, key, value) {key = QuestL5GoblinHarem_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL5GoblinHarem_toPropertyKey(arg) {var key = QuestL5GoblinHarem_toPrimitive(arg, "string");return QuestL5GoblinHarem_typeof(key) === "symbol" ? key : String(key);}function QuestL5GoblinHarem_toPrimitive(input, hint) {if (QuestL5GoblinHarem_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL5GoblinHarem_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL5GoblinHarem = /*#__PURE__*/function (_TaskInfo) {QuestL5GoblinHarem_inherits(QuestL5GoblinHarem, _TaskInfo);var _super = QuestL5GoblinHarem_createSuper(QuestL5GoblinHarem);function QuestL5GoblinHarem() {var _this;QuestL5GoblinHarem_classCallCheck(this, QuestL5GoblinHarem);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "harem",
    external_kolmafia_.Location.get("Cobb's Knob Harem"));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "toAbsorb", void 0);QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "haremGirl",


    external_kolmafia_.Monster.get("Knob Goblin Harem Girl"));QuestL5GoblinHarem_defineProperty(QuestL5GoblinHarem_assertThisInitialized(_this), "paths", void 0);return _this;}QuestL5GoblinHarem_createClass(QuestL5GoblinHarem, [{ key: "createPaths", value:

    function createPaths() {
      this.paths = [
      new PossiblePath(0).add(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE),
      new PossiblePath(8, 12),
      new PossiblePath(2, 5).add(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY)];

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Goblins / HaremOutfit";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status(path) {
      if (
      (0,external_kolmafia_.outfitPieces)("knob Goblin Harem Girl Disguise").find(
      function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;}) ==
      null)
      {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL05Goblin");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1) {
        return QuestStatus.COMPLETED;
      }

      if (!canGreyAdventure(this.harem)) {
        return QuestStatus.NOT_READY;
      }

      if (
      path != null &&
      path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) &&
      !path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).ready())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = new GreyOutfit();
      var resource = path.getResource(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE);

      if (resource == null) {
        resource = path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);
      }

      if (resource != null) {
        resource.prepare(outfit);
      } else {
        outfit.setItemDrops();
      }

      var pred = currentPredictions().get(this.harem);

      return {
        location: this.harem,
        outfit: outfit,
        orbs:
        (pred == null || !this.toAbsorb.includes(pred)) &&
        path.canUse(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE) ?
        null : [
        this.haremGirl].concat(QuestL5GoblinHarem_toConsumableArray(this.toAbsorb)),
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return monster != _this2.haremGirl;},
        run: function run() {
          // When we have access to the harem, blast it down
          var macro = new MacroBuilder/* Macro */.LE();
          var props = new Properties_PropertyManager();

          try {
            if (resource != null) {
              resource.prepare(null, props);

              if (resource.type == ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE) {
                macro = resource.macro();

                // If its a monster we want to absorb, don't blast it down
                var _iterator = QuestL5GoblinHarem_createForOfIteratorHelper(_this2.toAbsorb),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var absorb = _step.value;
                    macro = MacroBuilder/* Macro.ifNot_ */.LE.ifNot_(absorb, macro);
                  }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

                macro = MacroBuilder/* Macro.ifNot_ */.LE.ifNot_(external_kolmafia_.Monster.get("Sausage Goblin"), macro);
              } else if (resource.type == ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) {
                macro = MacroBuilder/* Macro.if_ */.LE.if_(_this2.haremGirl, resource.macro());
              }
            }

            greyAdv(
            _this2.harem,
            outfit,
            new AdventureSettings().
            setStartOfFightMacro(macro).
            addNoBanish(_this2.haremGirl));

          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.harem];
    } }]);return QuestL5GoblinHarem;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/QuestL5Goblins.ts
function QuestL5Goblins_typeof(obj) {"@babel/helpers - typeof";return QuestL5Goblins_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL5Goblins_typeof(obj);}function QuestL5Goblins_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL5Goblins_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL5Goblins_toPropertyKey(descriptor.key), descriptor);}}function QuestL5Goblins_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL5Goblins_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL5Goblins_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL5Goblins_defineProperty(obj, key, value) {key = QuestL5Goblins_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL5Goblins_toPropertyKey(arg) {var key = QuestL5Goblins_toPrimitive(arg, "string");return QuestL5Goblins_typeof(key) === "symbol" ? key : String(key);}function QuestL5Goblins_toPrimitive(input, hint) {if (QuestL5Goblins_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL5Goblins_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL5Goblin = /*#__PURE__*/function () {function QuestL5Goblin() {QuestL5Goblins_classCallCheck(this, QuestL5Goblin);QuestL5Goblins_defineProperty(this, "perfume",
    external_kolmafia_.Item.get("knob goblin perfume"));QuestL5Goblins_defineProperty(this, "effect",
    external_kolmafia_.Effect.get("knob Goblin Perfume"));QuestL5Goblins_defineProperty(this, "harem",
    external_kolmafia_.Location.get("Cobb's Knob Harem"));QuestL5Goblins_defineProperty(this, "outskirts",
    new QuestL5GoblinOutskirts());QuestL5Goblins_defineProperty(this, "qHarem",
    new QuestL5GoblinHarem());}QuestL5Goblins_createClass(QuestL5Goblin, [{ key: "getId", value:

    function getId() {
      return "Council / Goblins / King";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "getChildren", value:

    function getChildren() {
      return [this.outskirts, this.qHarem];
    } }, { key: "getLocations", value:

    function getLocations() {
      return [external_kolmafia_.Location.get("Throne Room")];
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL05Goblin");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (status != "step1" || !(0,external_kolmafia_.haveOutfit)("knob Goblin Harem Girl Disguise")) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().
      addWeight(external_kolmafia_.Item.get("Knob Goblin harem pants")).
      addWeight(external_kolmafia_.Item.get("Knob Goblin harem veil"));

      return {
        location: external_kolmafia_.Location.get("Throne Room"),
        outfit: outfit,
        run: function run() {
          if ((0,external_kolmafia_.haveEffect)(_this.effect) == 0) {
            if ((0,external_kolmafia_.itemAmount)(_this.perfume) > 0) {
              (0,external_kolmafia_.use)(_this.perfume);
            } else {
              greyAdv(_this.harem, outfit);
            }
          }

          greyAdv("cobbsknob.php?action=throneroom", outfit);
          (0,external_kolmafia_.autosell)(external_kolmafia_.Item.get("Dense Meat Stack"), 2);
          (0,external_kolmafia_.council)();
        }
      };
    } }]);return QuestL5Goblin;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarElbow.ts
function QuestL6FriarElbow_typeof(obj) {"@babel/helpers - typeof";return QuestL6FriarElbow_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL6FriarElbow_typeof(obj);}function QuestL6FriarElbow_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarElbow_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL6FriarElbow_toPropertyKey(descriptor.key), descriptor);}}function QuestL6FriarElbow_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarElbow_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarElbow_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarElbow_defineProperty(obj, key, value) {key = QuestL6FriarElbow_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL6FriarElbow_toPropertyKey(arg) {var key = QuestL6FriarElbow_toPrimitive(arg, "string");return QuestL6FriarElbow_typeof(key) === "symbol" ? key : String(key);}function QuestL6FriarElbow_toPrimitive(input, hint) {if (QuestL6FriarElbow_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL6FriarElbow_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestL6FriarElbow = /*#__PURE__*/function () {function QuestL6FriarElbow() {QuestL6FriarElbow_classCallCheck(this, QuestL6FriarElbow);QuestL6FriarElbow_defineProperty(this, "item",
    external_kolmafia_.Item.get("Eldritch butterknife"));QuestL6FriarElbow_defineProperty(this, "location",
    external_kolmafia_.Location.get("Dark Elbow of the Woods"));QuestL6FriarElbow_defineProperty(this, "absorbs",
    [external_kolmafia_.Monster.get("G imp"), external_kolmafia_.Monster.get("L imp")]);QuestL6FriarElbow_defineProperty(this, "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL6FriarElbow_defineProperty(this, "umbrella",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL6FriarElbow_defineProperty(this, "toAbsorb", void 0);QuestL6FriarElbow_defineProperty(this, "skill1",

    external_kolmafia_.Skill.get("Phase Shift"));QuestL6FriarElbow_defineProperty(this, "skill2",
    external_kolmafia_.Skill.get("Photonic Shroud"));}QuestL6FriarElbow_createClass(QuestL6FriarElbow, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.FAM_EXP));

    } }, { key: "isAllAbsorbed", value:

    function isAllAbsorbed() {
      var absorbed = GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters();

      return this.absorbs.find(function (a) {return !absorbed.includes(a);}) == null;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questL06Friar") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.getProperty)("questL06Friar") == "finished" ||
      (0,external_kolmafia_.availableAmount)(this.item) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (
      this.shouldWearLatte() &&
      getCurrentLatteFlavors().includes(LatteFlavor.MEAT_DROP))
      {
        return QuestStatus.READY;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.skill1) || !(0,external_kolmafia_.haveSkill)(this.skill2)) {
        return QuestStatus.NOT_READY;
      }

      if (
      !hasNonCombatSkillsReady((0,external_kolmafia_.myLevel)() >= 11 && !hasNonCombatSkillActive()))
      {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat().setNoCombat();

      if (this.shouldWearLatte()) {
        outfit.addWeight(this.latte);
      }

      return {
        location: this.location,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          if (_this.isAllAbsorbed() && !_this.shouldWearLatte()) {
            if ((0,external_kolmafia_.availableAmount)(_this.umbrella) == 0) {
              DelayBurners.tryReplaceCombats();
            } else {
              var burner = DelayBurners.getReadyDelayBurner();

              if (burner != null) {
                burner.doFightSetup();
              }
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          greyAdv(_this.location, outfit);
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / Elbow";
    } }]);return QuestL6FriarElbow;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarExp.ts
function QuestL6FriarExp_typeof(obj) {"@babel/helpers - typeof";return QuestL6FriarExp_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL6FriarExp_typeof(obj);}function QuestL6FriarExp_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarExp_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL6FriarExp_toPropertyKey(descriptor.key), descriptor);}}function QuestL6FriarExp_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarExp_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarExp_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarExp_defineProperty(obj, key, value) {key = QuestL6FriarExp_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL6FriarExp_toPropertyKey(arg) {var key = QuestL6FriarExp_toPrimitive(arg, "string");return QuestL6FriarExp_typeof(key) === "symbol" ? key : String(key);}function QuestL6FriarExp_toPrimitive(input, hint) {if (QuestL6FriarExp_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL6FriarExp_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestL6FriarExp = /*#__PURE__*/function () {function QuestL6FriarExp() {QuestL6FriarExp_classCallCheck(this, QuestL6FriarExp);QuestL6FriarExp_defineProperty(this, "fam",
    external_kolmafia_.Familiar.get("Grey Goose"));}QuestL6FriarExp_createClass(QuestL6FriarExp, [{ key: "getId", value:

    function getId() {
      return "Misc / FriarExp";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("friarsBlessingReceived"))) {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_.friarsAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.myFamiliar)() != this.fam) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.familiarWeight)(this.fam) > 2) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.cliExecute)("friars familiar");
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestL6FriarExp;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarHeart.ts
function QuestL6FriarHeart_typeof(obj) {"@babel/helpers - typeof";return QuestL6FriarHeart_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL6FriarHeart_typeof(obj);}function QuestL6FriarHeart_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarHeart_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL6FriarHeart_toPropertyKey(descriptor.key), descriptor);}}function QuestL6FriarHeart_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarHeart_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarHeart_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarHeart_defineProperty(obj, key, value) {key = QuestL6FriarHeart_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL6FriarHeart_toPropertyKey(arg) {var key = QuestL6FriarHeart_toPrimitive(arg, "string");return QuestL6FriarHeart_typeof(key) === "symbol" ? key : String(key);}function QuestL6FriarHeart_toPrimitive(input, hint) {if (QuestL6FriarHeart_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL6FriarHeart_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestL6FriarHeart = /*#__PURE__*/function () {function QuestL6FriarHeart() {QuestL6FriarHeart_classCallCheck(this, QuestL6FriarHeart);QuestL6FriarHeart_defineProperty(this, "item",
    external_kolmafia_.Item.get("box of birthday candles"));QuestL6FriarHeart_defineProperty(this, "location",
    external_kolmafia_.Location.get("Dark Heart of the Woods"));QuestL6FriarHeart_defineProperty(this, "absorbs",
    [external_kolmafia_.Monster.get("G imp"), external_kolmafia_.Monster.get("P imp")]);QuestL6FriarHeart_defineProperty(this, "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL6FriarHeart_defineProperty(this, "umbrella",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL6FriarHeart_defineProperty(this, "toAbsorb", void 0);QuestL6FriarHeart_defineProperty(this, "skill1",

    external_kolmafia_.Skill.get("Phase Shift"));QuestL6FriarHeart_defineProperty(this, "skill2",
    external_kolmafia_.Skill.get("Photonic Shroud"));}QuestL6FriarHeart_createClass(QuestL6FriarHeart, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.PLUS_COMBAT));

    } }, { key: "isAllAbsorbed", value:

    function isAllAbsorbed() {
      var absorbed = GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters();

      return this.absorbs.find(function (a) {return !absorbed.includes(a);}) == null;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questL06Friar") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.getProperty)("questL06Friar") == "finished" ||
      (0,external_kolmafia_.availableAmount)(this.item) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (
      !hasNonCombatSkillsReady((0,external_kolmafia_.myLevel)() >= 11 && !hasNonCombatSkillActive()))
      {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.skill1) || !(0,external_kolmafia_.haveSkill)(this.skill2)) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat().setNoCombat();

      if (this.shouldWearLatte()) {
        outfit.addWeight(this.latte);
      }

      return {
        location: this.location,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          if (_this.isAllAbsorbed() && !_this.shouldWearLatte()) {
            if ((0,external_kolmafia_.availableAmount)(_this.umbrella) == 0) {
              DelayBurners.tryReplaceCombats();
            } else {
              var burner = DelayBurners.getReadyDelayBurner();

              if (burner != null) {
                burner.doFightSetup();
              }
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          greyAdv(_this.location, outfit);
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / Heart";
    } }]);return QuestL6FriarHeart;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarNeck.ts
function QuestL6FriarNeck_typeof(obj) {"@babel/helpers - typeof";return QuestL6FriarNeck_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL6FriarNeck_typeof(obj);}function QuestL6FriarNeck_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarNeck_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL6FriarNeck_toPropertyKey(descriptor.key), descriptor);}}function QuestL6FriarNeck_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarNeck_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarNeck_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarNeck_defineProperty(obj, key, value) {key = QuestL6FriarNeck_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL6FriarNeck_toPropertyKey(arg) {var key = QuestL6FriarNeck_toPrimitive(arg, "string");return QuestL6FriarNeck_typeof(key) === "symbol" ? key : String(key);}function QuestL6FriarNeck_toPrimitive(input, hint) {if (QuestL6FriarNeck_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL6FriarNeck_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestL6FriarNeck = /*#__PURE__*/function () {function QuestL6FriarNeck() {QuestL6FriarNeck_classCallCheck(this, QuestL6FriarNeck);QuestL6FriarNeck_defineProperty(this, "item",
    external_kolmafia_.Item.get("dodecagram"));QuestL6FriarNeck_defineProperty(this, "location",
    external_kolmafia_.Location.get("Dark Neck of the Woods"));QuestL6FriarNeck_defineProperty(this, "absorbs",
    [external_kolmafia_.Monster.get("P imp"), external_kolmafia_.Monster.get("W imp")]);QuestL6FriarNeck_defineProperty(this, "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL6FriarNeck_defineProperty(this, "umbrella",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL6FriarNeck_defineProperty(this, "toAbsorb", void 0);QuestL6FriarNeck_defineProperty(this, "skill1",

    external_kolmafia_.Skill.get("Phase Shift"));QuestL6FriarNeck_defineProperty(this, "skill2",
    external_kolmafia_.Skill.get("Photonic Shroud"));}QuestL6FriarNeck_createClass(QuestL6FriarNeck, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "shouldWearLatte", value:

    function shouldWearLatte() {
      return (
        (0,external_kolmafia_.hippyStoneBroken)() &&
        (0,external_kolmafia_.availableAmount)(this.latte) > 0 &&
        !hasUnlockedLatteFlavor(LatteFlavor.PVP_FIGHTS));

    } }, { key: "isAllAbsorbed", value:

    function isAllAbsorbed() {
      var absorbed = GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters();

      return this.absorbs.find(function (a) {return !absorbed.includes(a);}) == null;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questL06Friar") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.getProperty)("questL06Friar") == "finished" ||
      (0,external_kolmafia_.availableAmount)(this.item) > 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.skill1) || !(0,external_kolmafia_.haveSkill)(this.skill2)) {
        return QuestStatus.NOT_READY;
      }

      if (
      !hasNonCombatSkillsReady((0,external_kolmafia_.myLevel)() >= 11 && !hasNonCombatSkillActive()))
      {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat().setNoCombat();

      if (this.shouldWearLatte()) {
        outfit.addWeight(this.latte);
      }

      return {
        location: this.location,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          if (_this.isAllAbsorbed() && !_this.shouldWearLatte()) {
            if ((0,external_kolmafia_.availableAmount)(_this.umbrella) == 0) {
              DelayBurners.tryReplaceCombats();
            } else {
              var burner = DelayBurners.getReadyDelayBurner();

              if (burner != null) {
                burner.doFightSetup();
              }
            }
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          greyAdv(_this.location, outfit);
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / Neck";
    } }]);return QuestL6FriarNeck;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarsLatteElbow.ts
function QuestL6FriarsLatteElbow_typeof(obj) {"@babel/helpers - typeof";return QuestL6FriarsLatteElbow_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL6FriarsLatteElbow_typeof(obj);}function QuestL6FriarsLatteElbow_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarsLatteElbow_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL6FriarsLatteElbow_toPropertyKey(descriptor.key), descriptor);}}function QuestL6FriarsLatteElbow_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarsLatteElbow_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarsLatteElbow_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarsLatteElbow_defineProperty(obj, key, value) {key = QuestL6FriarsLatteElbow_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL6FriarsLatteElbow_toPropertyKey(arg) {var key = QuestL6FriarsLatteElbow_toPrimitive(arg, "string");return QuestL6FriarsLatteElbow_typeof(key) === "symbol" ? key : String(key);}function QuestL6FriarsLatteElbow_toPrimitive(input, hint) {if (QuestL6FriarsLatteElbow_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL6FriarsLatteElbow_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL6LatteFamExp = /*#__PURE__*/function () {function QuestL6LatteFamExp() {QuestL6FriarsLatteElbow_classCallCheck(this, QuestL6LatteFamExp);QuestL6FriarsLatteElbow_defineProperty(this, "location",
    external_kolmafia_.Location.get("Dark Elbow of the Woods"));QuestL6FriarsLatteElbow_defineProperty(this, "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL6FriarsLatteElbow_defineProperty(this, "flavor",
    LatteFlavor.FAM_EXP);QuestL6FriarsLatteElbow_defineProperty(this, "item",
    external_kolmafia_.Item.get("Eldritch butterknife"));}QuestL6FriarsLatteElbow_createClass(QuestL6LatteFamExp, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.availableAmount)(this.latte) == 0 ||
      hasUnlockedLatteFlavor(this.flavor) ||
      (0,external_kolmafia_.getProperty)("questL06Friar") == "finished")
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.item) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Misc / Latte / Fam Exp";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(this.latte);

      return {
        outfit: outfit,
        location: this.location,
        run: function run() {
          greyAdv(_this.location, outfit);
        }
      };
    } }]);return QuestL6LatteFamExp;}();
;// CONCATENATED MODULE: ./src/quests/council/friars/QuestL6FriarsLatteHeart.ts
function QuestL6FriarsLatteHeart_typeof(obj) {"@babel/helpers - typeof";return QuestL6FriarsLatteHeart_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL6FriarsLatteHeart_typeof(obj);}function QuestL6FriarsLatteHeart_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6FriarsLatteHeart_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL6FriarsLatteHeart_toPropertyKey(descriptor.key), descriptor);}}function QuestL6FriarsLatteHeart_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6FriarsLatteHeart_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6FriarsLatteHeart_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6FriarsLatteHeart_defineProperty(obj, key, value) {key = QuestL6FriarsLatteHeart_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL6FriarsLatteHeart_toPropertyKey(arg) {var key = QuestL6FriarsLatteHeart_toPrimitive(arg, "string");return QuestL6FriarsLatteHeart_typeof(key) === "symbol" ? key : String(key);}function QuestL6FriarsLatteHeart_toPrimitive(input, hint) {if (QuestL6FriarsLatteHeart_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL6FriarsLatteHeart_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL6LattePlusCombat = /*#__PURE__*/function () {function QuestL6LattePlusCombat() {QuestL6FriarsLatteHeart_classCallCheck(this, QuestL6LattePlusCombat);QuestL6FriarsLatteHeart_defineProperty(this, "location",
    external_kolmafia_.Location.get("Dark Heart of the Woods"));QuestL6FriarsLatteHeart_defineProperty(this, "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));QuestL6FriarsLatteHeart_defineProperty(this, "flavor",
    LatteFlavor.PLUS_COMBAT);QuestL6FriarsLatteHeart_defineProperty(this, "item",
    external_kolmafia_.Item.get("box of birthday candles"));}QuestL6FriarsLatteHeart_createClass(QuestL6LattePlusCombat, [{ key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.availableAmount)(this.latte) == 0 ||
      hasUnlockedLatteFlavor(this.flavor) ||
      (0,external_kolmafia_.getProperty)("questL06Friar") == "finished")
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.availableAmount)(this.item) == 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Misc / Latte / Plus Combat";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(this.latte);

      return {
        outfit: outfit,
        location: this.location,
        run: function run() {
          greyAdv(_this.location, outfit);
        }
      };
    } }]);return QuestL6LattePlusCombat;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL6Friars.ts
function QuestL6Friars_typeof(obj) {"@babel/helpers - typeof";return QuestL6Friars_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL6Friars_typeof(obj);}function QuestL6Friars_toConsumableArray(arr) {return QuestL6Friars_arrayWithoutHoles(arr) || QuestL6Friars_iterableToArray(arr) || QuestL6Friars_unsupportedIterableToArray(arr) || QuestL6Friars_nonIterableSpread();}function QuestL6Friars_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL6Friars_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL6Friars_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL6Friars_arrayLikeToArray(o, minLen);}function QuestL6Friars_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestL6Friars_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestL6Friars_arrayLikeToArray(arr);}function QuestL6Friars_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL6Friars_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL6Friars_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL6Friars_toPropertyKey(descriptor.key), descriptor);}}function QuestL6Friars_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL6Friars_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL6Friars_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL6Friars_defineProperty(obj, key, value) {key = QuestL6Friars_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL6Friars_toPropertyKey(arg) {var key = QuestL6Friars_toPrimitive(arg, "string");return QuestL6Friars_typeof(key) === "symbol" ? key : String(key);}function QuestL6Friars_toPrimitive(input, hint) {if (QuestL6Friars_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL6Friars_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL6Friar = /*#__PURE__*/function () {function QuestL6Friar() {QuestL6Friars_classCallCheck(this, QuestL6Friar);QuestL6Friars_defineProperty(this, "woods",
    [
    new QuestL6FriarElbow(),
    new QuestL6FriarHeart(),
    new QuestL6FriarNeck(),
    new QuestL6LatteFamExp(),
    new QuestL6LattePlusCombat()]);QuestL6Friars_defineProperty(this, "exp",

    new QuestL6FriarExp());QuestL6Friars_defineProperty(this, "absorbs",
    ["G", "L", "P", "W"].map(function (s) {return external_kolmafia_.Monster.get(s + " Imp");}));}QuestL6Friars_createClass(QuestL6Friar, [{ key: "canTurnIn", value:

    function canTurnIn() {
      return this.absorbs.find(function (m) {return !(0,external_kolmafia_.absorbedMonsters)()[m.name];}) == null;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Friars / TurnIn";
    } }, { key: "getChildren", value:

    function getChildren() {
      return [this.exp].concat(QuestL6Friars_toConsumableArray(this.woods));
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL06Friar");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      if (
      this.woods.filter(function (c) {return c.status() != QuestStatus.COMPLETED;}).length > 0)
      {
        return QuestStatus.NOT_READY;
      }

      if (!this.canTurnIn()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("friars.php?action=ritual&pwd");
          (0,external_kolmafia_.visitUrl)("pandamonium.php");
          (0,external_kolmafia_.council)();
        }
      };
    } }]);return QuestL6Friar;}();
;// CONCATENATED MODULE: ./src/quests/council/crypts/CryptTemplate.ts
function CryptTemplate_typeof(obj) {"@babel/helpers - typeof";return CryptTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, CryptTemplate_typeof(obj);}function CryptTemplate_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function CryptTemplate_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, CryptTemplate_toPropertyKey(descriptor.key), descriptor);}}function CryptTemplate_createClass(Constructor, protoProps, staticProps) {if (protoProps) CryptTemplate_defineProperties(Constructor.prototype, protoProps);if (staticProps) CryptTemplate_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function CryptTemplate_defineProperty(obj, key, value) {key = CryptTemplate_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function CryptTemplate_toPropertyKey(arg) {var key = CryptTemplate_toPrimitive(arg, "string");return CryptTemplate_typeof(key) === "symbol" ? key : String(key);}function CryptTemplate_toPrimitive(input, hint) {if (CryptTemplate_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (CryptTemplate_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var CryptL7Template = /*#__PURE__*/function () {function CryptL7Template() {CryptTemplate_classCallCheck(this, CryptL7Template);CryptTemplate_defineProperty(this, "swords",
    [
    "ebony epee",
    "antique machete",
    "black sword",
    "broken sword",
    "cardboard katana",
    "cardboard wakizashi",
    "knob goblin deluxe scimitar",
    "knob goblin scimitar",
    "lupine sword",
    "muculent machete",
    "serpentine sword",
    "vorpal blade",
    "white sword",
    "sweet ninja sword"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));CryptTemplate_defineProperty(this, "cape",
    external_kolmafia_.Item.get("Unwrapped knock-off retro superhero cape"));CryptTemplate_defineProperty(this, "gravyboat",
    external_kolmafia_.Item.get("Gravy Boat"));}CryptTemplate_createClass(CryptL7Template, [{ key: "getSword", value:

    function getSword() {
      var items = this.swords.filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;});

      if (items.length == 0 && (0,external_kolmafia_.myMeat)() >= 100) {
        (0,external_kolmafia_.retrieveItem)(external_kolmafia_.Item.get("sweet ninja sword"));

        return this.getSword();
      }

      return items[0];
    } }, { key: "level", value:

    function level() {
      return (0,external_kolmafia_.availableAmount)(this.cape) > 0 ? 7 : 9;
    } }, { key: "addRetroSword", value:



    function addRetroSword() {var outfit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new GreyOutfit();
      outfit.addWeight(this.gravyboat, 99999);

      if ((0,external_kolmafia_.availableAmount)(this.cape) > 0) {
        outfit.addWeight(this.getSword(), 99999);
        outfit.addExtra("-back");
      }

      return outfit;
    } }, { key: "adjustRetroCape", value:

    function adjustRetroCape() {
      if ((0,external_kolmafia_.availableAmount)(this.cape) == 0) {
        return;
      }

      (0,external_kolmafia_.equip)(this.cape);

      if (
      (0,external_kolmafia_.getProperty)("retroCapeSuperhero") == "vampire" &&
      (0,external_kolmafia_.getProperty)("retroCapeWashingInstructions") == "kill")
      {
        return;
      }

      (0,external_kolmafia_.cliExecute)("retrocape vampire kill");
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questL07Cyrptic") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      if (this.getStatus() == CryptStatus.FINISHED) {
        return QuestStatus.COMPLETED;
      }

      if (this.getSword() == null && (0,external_kolmafia_.myMeat)() < 300) {
        return QuestStatus.NOT_READY;
      }

      return this.cryptStatus();
    } }, { key: "getStatus", value:









    function getStatus() {
      var num = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)(this.getProperty()));

      if (num > 25) {
        return CryptStatus.FIGHT;
      }

      if (num <= 0) {
        return CryptStatus.FINISHED;
      }

      return CryptStatus.BOSS;
    } }]);return CryptL7Template;}();
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptDirtyMan.ts
function QuestL7CryptDirtyMan_typeof(obj) {"@babel/helpers - typeof";return QuestL7CryptDirtyMan_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL7CryptDirtyMan_typeof(obj);}function QuestL7CryptDirtyMan_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptDirtyMan_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL7CryptDirtyMan_toPropertyKey(descriptor.key), descriptor);}}function QuestL7CryptDirtyMan_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptDirtyMan_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptDirtyMan_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptDirtyMan_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptDirtyMan_setPrototypeOf(subClass, superClass);}function QuestL7CryptDirtyMan_setPrototypeOf(o, p) {QuestL7CryptDirtyMan_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptDirtyMan_setPrototypeOf(o, p);}function QuestL7CryptDirtyMan_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptDirtyMan_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptDirtyMan_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptDirtyMan_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptDirtyMan_possibleConstructorReturn(this, result);};}function QuestL7CryptDirtyMan_possibleConstructorReturn(self, call) {if (call && (QuestL7CryptDirtyMan_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptDirtyMan_assertThisInitialized(self);}function QuestL7CryptDirtyMan_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptDirtyMan_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptDirtyMan_getPrototypeOf(o) {QuestL7CryptDirtyMan_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptDirtyMan_getPrototypeOf(o);}function QuestL7CryptDirtyMan_defineProperty(obj, key, value) {key = QuestL7CryptDirtyMan_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL7CryptDirtyMan_toPropertyKey(arg) {var key = QuestL7CryptDirtyMan_toPrimitive(arg, "string");return QuestL7CryptDirtyMan_typeof(key) === "symbol" ? key : String(key);}function QuestL7CryptDirtyMan_toPrimitive(input, hint) {if (QuestL7CryptDirtyMan_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL7CryptDirtyMan_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var CryptL7DirtyMan = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptDirtyMan_inherits(CryptL7DirtyMan, _CryptL7Template);var _super = QuestL7CryptDirtyMan_createSuper(CryptL7DirtyMan);function CryptL7DirtyMan() {var _this;QuestL7CryptDirtyMan_classCallCheck(this, CryptL7DirtyMan);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("The Defiled Niche"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "sniffer",
    external_kolmafia_.Familiar.get("Nosy Nose"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "dirty",
    external_kolmafia_.Monster.get("dirty old lihc"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "sniff",
    external_kolmafia_.Skill.get("Get a Good Whiff of This Guy"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "banisher",
    external_kolmafia_.Skill.get("System Sweep"));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "spray",
    new PossiblePath(8).add(
    ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "nonSpray",

    new PossiblePath(16));QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "paths",
    []);QuestL7CryptDirtyMan_defineProperty(QuestL7CryptDirtyMan_assertThisInitialized(_this), "advsAbsorb",
    external_kolmafia_.Monster.get("basic lihc"));return _this;}QuestL7CryptDirtyMan_createClass(CryptL7DirtyMan, [{ key: "createPaths", value:

    function createPaths(assumeUnused) {
      this.paths = [];

      var evilRemaining =
      (assumeUnused || (0,external_kolmafia_.getProperty)("questL07Cyrptic") == "unstarted" ?
      50 :
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)(this.getProperty()))) - 25;

      // Need to do this better, with actual math for retro/gravy
      this.nonSpray = new PossiblePath(Math.ceil(evilRemaining / 2));

      if (assumeUnused || (0,external_kolmafia_.getProperty)("fireExtinguisherCyrptUsed") != "true") {
        this.spray = new PossiblePath(Math.ceil((evilRemaining - 10) / 2)).add(
        ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE);


        this.paths.push(this.spray);
      }

      this.paths.push(this.nonSpray);
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = this.addRetroSword();

      var hasAbsorbed = GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(
      this.advsAbsorb);


      if (hasAbsorbed && path.canUse(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE)) {
        path.getResource(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE).prepare(outfit);
      }

      var fam = null;
      /*  toInt(getProperty(this.getProperty())) >
        (getProperty("nosyNoseMonster") != "dirty old lihc" ? 31 : 27)
          ? this.sniffer
          : null;*/

      return {
        familiar: fam,
        location: this.loc,
        outfit: outfit,
        olfaction: [this.dirty],
        run: function run() {
          _this2.adjustRetroCape();

          var avoid;

          if (
          hasAbsorbed &&
          path.canUse(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE))
          {
            // If its a dirty lich, don't spray down
            avoid = MacroBuilder/* Macro.ifNot_ */.LE.ifNot_(
            _this2.dirty,
            path.getResource(ResourceTypes/* ResourceCategory.FIRE_EXTINGUSHER_ZONE */.s6.FIRE_EXTINGUSHER_ZONE).macro());

          }

          var start;

          if (
          (0,external_kolmafia_.myFamiliar)() == fam &&
          (0,external_kolmafia_.getProperty)("nosyNoseMonster") != "dirty old lihc")
          {
            start = MacroBuilder/* Macro.step */.LE.step("if monsterid 1071;skill 7166;endif");

            if (avoid != null) {
              start = start.step(avoid);
            }
          } else if (avoid != null) {
            start = avoid;
          }

          var props = new Properties_PropertyManager();
          props.setChoice(157, 4);

          try {
            greyAdv(
            _this2.loc,
            outfit,
            new AdventureSettings().
            addNoBanish(_this2.dirty).
            setStartOfFightMacro(start));

          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptNicheEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      if (!(0,external_kolmafia_.haveSkill)(this.banisher)) {


        // return QuestStatus.FASTER_LATER;
      }return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / DirtyMan";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7DirtyMan;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptEyes.ts
function QuestL7CryptEyes_typeof(obj) {"@babel/helpers - typeof";return QuestL7CryptEyes_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL7CryptEyes_typeof(obj);}function QuestL7CryptEyes_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptEyes_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL7CryptEyes_toPropertyKey(descriptor.key), descriptor);}}function QuestL7CryptEyes_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptEyes_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptEyes_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptEyes_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptEyes_setPrototypeOf(subClass, superClass);}function QuestL7CryptEyes_setPrototypeOf(o, p) {QuestL7CryptEyes_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptEyes_setPrototypeOf(o, p);}function QuestL7CryptEyes_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptEyes_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptEyes_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptEyes_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptEyes_possibleConstructorReturn(this, result);};}function QuestL7CryptEyes_possibleConstructorReturn(self, call) {if (call && (QuestL7CryptEyes_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptEyes_assertThisInitialized(self);}function QuestL7CryptEyes_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptEyes_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptEyes_getPrototypeOf(o) {QuestL7CryptEyes_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptEyes_getPrototypeOf(o);}function QuestL7CryptEyes_defineProperty(obj, key, value) {key = QuestL7CryptEyes_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL7CryptEyes_toPropertyKey(arg) {var key = QuestL7CryptEyes_toPrimitive(arg, "string");return QuestL7CryptEyes_typeof(key) === "symbol" ? key : String(key);}function QuestL7CryptEyes_toPrimitive(input, hint) {if (QuestL7CryptEyes_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL7CryptEyes_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var CryptL7Eyes = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptEyes_inherits(CryptL7Eyes, _CryptL7Template);var _super = QuestL7CryptEyes_createSuper(CryptL7Eyes);function CryptL7Eyes() {var _this;QuestL7CryptEyes_classCallCheck(this, CryptL7Eyes);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptEyes_defineProperty(QuestL7CryptEyes_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("The Defiled Nook"));return _this;}QuestL7CryptEyes_createClass(CryptL7Eyes, [{ key: "run", value:

    function run() {var _this2 = this;
      var outfit = new GreyOutfit().setItemDrops().setChampagneBottle();
      this.addRetroSword(outfit);

      return {
        location: this.loc,
        outfit: outfit,
        mayFreeRun: false,
        run: function run() {
          _this2.adjustRetroCape();

          var props = new Properties_PropertyManager();
          props.setChoice(155, 5);

          try {
            greyAdv(
            _this2.loc,
            outfit,
            new AdventureSettings().addBanish(external_kolmafia_.Monster.get("party skelteon")));

          } finally {
            props.resetAll();
          }

          (0,external_kolmafia_.cliExecute)("refresh inventory");

          var item = external_kolmafia_.Item.get("Evil Eye");

          if ((0,external_kolmafia_.availableAmount)(item) > 0) {
            (0,external_kolmafia_.use)(item, (0,external_kolmafia_.availableAmount)(item));
          }
        }
      };
    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptNookEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Eyes";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7Eyes;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptRattling.ts
function QuestL7CryptRattling_typeof(obj) {"@babel/helpers - typeof";return QuestL7CryptRattling_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL7CryptRattling_typeof(obj);}function QuestL7CryptRattling_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptRattling_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL7CryptRattling_toPropertyKey(descriptor.key), descriptor);}}function QuestL7CryptRattling_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptRattling_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptRattling_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptRattling_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptRattling_setPrototypeOf(subClass, superClass);}function QuestL7CryptRattling_setPrototypeOf(o, p) {QuestL7CryptRattling_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptRattling_setPrototypeOf(o, p);}function QuestL7CryptRattling_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptRattling_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptRattling_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptRattling_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptRattling_possibleConstructorReturn(this, result);};}function QuestL7CryptRattling_possibleConstructorReturn(self, call) {if (call && (QuestL7CryptRattling_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptRattling_assertThisInitialized(self);}function QuestL7CryptRattling_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptRattling_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptRattling_getPrototypeOf(o) {QuestL7CryptRattling_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptRattling_getPrototypeOf(o);}function QuestL7CryptRattling_defineProperty(obj, key, value) {key = QuestL7CryptRattling_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL7CryptRattling_toPropertyKey(arg) {var key = QuestL7CryptRattling_toPrimitive(arg, "string");return QuestL7CryptRattling_typeof(key) === "symbol" ? key : String(key);}function QuestL7CryptRattling_toPrimitive(input, hint) {if (QuestL7CryptRattling_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL7CryptRattling_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var CryptL7Rattling = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptRattling_inherits(CryptL7Rattling, _CryptL7Template);var _super = QuestL7CryptRattling_createSuper(CryptL7Rattling);function CryptL7Rattling() {var _this;QuestL7CryptRattling_classCallCheck(this, CryptL7Rattling);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("The Defiled Cranny"));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "beatenUp",
    external_kolmafia_.Effect.get("Beaten Up"));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "kramco",
    external_kolmafia_.Item.get("Kramco Sausage-o-Matic&trade;"));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "runs",
    ["Gaunt ghuol", "gluttonous ghuol"].map(function (s) {return (
        external_kolmafia_.Monster.get(s));}));QuestL7CryptRattling_defineProperty(QuestL7CryptRattling_assertThisInitialized(_this), "toAbsorb", void 0);return _this;}QuestL7CryptRattling_createClass(CryptL7Rattling, [{ key: "level", value:



    function level() {
      return (0,external_kolmafia_.availableAmount)(this.cape) > 0 ? 7 : 16;
    } }, { key: "run", value:

    function run() {var _this2 = this;
      var outfit = new GreyOutfit();

      this.addRetroSword(outfit);

      if (this.getStatus() == CryptStatus.BOSS) {
        outfit.meatDropWeight = 5;
      } else {
        if (
        currentPredictions().get(this.loc) != null &&
        this.toAbsorb.includes(currentPredictions().get(this.loc)))
        {
          outfit.setPlusCombat();
        } else {
          outfit.setNoCombat();
        }
        outfit.umbrellaSetting = UmbrellaState.MONSTER_LEVEL;
        outfit.addWeight("ML", 4);
        outfit.addIgnored(this.kramco);
      }

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun(monster) {return _this2.runs.includes(monster);},
        run: function run() {
          _this2.adjustRetroCape();
          (0,external_kolmafia_.changeMcd)(10);

          var props = new Properties_PropertyManager();
          props.setChoice(523, 4);

          try {
            greyAdv(_this2.loc, outfit);
          } finally {
            props.resetAll();
          }

          (0,external_kolmafia_.changeMcd)(0);
        }
      };
    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptCrannyEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.cape) == 0 && (0,external_kolmafia_.haveEffect)(this.beatenUp) > 0) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Rattling";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7Rattling;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/crypts/QuestL7CryptSprinters.ts
function QuestL7CryptSprinters_typeof(obj) {"@babel/helpers - typeof";return QuestL7CryptSprinters_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL7CryptSprinters_typeof(obj);}function QuestL7CryptSprinters_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7CryptSprinters_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL7CryptSprinters_toPropertyKey(descriptor.key), descriptor);}}function QuestL7CryptSprinters_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7CryptSprinters_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7CryptSprinters_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7CryptSprinters_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL7CryptSprinters_setPrototypeOf(subClass, superClass);}function QuestL7CryptSprinters_setPrototypeOf(o, p) {QuestL7CryptSprinters_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL7CryptSprinters_setPrototypeOf(o, p);}function QuestL7CryptSprinters_createSuper(Derived) {var hasNativeReflectConstruct = QuestL7CryptSprinters_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL7CryptSprinters_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL7CryptSprinters_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL7CryptSprinters_possibleConstructorReturn(this, result);};}function QuestL7CryptSprinters_possibleConstructorReturn(self, call) {if (call && (QuestL7CryptSprinters_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL7CryptSprinters_assertThisInitialized(self);}function QuestL7CryptSprinters_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL7CryptSprinters_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL7CryptSprinters_getPrototypeOf(o) {QuestL7CryptSprinters_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL7CryptSprinters_getPrototypeOf(o);}function QuestL7CryptSprinters_defineProperty(obj, key, value) {key = QuestL7CryptSprinters_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL7CryptSprinters_toPropertyKey(arg) {var key = QuestL7CryptSprinters_toPrimitive(arg, "string");return QuestL7CryptSprinters_typeof(key) === "symbol" ? key : String(key);}function QuestL7CryptSprinters_toPrimitive(input, hint) {if (QuestL7CryptSprinters_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL7CryptSprinters_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var CryptL7Sprinters = /*#__PURE__*/function (_CryptL7Template) {QuestL7CryptSprinters_inherits(CryptL7Sprinters, _CryptL7Template);var _super = QuestL7CryptSprinters_createSuper(CryptL7Sprinters);function CryptL7Sprinters() {var _this;QuestL7CryptSprinters_classCallCheck(this, CryptL7Sprinters);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL7CryptSprinters_defineProperty(QuestL7CryptSprinters_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("The Defiled Alcove"));QuestL7CryptSprinters_defineProperty(QuestL7CryptSprinters_assertThisInitialized(_this), "sprinter",
    external_kolmafia_.Monster.get("Modern zmobie"));QuestL7CryptSprinters_defineProperty(QuestL7CryptSprinters_assertThisInitialized(_this), "toAbsorb", void 0);return _this;}QuestL7CryptSprinters_createClass(CryptL7Sprinters, [{ key: "run", value:


    function run() {var _this2 = this;
      var outfit = new GreyOutfit();
      this.addRetroSword(outfit);

      if (this.getStatus() == CryptStatus.BOSS) {
        outfit.meatDropWeight = 5;
      } else if (
      currentPredictions().get(this.loc) == null ||
      !this.toAbsorb.includes(currentPredictions().get(this.loc)))
      {
        outfit.initWeight = 2;
      }

      return {
        location: this.loc,
        outfit: outfit,
        freeRun: function freeRun(monster) {return monster != _this2.sprinter;},
        run: function run() {
          _this2.adjustRetroCape();

          var props = new Properties_PropertyManager();
          props.setChoice(153, 4);

          try {
            greyAdv(_this2.loc, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getProperty", value:

    function getProperty() {
      return "cyrptAlcoveEvilness";
    } }, { key: "cryptStatus", value:

    function cryptStatus() {
      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Sprinters";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }]);return CryptL7Sprinters;}(CryptL7Template);
;// CONCATENATED MODULE: ./src/quests/council/QuestL7Crypt.ts
function QuestL7Crypt_typeof(obj) {"@babel/helpers - typeof";return QuestL7Crypt_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL7Crypt_typeof(obj);}function QuestL7Crypt_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL7Crypt_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL7Crypt_toPropertyKey(descriptor.key), descriptor);}}function QuestL7Crypt_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL7Crypt_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL7Crypt_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL7Crypt_defineProperty(obj, key, value) {key = QuestL7Crypt_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL7Crypt_toPropertyKey(arg) {var key = QuestL7Crypt_toPrimitive(arg, "string");return QuestL7Crypt_typeof(key) === "symbol" ? key : String(key);}function QuestL7Crypt_toPrimitive(input, hint) {if (QuestL7Crypt_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL7Crypt_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var QuestL7Crypt = /*#__PURE__*/function () {function QuestL7Crypt() {QuestL7Crypt_classCallCheck(this, QuestL7Crypt);QuestL7Crypt_defineProperty(this, "children",
    [
    new CryptL7DirtyMan(),
    new CryptL7Eyes(),
    new CryptL7Rattling(),
    new CryptL7Sprinters()]);QuestL7Crypt_defineProperty(this, "chest",

    external_kolmafia_.Item.get("Chest of the Bonerdagon"));}QuestL7Crypt_createClass(QuestL7Crypt, [{ key: "getLocations", value:

    function getLocations() {
      return [external_kolmafia_.Location.get("Haert of the Cyrpt")];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      var status = (0,external_kolmafia_.getProperty)("questL07Cyrptic");

      if (status == "finished") {
        return QuestStatus.COMPLETED;
      }

      // If we're too poor to buy a sword, too lazy to do more checks
      if ((0,external_kolmafia_.myMeat)() < 300) {
        return QuestStatus.NOT_READY;
      }

      // If we're ready for boss
      if (
      this.children.filter(function (c) {return c.status() != QuestStatus.COMPLETED;}).length ==
      0)
      {
        return QuestStatus.READY;
      }
      // Equip sword and retrocape
      // Then we gotta handle each zone specially. Item drop, ML, init and eh

      return QuestStatus.NOT_READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Crypt / Boss";
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: external_kolmafia_.Location.get("Haert of the Cyrpt"),
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(527, 1);

          try {
            greyAdv("crypt.php?action=heart");
          } finally {
            props.resetAll();
          }

          (0,external_kolmafia_.council)();

          if (
          !GreySettings_GreySettings.greyPrepareLevelingResources &&
          (0,external_kolmafia_.availableAmount)(_this.chest) > 0 &&
          (0,external_kolmafia_.myMeat)() < 6000)
          {
            (0,external_kolmafia_.use)(_this.chest);
          }
        }
      };
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL7Crypt;}();


var CryptStatus;(function (CryptStatus) {CryptStatus[CryptStatus["FIGHT"] = 0] = "FIGHT";CryptStatus[CryptStatus["BOSS"] = 1] = "BOSS";CryptStatus[CryptStatus["FINISHED"] = 2] = "FINISHED";})(CryptStatus || (CryptStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainBoss.ts
function QuestL8MountainBoss_typeof(obj) {"@babel/helpers - typeof";return QuestL8MountainBoss_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL8MountainBoss_typeof(obj);}function QuestL8MountainBoss_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainBoss_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL8MountainBoss_toPropertyKey(descriptor.key), descriptor);}}function QuestL8MountainBoss_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainBoss_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainBoss_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainBoss_defineProperty(obj, key, value) {key = QuestL8MountainBoss_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL8MountainBoss_toPropertyKey(arg) {var key = QuestL8MountainBoss_toPrimitive(arg, "string");return QuestL8MountainBoss_typeof(key) === "symbol" ? key : String(key);}function QuestL8MountainBoss_toPrimitive(input, hint) {if (QuestL8MountainBoss_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL8MountainBoss_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL8MountainBoss = /*#__PURE__*/function () {function QuestL8MountainBoss() {QuestL8MountainBoss_classCallCheck(this, QuestL8MountainBoss);QuestL8MountainBoss_defineProperty(this, "peak",
    external_kolmafia_.Location.get("Mist-shrouded Peak"));}QuestL8MountainBoss_createClass(QuestL8MountainBoss, [{ key: "getId", value:

    function getId() {
      return "Council / Ice / Boss";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = this.getStatus();

      if (status == MountainStatus.finished) {
        return QuestStatus.COMPLETED;
      }

      if (status < MountainStatus.UNLOCKED_PEAK) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().addWeight("cold res", 100, 5, 5);

      return {
        location: this.peak,
        outfit: outfit,
        freeRun: function freeRun() {return (0,external_kolmafia_.myMeat)() > 5000;},
        run: function run() {
          greyAdv("place.php?whichplace=mclargehuge&action=cloudypeak2", outfit);

          if (_this.getStatus() == MountainStatus.DEFEATED_BOAR) {
            _this.talkTrapper();
            (0,external_kolmafia_.council)();
          }
        }
      };
    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.peak];
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }]);return QuestL8MountainBoss;}();
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainGoats.ts
function QuestL8MountainGoats_typeof(obj) {"@babel/helpers - typeof";return QuestL8MountainGoats_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL8MountainGoats_typeof(obj);}function QuestL8MountainGoats_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainGoats_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL8MountainGoats_toPropertyKey(descriptor.key), descriptor);}}function QuestL8MountainGoats_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainGoats_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainGoats_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainGoats_defineProperty(obj, key, value) {key = QuestL8MountainGoats_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL8MountainGoats_toPropertyKey(arg) {var key = QuestL8MountainGoats_toPrimitive(arg, "string");return QuestL8MountainGoats_typeof(key) === "symbol" ? key : String(key);}function QuestL8MountainGoats_toPrimitive(input, hint) {if (QuestL8MountainGoats_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL8MountainGoats_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestL8MountainGoats = /*#__PURE__*/function () {function QuestL8MountainGoats() {QuestL8MountainGoats_classCallCheck(this, QuestL8MountainGoats);QuestL8MountainGoats_defineProperty(this, "goats",
    external_kolmafia_.Location.get("The Goatlet"));QuestL8MountainGoats_defineProperty(this, "cheese",
    external_kolmafia_.Item.get("Goat Cheese"));QuestL8MountainGoats_defineProperty(this, "dairy",
    external_kolmafia_.Monster.get("Dairy Goat"));QuestL8MountainGoats_defineProperty(this, "elementalSkill",
    external_kolmafia_.Skill.get("Secondary Fermentation"));QuestL8MountainGoats_defineProperty(this, "drunk",
    external_kolmafia_.Monster.get("Drunk Goat"));QuestL8MountainGoats_defineProperty(this, "sysSweep",
    external_kolmafia_.Skill.get("System Sweep"));}QuestL8MountainGoats_createClass(QuestL8MountainGoats, [{ key: "getId", value:

    function getId() {
      return "Council / Ice / Goats";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status() {
      var status = this.getStatus();

      if (status < MountainStatus.TRAPPER_DEMANDS) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.haveSkill)(this.elementalSkill)) {
        if (status > MountainStatus.TRAPPER_DEMANDS) {
          return QuestStatus.COMPLETED;
        }

        // If we have our cheese but not the ores
        if ((0,external_kolmafia_.availableAmount)(this.cheese) >= 3 && this.getOreRemaining() > 0) {
          return QuestStatus.COMPLETED;
        }
      }

      if (!(0,external_kolmafia_.haveSkill)(this.sysSweep)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        this.hasEverything() && this.getStatus() == MountainStatus.TRAPPER_DEMANDS);

    } }, { key: "free", value:

    function free() {
      return this.mustBeDone();
    } }, { key: "getOreRemaining", value:

    function getOreRemaining() {
      return 3 - (0,external_kolmafia_.availableAmount)(this.neededOre());
    } }, { key: "neededOre", value:

    function neededOre() {
      return external_kolmafia_.Item.get((0,external_kolmafia_.getProperty)("trapperOre") || "asbestos ore");
    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }, { key: "hasEverything", value:

    function hasEverything() {
      return (0,external_kolmafia_.availableAmount)(this.cheese) >= 3 && this.getOreRemaining() <= 0;
    } }, { key: "run", value:

    function run() {var _this = this;
      if (this.hasEverything()) {
        return {
          location: null,
          run: function run() {
            _this.talkTrapper();
          }
        };
      }

      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.goats,
        outfit: outfit,
        orbs: (0,external_kolmafia_.haveSkill)(this.elementalSkill) ? null : [this.drunk],
        olfaction: (0,external_kolmafia_.availableAmount)(this.cheese) >= 3 ? null : [this.dairy],
        run: function run() {
          var settings = new AdventureSettings();

          if (!(0,external_kolmafia_.haveSkill)(_this.elementalSkill)) {
            settings.addNoBanish(_this.drunk);
          }

          if (
          (0,external_kolmafia_.availableAmount)(_this.cheese) < 3 &&
          _this.getStatus() <= MountainStatus.TRAPPER_DEMANDS)
          {
            settings.addNoBanish(_this.dairy);
          }

          greyAdv(_this.goats, outfit, settings);

          if (_this.hasEverything()) {
            _this.talkTrapper();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.goats];
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }]);return QuestL8MountainGoats;}();
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainNinja.ts
function QuestL8MountainNinja_typeof(obj) {"@babel/helpers - typeof";return QuestL8MountainNinja_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL8MountainNinja_typeof(obj);}function QuestL8MountainNinja_toConsumableArray(arr) {return QuestL8MountainNinja_arrayWithoutHoles(arr) || QuestL8MountainNinja_iterableToArray(arr) || QuestL8MountainNinja_unsupportedIterableToArray(arr) || QuestL8MountainNinja_nonIterableSpread();}function QuestL8MountainNinja_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL8MountainNinja_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestL8MountainNinja_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestL8MountainNinja_arrayLikeToArray(arr);}function QuestL8MountainNinja_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL8MountainNinja_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL8MountainNinja_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL8MountainNinja_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL8MountainNinja_arrayLikeToArray(o, minLen);}function QuestL8MountainNinja_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL8MountainNinja_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainNinja_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL8MountainNinja_toPropertyKey(descriptor.key), descriptor);}}function QuestL8MountainNinja_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainNinja_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainNinja_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainNinja_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL8MountainNinja_setPrototypeOf(subClass, superClass);}function QuestL8MountainNinja_setPrototypeOf(o, p) {QuestL8MountainNinja_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL8MountainNinja_setPrototypeOf(o, p);}function QuestL8MountainNinja_createSuper(Derived) {var hasNativeReflectConstruct = QuestL8MountainNinja_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL8MountainNinja_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL8MountainNinja_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL8MountainNinja_possibleConstructorReturn(this, result);};}function QuestL8MountainNinja_possibleConstructorReturn(self, call) {if (call && (QuestL8MountainNinja_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL8MountainNinja_assertThisInitialized(self);}function QuestL8MountainNinja_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL8MountainNinja_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL8MountainNinja_getPrototypeOf(o) {QuestL8MountainNinja_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL8MountainNinja_getPrototypeOf(o);}function QuestL8MountainNinja_defineProperty(obj, key, value) {key = QuestL8MountainNinja_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL8MountainNinja_toPropertyKey(arg) {var key = QuestL8MountainNinja_toPrimitive(arg, "string");return QuestL8MountainNinja_typeof(key) === "symbol" ? key : String(key);}function QuestL8MountainNinja_toPrimitive(input, hint) {if (QuestL8MountainNinja_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL8MountainNinja_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}













var QuestL8MountainNinja = /*#__PURE__*/function (_TaskInfo) {QuestL8MountainNinja_inherits(QuestL8MountainNinja, _TaskInfo);var _super = QuestL8MountainNinja_createSuper(QuestL8MountainNinja);function QuestL8MountainNinja() {var _this;QuestL8MountainNinja_classCallCheck(this, QuestL8MountainNinja);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL8MountainNinja_defineProperty(QuestL8MountainNinja_assertThisInitialized(_this), "ninja",
    external_kolmafia_.Location.get("Lair of the Ninja Snowmen"));QuestL8MountainNinja_defineProperty(QuestL8MountainNinja_assertThisInitialized(_this), "assassin",
    external_kolmafia_.Monster.get("Ninja snowman assassin"));QuestL8MountainNinja_defineProperty(QuestL8MountainNinja_assertThisInitialized(_this), "canHitCombat", void 0);QuestL8MountainNinja_defineProperty(QuestL8MountainNinja_assertThisInitialized(_this), "outfit",

    ["Ninja rope", "Ninja Crampons", "Ninja Carabiner"].map(
    function (s) {return external_kolmafia_.Item.get(s);}));QuestL8MountainNinja_defineProperty(QuestL8MountainNinja_assertThisInitialized(_this), "paths", void 0);QuestL8MountainNinja_defineProperty(QuestL8MountainNinja_assertThisInitialized(_this), "willNeedRecalculate",


    false);return _this;}QuestL8MountainNinja_createClass(QuestL8MountainNinja, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];
      this.willNeedRecalculate =
      assumeUnstarted || getQuestStatus("questL11Shen") < 4;

      var itemsNeeded = assumeUnstarted ?
      this.outfit :
      this.outfit.filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;});

      if (itemsNeeded.length == 0) {
        this.paths.push(new PossiblePath(0));
        return;
      }

      // Lets work on the assumpsion that the player will definitely hit +25 at some point
      // Encounter rate is [Combat] / 200
      // So +25 is 12.5%
      var combatRate = 25;

      var getTurnsToEncounter = function getTurnsToEncounter(turns) {
        return Math.min(11, Math.ceil(1 / (combatRate / 200 + turns * 0.015)));
      };

      var plan = [];

      for (var i = 0; i < itemsNeeded.length; i++) {
        var turns = getTurnsToEncounter(8 * (1 + i));

        // If we have spent less than 11 turns here, adjust the turns needed downwards
        // Shen will come here..
        if (i == 0 && (assumeUnstarted || this.ninja.turnsSpent < 11)) {
          turns = Math.min(
          11 - Math.max(assumeUnstarted ? 0 : this.ninja.turnsSpent, 6));

        }

        plan.push(turns);
        plan.push(itemsNeeded[i]);
      }var _iterator = QuestL8MountainNinja_createForOfIteratorHelper(

        getAllCombinations(plan)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          if (combo.length != itemsNeeded.length) {
            continue;
          }

          var _plan = new PossiblePath(
          combo.filter(function (c) {return typeof c == "number";}).reduce(function (a, b) {return a + b;}, 0));var _iterator2 = QuestL8MountainNinja_createForOfIteratorHelper(


            combo),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var item = _step2.value;
              if (typeof item == "number") {
                continue;
              }

              _plan.addPull(item);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          this.paths.push(_plan);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Ice / Ninjas";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }, { key: "status", value:

    function status(path) {
      var status = this.getStatus();

      if (status > MountainStatus.GET_OUTFIT) {
        return QuestStatus.COMPLETED;
      }

      if (status < MountainStatus.GET_OUTFIT || path == null) {
        return QuestStatus.NOT_READY;
      }

      if (
      this.canHitCombat == null &&
      QuestL8MountainNinja_toConsumableArray(Object.keys((0,external_kolmafia_.myEffects)())).
      map(function (e) {return (0,external_kolmafia_.toEffect)(e);}).
      find(function (e) {return (0,external_kolmafia_.numericModifier)(e, "Combat Rate") != 0;}) == null)
      {
        (0,external_kolmafia_.maximize)("+combat -acc3 -tie", true);

        this.canHitCombat =
        (0,external_kolmafia_.numericModifier)("Generated:_spec", "Combat Rate") >= 25;
      } else if (this.canHitCombat === false) {
        // If we're running +25 combat with no effects, then yes
        this.canHitCombat =
        (0,external_kolmafia_.numericModifier)("Combat Rate") >= 25 &&
        QuestL8MountainNinja_toConsumableArray(Object.keys((0,external_kolmafia_.myEffects)())).
        map(function (e) {return (0,external_kolmafia_.toEffect)(e);}).
        find(function (e) {return (0,external_kolmafia_.numericModifier)(e, "Combat Rate") > 0;}) == null;
      }

      if (hasNonCombatSkillActive()) {
        return QuestStatus.NOT_READY;
      }

      var outfitNeeded = this.outfit.filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;});

      if (outfitNeeded.length == 0) {
        return QuestStatus.READY;
      }

      var shenTime = getQuestStatus("questL11Shen") < 4;

      if (this.willNeedRecalculate != shenTime) {
        return QuestStatus.READY;
      }

      if (
      shenTime &&
      outfitNeeded.length <= path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL) &&
      !currentPredictions().has(this.ninja))
      {
        return QuestStatus.NOT_READY;
      }

      var qStatus = shenTime ? QuestStatus.FASTER_LATER : QuestStatus.READY;

      if (this.canHitCombat || (0,external_kolmafia_.numericModifier)("Combat Rate") >= 25) {
        return qStatus;
      }

      // If we've reached snowman time but don't have the skill
      if (!hasCombatSkillReady()) {
        if ((0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Piezoelectric Honk"))) {
          return QuestStatus.FASTER_LATER;
        }

        return QuestStatus.NOT_READY;
      }

      return qStatus;
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if (
      this.willNeedRecalculate &&
      getQuestStatus("questL11Shen") >= 4 &&
      path != null &&
      path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL))
      {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            _this2.willNeedRecalculate = false;
            AdventureFinder.recalculatePath();
          }
        };
      }

      var outfitNeeded = this.outfit.filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;});

      // See if we can unlock peak yet
      if (outfitNeeded.length == 0 || path == null) {
        return {
          location: null,
          run: function run() {
            if ((0,external_kolmafia_.numericModifier)("Cold Resistance") < 5) {
              (0,external_kolmafia_.maximize)("cold res -tie", false);
            }

            (0,external_kolmafia_.visitUrl)("place.php?whichplace=mclargehuge&action=cloudypeak");
          }
        };
      }

      var shenTime = getQuestStatus("questL11Shen") < 4;

      if (
      outfitNeeded.length <= path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL) &&
      !shenTime)
      {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            var pulls = path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);

            for (var i = 0; i < pulls; i++) {
              GreyPulls.tryPull(outfitNeeded[i]);
              path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
            }
          }
        };
      }

      var outfit = new GreyOutfit().setPlusCombat();
      outfit.initWeight = 0.5;

      return {
        location: this.ninja,
        outfit: outfit,
        freeRun: function freeRun(monster) {return monster != _this2.assassin;},
        run: function run() {
          restoreHPTo(70);

          greyAdv(_this2.ninja, outfit);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.ninja];
    } }]);return QuestL8MountainNinja;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/mountain/QuestL8MountainOre.ts
function QuestL8MountainOre_typeof(obj) {"@babel/helpers - typeof";return QuestL8MountainOre_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL8MountainOre_typeof(obj);}function QuestL8MountainOre_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL8MountainOre_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL8MountainOre_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL8MountainOre_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL8MountainOre_arrayLikeToArray(o, minLen);}function QuestL8MountainOre_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL8MountainOre_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8MountainOre_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL8MountainOre_toPropertyKey(descriptor.key), descriptor);}}function QuestL8MountainOre_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8MountainOre_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8MountainOre_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8MountainOre_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestL8MountainOre_setPrototypeOf(subClass, superClass);}function QuestL8MountainOre_setPrototypeOf(o, p) {QuestL8MountainOre_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestL8MountainOre_setPrototypeOf(o, p);}function QuestL8MountainOre_createSuper(Derived) {var hasNativeReflectConstruct = QuestL8MountainOre_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestL8MountainOre_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestL8MountainOre_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestL8MountainOre_possibleConstructorReturn(this, result);};}function QuestL8MountainOre_possibleConstructorReturn(self, call) {if (call && (QuestL8MountainOre_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestL8MountainOre_assertThisInitialized(self);}function QuestL8MountainOre_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestL8MountainOre_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestL8MountainOre_getPrototypeOf(o) {QuestL8MountainOre_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestL8MountainOre_getPrototypeOf(o);}function QuestL8MountainOre_defineProperty(obj, key, value) {key = QuestL8MountainOre_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL8MountainOre_toPropertyKey(arg) {var key = QuestL8MountainOre_toPrimitive(arg, "string");return QuestL8MountainOre_typeof(key) === "symbol" ? key : String(key);}function QuestL8MountainOre_toPrimitive(input, hint) {if (QuestL8MountainOre_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL8MountainOre_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}















var QuestL8MountainOre = /*#__PURE__*/function (_TaskInfo) {QuestL8MountainOre_inherits(QuestL8MountainOre, _TaskInfo);var _super = QuestL8MountainOre_createSuper(QuestL8MountainOre);function QuestL8MountainOre() {var _this;QuestL8MountainOre_classCallCheck(this, QuestL8MountainOre);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "mountainMan",
    external_kolmafia_.Monster.get("Mountain Man"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "wish",
    external_kolmafia_.Item.get("Pocket Wish"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "mines",
    external_kolmafia_.Location.get("Itznotyerzitz Mine"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "needRecalculate", void 0);QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "burglar",

    external_kolmafia_.Familiar.get("Cat Burglar"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "faxAndGooseDupe", void 0);QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "failsafeBackup", void 0);QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "paths",


    []);QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "asbestos",
    external_kolmafia_.Item.get("asbestos ore"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "linoleum",
    external_kolmafia_.Item.get("linoleum ore"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "chrome",
    external_kolmafia_.Item.get("chrome ore"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "trainset",
    external_kolmafia_.Item.get("model train set"));QuestL8MountainOre_defineProperty(QuestL8MountainOre_assertThisInitialized(_this), "cmc",
    external_kolmafia_.Item.get("Cold Medicine Cabinet"));return _this;}QuestL8MountainOre_createClass(QuestL8MountainOre, [{ key: "getId", value:

    function getId() {
      return "Council / Ice / Ore";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "getOreRemaining", value:

    function getOreRemaining() {
      return 3 - (0,external_kolmafia_.availableAmount)(this.neededOre());
    } }, { key: "neededOre", value:

    function neededOre() {
      return external_kolmafia_.Item.get((0,external_kolmafia_.getProperty)("trapperOre") || "linoleum ore");
    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }, { key: "canPull", value:

    function canPull() {
      return (
        (0,external_kolmafia_.pullsRemaining)() != 0 &&
        !(0,external_kolmafia_.getProperty)("_roninStoragePulls").
        split(",").
        includes((0,external_kolmafia_.toInt)(this.neededOre()).toString()));

    } }, { key: "isHeistReady", value:

    function isHeistReady() {
      return (
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("catBurglarBankHeists")) > 0 ||
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_catBurglarCharge")) >= 10);

    } }, { key: "hasHeistedAlready", value:

    function hasHeistedAlready() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_catBurglarHeistsComplete")) > 0;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      if (!(0,external_kolmafia_.haveFamiliar)(this.burglar)) {
        return null;
      }

      if (this.isHeistReady() || this.hasHeistedAlready()) {
        return null;
      }

      return this.burglar;
    } }, { key: "willUseTrainset", value:

    function willUseTrainset() {
      return (
        isTrainsetInUse() ||
        (0,external_kolmafia_.getWorkshed)() == this.cmc &&
        (0,external_kolmafia_.itemAmount)(this.trainset) > 0 &&
        GreySettings_GreySettings.greySwitchWorkshed == "Model train set");

    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      if (this.willUseTrainset()) {
        this.paths = [new PossiblePath(0)];
        return;
      }

      this.paths = [];

      this.needRecalculate = this.getStatus() < MountainStatus.TRAPPER_DEMANDS;
      this.faxAndGooseDupe = new PossiblePath(1).
      add(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).
      addFax(this.mountainMan);
      this.failsafeBackup = new PossiblePath(1).add(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);

      if (this.doDuping()) {
        this.paths.push(this.faxAndGooseDupe);
      }

      if (this.canBackup()) {
        this.paths.push(this.failsafeBackup);
      }

      var resourceTypes = [];
      var needOres = assumeUnstarted ? 3 : this.getOreRemaining();

      for (var i = 0; i < needOres; i++) {
        resourceTypes.push(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER);
        resourceTypes.push(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX);
      }

      resourceTypes.push(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);
      resourceTypes.push(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);
      resourceTypes.push(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);
      resourceTypes.push(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST);
      resourceTypes.push(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);

      resourceTypes.push(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT);

      var allCombinations = getAllCombinations(resourceTypes);var _iterator = QuestL8MountainOre_createForOfIteratorHelper(

        allCombinations),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combo = _step.value;
          var oresExpected = combo.
          map(function (res) {return (
              res == ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY ?
              2 :
              res == ResourceTypes/* ResourceCategory.PULL */.s6.PULL ||
              res == ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER ||
              res == ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER ||
              res == ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST ?
              1 :
              0);}).

          reduce(function (p, n) {return p + n;}, 0);

          // If this doesn't use a fax
          if (!combo.includes(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER)) {
            // Remove combinations that require a mountain man
            if (
            combo.includes(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) ||
            combo.includes(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX) ||
            combo.includes(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY))
            {
              continue;
            }

            // If the combo requires a cat heist, and a heist cannot be performed
            if (
            combo.includes(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST) && (
            assumeUnstarted ||
            needOres != 1 ||
            !this.isHeistReady() ||
            this.hasHeistedAlready() ||
            !this.isHeistable()))
            {
              continue;
            }
          }

          // If this combination wouldn't give enough ores
          if (oresExpected < needOres || oresExpected > needOres) {
            continue;
          }

          var advs = combo.filter(
          function (res) {return (
              res == ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER ||
              res == ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER ||
              res == ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);}).
          length;

          var path = new PossiblePath(advs);
          var addedPolar = false;var _iterator3 = QuestL8MountainOre_createForOfIteratorHelper(

            combo),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var res = _step3.value;
              // If this is a polar and we already did a polar and doing a yellow ray, or this is something we're doing after the mountain man
              var doMaybe =
              combo.includes(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) &&
              combo.includes(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX) && (
              res == ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX ?
              addedPolar :
              res != ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER &&
              res != ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) ?
              0.33 :
              1;

              if (res == ResourceTypes/* ResourceCategory.PULL */.s6.PULL) {
                path.addConsumablePull(this.neededOre());
              } else if (res == ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) {
                path.addFax(this.mountainMan, doMaybe ? 0.33 : 1);
              } else {
                path.addMaybe(res, doMaybe ? 0.33 : 1);
                addedPolar = addedPolar || res == ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX;
              }
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

          this.paths.push(path);

          // If this is a fax, and we're not doing a heist or a copier
          if (
          combo.includes(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) &&
          !combo.includes(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) &&
          !combo.includes(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST))
          {
            var cargoShorts = path.clone();
            cargoShorts.advsSavedMin -= 1;
            cargoShorts.advsSavedMax -= 1;

            cargoShorts.resourcesNeeded.forEach(function (res) {
              if (res[0] == ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) {
                res[0] = ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS;
              }
            });

            if (!cargoShorts.ignoreResources.includes("Cosplay Saber")) {
              cargoShorts.addIgnored("Cosplay Saber");
            }

            this.paths.push(cargoShorts);
          }
        }

        // Ignore cosplay saber for any path that requires a proper fight finishing blow
      } catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = QuestL8MountainOre_createForOfIteratorHelper(this.paths),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _path = _step2.value;
          if (
          _path.canUse(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST) == 0 &&
          _path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) == 0)
          {
            continue;
          }

          _path.addIgnored("Cosplay Saber");
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }, { key: "status", value:

    function status(path) {
      if (this.willUseTrainset()) {
        return QuestStatus.COMPLETED;
      }

      var status = this.getStatus();

      if (status < MountainStatus.TRAPPER_DEMANDS) {
        return QuestStatus.NOT_READY;
      }

      if (status > MountainStatus.TRAPPER_DEMANDS) {
        return QuestStatus.COMPLETED;
      }

      if (this.getOreRemaining() <= 0) {
        return QuestStatus.COMPLETED;
      }

      if (this.needRecalculate) {
        return QuestStatus.READY;
      }

      if (path == null) {
        return QuestStatus.READY;
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST) && !this.isHeistReady()) {
        return QuestStatus.NOT_READY;
      }

      if (path == this.faxAndGooseDupe && !this.doDuping()) {
        return QuestStatus.NOT_READY;
      }

      if (
      this.lastBackup() == this.mountainMan && (
      path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) ||
      path.canUse(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST)))
      {
        return QuestStatus.READY;
      }

      if (
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Brother Corsican's Blessing")) +
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("A Girl Named Sue")) >
      0)
      {
        return QuestStatus.NOT_READY;
      }

      // If we haven't started this yet
      if (path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY)) {
        // If we have yellow ray active, or can't afford it
        if (!path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).ready()) {
          return QuestStatus.NOT_READY;
        }

        // If we're doing a goose dupe
        if (this.doDuping()) {
          // If goose couldn't dupe
          if ((0,external_kolmafia_.familiarWeight)(this.goose) < 6) {
            return QuestStatus.NOT_READY;
          }
        } else if (!(0,external_kolmafia_.haveSkill)(this.nanovision)) {
          // If we don't have nanovision, and this will want to maybe do a backup, better delay.
          if (path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER)) {
            return QuestStatus.NOT_READY;
          }
        }
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      if (this.canBackup() || this.needRecalculate) {
        return true;
      }

      if (this.getOreRemaining() < 3) {
        return true;
      }

      if ((0,external_kolmafia_.myLevel)() < 12) {
        return false;
      }

      if (this.isHeistReady() && this.isHeistable()) {
        return true;
      }

      if ((0,external_kolmafia_.myAdventures)() < 40) {
        return false;
      }

      if (reallyMustBeDone) {
        return false;
      }

      if (
      this.doDuping() &&
      (0,external_kolmafia_.familiarWeight)(this.goose) >= this.famWeightToDupe())
      {
        return true;
      }

      return true;
    } }, { key: "lastBackup", value:

    function lastBackup() {
      return (0,external_kolmafia_.getProperty)("lastCopyableMonster") == "" ?
      null :
      external_kolmafia_.Monster.get((0,external_kolmafia_.getProperty)("lastCopyableMonster"));
    } }, { key: "canBackup", value:

    function canBackup() {
      return this.hasBackups() && this.lastBackup() == this.mountainMan;
    } }, { key: "hasBackups", value:

    function hasBackups() {
      return getBackupsRemaining() > 0;
    } }, { key: "doPull", value:

    function doPull(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          GreyPulls.pullOre();

          path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
        }
      };
    } }, { key: "doPackOfCardsCheat", value:

    function doPackOfCardsCheat(path) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          path.
          getResource(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT).
          pickCard("Mine");
          path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
        }
      };
    } }, { key: "doCopier", value:

    function doCopier(path) {
      var outfit = new GreyOutfit().setItemDrops();
      var loc = external_kolmafia_.Location.get("The Dire Warren");

      var resource = path.getResource(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);

      resource.prepare(outfit);

      return {
        location: loc,
        outfit: outfit,
        run: function run() {
          greyAdv(
          loc,
          outfit,
          new AdventureSettings().setStartOfFightMacro(
          new MacroBuilder/* Macro */.LE().if_(
          external_kolmafia_.Monster.get("Fluffy Bunny"),
          path.getResource(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER).macro())));




          path.addUsed(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER);
        }
      };
    } }, { key: "isHeistable", value:

    function isHeistable() {
      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_catBurglarCharge")) < 11) {
        return false;
      }

      var foundOre = Object.keys((0,external_kolmafia_.heistTargets)()).find(
      function (k) {return k.toLowerCase() == "mountain man";});


      // Get out of the choice
      (0,external_kolmafia_.visitUrl)("main.php");

      return foundOre != null;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if (this.needRecalculate) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            _this2.createPaths(false);
            AdventureFinder.recalculatePath();
          }
        };
      }

      if (
      this.getOreRemaining() < 3 &&
      path.canUse(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST) &&
      this.isHeistable())
      {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            path.
            getResource(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST).
            doHeist(_this2.neededOre());
          }
        };
      }

      if (
      path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER) ||
      path.canUse(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS))
      {
        return this.doFaxers(path);
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER)) {
        return this.doClover(path);
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL) > 0) {
        return this.doPull(path);
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER)) {
        return this.doCopier(path);
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.DECK_OF_EVERY_CARD_CHEAT */.s6.DECK_OF_EVERY_CARD_CHEAT)) {
        return this.doPackOfCardsCheat(path);
      }

      throw "Not sure what we should be doing";
    } }, { key: "doClover", value:

    function doClover(path) {var _this3 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          while (path.canUse(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER)) {
            GreyClovers.doOres();
            greyAdv(_this3.mines);
            path.addUsed(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER);
          }
        }
      };
    } }, { key: "doFaxers", value:

    function doFaxers(path) {var _this4 = this;
      var outfit = new GreyOutfit();
      outfit.addWeight("DA").addWeight("DR").addWeight("ML", -1);

      if (path.canUse(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX) > 0) {
        path.getResource(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX).prepare(outfit);
      }

      if (path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY)) {
        path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).prepare(outfit);
      }

      return {
        location: null,
        outfit: outfit,
        familiar: path.canUse(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST) ? this.burglar : null,
        disableFamOverride: path.canUse(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST) > 0,
        run: function run() {
          if (_this4.doDuping()) {
            (0,external_kolmafia_.useFamiliar)(_this4.goose);
          } else if (
          path.canUse(ResourceTypes/* ResourceCategory.CAT_HEIST */.s6.CAT_HEIST) &&
          _this4.isHeistReady())
          {
            (0,external_kolmafia_.useFamiliar)(_this4.burglar);
          } else if (
          _this4.getOreRemaining() == 3 &&
          !path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL) &&
          !path.canUse(ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER) &&
          !path.canUse(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX) &&
          !path.canUse(ResourceTypes/* ResourceCategory.CLOVER */.s6.CLOVER))
          {
            throw "Something seems wrong, trying to call a faxer but we can probably only get 2 ores";
          }

          var macro = new MacroBuilder/* Macro */.LE();

          var props = new Properties_PropertyManager();

          try {
            var yr = path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);

            if (yr != null) {
              yr.prepare(null, props);
            }

            if (path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER)) {
              path.getResource(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER).fax(_this4.mountainMan);
              path.addUsed(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);
            } else if (path.canUse(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS)) {
              path.getResource(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS).pocket(565);
              path.addUsed(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS);
            } else {
              throw "No way to start a mountain man combat!";
            }

            if ((0,external_kolmafia_.currentRound)() == 0) {
              throw "I should be in combat!";
            }

            if (_this4.doDuping()) {
              macro = macro.skill(external_kolmafia_.Skill.get("Emit Matter Duplicating Drones"));
            } else if (path.canUse(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX)) {
              while (
              path.canUse(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX) &&
              _this4.getOreRemaining() > 2)
              {
                (0,external_kolmafia_.print)("Drop my ore dammit!", "red");
                path.getResource(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX).macro().submit();
                path.addUsed(ResourceTypes/* ResourceCategory.POLAR_VORTEX */.s6.POLAR_VORTEX);
              }

              if (_this4.getOreRemaining() > 2) {
                (0,external_kolmafia_.print)(
                "Drat. We're going to have to get the last ore another way.",
                "red");

              }
            }

            if (yr != null) {
              macro.step(yr.macro());
            }

            greyAdv(
            "main.php",
            outfit,
            new AdventureSettings().setStartOfFightMacro(macro));

          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_.currentRound)() != 0 || (0,external_kolmafia_.handlingChoice)()) {
            throw "Expected to have fight finished!";
          }
        }
      };
    } }, { key: "doDuping", value:

    function doDuping() {
      return (0,external_kolmafia_.familiarWeight)(this.goose) >= this.famWeightToDupe();
    } }, { key: "famWeightToDupe", value:

    function famWeightToDupe() {
      if (this.neededOre() == this.asbestos) {
        return 6;
      } else if (this.neededOre() == this.linoleum) {
        return 8;
      } else if (this.neededOre() == this.chrome) {
        return 10;
      } else {
        throw "Unknown ore";
      }
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL8MountainOre;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/QuestL8IcePeak.ts
function QuestL8IcePeak_typeof(obj) {"@babel/helpers - typeof";return QuestL8IcePeak_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL8IcePeak_typeof(obj);}function QuestL8IcePeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL8IcePeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL8IcePeak_toPropertyKey(descriptor.key), descriptor);}}function QuestL8IcePeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL8IcePeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL8IcePeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL8IcePeak_defineProperty(obj, key, value) {key = QuestL8IcePeak_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL8IcePeak_toPropertyKey(arg) {var key = QuestL8IcePeak_toPrimitive(arg, "string");return QuestL8IcePeak_typeof(key) === "symbol" ? key : String(key);}function QuestL8IcePeak_toPrimitive(input, hint) {if (QuestL8IcePeak_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL8IcePeak_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL8IcePeak = /*#__PURE__*/function () {


  function QuestL8IcePeak() {QuestL8IcePeak_classCallCheck(this, QuestL8IcePeak);QuestL8IcePeak_defineProperty(this, "children", []);
    this.children.push(new QuestL8MountainGoats());
    this.children.push(new QuestL8MountainOre());
    this.children.push(new QuestL8MountainNinja());
    this.children.push(new QuestL8MountainBoss());
  }QuestL8IcePeak_createClass(QuestL8IcePeak, [{ key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL08Trapper");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Ice / Trapper";
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          _this.talkTrapper();
        }
      };
    } }, { key: "getStatus", value:

    function getStatus() {
      return getQuestStatus("questL08Trapper");
    } }, { key: "talkTrapper", value:

    function talkTrapper() {
      (0,external_kolmafia_.visitUrl)("place.php?whichplace=mclargehuge&action=trappercabin");
    } }]);return QuestL8IcePeak;}();


var MountainStatus;(function (MountainStatus) {MountainStatus[MountainStatus["started"] = 0] = "started";MountainStatus[MountainStatus["TRAPPER_DEMANDS"] = 1] = "TRAPPER_DEMANDS";MountainStatus[MountainStatus["GET_OUTFIT"] = 2] = "GET_OUTFIT";MountainStatus[MountainStatus["UNLOCKED_PEAK"] = 3] = "UNLOCKED_PEAK";MountainStatus[MountainStatus["FIGHTING_YETI"] = 4] = "FIGHTING_YETI";MountainStatus[MountainStatus["DEFEATED_BOAR"] = 5] = "DEFEATED_BOAR";MountainStatus[MountainStatus["finished"] = 100] = "finished";})(MountainStatus || (MountainStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9MurderPeak.ts
function QuestL9MurderPeak_typeof(obj) {"@babel/helpers - typeof";return QuestL9MurderPeak_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL9MurderPeak_typeof(obj);}function QuestL9MurderPeak_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL9MurderPeak_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL9MurderPeak_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL9MurderPeak_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL9MurderPeak_arrayLikeToArray(o, minLen);}function QuestL9MurderPeak_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL9MurderPeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9MurderPeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL9MurderPeak_toPropertyKey(descriptor.key), descriptor);}}function QuestL9MurderPeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9MurderPeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9MurderPeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9MurderPeak_defineProperty(obj, key, value) {key = QuestL9MurderPeak_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL9MurderPeak_toPropertyKey(arg) {var key = QuestL9MurderPeak_toPrimitive(arg, "string");return QuestL9MurderPeak_typeof(key) === "symbol" ? key : String(key);}function QuestL9MurderPeak_toPrimitive(input, hint) {if (QuestL9MurderPeak_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL9MurderPeak_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var MurderHandler = /*#__PURE__*/function () {function MurderHandler() {QuestL9MurderPeak_classCallCheck(this, MurderHandler);QuestL9MurderPeak_defineProperty(this, "crude",
    external_kolmafia_.Item.get("Bubblin' Crude"));QuestL9MurderPeak_defineProperty(this, "jar",
    external_kolmafia_.Item.get("Jar of Oil"));QuestL9MurderPeak_defineProperty(this, "rusty",
    external_kolmafia_.Item.get("Rusty Hedge Trimmers"));QuestL9MurderPeak_defineProperty(this, "loc",
    external_kolmafia_.Location.get("Twin Peak"));QuestL9MurderPeak_defineProperty(this, "trimmerMonsters",
    [
    "bearpig topiary animal",
    "elephant (meatcar?) topiary animal",
    "spider (duck?) topiary animal"].
    map(function (s) {return external_kolmafia_.Monster.get(s);}));QuestL9MurderPeak_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("Conifer Polymers"));QuestL9MurderPeak_defineProperty(this, "hasRes",
    false);QuestL9MurderPeak_defineProperty(this, "resCheckIn",
    0);QuestL9MurderPeak_defineProperty(this, "orb",
    external_kolmafia_.Item.get("miniature crystal ball"));QuestL9MurderPeak_defineProperty(this, "canOfPaint",
    external_kolmafia_.Item.get("Can of black paint"));QuestL9MurderPeak_defineProperty(this, "paintEffect",
    external_kolmafia_.Effect.get("Red Door Syndrome"));}QuestL9MurderPeak_createClass(MurderHandler, [{ key: "getId", value:

    function getId() {
      return "Council / Peaks / TwinPeak";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if (getQuestStatus("questL09Topping") < 1) {
        return QuestStatus.NOT_READY;
      }

      if (this.isComplete()) {
        return QuestStatus.COMPLETED;
      }

      var status = hasNonCombatSkillsReady() ?
      QuestStatus.READY :
      QuestStatus.FASTER_LATER;

      if (this.questNeedsJar()) {
        this.createJar();

        if (this.hasJar()) {
          return status;
        }
      }

      if (
      this.questNeedsFood() &&
      (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Gravitational Compression")))
      {
        return status;
      }

      if (this.questNeedsInit()) {
        return status;
      }

      if (this.questNeedsStenchRes()) {
        if (getQuestStatus("questL11Black") <= 2 || (0,external_kolmafia_.myMeat)() < 1200) {
          return QuestStatus.NOT_READY;
        }

        if (!this.hasRes && this.resCheckIn < (0,external_kolmafia_.turnsPlayed)()) {
          this.resCheckIn = (0,external_kolmafia_.turnsPlayed)() + 5;

          (0,external_kolmafia_.maximize)("stench res -tie", true);
          this.hasRes =
          (0,external_kolmafia_.numericModifier)("Generated:_spec", "Stench Resistance") >= (
          (0,external_kolmafia_.haveEffect)(this.paintEffect) ? 4 : 2);
        }

        if (this.hasRes) {
          return status;
        }
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if ((0,external_kolmafia_.availableAmount)(this.rusty) == 0) {
        outfit.setNoCombat();

        var preds = currentPredictions();

        if (
        !preds.has(this.loc) ||
        (0,external_kolmafia_.itemDrops)(preds.get(this.loc))[this.rusty.name] != null)
        {
          outfit.setItemDrops();
        }
      }

      this.createJar();

      if (this.questNeedsJar() && this.hasJar()) {


        // Empty
      } else if (this.questNeedsFood()) {outfit.addWeight("item drop", 100, 50, 50);} else if (this.questNeedsInit()) {
        outfit.addWeight("init", 100, 40, 40);
      } else if (this.questNeedsStenchRes()) {
        outfit.addWeight("stench res", 1000000, 4, 4);
      }

      return {
        location: this.loc,
        outfit: outfit,
        orbs: this.trimmerMonsters,
        run: function run() {
          var props = new Properties_PropertyManager();
          //cliExecute("retrocape vampire hold");
          /* if (getProperty("backupCameraMode") != "init") {
            cliExecute("backupcamera init");
          }*/

          props.setChoice(1056, 1);
          props.setChoice(604, 1);
          props.setChoice(607, 1);
          props.setChoice(608, 1);
          props.setChoice(609, 1);
          props.setChoice(610, 1);
          props.setChoice(616, 1);

          try {
            if (_this.questNeedsJar() && _this.hasJar()) {
              props.setChoice(606, 3);
            } else if (
            _this.questNeedsStenchRes() &&
            (0,external_kolmafia_.numericModifier)("Stench Resistance") >= (
            (0,external_kolmafia_.haveEffect)(_this.paintEffect) ? 4 : 2))
            {
              props.setChoice(606, 1);

              if (
              (0,external_kolmafia_.numericModifier)("Stench Resistance") < 4 &&
              (0,external_kolmafia_.haveEffect)(_this.paintEffect) == 0)
              {
                (0,external_kolmafia_.use)(_this.canOfPaint);
              }
            } else if (_this.questNeedsFood() && (0,external_kolmafia_.itemDropModifier)() >= 50) {
              props.setChoice(606, 2);
            } else if (
            _this.questNeedsInit() &&
            (0,external_kolmafia_.numericModifier)("initiative") >= 40)
            {
              props.setChoice(606, 4);
            } else {
              throw "Eh?? We're at murder peak, but we don't match the criteria for any of the choices. Jar? ".concat(_this.questNeedsJar(), ", ").concat(_this.hasJar(), ", Stench Res? ").concat(_this.questNeedsStenchRes(), ", ").concat((0,external_kolmafia_.numericModifier)(
              "Stench Resistance"), ", , food? ").concat(
              _this.questNeedsFood(), " ").concat((0,external_kolmafia_.itemDropModifier)(), ", Init? ").concat(_this.questNeedsInit(), " ").concat((0,external_kolmafia_.numericModifier)(
              "initiative"), ". Maybe you need stench res, but the script can't find it for you?");

            }

            if ((0,external_kolmafia_.availableAmount)(_this.rusty) > 0) {
              var predictions = (0,external_kolmafia_.getProperty)("crystalBallPredictions").split(
              "|");


              greyAdv(
              "inv_use.php?pwd=&which=3&whichitem=" +
              (0,external_kolmafia_.toInt)(_this.rusty) +
              "&ajax=1");


              if ((0,external_kolmafia_.availableAmount)(_this.orb) > 0) {
                (0,external_kolmafia_.visitUrl)("inventory.php?ponder=1", false);
                var newPredictions = (0,external_kolmafia_.getProperty)("crystalBallPredictions").
                split("|").
                map(function (s) {
                  if (
                  !s.startsWith((0,external_kolmafia_.turnsPlayed)() + ":Twin Peak:") ||
                  predictions.includes(s))
                  {
                    return s;
                  }

                  return (0,external_kolmafia_.turnsPlayed)() - 1 + s.substring(s.indexOf(":"));
                });

                (0,external_kolmafia_.setProperty)("crystalBallPredictions", newPredictions.join("|"));
              }
            } else {
              var settings = new AdventureSettings();var _iterator = QuestL9MurderPeak_createForOfIteratorHelper(

                _this.trimmerMonsters),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var monster = _step.value;
                  settings.addNoBanish(monster);
                }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

              greyAdv(_this.loc, outfit);
            }
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "isComplete", value:

    function isComplete() {
      return this.getMurderStatus() >= 15;
    } }, { key: "hasJar", value:

    function hasJar() {
      return (0,external_kolmafia_.availableAmount)(this.jar) > 0;
    } }, { key: "createJar", value:

    function createJar() {
      if (
      this.hasJar() ||
      !this.questNeedsJar() ||
      (0,external_kolmafia_.availableAmount)(this.crude) < 12)
      {
        return;
      }

      (0,external_kolmafia_.create)(this.jar);
    } }, { key: "getMurderStatus", value:

    function getMurderStatus() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("twinPeakProgress"));
    } }, { key: "questNeedsStenchRes", value:

    function questNeedsStenchRes() {
      return (this.getMurderStatus() & 1) == 0;
    } }, { key: "questNeedsFood", value:

    function questNeedsFood() {
      return (this.getMurderStatus() & 2) == 0;
    } }, { key: "questNeedsJar", value:

    function questNeedsJar() {
      return (this.getMurderStatus() & 4) == 0;
    } }, { key: "questNeedsInit", value:

    function questNeedsInit() {
      return this.getMurderStatus() == 7;
    } }]);return MurderHandler;}();
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestSmutOrcsCargoShorts.ts
function QuestSmutOrcsCargoShorts_typeof(obj) {"@babel/helpers - typeof";return QuestSmutOrcsCargoShorts_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSmutOrcsCargoShorts_typeof(obj);}function QuestSmutOrcsCargoShorts_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSmutOrcsCargoShorts_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSmutOrcsCargoShorts_toPropertyKey(descriptor.key), descriptor);}}function QuestSmutOrcsCargoShorts_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSmutOrcsCargoShorts_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSmutOrcsCargoShorts_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSmutOrcsCargoShorts_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestSmutOrcsCargoShorts_setPrototypeOf(subClass, superClass);}function QuestSmutOrcsCargoShorts_setPrototypeOf(o, p) {QuestSmutOrcsCargoShorts_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestSmutOrcsCargoShorts_setPrototypeOf(o, p);}function QuestSmutOrcsCargoShorts_createSuper(Derived) {var hasNativeReflectConstruct = QuestSmutOrcsCargoShorts_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestSmutOrcsCargoShorts_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestSmutOrcsCargoShorts_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestSmutOrcsCargoShorts_possibleConstructorReturn(this, result);};}function QuestSmutOrcsCargoShorts_possibleConstructorReturn(self, call) {if (call && (QuestSmutOrcsCargoShorts_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestSmutOrcsCargoShorts_assertThisInitialized(self);}function QuestSmutOrcsCargoShorts_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestSmutOrcsCargoShorts_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestSmutOrcsCargoShorts_getPrototypeOf(o) {QuestSmutOrcsCargoShorts_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestSmutOrcsCargoShorts_getPrototypeOf(o);}function QuestSmutOrcsCargoShorts_defineProperty(obj, key, value) {key = QuestSmutOrcsCargoShorts_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSmutOrcsCargoShorts_toPropertyKey(arg) {var key = QuestSmutOrcsCargoShorts_toPrimitive(arg, "string");return QuestSmutOrcsCargoShorts_typeof(key) === "symbol" ? key : String(key);}function QuestSmutOrcsCargoShorts_toPrimitive(input, hint) {if (QuestSmutOrcsCargoShorts_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSmutOrcsCargoShorts_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL9SmutOrcsCargoShorts = /*#__PURE__*/function (_TaskInfo) {QuestSmutOrcsCargoShorts_inherits(QuestL9SmutOrcsCargoShorts, _TaskInfo);var _super = QuestSmutOrcsCargoShorts_createSuper(QuestL9SmutOrcsCargoShorts);function QuestL9SmutOrcsCargoShorts() {var _this;QuestSmutOrcsCargoShorts_classCallCheck(this, QuestL9SmutOrcsCargoShorts);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestSmutOrcsCargoShorts_defineProperty(QuestSmutOrcsCargoShorts_assertThisInitialized(_this), "shorts",
    external_kolmafia_.Item.get("Cargo Cultist Shorts"));QuestSmutOrcsCargoShorts_defineProperty(QuestSmutOrcsCargoShorts_assertThisInitialized(_this), "paths", void 0);return _this;}QuestSmutOrcsCargoShorts_createClass(QuestL9SmutOrcsCargoShorts, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      var pathShorts = new PossiblePath(-5).add(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS);
      var noShorts = new PossiblePath(0);

      if ((0,external_kolmafia_.availableAmount)(this.shorts) == 0) {
        this.paths = [noShorts];
        return;
      }

      this.paths = [noShorts, pathShorts];
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / CargoShortsSmut";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "status", value:

    function status(path) {
      if (path != null && !path.canUse(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS)) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL09Topping");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0 || (0,external_kolmafia_.myAdventures)() < 40) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) < 6) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {
      return {
        location: null,
        familiar: external_kolmafia_.Familiar.get("Grey Goose"),
        disableFamOverride: true,
        mayFreeRun: false,
        run: function run() {
          path.getResource(ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS).pocket(666);

          var macro = MacroBuilder/* Macro.skill */.LE.skill(
          external_kolmafia_.Skill.get("Emit Matter Duplicating Drones")).
          step(greyKillingBlow(new GreyOutfit()));
          (0,external_kolmafia_.print)("Macro: " + macro.toString());

          macro.submit();
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      if (!reallyMustBeDone && (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) >= 6) {
        return true;
      }

      return false;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestL9SmutOrcsCargoShorts;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9SmutOrcs.ts
function QuestL9SmutOrcs_typeof(obj) {"@babel/helpers - typeof";return QuestL9SmutOrcs_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL9SmutOrcs_typeof(obj);}function QuestL9SmutOrcs_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL9SmutOrcs_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL9SmutOrcs_slicedToArray(arr, i) {return QuestL9SmutOrcs_arrayWithHoles(arr) || QuestL9SmutOrcs_iterableToArrayLimit(arr, i) || QuestL9SmutOrcs_unsupportedIterableToArray(arr, i) || QuestL9SmutOrcs_nonIterableRest();}function QuestL9SmutOrcs_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL9SmutOrcs_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL9SmutOrcs_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL9SmutOrcs_arrayLikeToArray(o, minLen);}function QuestL9SmutOrcs_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL9SmutOrcs_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL9SmutOrcs_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL9SmutOrcs_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9SmutOrcs_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL9SmutOrcs_toPropertyKey(descriptor.key), descriptor);}}function QuestL9SmutOrcs_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9SmutOrcs_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9SmutOrcs_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9SmutOrcs_defineProperty(obj, key, value) {key = QuestL9SmutOrcs_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL9SmutOrcs_toPropertyKey(arg) {var key = QuestL9SmutOrcs_toPrimitive(arg, "string");return QuestL9SmutOrcs_typeof(key) === "symbol" ? key : String(key);}function QuestL9SmutOrcs_toPrimitive(input, hint) {if (QuestL9SmutOrcs_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL9SmutOrcs_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}










var SmutOrcs = /*#__PURE__*/function () {function SmutOrcs() {QuestL9SmutOrcs_classCallCheck(this, SmutOrcs);QuestL9SmutOrcs_defineProperty(this, "loc",
    external_kolmafia_.Location.get("The Smut Orc Logging Camp"));QuestL9SmutOrcs_defineProperty(this, "shorts",
    new QuestL9SmutOrcsCargoShorts());QuestL9SmutOrcs_defineProperty(this, "hoaReg",
    external_kolmafia_.Item.get("HOA regulation book"));QuestL9SmutOrcs_defineProperty(this, "spaceTrip",
    external_kolmafia_.Item.get("Space Trip safety headphones"));QuestL9SmutOrcs_defineProperty(this, "canOfPaint",
    external_kolmafia_.Item.get("Can of black paint"));QuestL9SmutOrcs_defineProperty(this, "paintRes",
    (0,external_kolmafia_.effectModifier)(this.canOfPaint, "Effect"));QuestL9SmutOrcs_defineProperty(this, "asdonMartin",
    external_kolmafia_.Item.get("Asdon Martin keyfob"));QuestL9SmutOrcs_defineProperty(this, "driveSafe",
    external_kolmafia_.Effect.get("Driving Safely"));QuestL9SmutOrcs_defineProperty(this, "lastColdCheck",
    0);QuestL9SmutOrcs_defineProperty(this, "hasEnoughCold",
    false);QuestL9SmutOrcs_defineProperty(this, "lastColdMaximize",
    "Cold Damage");QuestL9SmutOrcs_defineProperty(this, "smutSleazeSkill",
    external_kolmafia_.Skill.get("Procgen Ribaldry"));QuestL9SmutOrcs_defineProperty(this, "sleazeMonster",
    external_kolmafia_.Monster.get("Smut orc screwer"));QuestL9SmutOrcs_defineProperty(this, "damagingEquips",
    [
    "Muscle band",
    "Ant Hoe",
    "Ant Pick",
    "Ant Pitchfork",
    "Ant Rake",
    "Ant Sickle",
    "Tiny bowler"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestL9SmutOrcs_defineProperty(this, "plastered",
    external_kolmafia_.Monster.get("plastered frat orc"));QuestL9SmutOrcs_defineProperty(this, "noise",
    external_kolmafia_.Skill.get("Grey Noise"));QuestL9SmutOrcs_defineProperty(this, "trainset",
    external_kolmafia_.Item.get("model train set"));QuestL9SmutOrcs_defineProperty(this, "toAbsorb", void 0);}QuestL9SmutOrcs_createClass(SmutOrcs, [{ key: "level", value:


    function level() {
      return 9;
    } }, { key: "getChildren", value:

    function getChildren() {
      return [this.shorts];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      if (reallyMustBeDone) {
        return false;
      }

      return this.getReadyToBuild() > 0 || isGhostBustingTime(this.loc);
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questL09Topping");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (this.getReadyToBuild() > 0) {
        return QuestStatus.READY;
      }

      if (isGhostBustingTime(this.loc) && !this.isNCTime()) {
        return QuestStatus.NOT_READY;
      }

      if (
      status < 0 ||
      (0,external_kolmafia_.myMp)() < 15 ||
      !GreyAbsorber_AbsorbsProvider.getAbsorbedMonsters().includes(this.plastered))
      {
        return QuestStatus.NOT_READY;
      }

      if (!this.isNCTime()) {
        if (this.lastColdCheck < (0,external_kolmafia_.turnsPlayed)() - 5) {
          this.lastColdCheck = (0,external_kolmafia_.turnsPlayed)();

          var compare = [];

          (0,external_kolmafia_.maximize)("cold dmg 10 min -ML 70 min -tie", true);
          var melee = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Cold Damage");
          compare.push(["cold dmg", melee]);

          if ((0,external_kolmafia_.haveSkill)(this.noise)) {
            (0,external_kolmafia_.maximize)("cold spell dmg 10 min -ML 70 min -tie", true);
            var spell = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Cold Spell Damage");

            compare.push(["cold spell dmg", spell]);
          }

          // Sort from highest to lowest
          compare.sort(function (_ref, _ref2) {var _ref3 = QuestL9SmutOrcs_slicedToArray(_ref, 2),c1 = _ref3[1];var _ref4 = QuestL9SmutOrcs_slicedToArray(_ref2, 2),c2 = _ref4[1];return c2 - c1;});
          this.hasEnoughCold = compare[0][1] >= 5;
          this.lastColdMaximize = compare[0][0];
        }

        if (!this.hasEnoughCold) {
          return QuestStatus.NOT_READY;
        }
      }

      if ((0,external_kolmafia_.getWorkshed)() == this.trainset && this.toAbsorb.length == 0) {
        return QuestStatus.FASTER_LATER;
      }

      if (getQuestStatus("questL11Black") <= 1) {
        return QuestStatus.FASTER_LATER;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Shen") != "finished") {


        //return QuestStatus.FASTER_LATER;
      }if (this.isNCTime() && (0,external_kolmafia_.myMeat)() <= 1000) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / Orcs";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "getFastenersHave", value:

    function getFastenersHave() {
      return ["Thick Caulk", "Long Hard Screw", "Messy Butt Joint"].reduce(
      function (s, v) {return s + (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get(v));},
      0);

    } }, { key: "getLumberHave", value:

    function getLumberHave() {
      return [
      "Morningwood Plank",
      "Raging Hardwood Plank",
      "Weirdwood Plank"].
      reduce(function (s, v) {return s + (0,external_kolmafia_.itemAmount)(external_kolmafia_.Item.get(v));}, 0);
    } }, { key: "getChasmBuilt", value:

    function getChasmBuilt() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("chasmBridgeProgress"));
    } }, { key: "getChasmRemaining", value:

    function getChasmRemaining() {
      var remaining = 30 - this.getChasmBuilt();

      return remaining - this.getReadyToBuild();
    } }, { key: "getReadyToBuild", value:

    function getReadyToBuild() {
      return Math.min(this.getFastenersHave(), this.getLumberHave());
    } }, { key: "run", value:

    function run() {var _this = this;
      if (this.getReadyToBuild() > 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            _this.tryBuild();
          }
        };
      }

      if (this.isNCTime()) {
        return this.tryNC();
      }

      return this.tryCombat();
    } }, { key: "tryCombat", value:

    function tryCombat() {var _this2 = this;
      // max -ml, max cold dmg, raise item drop finally
      var outfit = new GreyOutfit();
      outfit.addWeight("ML", -5);
      outfit.addWeight(this.lastColdMaximize, 100000, 5, 5);
      outfit.setItemDrops();

      if (
      this.getLumberHave() <= this.getFastenersHave() &&
      this.getChasmRemaining() > this.getLumberHave())
      {
        var quest = this.tryHatchet();

        if (quest != null) {
          return quest;
        }

        if ((0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Logging Hatchet")) > 0) {
          outfit.addWeight(external_kolmafia_.Item.get("Logging Hatchet"), 100);
        }
      }

      if (
      this.getLumberHave() >= this.getFastenersHave() &&
      this.getChasmRemaining() > this.getFastenersHave())
      {
        if ((0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Loadstone")) > 0) {
          outfit.addWeight(external_kolmafia_.Item.get("Loadstone"), 100);
        }
      }

      return {
        location: this.loc,
        outfit: outfit,
        mayFreeRun: false,
        orbs: (0,external_kolmafia_.haveSkill)(this.smutSleazeSkill) ? null : [this.sleazeMonster],
        run: function run() {
          var attack;

          if (_this2.lastColdMaximize.includes("cold dmg")) {
            attack = MacroBuilder/* Macro.attack */.LE.attack();
          } else {
            attack = MacroBuilder/* Macro.skill */.LE.skill("Grey Noise");
          }var _iterator = QuestL9SmutOrcs_createForOfIteratorHelper(

            _this2.damagingEquips),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
              if ((0,external_kolmafia_.equippedAmount)(i) > 0) {
                (0,external_kolmafia_.equip)(external_kolmafia_.Slot.get("familiar"), external_kolmafia_.Item.none);
              }
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

          greyAdv(
          _this2.loc,
          outfit,
          new AdventureSettings().setFinishingBlowMacro(attack.repeat()));

          _this2.tryBuild();
        }
      };
    } }, { key: "tryNC", value:

    function tryNC() {var _this3 = this;
      return {
        location: null,
        run: function run() {
          var props = new Properties_PropertyManager();
          var outfits = _this3.getBestBlechOutfit();
          var need = Math.min(14, _this3.getChasmRemaining());

          if (outfits[0][2] < need) {
            var mox = outfits.find(function (o) {return o[0] == 3;});
            var extraRes =
            ((0,external_kolmafia_.haveEffect)(_this3.paintRes) == 0 ? 1 : 0) + (
            (0,external_kolmafia_.getWorkshed)() == _this3.asdonMartin &&
            (0,external_kolmafia_.haveEffect)(_this3.driveSafe) == 0 &&
            (0,external_kolmafia_.getFuel)() >= 37 ?
            1 :
            0);

            if (
            extraRes > 0 && (
            mox == outfits[0] || mox[2] + extraRes > outfits[0][2]))
            {
              if ((0,external_kolmafia_.myMeat)() >= 1000 && (0,external_kolmafia_.haveEffect)(_this3.paintRes) == 0) {
                (0,external_kolmafia_.cliExecute)("retrieve " + _this3.canOfPaint);
                (0,external_kolmafia_.use)(_this3.canOfPaint);
              }

              if (
              (0,external_kolmafia_.getWorkshed)() == _this3.asdonMartin &&
              (0,external_kolmafia_.haveEffect)(_this3.driveSafe) == 0 &&
              (0,external_kolmafia_.getFuel)() >= 37)
              {
                (0,external_kolmafia_.cliExecute)("asdonmartin drive safely");
              }

              outfits = _this3.getBestBlechOutfit();
            }
          }

          var best = outfits[0];

          (0,external_kolmafia_.maximize)(best[1], false);

          try {
            props.setChoice(1345, best[0]);
            greyAdv(_this3.loc);
            _this3.tryBuild();
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "tryExtraRes", value:

    function tryExtraRes() {} }, { key: "isNCTime", value:

    function isNCTime() {
      var progress = (0,external_kolmafia_.getProperty)("smutOrcNoncombatProgress");

      if (progress == "") {
        return false;
      }

      return (0,external_kolmafia_.toInt)(progress) >= 15;
    } }, { key: "tryBuild", value:

    function tryBuild() {
      var box = external_kolmafia_.Item.get("Smut Orc Keepsake Box");

      if ((0,external_kolmafia_.itemAmount)(box) > 0) {
        (0,external_kolmafia_.use)(box, (0,external_kolmafia_.itemAmount)(box));
      }

      (0,external_kolmafia_.visitUrl)(
      "place.php?whichplace=orc_chasm&action=bridge" +
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("chasmBridgeProgress")));

    } }, { key: "tryHatchet", value:

    function tryHatchet() {
      if (!(0,external_kolmafia_.canadiaAvailable)()) {
        return;
      }

      if ((0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Logging Hatchet")) > 0) {
        return;
      }

      var loc = external_kolmafia_.Location.get("Camp Logging Camp");

      if (
      loc.turnsSpent > 0 ||
      loc.combatQueue != "" ||
      loc.noncombatQueue != "")
      {
        return;
      }

      return {
        location: null,
        run: function run() {
          greyAdv(loc);
        }
      };
    }

    // getChildren(): QuestInfo[] {
    //   return [this.shorts];
    // }
  }, { key: "simMax", value:
    function simMax(ma) {
      var sim = (0,external_kolmafia_.maximize)(ma, 0, 0, true, true);
      var score = 0;var _iterator2 = QuestL9SmutOrcs_createForOfIteratorHelper(

        sim),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var e = _step2.value;
          score += e.score;
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return score;
    } }, { key: "getBestBlechOutfit", value:

    function getBestBlechOutfit() {
      // Stolen from autoscend
      // floor(sqrt((mus+flat_weapon_damage)/15*(1+percent_weapon_damage/100)))
      var musMaximizer =
      "100muscle,100weapon damage,1000weapon damage percent +switch left-hand man";
      var mysMaximizer =
      "100mysticality,100spell damage,1000 spell damage percent +switch left-hand man";
      var moxMaximizer = "100moxie,1000sleaze resistance +switch left-hand man";

      this.simMax(musMaximizer);
      var musmus = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Buffed Muscle");
      var musflat = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Weapon Damage");
      var musperc = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Weapon Damage Percent");
      var muscleScore = Math.floor(
      Math.sqrt((musmus + musflat) / 15 * (1 + musperc / 100)));


      this.simMax(mysMaximizer);
      var mysmys = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Buffed Mysticality");
      var mysflat = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Spell Damage");
      var mysperc = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Spell Damage Percent");
      var mystScore = Math.floor(
      Math.sqrt((mysmys + mysflat) / 15 * (1 + mysperc / 100)));


      this.simMax(moxMaximizer);
      var moxmox = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Buffed Moxie");
      var moxres = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Sleaze Resistance");
      var moxScore = Math.floor(Math.sqrt(moxmox / 30 * (1 + moxres * 0.69)));

      (0,external_kolmafia_.print)("Mus Score: " + muscleScore, "blue");
      (0,external_kolmafia_.print)("Myst Score: " + mystScore, "blue");
      (0,external_kolmafia_.print)("Moxie Score: " + moxScore, "blue");

      var mus = [1, musMaximizer, muscleScore];
      var mys = [2, mysMaximizer, mystScore];
      var mox = [3, moxMaximizer, moxScore];

      return [mus, mys, mox].sort(function (m1, m2) {return m2[2] - m1[2];});
    } }]);return SmutOrcs;}();
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9AbooPeak.ts
function QuestL9AbooPeak_typeof(obj) {"@babel/helpers - typeof";return QuestL9AbooPeak_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL9AbooPeak_typeof(obj);}function QuestL9AbooPeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9AbooPeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL9AbooPeak_toPropertyKey(descriptor.key), descriptor);}}function QuestL9AbooPeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9AbooPeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9AbooPeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9AbooPeak_defineProperty(obj, key, value) {key = QuestL9AbooPeak_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL9AbooPeak_toPropertyKey(arg) {var key = QuestL9AbooPeak_toPrimitive(arg, "string");return QuestL9AbooPeak_typeof(key) === "symbol" ? key : String(key);}function QuestL9AbooPeak_toPrimitive(input, hint) {if (QuestL9AbooPeak_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL9AbooPeak_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var ABooHandler = /*#__PURE__*/function () {function ABooHandler() {QuestL9AbooPeak_classCallCheck(this, ABooHandler);QuestL9AbooPeak_defineProperty(this, "clue",
    external_kolmafia_.Item.get("A-Boo Clue"));QuestL9AbooPeak_defineProperty(this, "loc",
    external_kolmafia_.Location.get("A-Boo Peak"));QuestL9AbooPeak_defineProperty(this, "damageLevels",
    [13, 25, 50, 125, 250]);QuestL9AbooPeak_defineProperty(this, "canOfPaint",
    external_kolmafia_.Item.get("Can of black paint"));QuestL9AbooPeak_defineProperty(this, "asdonMartin",
    external_kolmafia_.Item.get("Asdon Martin keyfob"));QuestL9AbooPeak_defineProperty(this, "driveSafe",
    external_kolmafia_.Effect.get("Driving Safely"));}QuestL9AbooPeak_createClass(ABooHandler, [{ key: "level", value:

    function level() {
      return 9;
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / AbooPeak";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_.availableAmount)(this.clue) > 0 && this.getProgress() > 0) {
        return this.runClue();
      }

      return this.runCombat();
    } }, { key: "runClue", value:

    function runClue() {var _this = this;
      var outfit = this.createOutfit();

      return {
        location: null,
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();

          if ((0,external_kolmafia_.haveEffect)((0,external_kolmafia_.effectModifier)(_this.canOfPaint, "Effect")) == 0) {
            (0,external_kolmafia_.cliExecute)("acquire 1 " + _this.canOfPaint.name);
            (0,external_kolmafia_.use)(_this.canOfPaint);
          }

          if (
          (0,external_kolmafia_.getWorkshed)() == _this.asdonMartin &&
          (0,external_kolmafia_.haveEffect)(_this.driveSafe) == 0 &&
          (0,external_kolmafia_.getFuel)() >= 37)
          {
            (0,external_kolmafia_.cliExecute)("asdonmartin drive safely");
          }

          try {
            props.setChoice(611, 1);
            (0,external_kolmafia_.use)(_this.clue);

            var settings = new AdventureSettings();
            var turn = 0;

            settings.setChoices({
              calledOutOfScopeChoiceBehavior: function calledOutOfScopeChoiceBehavior() {
                return false;
              },

              handleChoice: function handleChoice() {
                var dmgTaken = _this.damageTaken(turn++);

                if (dmgTaken >= (0,external_kolmafia_.myHp)() || _this.getProgress() <= 0) {
                  return 2;
                }

                (0,external_kolmafia_.print)("Prediction a-boo damage of " + dmgTaken);

                return 1;
              }
            });

            greyAdv(_this.loc, null, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "damageTaken", value:

    function damageTaken(turn) {
      var dmg = this.damageLevels[turn];

      var sDmg = this.damageTakenByElement(dmg, external_kolmafia_.Element.get("spooky"));
      var cDmg = this.damageTakenByElement(dmg, external_kolmafia_.Element.get("cold"));

      return sDmg + cDmg;
    } }, { key: "turnsSurvived", value:

    function turnsSurvived() {
      var totalDamage = 2;
      var reducedBy = 0;

      for (var i = 0; i < this.damageLevels.length; i++) {
        if (this.getProgress() <= reducedBy) {
          return i;
        }

        totalDamage += this.damageTaken(i);

        if (totalDamage >= (0,external_kolmafia_.myHp)()) {
          return i;
        }

        reducedBy += (i + 1) * 2;
      }

      return 5;
    } }, { key: "wouldSurviveClue", value:

    function wouldSurviveClue() {
      var totalDamage = 2;
      var reducedBy = 0;

      for (var i = 0; i < this.damageLevels.length; i++) {
        if (this.getProgress() <= reducedBy) {
          return true;
        }

        totalDamage += this.damageTaken(i);

        if (totalDamage >= (0,external_kolmafia_.myHp)()) {
          return false;
        }

        reducedBy += (i + 1) * 2;
      }

      return true;
    } }, { key: "getElementalResist", value:

    function getElementalResist(level) {
      if (level > 4) {
        return 0.9 - 0.5 * Math.pow(0.05 / 0.06, level - 4);
      }

      return level * 0.1;
    } }, { key: "damageTakenByElement", value:

    function damageTakenByElement(base_damage, element) {
      if (base_damage < 0) {
        return 1;
      }

      var resist = (0,external_kolmafia_.elementalResistance)(element) / 100.0;

      var effective_base_damage = Math.max(30, base_damage);

      var damage = Math.max(
      1,
      Math.ceil(base_damage - effective_base_damage * resist));


      return damage;
    } }, { key: "createOutfit", value:

    function createOutfit() {
      var outfit = new GreyOutfit().
      addWeight("cold res", 40).
      addWeight("spooky res", 40).
      addWeight("ml", -10);
      outfit.hpWeight = 2;

      return outfit;
    } }, { key: "runCombat", value:

    function runCombat() {var _this2 = this;
      var outfit = this.createOutfit();

      return {
        location: this.loc,
        outfit: outfit,
        mayFreeRun: false,
        run: function run() {
          greyAdv(_this2.loc, outfit);
        }
      };
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return this.free() || this.canUseClue();
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }, { key: "free", value:

    function free() {
      return (
        (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("booPeakLit")) &&
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("booPeakProgress")) == 0);

    } }, { key: "status", value:

    function status() {
      if (
      getQuestStatus("questL09Topping") < 1 ||
      getQuestStatus("questL11Black") < 2)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("booPeakLit") == "true") {
        return QuestStatus.COMPLETED;
      }

      if (this.getProgress() <= 0) {
        return QuestStatus.READY;
      }

      if (this.canUseClue()) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.myLevel)() >= 20) {
        return QuestStatus.READY;
      }

      // We always want to do this as late as we can
      return QuestStatus.FASTER_LATER;
    } }, { key: "canUseClue", value:

    function canUseClue() {
      return this.getProgress() > 0 && (0,external_kolmafia_.availableAmount)(this.clue) > 0;
    } }, { key: "getProgress", value:

    function getProgress() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("booPeakProgress"));
    } }]);return ABooHandler;}();
;// CONCATENATED MODULE: ./src/quests/council/peaks/QuestL9OilPeak.ts
function QuestL9OilPeak_typeof(obj) {"@babel/helpers - typeof";return QuestL9OilPeak_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL9OilPeak_typeof(obj);}function QuestL9OilPeak_slicedToArray(arr, i) {return QuestL9OilPeak_arrayWithHoles(arr) || QuestL9OilPeak_iterableToArrayLimit(arr, i) || QuestL9OilPeak_unsupportedIterableToArray(arr, i) || QuestL9OilPeak_nonIterableRest();}function QuestL9OilPeak_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestL9OilPeak_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestL9OilPeak_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestL9OilPeak_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestL9OilPeak_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestL9OilPeak_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestL9OilPeak_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestL9OilPeak_arrayLikeToArray(o, minLen);}function QuestL9OilPeak_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestL9OilPeak_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9OilPeak_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL9OilPeak_toPropertyKey(descriptor.key), descriptor);}}function QuestL9OilPeak_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9OilPeak_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9OilPeak_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9OilPeak_defineProperty(obj, key, value) {key = QuestL9OilPeak_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL9OilPeak_toPropertyKey(arg) {var key = QuestL9OilPeak_toPrimitive(arg, "string");return QuestL9OilPeak_typeof(key) === "symbol" ? key : String(key);}function QuestL9OilPeak_toPrimitive(input, hint) {if (QuestL9OilPeak_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL9OilPeak_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var OilHandler = /*#__PURE__*/function () {function OilHandler() {QuestL9OilPeak_classCallCheck(this, OilHandler);QuestL9OilPeak_defineProperty(this, "loc",
    external_kolmafia_.Location.get("Oil Peak"));QuestL9OilPeak_defineProperty(this, "crude",
    external_kolmafia_.Item.get("Bubblin' Crude"));QuestL9OilPeak_defineProperty(this, "umbrella",
    external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestL9OilPeak_defineProperty(this, "baron",
    external_kolmafia_.Monster.get("Oil Baron"));QuestL9OilPeak_defineProperty(this, "beatenUp",
    external_kolmafia_.Effect.get("Beaten Up"));}QuestL9OilPeak_createClass(OilHandler, [{ key: "getId", value:

    function getId() {
      return "Council / Peaks / OilPeak";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "needsJar", value:

    function needsJar() {
      return (
        ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("twinPeakProgress")) & 4) == 0 &&
        (0,external_kolmafia_.availableAmount)(this.crude) < 12 &&
        (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Jar of Oil")) == 0);

    } }, { key: "level", value:

    function level() {
      return 17;
    } }, { key: "status", value:

    function status() {
      if (
      !this.needsJar() &&
      this.getStatus() <= 0 &&
      (0,external_kolmafia_.getProperty)("oilPeakLit") == "true")
      {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL09Topping") < 1) {
        return QuestStatus.NOT_READY;
      }

      if (this.needsAbsorb()) {
        if ((0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Grey Goose")) < 6) {
          var effects = Object.keys((0,external_kolmafia_.myEffects)()).
          map(function (e) {return external_kolmafia_.Effect.get(e);}).
          reduce(function (p, e) {return (0,external_kolmafia_.numericModifier)(e, "Monster Level") + p;}, 0);

          if (effects != 0) {
            return QuestStatus.NOT_READY;
          }
        }
      }

      if ((0,external_kolmafia_.myHp)() < 90 || (0,external_kolmafia_.haveEffect)(this.beatenUp) > 0) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "needsAbsorb", value:

    function needsAbsorb() {
      return !GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.baron);
    } }, { key: "isReady", value:

    function isReady() {
      return this.needsJar() || this.getStatus() > 0;
    } }, { key: "getStatus", value:

    function getStatus() {
      return (0,external_kolmafia_.toFloat)((0,external_kolmafia_.getProperty)("oilPeakProgress"));
    } }, { key: "doAbsorb", value:

    function doAbsorb() {var _this = this;
      var doneFirst =
      this.loc.turnsSpent > 0 ||
      this.loc.noncombatQueue.includes(
      "Pushin' Down on Me, Pushin' Down on You");


      var outfit = new GreyOutfit();

      return {
        location: this.loc,
        outfit: outfit,
        run: function run() {
          if (doneFirst) {
            (0,external_kolmafia_.print)("Now doing a special adventure for Oil Baron absorb!", "blue");

            if ((0,external_kolmafia_.currentMcd)() > 0) {
              (0,external_kolmafia_.changeMcd)(0);
            }

            var needed = 50;

            var maxResult = (0,external_kolmafia_.maximize)("ml ".concat(
            needed, " min ").concat(needed, " max -tie"),
            0,
            0,
            true,
            true);


            maxResult = maxResult.filter(
            function (res) {return (0,external_kolmafia_.toSlot)(res.item) != external_kolmafia_.Slot.none && res.score != 0;});


            var workingCombos = [];var _iterator = QuestL9OilPeak_createForOfIteratorHelper(

              getAllCombinations(maxResult)),_step;try {var _loop = function _loop() {var combo = _step.value;
                var baseML =
                external_kolmafia_.Slot.all().
                map(function (s) {return [s, (0,external_kolmafia_.equippedItem)(s)];}).
                filter(
                function (_ref) {var _ref2 = QuestL9OilPeak_slicedToArray(_ref, 2),s = _ref2[0],i = _ref2[1];return (
                    i != external_kolmafia_.Item.none &&
                    combo.find(
                    function (r) {return r.command.startsWith("equip " + s) == null;}));}).


                map(function (_ref3) {var _ref4 = QuestL9OilPeak_slicedToArray(_ref3, 2),i = _ref4[1];return (0,external_kolmafia_.numericModifier)(i, "Monster Level");}).
                reduce(function (l, r) {return l + r;}, 0) + 10;

                var addedML = combo.
                map(function (r) {return r.score;}).
                reduce(function (l, r) {return r + l;}, 0);

                if (baseML + addedML < needed) {return "continue";

                }

                workingCombos.push([addedML + baseML, combo.map(function (r) {return r.command;})]);
              };for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;}} catch (err) {_iterator.e(err);} finally {_iterator.f();}

            workingCombos.sort(function (c1, c2) {return c1[0] - c2[0];});

            if (workingCombos.length > 0 && needed > 0) {
              workingCombos[0][1].forEach(function (s) {return (0,external_kolmafia_.cliExecute)(s);});
            }

            var ml = function ml() {
              var level = (0,external_kolmafia_.numericModifier)("Monster Level");

              var state = getUmbrella();

              if (
              state == UmbrellaState.MONSTER_LEVEL &&
              (0,external_kolmafia_.equippedAmount)(_this.umbrella) > 0)
              {
                level *= 0.25;
              }

              return level;
            };

            if (ml() < 50) {
              (0,external_kolmafia_.changeMcd)(10);
            }

            if (ml() < 50) {
              throw "Unable to raise enough ML to get the oil baron, handle manually?";
            } else if (ml() >= 100) {
              throw "Too much ML on the oil baron, we want less than 100!";
            }
          }

          greyAdv(_this.loc);

          if ((0,external_kolmafia_.currentMcd)() > 0) {
            (0,external_kolmafia_.changeMcd)(0);
          }

          if (_this.needsAbsorb() && doneFirst) {
            throw "We spent a turn trying to grab the absorb for oil baron! This didn't work..";
          }
        }
      };
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return this.free();
    } }, { key: "free", value:

    function free() {
      return this.getPressureLeft() <= 0 && !(0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("oilPeakLit"));
    } }, { key: "getPressureLeft", value:

    function getPressureLeft() {
      return (0,external_kolmafia_.toFloat)((0,external_kolmafia_.getProperty)("oilPeakProgress"));
    } }, { key: "run", value:

    function run() {var _this2 = this;
      if (this.free()) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            greyAdv(_this2.loc);
          }
        };
      }

      if (this.needsAbsorb()) {
        return this.doAbsorb();
      }

      var outfit = new GreyOutfit().setItemDrops();
      outfit.addWeight("ML", 2, null, 100);

      if ((0,external_kolmafia_.myMaxhp)() < 150) {
        outfit.addWeight("hp", 1);
      }

      outfit.umbrellaSetting = UmbrellaState.MONSTER_LEVEL;
      outfit.addExtra("-offhand");

      return {
        location: this.loc,
        outfit: outfit,
        mayFreeRun: false,
        run: function run() {
          if ((0,external_kolmafia_.numericModifier)("Monster Level") < 100) {
            (0,external_kolmafia_.changeMcd)(10);
          }

          if ((0,external_kolmafia_.myHp)() < Math.min(150, (0,external_kolmafia_.myMaxhp)() * 0.9)) {
            restoreHPTo(Math.min(150, (0,external_kolmafia_.myMaxhp)() * 0.9));
          }

          if (
          (0,external_kolmafia_.numericModifier)("Monster Level") < 100 &&
          (0,external_kolmafia_.availableAmount)(_this2.umbrella) > 0)
          {
            setUmbrella(UmbrellaState.MONSTER_LEVEL);
            (0,external_kolmafia_.equip)(external_kolmafia_.Item.get("Unbreakable Umbrella"));
          }

          greyAdv(_this2.loc, outfit);
          (0,external_kolmafia_.changeMcd)(0);
        }
      };
    } }]);return OilHandler;}();
;// CONCATENATED MODULE: ./src/quests/council/QuestL9OrcsAndPeaks.ts
function QuestL9OrcsAndPeaks_typeof(obj) {"@babel/helpers - typeof";return QuestL9OrcsAndPeaks_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL9OrcsAndPeaks_typeof(obj);}function QuestL9OrcsAndPeaks_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL9OrcsAndPeaks_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL9OrcsAndPeaks_toPropertyKey(descriptor.key), descriptor);}}function QuestL9OrcsAndPeaks_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL9OrcsAndPeaks_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL9OrcsAndPeaks_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL9OrcsAndPeaks_defineProperty(obj, key, value) {key = QuestL9OrcsAndPeaks_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL9OrcsAndPeaks_toPropertyKey(arg) {var key = QuestL9OrcsAndPeaks_toPrimitive(arg, "string");return QuestL9OrcsAndPeaks_typeof(key) === "symbol" ? key : String(key);}function QuestL9OrcsAndPeaks_toPrimitive(input, hint) {if (QuestL9OrcsAndPeaks_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL9OrcsAndPeaks_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestL9Smut = /*#__PURE__*/function () {function QuestL9Smut() {QuestL9OrcsAndPeaks_classCallCheck(this, QuestL9Smut);QuestL9OrcsAndPeaks_defineProperty(this, "peaks",
    [
    new SmutOrcs(),
    new ABooHandler(),
    new MurderHandler(),
    new OilHandler()]);}QuestL9OrcsAndPeaks_createClass(QuestL9Smut, [{ key: "level", value:


    function level() {
      return 9;
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.peaks;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      var status = this.getStatus();

      if (status == PeakStatus.finished) {
        return QuestStatus.COMPLETED;
      }

      if (
      status == PeakStatus.step1 ||
      status == PeakStatus.step3 ||
      (0,external_kolmafia_.getProperty)("booPeakLit") == "true" &&
      (0,external_kolmafia_.getProperty)("oilPeakLit") == "true" &&
      (0,external_kolmafia_.getProperty)("twinPeakProgress") == "15")
      {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "getStatus", value:

    function getStatus() {
      return PeakStatus[(0,external_kolmafia_.getProperty)("questL09Topping")];
    } }, { key: "getId", value:

    function getId() {
      return "Council / Peaks / Lord";
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          _this.visitMiLord();
          (0,external_kolmafia_.council)();
        }
      };
    } }, { key: "visitMiLord", value:

    function visitMiLord() {
      (0,external_kolmafia_.visitUrl)("place.php?whichplace=highlands&action=highlands_dude");
    } }]);return QuestL9Smut;}();var


PeakStatus;(function (PeakStatus) {PeakStatus["unstarted"] = "unstarted";PeakStatus["started"] = "CHASM";PeakStatus["step1"] = "INTRODUCE_PEAKS";PeakStatus["step2"] = "BURN_MY_PEAKS";PeakStatus["step3"] = "BURNED_PEAKS_DOWN";PeakStatus["finished"] = "finished";})(PeakStatus || (PeakStatus = {}));
;// CONCATENATED MODULE: ./src/quests/council/QuestCouncil.ts
function QuestCouncil_typeof(obj) {"@babel/helpers - typeof";return QuestCouncil_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestCouncil_typeof(obj);}function QuestCouncil_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestCouncil_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestCouncil_toPropertyKey(descriptor.key), descriptor);}}function QuestCouncil_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestCouncil_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestCouncil_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestCouncil_defineProperty(obj, key, value) {key = QuestCouncil_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestCouncil_toPropertyKey(arg) {var key = QuestCouncil_toPrimitive(arg, "string");return QuestCouncil_typeof(key) === "symbol" ? key : String(key);}function QuestCouncil_toPrimitive(input, hint) {if (QuestCouncil_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestCouncil_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}

















var QuestCouncil = /*#__PURE__*/function () {


  function QuestCouncil() {QuestCouncil_classCallCheck(this, QuestCouncil);QuestCouncil_defineProperty(this, "quests", []);
    this.quests.push(new QuestL1Toot());
    this.quests.push(new QuestL2SpookyLarva());
    this.quests.push(new QuestL3Tavern());
    this.quests.push(new QuestL4Bats());
    this.quests.push(new QuestL5Goblin());
    this.quests.push(new QuestL6Friar());
    this.quests.push(new QuestL7Crypt());
    this.quests.push(new QuestL7CryptPull());
    this.quests.push(new QuestL8IcePeak());
    this.quests.push(new QuestL9Smut());
    this.quests.push(new QuestL10Beanstalk());
    this.quests.push(new QuestL11MacGruffin());
    this.quests.push(new QuestL12War());
    this.quests.push(new QuestL13());
  }QuestCouncil_createClass(QuestCouncil, [{ key: "getId", value:

    function getId() {
      return "Quests / Council";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw "Not implemented";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.quests;
    } }]);return QuestCouncil;}();
;// CONCATENATED MODULE: ./src/utils/KmailUtils.ts















function getKmails() {var caller = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "GreyDay";
  var buffer = (0,external_kolmafia_.visitUrl)(
  "api.php?pwd&what=kmail&count=100&for=" + (0,external_kolmafia_.urlEncode)(caller));


  var kmails = JSON.parse(buffer);

  kmails.forEach(function (mail) {
    mail["delete"] = function () {
      var del =
      "messages.php?the_action=delete&box=Inbox&pwd&sel" + mail.id + "=on";

      return (0,external_kolmafia_.visitUrl)(del).includes("1 message deleted.");
    };
  });

  return kmails.filter(function (k) {return k.type == "normal";});
}

function isJunkKmail(kmail) {
  if (
  kmail.fromname == "Lady Spookyraven's Ghost" ||
  kmail.fromname == "The Loathing Postal Service" &&
  kmail.message.includes("telegram from Lady Spookyraven"))
  {
    return true;
  }

  if (
  (kmail.fromname.toLowerCase() == "cheesefax" ||
  kmail.fromname.toLowerCase() == "averagechat") &&
  kmail.message.includes("completed your relationship fortune test!"))
  {
    return true;
  }

  return false;
}

function deleteJunkKmails() {
  if (!GreySettings_GreySettings.greyDeleteKmails) {
    return;
  }

  getKmails().forEach(function (mail) {
    if (!isJunkKmail(mail)) {
      return;
    }

    (0,external_kolmafia_.print)("Deleting junk kmail from " + mail.fromname, "gray");

    var state = mail["delete"]();

    if (state) {
      return;
    }

    (0,external_kolmafia_.print)("Failed to delete kmail.", "red");
  });
}
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorBathroom.ts
function QuestManorBathroom_typeof(obj) {"@babel/helpers - typeof";return QuestManorBathroom_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManorBathroom_typeof(obj);}function QuestManorBathroom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorBathroom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManorBathroom_toPropertyKey(descriptor.key), descriptor);}}function QuestManorBathroom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorBathroom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorBathroom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorBathroom_defineProperty(obj, key, value) {key = QuestManorBathroom_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManorBathroom_toPropertyKey(arg) {var key = QuestManorBathroom_toPrimitive(arg, "string");return QuestManorBathroom_typeof(key) === "symbol" ? key : String(key);}function QuestManorBathroom_toPrimitive(input, hint) {if (QuestManorBathroom_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManorBathroom_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var ManorBathroom = /*#__PURE__*/function () {function ManorBathroom() {QuestManorBathroom_classCallCheck(this, ManorBathroom);QuestManorBathroom_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Haunted Bathroom"));QuestManorBathroom_defineProperty(this, "item",
    external_kolmafia_.Item.get("Lady Spookyraven's powder puff"));QuestManorBathroom_defineProperty(this, "toAbsorb", void 0);}QuestManorBathroom_createClass(ManorBathroom, [{ key: "level", value:


    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questM21Dance");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 1 || (0,external_kolmafia_.availableAmount)(this.item) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      if (this.hasDelay()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasDelay", value:

    function hasDelay() {
      return this.location.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (!this.hasDelay()) {
        outfit.setNoCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(882, 1);
          props.setChoice(881, 1);

          if (_this.toAbsorb.length == 0) {
            DelayBurners.tryReplaceCombats();
          }

          if (DelayBurners.isTryingForDupeableGoblin()) {
            (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose"));
          }

          try {
            greyAdv(_this.location, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Bathroom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return ManorBathroom;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorBedroom.ts
function QuestManorBedroom_typeof(obj) {"@babel/helpers - typeof";return QuestManorBedroom_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManorBedroom_typeof(obj);}function QuestManorBedroom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorBedroom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManorBedroom_toPropertyKey(descriptor.key), descriptor);}}function QuestManorBedroom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorBedroom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorBedroom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorBedroom_defineProperty(obj, key, value) {key = QuestManorBedroom_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManorBedroom_toPropertyKey(arg) {var key = QuestManorBedroom_toPrimitive(arg, "string");return QuestManorBedroom_typeof(key) === "symbol" ? key : String(key);}function QuestManorBedroom_toPrimitive(input, hint) {if (QuestManorBedroom_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManorBedroom_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var ManorBedroom = /*#__PURE__*/function () {function ManorBedroom() {QuestManorBedroom_classCallCheck(this, ManorBedroom);QuestManorBedroom_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Haunted Bedroom"));QuestManorBedroom_defineProperty(this, "item",
    external_kolmafia_.Item.get("Lady Spookyraven's finest gown"));QuestManorBedroom_defineProperty(this, "spectacles",
    external_kolmafia_.Item.get("Lord Spookyraven's spectacles"));QuestManorBedroom_defineProperty(this, "disposableCamera",
    external_kolmafia_.Item.get("disposable instant camera"));QuestManorBedroom_defineProperty(this, "dontLike",
    [
    "Animated Mahogany Nightstand",
    "Animated Rustic Nightstand",
    "Wardrob nightstand"].
    map(function (m) {return external_kolmafia_.Monster.get(m);}));QuestManorBedroom_defineProperty(this, "toAbsorb", void 0);QuestManorBedroom_defineProperty(this, "cameraMonster",

    external_kolmafia_.Monster.get("Animated ornate nightstand"));QuestManorBedroom_defineProperty(this, "dressMonster",
    external_kolmafia_.Monster.get("Elegant animated nightstand"));}QuestManorBedroom_createClass(ManorBedroom, [{ key: "needCamera", value:

    function needCamera() {
      return (
        (0,external_kolmafia_.availableAmount)(this.disposableCamera) == 0 &&
        (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("photograph of a dog")) == 0 &&
        getQuestStatus("questL11Palindome") <= 1);

    } }, { key: "needGlasses", value:

    function needGlasses() {
      return (0,external_kolmafia_.availableAmount)(this.spectacles) == 0;
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "needDress", value:

    function needDress() {
      return (
        getQuestStatus("questM21Dance") <= 2 && (0,external_kolmafia_.availableAmount)(this.item) == 0);

    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questM21Dance");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.spectacles) > 0 && !this.needCamera()) {
        if (status > 1 || (0,external_kolmafia_.availableAmount)(this.item) > 0) {
          return QuestStatus.COMPLETED;
        }
      }

      if (this.hasDelay()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasDelay", value:

    function hasDelay() {
      return (
        this.toAbsorb.length == 0 &&
        this.location.turnsSpent < 5 &&
        !this.needCamera() &&
        !this.needGlasses() &&
        this.needDress());

    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      var orbs = [];

      if (this.location.turnsSpent >= 5 && this.needDress()) {
        orbs.push(this.dressMonster);
      }

      if (this.needCamera() || this.needGlasses()) {
        orbs.push(this.cameraMonster);
      }

      return {
        location: this.location,
        outfit: outfit,
        orbs: orbs,
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return !orbs.includes(monster);},
        run: function run() {
          var props = new Properties_PropertyManager();

          try {
            props.setChoice(876, 1);
            props.setChoice(877, 1);
            props.setChoice(879, 4); // Grab engorged sausages if we can
            props.setChoice(879, 2); // Otherwise just grab an item which is 50/50 but better than others
            props.setChoice(876, 1);

            if (_this.needDress()) {
              props.setChoice(880, 1);
            } else {
              props.setChoice(880, 2);
            }

            if ((0,external_kolmafia_.availableAmount)(_this.spectacles) == 0) {
              props.setChoice(878, 3);
            } else if (_this.needCamera()) {
              props.setChoice(878, 4);
            } else {
              props.setChoice(878, 1);
            }

            var settings = new AdventureSettings();

            _this.dontLike.forEach(function (m) {return settings.addBanish(m);});

            if (_this.hasDelay()) {
              var delay = DelayBurners.getReadyDelayBurner();

              if (delay != null) {
                delay.doFightSetup();
              }
            }

            greyAdv(_this.location, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Bedroom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return ManorBedroom;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorBillards.ts
function QuestManorBillards_typeof(obj) {"@babel/helpers - typeof";return QuestManorBillards_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManorBillards_typeof(obj);}function QuestManorBillards_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestManorBillards_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestManorBillards_slicedToArray(arr, i) {return QuestManorBillards_arrayWithHoles(arr) || QuestManorBillards_iterableToArrayLimit(arr, i) || QuestManorBillards_unsupportedIterableToArray(arr, i) || QuestManorBillards_nonIterableRest();}function QuestManorBillards_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestManorBillards_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestManorBillards_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestManorBillards_arrayLikeToArray(o, minLen);}function QuestManorBillards_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestManorBillards_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestManorBillards_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestManorBillards_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorBillards_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManorBillards_toPropertyKey(descriptor.key), descriptor);}}function QuestManorBillards_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorBillards_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorBillards_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorBillards_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestManorBillards_setPrototypeOf(subClass, superClass);}function QuestManorBillards_setPrototypeOf(o, p) {QuestManorBillards_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestManorBillards_setPrototypeOf(o, p);}function QuestManorBillards_createSuper(Derived) {var hasNativeReflectConstruct = QuestManorBillards_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestManorBillards_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestManorBillards_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestManorBillards_possibleConstructorReturn(this, result);};}function QuestManorBillards_possibleConstructorReturn(self, call) {if (call && (QuestManorBillards_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestManorBillards_assertThisInitialized(self);}function QuestManorBillards_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestManorBillards_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestManorBillards_getPrototypeOf(o) {QuestManorBillards_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestManorBillards_getPrototypeOf(o);}function QuestManorBillards_defineProperty(obj, key, value) {key = QuestManorBillards_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManorBillards_toPropertyKey(arg) {var key = QuestManorBillards_toPrimitive(arg, "string");return QuestManorBillards_typeof(key) === "symbol" ? key : String(key);}function QuestManorBillards_toPrimitive(input, hint) {if (QuestManorBillards_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManorBillards_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestManorBillards = /*#__PURE__*/function (_TaskInfo) {QuestManorBillards_inherits(QuestManorBillards, _TaskInfo);var _super = QuestManorBillards_createSuper(QuestManorBillards);














  function QuestManorBillards() {var _this;QuestManorBillards_classCallCheck(this, QuestManorBillards);
    _this = _super.call(this);QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "billards", external_kolmafia_.Location.get("The Haunted Billiards Room"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "chalk", external_kolmafia_.Item.get("Handful of hand chalk"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "chalkEffect", external_kolmafia_.Effect.get("Chalky Hand"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "key", external_kolmafia_.Item.get("[7302]Spookyraven library key"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "cue", external_kolmafia_.Item.get("pool cue"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "poolgeist", external_kolmafia_.Monster.get("pooltergeist"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "ghost", external_kolmafia_.Monster.get("Chalkdust wraith"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "hardening", external_kolmafia_.Skill.get("Subatomic Hardening"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "lefthandMan", external_kolmafia_.Familiar.get("Left-Hand Man"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "umbrella", external_kolmafia_.Item.get("Unbreakable Umbrella"));QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "toAbsorb", void 0);QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "elementalSkills", void 0);QuestManorBillards_defineProperty(QuestManorBillards_assertThisInitialized(_this), "paths", void 0);

    _this.elementalSkills = GreyAbsorber_AbsorbsProvider.loadAbsorbs().
    map(function (a) {return (
        a.skill == null ?
        null :
        [
        a.skill,
        external_kolmafia_.Element.all().
        map(function (e) {return (0,external_kolmafia_.numericModifier)(a.skill, e + " Damage");}).
        reduce(function (p, n) {return p + n;}, 0)]);}).


    filter(function (pair) {return pair != null;}).
    map(function (_ref) {var _ref2 = QuestManorBillards_slicedToArray(_ref, 1),p = _ref2[0];return p;});return _this;
  }QuestManorBillards_createClass(QuestManorBillards, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      this.paths = [];

      var combos = [];
      var ncsNeeded = assumeUnstarted || (0,external_kolmafia_.availableAmount)(this.cue) == 0 ? 2 : 1;

      for (var t = 0; t < ncsNeeded; t++) {
        combos.push([null, 5]);
        combos.push([ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC, 1]);
      }var _iterator = QuestManorBillards_createForOfIteratorHelper(

        getAllCombinations(combos)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combination = _step.value;
          if (combination.length != ncsNeeded) {
            continue;
          }

          var path = new PossiblePath(
          combination.map(function (_ref3) {var _ref4 = QuestManorBillards_slicedToArray(_ref3, 2),t = _ref4[1];return t;}).reduce(function (p, v) {return p + v;}, 0));var _iterator2 = QuestManorBillards_createForOfIteratorHelper(


            combination),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _step2$value = QuestManorBillards_slicedToArray(_step2.value, 1),res = _step2$value[0];
              if (res == null) {
                continue;
              }

              path.add(res);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          this.paths.push(path);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Billards";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "attemptPrime", value:

    function attemptPrime(path) {
      if (!path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC)) {
        return false;
      }

      if ((0,external_kolmafia_.availableAmount)(this.chalk) == 0 && (0,external_kolmafia_.haveEffect)(this.chalkEffect) <= 1) {
        return false;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.hardening) || this.toAbsorb.length > 0) {
        return false;
      }

      var lightsOut = (0,external_kolmafia_.totalTurnsPlayed)() % 37;

      if (lightsOut == 0 || lightsOut >= 34) {
        return false;
      }

      setPrimedResource(this, path, path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC));

      return true;
    } }, { key: "status", value:

    function status(path) {
      var status = getQuestStatus("questM20Necklace");

      if (status < 1) {
        return QuestStatus.NOT_READY;
      }

      if (status > 2 || (0,external_kolmafia_.availableAmount)(this.key) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (path != null && path.canUse(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC)) {
        if (path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC).primed()) {
          return QuestStatus.READY;
        }

        if (
        this.toAbsorb.length == 0 &&
        (0,external_kolmafia_.haveSkill)(this.hardening) && (
        (0,external_kolmafia_.availableAmount)(this.chalk) > 0 || (0,external_kolmafia_.haveEffect)(this.chalkEffect) > 1))
        {
          return QuestStatus.NOT_READY;
        }
      }

      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = new GreyOutfit();
      var primed = path.getResource(ResourceTypes/* ResourceCategory.FORCE_NC */.s6.FORCE_NC);

      if (primed != null && !primed.primed()) {
        primed = null;
      }

      var orbs = [];

      if (primed == null) {
        if (
        (0,external_kolmafia_.availableAmount)(this.cue) == 0 ||
        (0,external_kolmafia_.haveEffect)(this.chalkEffect) > 0 ||
        (0,external_kolmafia_.availableAmount)(this.chalk) > 0 ||
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("poolSkill")) >= 2)
        {
          outfit.setNoCombat().setNoCombat();
        }

        if (this.elementalSkills.find(function (s) {return (0,external_kolmafia_.haveSkill)(s);}) == null) {
          outfit.addWeight("elemental dmg", 10, 1, 1);
        }

        if (
        this.toAbsorb.includes(this.ghost) ||
        (0,external_kolmafia_.availableAmount)(this.chalk) == 0 && (0,external_kolmafia_.haveEffect)(this.chalkEffect) <= 1)
        {
          orbs.push(this.ghost);
        }

        if (!(0,external_kolmafia_.haveSkill)(this.hardening)) {
          orbs.push(this.poolgeist);
        }
      }

      // Don't waste equips on cue if we wouldn't have enough skill
      if (
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("poolSkill")) >= 2 ||
      (0,external_kolmafia_.availableAmount)(this.chalk) > 0 ||
      (0,external_kolmafia_.haveEffect)(this.chalkEffect) > 0)
      {
        outfit.addWeight(this.cue);
      }

      var mustHitGhost =
      this.toAbsorb.includes(this.ghost) ||
      (0,external_kolmafia_.haveEffect)(this.chalkEffect) + (0,external_kolmafia_.availableAmount)(this.chalk) == 0;

      var fam =
      primed == null &&
      !orbs.includes(currentPredictions().get(this.billards)) &&
      !mustHitGhost &&
      (0,external_kolmafia_.haveFamiliar)(this.lefthandMan) &&
      (0,external_kolmafia_.availableAmount)(this.cue) > 0 &&
      (0,external_kolmafia_.availableAmount)(this.umbrella) > 0 ?
      this.lefthandMan :
      null;

      if (fam != null) {
        outfit.addExtra("+switch " + this.lefthandMan);
        outfit.addWeight(this.umbrella);
      }

      return {
        outfit: outfit,
        location: this.billards,
        orbs: orbs,
        familiar: fam,
        disableFamOverride: fam != null,
        mayFreeRun: true,
        freeRun: function freeRun(monster) {return !orbs.includes(monster);},
        run: function run() {
          if (
          (0,external_kolmafia_.availableAmount)(_this2.cue) > 0 &&
          (0,external_kolmafia_.haveEffect)(_this2.chalkEffect) == 0 &&
          (0,external_kolmafia_.availableAmount)(_this2.chalk) > 0)
          {
            (0,external_kolmafia_.use)(_this2.chalk);
          }

          var settings = new AdventureSettings();

          if (
          (0,external_kolmafia_.availableAmount)(_this2.chalk) == 0 &&
          (0,external_kolmafia_.haveEffect)(_this2.chalkEffect) <= 1 &&
          !_this2.toAbsorb.includes(_this2.poolgeist))
          {
            settings.addBanish(_this2.poolgeist);
          }

          var props = new Properties_PropertyManager();
          var poolSkill =
          (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("poolSkill")) + (0,external_kolmafia_.numericModifier)("pool skill") + 10;

          try {
            props.setChoice(
            875,
            poolSkill >= 14 || (0,external_kolmafia_.haveEffect)(_this2.chalkEffect) == 0 ? 1 : 2);
            //Fight or train
            greyAdv(_this2.billards, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.billards];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestManorBillards;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorGallery.ts
function QuestManorGallery_typeof(obj) {"@babel/helpers - typeof";return QuestManorGallery_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManorGallery_typeof(obj);}function QuestManorGallery_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorGallery_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManorGallery_toPropertyKey(descriptor.key), descriptor);}}function QuestManorGallery_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorGallery_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorGallery_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorGallery_defineProperty(obj, key, value) {key = QuestManorGallery_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManorGallery_toPropertyKey(arg) {var key = QuestManorGallery_toPrimitive(arg, "string");return QuestManorGallery_typeof(key) === "symbol" ? key : String(key);}function QuestManorGallery_toPrimitive(input, hint) {if (QuestManorGallery_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManorGallery_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var ManorGallery = /*#__PURE__*/function () {function ManorGallery() {QuestManorGallery_classCallCheck(this, ManorGallery);QuestManorGallery_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Haunted Gallery"));QuestManorGallery_defineProperty(this, "item",
    external_kolmafia_.Item.get("Lady Spookyraven's dancing shoes"));QuestManorGallery_defineProperty(this, "sword",
    external_kolmafia_.Item.get("serpentine sword"));QuestManorGallery_defineProperty(this, "toAbsorb", void 0);}QuestManorGallery_createClass(ManorGallery, [{ key: "level", value:


    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      var status = getQuestStatus("questM21Dance");

      if (
      status < 1 ||
      isGhostBustingTime(this.location) && shouldAvoidGhosts())
      {
        return QuestStatus.NOT_READY;
      }

      if (status > 1 || (0,external_kolmafia_.availableAmount)(this.item) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!hasNonCombatSkillsReady()) {
        return QuestStatus.FASTER_LATER;
      }

      if (this.hasDelay()) {
        if (DelayBurners.isDelayBurnerReady()) {
          return QuestStatus.READY;
        }

        if (DelayBurners.isDelayBurnerFeasible()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasDelay", value:

    function hasDelay() {
      return this.location.turnsSpent < 5 && this.toAbsorb.length == 0;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = isGhostBustingTime(this.location) ?
      getGhostBustingOutfit() :
      new GreyOutfit();

      outfit.setNoCombat();

      return {
        location: isGhostBustingTime(this.location) ? null : this.location,
        outfit: outfit,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();
          var settings = new AdventureSettings();

          if (isGhostBustingTime(_this.location)) {
            settings.setStartOfFightMacro(getGhostBustingMacro());
          } else if (_this.hasDelay()) {
            var delay = DelayBurners.getReadyDelayBurner();

            if (delay != null) {
              delay.doFightSetup();
            }
          } else if (_this.toAbsorb.length == 0) {
            DelayBurners.tryReplaceCombats();
          }

          /* if (availableAmount(this.sword) == 0) {
            props.setChoice(89, 2);
          } else*/{
            props.setChoice(89, 4);
          }

          props.setChoice(914, 1);

          if ((0,external_kolmafia_.getProperty)("louvreDesiredGoal") != "7") {
            props.setProperty("louvreDesiredGoal", "7");
          }

          try {
            greyAdv(_this.location, outfit, settings);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Gallery";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      if (reallyMustBeDone) {
        return false;
      }

      return isGhostBustingTime(this.location);
    } }]);return ManorGallery;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorKitchen.ts
function QuestManorKitchen_typeof(obj) {"@babel/helpers - typeof";return QuestManorKitchen_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManorKitchen_typeof(obj);}function QuestManorKitchen_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorKitchen_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManorKitchen_toPropertyKey(descriptor.key), descriptor);}}function QuestManorKitchen_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorKitchen_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorKitchen_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorKitchen_defineProperty(obj, key, value) {key = QuestManorKitchen_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManorKitchen_toPropertyKey(arg) {var key = QuestManorKitchen_toPrimitive(arg, "string");return QuestManorKitchen_typeof(key) === "symbol" ? key : String(key);}function QuestManorKitchen_toPrimitive(input, hint) {if (QuestManorKitchen_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManorKitchen_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestManorKitchen = /*#__PURE__*/function () {function QuestManorKitchen() {QuestManorKitchen_classCallCheck(this, QuestManorKitchen);QuestManorKitchen_defineProperty(this, "kitchen",
    external_kolmafia_.Location.get("The Haunted Kitchen"));QuestManorKitchen_defineProperty(this, "stenchResist",
    external_kolmafia_.Skill.get("Conifer Polymers"));QuestManorKitchen_defineProperty(this, "albinoBat",
    external_kolmafia_.Monster.get("Albino Bat"));QuestManorKitchen_defineProperty(this, "enoughRes",
    false);QuestManorKitchen_defineProperty(this, "lastResistTurnCheck",
    0);QuestManorKitchen_defineProperty(this, "canOfPaint",
    external_kolmafia_.Item.get("Can of black paint"));QuestManorKitchen_defineProperty(this, "asdonMartin",
    external_kolmafia_.Item.get("Asdon Martin keyfob"));QuestManorKitchen_defineProperty(this, "driveSafe",
    external_kolmafia_.Effect.get("Driving Safely"));QuestManorKitchen_defineProperty(this, "torso",
    external_kolmafia_.Skill.get("Torso Awareness"));QuestManorKitchen_defineProperty(this, "spoon",
    external_kolmafia_.Item.get("hewn moon-rune spoon"));QuestManorKitchen_defineProperty(this, "scaleShirt",
    external_kolmafia_.Item.get("blessed rustproof +2 gray dragon scale mail"));QuestManorKitchen_defineProperty(this, "telegram",
    external_kolmafia_.Item.get("Telegram from Lady Spookyraven"));QuestManorKitchen_defineProperty(this, "candleBuff",
    external_kolmafia_.Item.get("rainbow glitter candle"));QuestManorKitchen_defineProperty(this, "maydayEffect",
    external_kolmafia_.Effect.get("Ready to Survive"));}QuestManorKitchen_createClass(QuestManorKitchen, [{ key: "getId", value:

    function getId() {
      return "Manor / Kitchen";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "hasEnoughRes", value:

    function hasEnoughRes() {
      if (
      this.lastResistTurnCheck + (this.enoughRes ? 3 : 10) >
      (0,external_kolmafia_.totalTurnsPlayed)())
      {
        return this.enoughRes;
      }

      this.lastResistTurnCheck = (0,external_kolmafia_.totalTurnsPlayed)();

      (0,external_kolmafia_.maximize)("hot res 9 max, stench res 9 max -tie", true);
      var hotRes = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Hot Resistance");
      var stenchRes = (0,external_kolmafia_.numericModifier)("Generated:_spec", "Stench Resistance");

      this.enoughRes = hotRes >= 9 && stenchRes >= 9;

      return this.enoughRes;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.availableAmount)(this.telegram) > 0) {
        (0,external_kolmafia_.use)(this.telegram);
      }

      // Each 3 resist in each element is another drawer searched.
      // 21 drawers searched.
      // Max of 9 total res
      var status = getQuestStatus("questM20Necklace");

      if (status > 0) {
        return QuestStatus.COMPLETED;
      }

      // If we haven't purchased our vacation pass yet, don't even think about it.
      if (status < 0) {
        return QuestStatus.NOT_READY;
      }

      if (
      !(0,external_kolmafia_.haveSkill)(this.torso) &&
      (0,external_kolmafia_.availableAmount)(this.scaleShirt) > 0 && (
      (0,external_kolmafia_.gnomadsAvailable)() ||
      (0,external_kolmafia_.availableAmount)(this.spoon) > 0 &&
      getMoonZone(GreySettings_GreySettings.greyTuneMoonSpoon) == "Gnomad" &&
      (0,external_kolmafia_.getProperty)("moonTuned") != "true"))
      {
        return QuestStatus.NOT_READY;
      }

      if (
      (getQuestStatus("questL11Black") <= 2 || (0,external_kolmafia_.myMeat)() < 1200) &&
      !this.hasEnoughRes())
      {


        //     return QuestStatus.FASTER_LATER;
      }if (
      (0,external_kolmafia_.haveEffect)((0,external_kolmafia_.effectModifier)(this.candleBuff, "Effect")) == 0 &&
      (0,external_kolmafia_.haveEffect)(this.maydayEffect) == 0 &&
      !(0,external_kolmafia_.haveSkill)(this.stenchResist) &&
      !GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.albinoBat) &&
      (0,external_kolmafia_.myLevel)() < 12)
      {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("manorDrawerCount")) < 20) {
        outfit.addWeight("hot res", 10, null, 9);
        outfit.addWeight("stench res", 10, null, 9);
      }

      return {
        outfit: outfit,
        location: this.kitchen,
        mayFreeRun: false,
        run: function run() {
          if (
          (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("manorDrawerCount")) < 20 &&
          !_this.hasEnoughRes())
          {
            if ((0,external_kolmafia_.availableAmount)(_this.candleBuff) > 0) {
              (0,external_kolmafia_.use)(_this.candleBuff);
            }

            if (
            (0,external_kolmafia_.haveEffect)((0,external_kolmafia_.effectModifier)(_this.canOfPaint, "Effect")) == 0 &&
            getQuestStatus("questL11Black") > 1)
            {
              (0,external_kolmafia_.cliExecute)("acquire 1 " + _this.canOfPaint.name);
              (0,external_kolmafia_.use)(_this.canOfPaint);
            }

            if (
            (0,external_kolmafia_.getWorkshed)() == _this.asdonMartin &&
            (0,external_kolmafia_.haveEffect)(_this.driveSafe) == 0 &&
            (0,external_kolmafia_.getFuel)() >= 37)
            {
              (0,external_kolmafia_.cliExecute)("asdonmartin drive safely");
            }
          }

          greyAdv(_this.kitchen, outfit);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.kitchen];
    } }]);return QuestManorKitchen;}();
;// CONCATENATED MODULE: ./src/quests/council/manor/QuestManorLibrary.ts
function QuestManorLibrary_typeof(obj) {"@babel/helpers - typeof";return QuestManorLibrary_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManorLibrary_typeof(obj);}function QuestManorLibrary_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorLibrary_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManorLibrary_toPropertyKey(descriptor.key), descriptor);}}function QuestManorLibrary_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorLibrary_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorLibrary_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorLibrary_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestManorLibrary_setPrototypeOf(subClass, superClass);}function QuestManorLibrary_setPrototypeOf(o, p) {QuestManorLibrary_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestManorLibrary_setPrototypeOf(o, p);}function QuestManorLibrary_createSuper(Derived) {var hasNativeReflectConstruct = QuestManorLibrary_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestManorLibrary_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestManorLibrary_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestManorLibrary_possibleConstructorReturn(this, result);};}function QuestManorLibrary_possibleConstructorReturn(self, call) {if (call && (QuestManorLibrary_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestManorLibrary_assertThisInitialized(self);}function QuestManorLibrary_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestManorLibrary_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestManorLibrary_getPrototypeOf(o) {QuestManorLibrary_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestManorLibrary_getPrototypeOf(o);}function QuestManorLibrary_defineProperty(obj, key, value) {key = QuestManorLibrary_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManorLibrary_toPropertyKey(arg) {var key = QuestManorLibrary_toPrimitive(arg, "string");return QuestManorLibrary_typeof(key) === "symbol" ? key : String(key);}function QuestManorLibrary_toPrimitive(input, hint) {if (QuestManorLibrary_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManorLibrary_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestManorLibrary = /*#__PURE__*/function (_TaskInfo) {QuestManorLibrary_inherits(QuestManorLibrary, _TaskInfo);var _super = QuestManorLibrary_createSuper(QuestManorLibrary);function QuestManorLibrary() {var _this;QuestManorLibrary_classCallCheck(this, QuestManorLibrary);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "library",
    external_kolmafia_.Location.get("The Haunted Library"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "killingJar",
    external_kolmafia_.Item.get("Killing Jar"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "key",
    external_kolmafia_.Item.get("[7302]Spookyraven library key"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "librarian",
    external_kolmafia_.Monster.get("Banshee Librarian"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "sweep",
    external_kolmafia_.Skill.get("System Sweep"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "nano",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "desk",
    external_kolmafia_.Monster.get("Writing Desk"));QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "pathYR", void 0);QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "path", void 0);QuestManorLibrary_defineProperty(QuestManorLibrary_assertThisInitialized(_this), "paths",


    []);return _this;}QuestManorLibrary_createClass(QuestManorLibrary, [{ key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      var wantJar =
      this.wantsGnomeKillingJar() &&
      (0,external_kolmafia_.availableAmount)(this.killingJar) == 0 &&
      getQuestStatus("questL11Desert") <= 0;
      var desksLeft =
      5 - (assumeUnstarted ? 0 : (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("writingDesksDefeated")));

      this.paths = [];
      this.path = new PossiblePath(desksLeft * 3, desksLeft * 4);
      this.pathYR = new PossiblePath(desksLeft * 2, desksLeft * 3).add(
      ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);


      if (wantJar || assumeUnstarted) {
        this.paths.push(this.pathYR);
      }

      this.paths.push(this.path);
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Library";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "getGnome", value:

    function getGnome() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress"));
    } }, { key: "wantsGnomeKillingJar", value:

    function wantsGnomeKillingJar() {
      return (this.getGnome() & 4) != 4;
    } }, { key: "status", value:

    function status(path) {
      var status = getQuestStatus("questM20Necklace");

      if ((0,external_kolmafia_.availableAmount)(this.key) == 0) {
        return QuestStatus.NOT_READY;
      }

      if (status > 3) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questM21Dance") >= 0) {
        return QuestStatus.COMPLETED;
      }

      if (
      path != null &&
      path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) > 0 &&
      !path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).ready())
      {
        return QuestStatus.FASTER_LATER;
      }

      if (
      !(0,external_kolmafia_.haveSkill)(this.sweep) ||
      this.wantsKillingJar() && !(0,external_kolmafia_.haveSkill)(this.nano))
      {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "wantsKillingJar", value:

    function wantsKillingJar() {
      return (
        this.wantsGnomeKillingJar() &&
        (0,external_kolmafia_.availableAmount)(this.killingJar) == 0 &&
        getQuestStatus("questL11Desert") <= 0);

    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var outfit = new GreyOutfit();
      var wantJar = this.wantsKillingJar();
      var banishLibrarian = !wantJar && !(0,external_kolmafia_.isBanished)(this.librarian);
      var resource = wantJar ?
      path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) :
      null;

      if (resource != null && !resource.ready()) {
        resource = null;
      }

      if (wantJar) {
        if (resource != null) {
          resource.prepare(outfit);
        } else if (
        !path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) && (
        !currentPredictions().has(this.library) ||
        currentPredictions().get(this.library) == this.librarian))
        {
          outfit.setItemDrops().setChampagneBottle();
        }
      }

      return {
        location: this.library,
        outfit: outfit,
        orbs: wantJar ? [this.librarian] : [],
        olfaction: [this.desk],
        freeRun: function freeRun(monster) {return (
            monster != _this2.desk && (!wantJar || monster != _this2.librarian));},
        run: function run() {
          var settings = new AdventureSettings();
          var props = new Properties_PropertyManager();

          settings.addBanish(external_kolmafia_.Monster.get("bookbat"));

          if (banishLibrarian) {
            settings.addBanish(_this2.librarian);
          } else if (resource != null) {
            resource.prepare(null, props);

            settings.setFinishingBlowMacro(
            MacroBuilder/* Macro.if_ */.LE.if_(_this2.librarian, resource.macro()).skill(
            external_kolmafia_.Skill.get("Infinite Loop")));


          }

          props.setChoice(163, 3); // Rare adv that gives an item with 2k autosell, and worth 4-5k in mall
          props.setChoice(888, 4); // Skip
          props.setChoice(889, 5); // Skip

          try {
            greyAdv(_this2.library, outfit, settings);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("writingDesksDefeated")) < 5) {
            return;
          }

          (0,external_kolmafia_.visitUrl)("place.php?whichplace=manor1&action=manor1_ladys");
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=manor2&action=manor2_ladys");

          deleteJunkKmails();
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.library];
    } }]);return QuestManorLibrary;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/council/QuestManor.ts
function QuestManor_typeof(obj) {"@babel/helpers - typeof";return QuestManor_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManor_typeof(obj);}function QuestManor_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManor_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManor_toPropertyKey(descriptor.key), descriptor);}}function QuestManor_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManor_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManor_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManor_defineProperty(obj, key, value) {key = QuestManor_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManor_toPropertyKey(arg) {var key = QuestManor_toPrimitive(arg, "string");return QuestManor_typeof(key) === "symbol" ? key : String(key);}function QuestManor_toPrimitive(input, hint) {if (QuestManor_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManor_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}












var QuestManor = /*#__PURE__*/function () {function QuestManor() {QuestManor_classCallCheck(this, QuestManor);QuestManor_defineProperty(this, "quests",
    [
    new ManorBathroom(),
    new ManorBedroom(),
    new ManorGallery(),
    new QuestManorLibrary(),
    new QuestManorKitchen(),
    new QuestManorBillards()]);QuestManor_defineProperty(this, "puff",


    external_kolmafia_.Item.get("Lady Spookyraven's powder puff"));QuestManor_defineProperty(this, "gown",
    external_kolmafia_.Item.get("Lady Spookyraven's finest gown"));QuestManor_defineProperty(this, "shoes",
    external_kolmafia_.Item.get("Lady Spookyraven's dancing shoes"));QuestManor_defineProperty(this, "ballroom",
    external_kolmafia_.Location.get("The Haunted Ballroom"));}QuestManor_createClass(QuestManor, [{ key: "level", value:

    function level() {
      return 8;
    } }, { key: "getId", value:

    function getId() {
      return "Manor / Chat";
    } }, { key: "getManorStatus", value:

    function getManorStatus() {
      return getQuestStatus("questM20Necklace");
    } }, { key: "getDanceStatus", value:

    function getDanceStatus() {
      return getQuestStatus("questM21Dance");
    } }, { key: "status", value:

    function status() {
      var danceStatus = this.getDanceStatus();

      if (danceStatus == DanceStatus.finished) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questM20Necklace") < 4) {
        return QuestStatus.NOT_READY;
      }

      if (getQuestStatus("questM20Necklace") != 100) {
        return QuestStatus.READY;
      }

      if (danceStatus == DanceStatus.readyToDance) {
        return QuestStatus.READY;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.puff) +
      (0,external_kolmafia_.availableAmount)(this.gown) +
      (0,external_kolmafia_.availableAmount)(this.shoes) !=
      3)
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "run", value:

    function run() {var _this = this;
      if (getQuestStatus("questM20Necklace") < 100) {
        return this.doUpstairs();
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=manor2&action=manor2_ladys");
          greyAdv(_this.ballroom);
          // visitUrl("place.php?whichplace=manor3&action=manor3_ladys");

          deleteJunkKmails();
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.quests;
    } }, { key: "doUpstairs", value:

    function doUpstairs() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.print)("Lets chat up the old lady");
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=manor1&action=manor1_ladys");
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=manor2&action=manor2_ladys");

          deleteJunkKmails();
        }
      };
    } }]);return QuestManor;}();var


QuestManor_ManorStatus;(function (ManorStatus) {ManorStatus[ManorStatus["unstarted"] = -1] = "unstarted";ManorStatus[ManorStatus["DOING_KITCHEN"] = 0] = "DOING_KITCHEN";ManorStatus[ManorStatus["HAVE_POOL_KEY"] = 1] = "HAVE_POOL_KEY";ManorStatus[ManorStatus["HAVE_POOL_CUE"] = 2] = "HAVE_POOL_CUE";ManorStatus[ManorStatus["HAVE_LIBRARY_KEY"] = 3] = "HAVE_LIBRARY_KEY";ManorStatus[ManorStatus["HAVE_UPSTAIRS_KEY"] = 4] = "HAVE_UPSTAIRS_KEY";ManorStatus[ManorStatus["GOING_UPSTAIRS"] = 5] = "GOING_UPSTAIRS";ManorStatus[ManorStatus["finished"] = 100] = "finished";})(QuestManor_ManorStatus || (QuestManor_ManorStatus = {}));var










DanceStatus;(function (DanceStatus) {DanceStatus[DanceStatus["unstarted"] = -1] = "unstarted";DanceStatus[DanceStatus["started"] = 0] = "started";DanceStatus[DanceStatus["wantsToDance"] = 1] = "wantsToDance";DanceStatus[DanceStatus["hasAllThreeItems"] = 2] = "hasAllThreeItems";DanceStatus[DanceStatus["readyToDance"] = 3] = "readyToDance";DanceStatus[DanceStatus["finished"] = 100] = "finished";})(DanceStatus || (DanceStatus = {}));
;// CONCATENATED MODULE: ./src/quests/custom/QuestCar.ts
function QuestCar_typeof(obj) {"@babel/helpers - typeof";return QuestCar_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestCar_typeof(obj);}function QuestCar_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestCar_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestCar_toPropertyKey(descriptor.key), descriptor);}}function QuestCar_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestCar_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestCar_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestCar_defineProperty(obj, key, value) {key = QuestCar_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestCar_toPropertyKey(arg) {var key = QuestCar_toPrimitive(arg, "string");return QuestCar_typeof(key) === "symbol" ? key : String(key);}function QuestCar_toPrimitive(input, hint) {if (QuestCar_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestCar_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestCar = /*#__PURE__*/function () {function QuestCar() {QuestCar_classCallCheck(this, QuestCar);QuestCar_defineProperty(this, "tinkersThingy",
    external_kolmafia_.Location.get("The Degrassi Knoll Garage"));QuestCar_defineProperty(this, "bitchCar",
    external_kolmafia_.Item.get("Bitchin' meatcar"));QuestCar_defineProperty(this, "toolbox",
    external_kolmafia_.Item.get("Gnollish toolbox"));QuestCar_defineProperty(this, "sweetRims",
    external_kolmafia_.Item.get("Sweet Rims"));QuestCar_defineProperty(this, "dopeWheels",
    external_kolmafia_.Item.get("Dope Wheels"));QuestCar_defineProperty(this, "bugbear",
    external_kolmafia_.Monster.get("Guard Bugbear"));}QuestCar_createClass(QuestCar, [{ key: "level", value:

    function level() {
      return (0,external_kolmafia_.knollAvailable)() ? 7 : 11;
    } }, { key: "tryMakeBitchCar", value:

    function tryMakeBitchCar() {
      if ((0,external_kolmafia_.availableAmount)(this.toolbox) > 0) {
        (0,external_kolmafia_.use)(this.toolbox, (0,external_kolmafia_.availableAmount)(this.toolbox));
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.dopeWheels) + (0,external_kolmafia_.availableAmount)(this.sweetRims) ==
      0)
      {
        (0,external_kolmafia_.retrieveItem)(this.sweetRims);
      }

      (0,external_kolmafia_.create)(this.bitchCar);
    } }, { key: "hasBoat", value:

    function hasBoat() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastIslandUnlock")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) == (0,external_kolmafia_.myAscensions)()) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.myMeat)() < 700 || !(0,external_kolmafia_.knollAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.knollAvailable)()) {
        return QuestStatus.READY;
      }

      /*if (
        myLevel() < 11 ||
        !GreySettings.isHippyMode() ||
        (this.hasBoat() && getQuestStatus("questL11Black") <= 1)
      ) {
        return QuestStatus.FASTER_LATER;
      }*/

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      //if (knollAvailable()) {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          _this.tryMakeBitchCar();
        }
      };
      /*}
       let outfit = new GreyOutfit().setItemDrops();
       return {
        outfit: outfit,
        location: this.tinkersThingy,
        run: () => {
          greyAdv(
            this.tinkersThingy,
            outfit,
            new AdventureSettings().addBanish(this.bugbear)
          );
           this.tryMakeBitchCar();
        },
      };*/



    } }, { key: "getId", value:

    function getId() {
      return "Misc / MeatCar";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.tinkersThingy];
    } }]);return QuestCar;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestManorLights.ts
function QuestManorLights_typeof(obj) {"@babel/helpers - typeof";return QuestManorLights_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestManorLights_typeof(obj);}function QuestManorLights_slicedToArray(arr, i) {return QuestManorLights_arrayWithHoles(arr) || QuestManorLights_iterableToArrayLimit(arr, i) || QuestManorLights_unsupportedIterableToArray(arr, i) || QuestManorLights_nonIterableRest();}function QuestManorLights_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestManorLights_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestManorLights_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestManorLights_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestManorLights_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestManorLights_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestManorLights_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestManorLights_arrayLikeToArray(o, minLen);}function QuestManorLights_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestManorLights_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestManorLights_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestManorLights_toPropertyKey(descriptor.key), descriptor);}}function QuestManorLights_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestManorLights_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestManorLights_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestManorLights_defineProperty(obj, key, value) {key = QuestManorLights_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestManorLights_toPropertyKey(arg) {var key = QuestManorLights_toPrimitive(arg, "string");return QuestManorLights_typeof(key) === "symbol" ? key : String(key);}function QuestManorLights_toPrimitive(input, hint) {if (QuestManorLights_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestManorLights_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestManorLights = /*#__PURE__*/function () {


































  function QuestManorLights() {QuestManorLights_classCallCheck(this, QuestManorLights);QuestManorLights_defineProperty(this, "choices", [890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903]);QuestManorLights_defineProperty(this, "elizibeth", [[external_kolmafia_.Location.get("The Haunted Storage Room"), 3], [external_kolmafia_.Location.get("The Haunted Laundry Room"), 3], [external_kolmafia_.Location.get("The Haunted Bathroom"), 3], [external_kolmafia_.Location.get("The Haunted Kitchen"), 4], [external_kolmafia_.Location.get("The Haunted Library"), 2], [external_kolmafia_.Location.get("The Haunted Ballroom"), 2], [external_kolmafia_.Location.get("The Haunted Gallery"), 4]]);QuestManorLights_defineProperty(this, "stephen", [[external_kolmafia_.Location.get("The Haunted Bedroom"), [1, 3, 1]], [external_kolmafia_.Location.get("The Haunted Nursery"), [1, 2, 2, 1, 1]], [external_kolmafia_.Location.get("The Haunted Conservatory"), [1, 2, 2]], [external_kolmafia_.Location.get("The Haunted Billiards Room"), [1, 2, 2]], [external_kolmafia_.Location.get("The Haunted Wine Cellar"), [1, 2, 2, 3]], [external_kolmafia_.Location.get("The Haunted Boiler Room"), [1, 2, 2]], [external_kolmafia_.Location.get("The Haunted Laboratory"), [1, 1, 3, 1, 1]]]);QuestManorLights_defineProperty(this, "elizabethRewards", [external_kolmafia_.Item.get("Elizabeth's Dollie"), external_kolmafia_.Item.get("Elizabeth's paintbrush")]);QuestManorLights_defineProperty(this, "stephsRewards", [external_kolmafia_.Item.get("Stephen's lab coat"), external_kolmafia_.Item.get("Stephen's secret formula")]);QuestManorLights_defineProperty(this, "goose", external_kolmafia_.Familiar.get("Grey Goose"));QuestManorLights_defineProperty(this, "teleportis", external_kolmafia_.Effect.get("Teleportitis"));QuestManorLights_defineProperty(this, "finishLights", (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("greyFinishManorLights")));var _iterator = QuestManorLights_createForOfIteratorHelper(
      this.choices),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var choice = _step.value;
        var prop = "choiceAdventure" + choice;

        if ((0,external_kolmafia_.getProperty)(prop) != "") {
          continue;
        }

        // Make sure we don't halt on any of the NC
        (0,external_kolmafia_.setProperty)(prop, "1");
      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }QuestManorLights_createClass(QuestManorLights, [{ key: "level", value:

    function level() {
      return 5;
    } }, { key: "isElizaReady", value:

    function isElizaReady() {
      return (0,external_kolmafia_.getProperty)("nextSpookyravenElizabethRoom") != "none";
    } }, { key: "isSteveReady", value:

    function isSteveReady() {
      return (0,external_kolmafia_.getProperty)("nextSpookyravenStephenRoom") != "none";
    } }, { key: "isElizaFight", value:

    function isElizaFight() {
      return (0,external_kolmafia_.getProperty)("nextSpookyravenElizabethRoom") == "The Haunted Gallery";
    } }, { key: "isSteveFight", value:

    function isSteveFight() {
      return (
        (0,external_kolmafia_.getProperty)("nextSpookyravenStephenRoom") == "The Haunted Laboratory");

    } }, { key: "getSteveLeft", value:

    function getSteveLeft() {
      var loc = external_kolmafia_.Location.get((0,external_kolmafia_.getProperty)("nextSpookyravenStephenRoom"));

      var index = this.stephen.findIndex(function (_ref) {var _ref2 = QuestManorLights_slicedToArray(_ref, 1),l = _ref2[0];return loc == l;});

      return index;
    } }, { key: "getElizaLeft", value:

    function getElizaLeft() {
      var loc = external_kolmafia_.Location.get((0,external_kolmafia_.getProperty)("nextSpookyravenElizabethRoom"));

      var index = this.elizibeth.findIndex(function (_ref3) {var _ref4 = QuestManorLights_slicedToArray(_ref3, 1),l = _ref4[0];return loc == l;});

      return index;
    } }, { key: "hasFamiliarRecommendation", value:

    function hasFamiliarRecommendation() {
      if (
      !this.isSteveFight() ||
      (0,external_kolmafia_.familiarWeight)(this.goose) >= 7 ||
      !this.finishLights)
      {
        return null;
      }

      return this.goose;
    } }, { key: "shouldDoSteve", value:

    function shouldDoSteve() {
      return (
        this.isSteveReady() && (
        !this.isSteveFight() || (0,external_kolmafia_.familiarWeight)(this.goose) >= 7));

    } }, { key: "getSteve", value:

    function getSteve() {
      var loc = external_kolmafia_.Location.get((0,external_kolmafia_.getProperty)("nextSpookyravenStephenRoom"));

      return this.stephen.find(function (s) {return s[0] == loc;});
    } }, { key: "getEliza", value:

    function getEliza() {
      var loc = external_kolmafia_.Location.get((0,external_kolmafia_.getProperty)("nextSpookyravenElizabethRoom"));

      return this.elizibeth.find(function (s) {return s[0] == loc;});
    } }, { key: "isTime", value:

    function isTime() {
      var last = this.getLastLightsOut();

      if (last >= (0,external_kolmafia_.totalTurnsPlayed)()) {
        return false;
      }

      return (0,external_kolmafia_.totalTurnsPlayed)() % 37 == 0;
    } }, { key: "getLastLightsOut", value:

    function getLastLightsOut() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastLightsOutTurn"));
    } }, { key: "status", value:

    function status() {
      if (!this.isTime() || (0,external_kolmafia_.haveEffect)(this.teleportis) > 0) {
        return QuestStatus.NOT_READY;
      }

      if (!this.isElizaReady() && !this.shouldDoSteve()) {
        return QuestStatus.COMPLETED;
      }

      if (this.isElizaFight() && this.isSteveFight() && !this.finishLights) {
        return QuestStatus.COMPLETED;
      }

      if (!this.mustBeDone()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getBoth", value:

    function getBoth() {
      return (
        (0,external_kolmafia_.getProperty)("nextSpookyravenStephenRoom") +
        (0,external_kolmafia_.getProperty)("nextSpookyravenElizabethRoom"));

    } }, { key: "doSteve", value:

    function doSteve() {var _this = this;
      var steve = this.getSteve();
      var fight = this.isSteveFight();
      var outfit = fight ?
      new GreyOutfit() :
      GreyOutfit.IGNORE_OUTFIT;

      if (this.isSteveFight()) {
        outfit.meatDropWeight = 2;
      }

      if ((0,external_kolmafia_.getProperty)("_juneCleaverFightsLeft") == "0") {
        if (fight) {
          outfit.addIgnored(external_kolmafia_.Item.get("June Cleaver"));
        } else {
          (0,external_kolmafia_.equip)(external_kolmafia_.Slot.get("weapon"), external_kolmafia_.Item.none);
        }
      }

      return {
        location: null,
        familiar: fight ? this.goose : null,
        outfit: outfit,
        run: function run() {
          var both = _this.getBoth();

          (0,external_kolmafia_.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_.toInt)(steve[0]));

          if (!(0,external_kolmafia_.handlingChoice)() && (0,external_kolmafia_.currentRound)() == 0) {
            return;
          }

          if (!(0,external_kolmafia_.handlingChoice)() || !_this.choices.includes((0,external_kolmafia_.lastChoice)())) {
            greyAdv(null);
            return;
          }var _iterator2 = QuestManorLights_createForOfIteratorHelper(

            steve[1]),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var i = _step2.value;
              var url =
              "choice.php?pwd=&whichchoice=" + (0,external_kolmafia_.lastChoice)() + "&option=" + i;

              (0,external_kolmafia_.visitUrl)(url);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          if ((0,external_kolmafia_.currentRound)() != 0) {
            greyAdv(
            null,
            outfit,
            new AdventureSettings().setStartOfFightMacro(
            MacroBuilder/* Macro.skill */.LE.skill(external_kolmafia_.Skill.get("Emit Matter Duplicating Drones"))));


          }

          _this.printStatus();

          var both2 = _this.getBoth();

          if (both == both2) {
            throw "No progress was made in steve..";
          }
        }
      };
    } }, { key: "printStatus", value:

    function printStatus() {
      if (this.isSteveReady()) {
        (0,external_kolmafia_.print)(
        "Lights Out: Stephen rooms explored: " +
        this.getSteveLeft() +
        " / " +
        this.stephen.length,
        "blue");

      }

      if (this.isElizaReady()) {
        (0,external_kolmafia_.print)(
        "Lights Out: Elizabeth rooms explored: " +
        this.getElizaLeft() +
        " / " +
        this.elizibeth.length,
        "blue");

      }
    } }, { key: "run", value:

    function run() {
      if (this.shouldDoSteve() && (!this.isSteveFight() || this.finishLights)) {
        var steve = this.getSteve();

        if (canGreyAdventure(steve[0])) {
          return this.doSteve();
        }
      }

      if (this.isElizaReady() && (!this.isElizaFight() || this.finishLights)) {
        var eliza = this.getEliza();

        if (canGreyAdventure(eliza[0])) {
          return this.doEliza();
        }
      }

      return {
        location: null,
        run: function run() {
          throw "Neither steve or eliza were ready!";
        }
      };
    } }, { key: "doEliza", value:

    function doEliza() {var _this2 = this;
      var eliza = this.getEliza();
      var fight = this.isElizaFight();
      var outfit = !fight ? GreyOutfit.IGNORE_OUTFIT : new GreyOutfit();

      if ((0,external_kolmafia_.getProperty)("_juneCleaverFightsLeft") == "0") {
        if (fight) {
          outfit.addBonus("-equip june cleaver");
        } else {
          (0,external_kolmafia_.equip)(external_kolmafia_.Slot.get("weapon"), external_kolmafia_.Item.none);
        }
      }

      return {
        location: null,
        outfit: outfit,
        run: function run() {
          var both = _this2.getBoth();
          (0,external_kolmafia_.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_.toInt)(eliza[0]));

          if (!(0,external_kolmafia_.handlingChoice)() && (0,external_kolmafia_.currentRound)() == 0) {
            return;
          }

          if (!(0,external_kolmafia_.handlingChoice)() || !_this2.choices.includes((0,external_kolmafia_.lastChoice)())) {
            greyAdv(null);
            return;
          }

          var url =
          "choice.php?pwd=&whichchoice=" + (0,external_kolmafia_.lastChoice)() + "&option=" + eliza[1];

          (0,external_kolmafia_.visitUrl)(url);

          if ((0,external_kolmafia_.currentRound)() != 0) {
            greyAdv(null);
          }

          _this2.printStatus();

          var both2 = _this2.getBoth();

          if (both == both2) {
            throw "No progress was made in eliza..";
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Misc / ManorLights";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      if (!this.isTime()) {
        return false;
      }

      if (this.isElizaReady()) {
        var eliza = this.getEliza();

        if (canGreyAdventure(eliza[0])) {
          return true;
        }
      }

      if (this.shouldDoSteve()) {
        var steve = this.getSteve();

        if (canGreyAdventure(steve[0])) {
          return true;
        }
      }

      return false;
    } }, { key: "free", value:

    function free() {
      return (
        this.isSteveReady() && !this.isSteveFight() ||
        this.isElizaReady() && !this.isElizaFight());

    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestManorLights;}();
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestMoonSignAbsorb.ts
function QuestMoonSignAbsorb_typeof(obj) {"@babel/helpers - typeof";return QuestMoonSignAbsorb_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestMoonSignAbsorb_typeof(obj);}function QuestMoonSignAbsorb_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestMoonSignAbsorb_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestMoonSignAbsorb_toPropertyKey(descriptor.key), descriptor);}}function QuestMoonSignAbsorb_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestMoonSignAbsorb_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestMoonSignAbsorb_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestMoonSignAbsorb_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestMoonSignAbsorb_setPrototypeOf(subClass, superClass);}function QuestMoonSignAbsorb_setPrototypeOf(o, p) {QuestMoonSignAbsorb_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestMoonSignAbsorb_setPrototypeOf(o, p);}function QuestMoonSignAbsorb_createSuper(Derived) {var hasNativeReflectConstruct = QuestMoonSignAbsorb_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestMoonSignAbsorb_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestMoonSignAbsorb_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestMoonSignAbsorb_possibleConstructorReturn(this, result);};}function QuestMoonSignAbsorb_possibleConstructorReturn(self, call) {if (call && (QuestMoonSignAbsorb_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestMoonSignAbsorb_assertThisInitialized(self);}function QuestMoonSignAbsorb_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestMoonSignAbsorb_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestMoonSignAbsorb_getPrototypeOf(o) {QuestMoonSignAbsorb_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestMoonSignAbsorb_getPrototypeOf(o);}function QuestMoonSignAbsorb_defineProperty(obj, key, value) {key = QuestMoonSignAbsorb_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestMoonSignAbsorb_toPropertyKey(arg) {var key = QuestMoonSignAbsorb_toPrimitive(arg, "string");return QuestMoonSignAbsorb_typeof(key) === "symbol" ? key : String(key);}function QuestMoonSignAbsorb_toPrimitive(input, hint) {if (QuestMoonSignAbsorb_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestMoonSignAbsorb_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestMoonSignAbsorb = /*#__PURE__*/function (_TaskInfo) {QuestMoonSignAbsorb_inherits(QuestMoonSignAbsorb, _TaskInfo);var _super = QuestMoonSignAbsorb_createSuper(QuestMoonSignAbsorb);function QuestMoonSignAbsorb() {var _this;QuestMoonSignAbsorb_classCallCheck(this, QuestMoonSignAbsorb);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "spoon",



    external_kolmafia_.Item.get("hewn moon-rune spoon"));QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "paths", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "monster", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "location", void 0);QuestMoonSignAbsorb_defineProperty(QuestMoonSignAbsorb_assertThisInitialized(_this), "moonZone", void 0);return _this;}QuestMoonSignAbsorb_createClass(QuestMoonSignAbsorb, [{ key: "level", value:







    function level() {
      if (
      this.isInSign() &&
      GreySettings_GreySettings.canMoonSpoon() &&
      getMoonZone() != "Gnomad" &&
      getMoonZone(GreySettings_GreySettings.greyTuneMoonSpoon) == "Gnomad")
      {
        return 6;
      }

      return this.isInSign() ? 12 : 16;
    } }, { key: "getAbsorbs", value:

    function getAbsorbs() {
      return [this.monster];
    } }, { key: "status", value:

    function status(path) {
      if (path == null) {
        return QuestStatus.NOT_READY;
      }

      if (GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.monster)) {
        return QuestStatus.COMPLETED;
      }

      // If we're not in the moon sign
      if (!this.isInSign()) {
        // If we will be in the sign eventually
        if (this.willMoonTune(false)) {
          return QuestStatus.NOT_READY;
        }

        // If we will not be in the sign eventually and can't hit this monster
        if (!path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER)) {
          return QuestStatus.COMPLETED;
        }
      } else if ((0,external_kolmafia_.getProperty)("moonTuned") == "true") {
        // If we've tuned to this sign, don't bother handling this like a quest
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.familiarWeight)(this.goose) < 6) {
        return QuestStatus.NOT_READY;
      }

      if (this.level() <= 6) {
        return QuestStatus.READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if (path != null && path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER)) {
        var resource = path.getResource(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);

        return {
          location: null,
          outfit: null,
          familiar: this.goose,
          disableFamOverride: true,
          run: function run() {
            resource.fax(_this2.monster);

            MacroBuilder/* Macro.trySkill */.LE.trySkill(external_kolmafia_.Skill.get("Re-Process Matter")).
            trySkillRepeat(external_kolmafia_.Skill.get("Infinite Loop")).
            submit();

            if ((0,external_kolmafia_.handlingChoice)() || (0,external_kolmafia_.currentRound)() != 0) {
              throw "We're supposed to be done with this fax fight!";
            }
          }
        };
      }

      return {
        location: this.location,
        orbs: [this.monster],
        freeRun: function freeRun(monster) {return monster != _this2.monster;},
        run: function run() {
          greyAdv(_this2.location);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {
      if (this.isInSign() || this.willMoonTune(assumeUnstarted)) {
        this.paths = [new PossiblePath(3)];
        return;
      }

      this.paths = [];
      var faxing = new PossiblePath(1);

      if (
      assumeUnstarted ||
      !GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.monster))
      {
        faxing.addFax(this.monster);
      }

      this.paths.push(faxing, new PossiblePath(14));
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "isInSign", value:

    function isInSign() {
      if ((0,external_kolmafia_.knollAvailable)()) {
        return this.moonZone == "Knoll";
      }

      if ((0,external_kolmafia_.gnomadsAvailable)()) {
        return this.moonZone == "Gnomad";
      }

      if ((0,external_kolmafia_.canadiaAvailable)()) {
        return this.moonZone == "Canadia";
      }

      return false;
    } }, { key: "willMoonTune", value:

    function willMoonTune(assumeUnstarted) {
      if ((0,external_kolmafia_.availableAmount)(this.spoon) == 0) {
        return false;
      }

      if ((0,external_kolmafia_.getProperty)("moonTuned") == "true" && !assumeUnstarted) {
        return false;
      }

      return getMoonZone(GreySettings_GreySettings.greyTuneMoonSpoon) == this.moonZone;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestMoonSignAbsorb;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbCanadia.ts
function QuestAbsorbCanadia_typeof(obj) {"@babel/helpers - typeof";return QuestAbsorbCanadia_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestAbsorbCanadia_typeof(obj);}function QuestAbsorbCanadia_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbCanadia_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestAbsorbCanadia_toPropertyKey(descriptor.key), descriptor);}}function QuestAbsorbCanadia_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbCanadia_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbCanadia_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbCanadia_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbCanadia_setPrototypeOf(subClass, superClass);}function QuestAbsorbCanadia_setPrototypeOf(o, p) {QuestAbsorbCanadia_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbCanadia_setPrototypeOf(o, p);}function QuestAbsorbCanadia_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbCanadia_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbCanadia_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbCanadia_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbCanadia_possibleConstructorReturn(this, result);};}function QuestAbsorbCanadia_possibleConstructorReturn(self, call) {if (call && (QuestAbsorbCanadia_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbCanadia_assertThisInitialized(self);}function QuestAbsorbCanadia_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbCanadia_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbCanadia_getPrototypeOf(o) {QuestAbsorbCanadia_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbCanadia_getPrototypeOf(o);}function QuestAbsorbCanadia_defineProperty(obj, key, value) {key = QuestAbsorbCanadia_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestAbsorbCanadia_toPropertyKey(arg) {var key = QuestAbsorbCanadia_toPrimitive(arg, "string");return QuestAbsorbCanadia_typeof(key) === "symbol" ? key : String(key);}function QuestAbsorbCanadia_toPrimitive(input, hint) {if (QuestAbsorbCanadia_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestAbsorbCanadia_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestAbsorbCanadia = /*#__PURE__*/function (_QuestMoonSignAbsorb) {QuestAbsorbCanadia_inherits(QuestAbsorbCanadia, _QuestMoonSignAbsorb);var _super = QuestAbsorbCanadia_createSuper(QuestAbsorbCanadia);function QuestAbsorbCanadia() {var _this;QuestAbsorbCanadia_classCallCheck(this, QuestAbsorbCanadia);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbCanadia_defineProperty(QuestAbsorbCanadia_assertThisInitialized(_this), "monster",
    external_kolmafia_.Monster.get("cloud of disembodied whiskers"));QuestAbsorbCanadia_defineProperty(QuestAbsorbCanadia_assertThisInitialized(_this), "location",
    external_kolmafia_.Location.get("Outskirts of Camp Logging Camp"));QuestAbsorbCanadia_defineProperty(QuestAbsorbCanadia_assertThisInitialized(_this), "moonZone",
    "Canadia");return _this;}QuestAbsorbCanadia_createClass(QuestAbsorbCanadia, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Canadia";
    } }]);return QuestAbsorbCanadia;}(QuestMoonSignAbsorb);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbStarMonster.ts
function QuestAbsorbStarMonster_typeof(obj) {"@babel/helpers - typeof";return QuestAbsorbStarMonster_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestAbsorbStarMonster_typeof(obj);}function QuestAbsorbStarMonster_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbStarMonster_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestAbsorbStarMonster_toPropertyKey(descriptor.key), descriptor);}}function QuestAbsorbStarMonster_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbStarMonster_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbStarMonster_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbStarMonster_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbStarMonster_setPrototypeOf(subClass, superClass);}function QuestAbsorbStarMonster_setPrototypeOf(o, p) {QuestAbsorbStarMonster_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbStarMonster_setPrototypeOf(o, p);}function QuestAbsorbStarMonster_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbStarMonster_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbStarMonster_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbStarMonster_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbStarMonster_possibleConstructorReturn(this, result);};}function QuestAbsorbStarMonster_possibleConstructorReturn(self, call) {if (call && (QuestAbsorbStarMonster_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbStarMonster_assertThisInitialized(self);}function QuestAbsorbStarMonster_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbStarMonster_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbStarMonster_getPrototypeOf(o) {QuestAbsorbStarMonster_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbStarMonster_getPrototypeOf(o);}function QuestAbsorbStarMonster_defineProperty(obj, key, value) {key = QuestAbsorbStarMonster_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestAbsorbStarMonster_toPropertyKey(arg) {var key = QuestAbsorbStarMonster_toPrimitive(arg, "string");return QuestAbsorbStarMonster_typeof(key) === "symbol" ? key : String(key);}function QuestAbsorbStarMonster_toPrimitive(input, hint) {if (QuestAbsorbStarMonster_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestAbsorbStarMonster_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestAbsorbStarMonster = /*#__PURE__*/function (_TaskInfo) {QuestAbsorbStarMonster_inherits(QuestAbsorbStarMonster, _TaskInfo);var _super = QuestAbsorbStarMonster_createSuper(QuestAbsorbStarMonster);function QuestAbsorbStarMonster() {var _this;QuestAbsorbStarMonster_classCallCheck(this, QuestAbsorbStarMonster);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "evenMonster",
    external_kolmafia_.Monster.get("One-Eyed Willie"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "oddMonster",
    external_kolmafia_.Monster.get("Little Man in the Canoe"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "familiar",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestAbsorbStarMonster_defineProperty(QuestAbsorbStarMonster_assertThisInitialized(_this), "paths", void 0);return _this;}QuestAbsorbStarMonster_createClass(QuestAbsorbStarMonster, [{ key: "createPaths", value:


    function createPaths() {
      this.paths = [];
      this.paths.push(new PossiblePath(1).addFax(this.getMonster()));
      this.paths.push(new PossiblePath(20));
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getMonster", value:

    function getMonster() {
      return (0,external_kolmafia_.myAscensions)() % 2 != 0 ? this.evenMonster : this.oddMonster;
    } }, { key: "getId", value:

    function getId() {
      return "Absorbs / Hole in Sky";
    } }, { key: "level", value:

    function level() {
      return 16;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status(path) {
      if (GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.getMonster())) {
        return QuestStatus.COMPLETED;
      }

      if (path == null) {
        return QuestStatus.NOT_READY;
      }

      if (!path.canUse(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.familiarWeight)(this.familiar) < 6) {
        return QuestStatus.NOT_READY;
      }

      if (
      !(0,external_kolmafia_.haveSkill)(this.nanovision) &&
      !GreySettings_GreySettings.shouldAvoidTowerRequirements())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      var resource = path.getResource(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);

      return {
        location: null,
        outfit: null,
        familiar: this.familiar,
        disableFamOverride: true,
        run: function run() {
          resource.fax(_this2.getMonster());

          var macro = MacroBuilder/* Macro.trySkill */.LE.trySkill(external_kolmafia_.Skill.get("Re-Process Matter"));

          if ((0,external_kolmafia_.haveSkill)(_this2.nanovision)) {
            macro.trySkillRepeat(_this2.nanovision);
          } else {
            macro.trySkillRepeat(external_kolmafia_.Skill.get("Infinite Loop"));
          }

          macro.submit();

          if ((0,external_kolmafia_.handlingChoice)() || (0,external_kolmafia_.currentRound)() != 0) {
            throw "We're supposed to be done with this fight!";
          }
        }
      };
    } }, { key: "getAbsorbs", value:

    function getAbsorbs() {
      return [this.getMonster()];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestAbsorbStarMonster;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbKnoll.ts
function QuestAbsorbKnoll_typeof(obj) {"@babel/helpers - typeof";return QuestAbsorbKnoll_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestAbsorbKnoll_typeof(obj);}function QuestAbsorbKnoll_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbKnoll_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestAbsorbKnoll_toPropertyKey(descriptor.key), descriptor);}}function QuestAbsorbKnoll_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbKnoll_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbKnoll_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbKnoll_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbKnoll_setPrototypeOf(subClass, superClass);}function QuestAbsorbKnoll_setPrototypeOf(o, p) {QuestAbsorbKnoll_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbKnoll_setPrototypeOf(o, p);}function QuestAbsorbKnoll_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbKnoll_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbKnoll_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbKnoll_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbKnoll_possibleConstructorReturn(this, result);};}function QuestAbsorbKnoll_possibleConstructorReturn(self, call) {if (call && (QuestAbsorbKnoll_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbKnoll_assertThisInitialized(self);}function QuestAbsorbKnoll_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbKnoll_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbKnoll_getPrototypeOf(o) {QuestAbsorbKnoll_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbKnoll_getPrototypeOf(o);}function QuestAbsorbKnoll_defineProperty(obj, key, value) {key = QuestAbsorbKnoll_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestAbsorbKnoll_toPropertyKey(arg) {var key = QuestAbsorbKnoll_toPrimitive(arg, "string");return QuestAbsorbKnoll_typeof(key) === "symbol" ? key : String(key);}function QuestAbsorbKnoll_toPrimitive(input, hint) {if (QuestAbsorbKnoll_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestAbsorbKnoll_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestAbsorbKnoll = /*#__PURE__*/function (_QuestMoonSignAbsorb) {QuestAbsorbKnoll_inherits(QuestAbsorbKnoll, _QuestMoonSignAbsorb);var _super = QuestAbsorbKnoll_createSuper(QuestAbsorbKnoll);function QuestAbsorbKnoll() {var _this;QuestAbsorbKnoll_classCallCheck(this, QuestAbsorbKnoll);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbKnoll_defineProperty(QuestAbsorbKnoll_assertThisInitialized(_this), "location",
    external_kolmafia_.Location.get("The Bugbear Pen"));QuestAbsorbKnoll_defineProperty(QuestAbsorbKnoll_assertThisInitialized(_this), "monster",
    external_kolmafia_.Monster.get("Revolving Bugbear"));QuestAbsorbKnoll_defineProperty(QuestAbsorbKnoll_assertThisInitialized(_this), "moonZone",
    "Knoll");return _this;}QuestAbsorbKnoll_createClass(QuestAbsorbKnoll, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Knoll";
    } }]);return QuestAbsorbKnoll;}(QuestMoonSignAbsorb);
;// CONCATENATED MODULE: ./src/quests/custom/goblin/QuestGoblinTortureHarem.ts
function QuestGoblinTortureHarem_typeof(obj) {"@babel/helpers - typeof";return QuestGoblinTortureHarem_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestGoblinTortureHarem_typeof(obj);}function QuestGoblinTortureHarem_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGoblinTortureHarem_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestGoblinTortureHarem_toPropertyKey(descriptor.key), descriptor);}}function QuestGoblinTortureHarem_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGoblinTortureHarem_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGoblinTortureHarem_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGoblinTortureHarem_defineProperty(obj, key, value) {key = QuestGoblinTortureHarem_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestGoblinTortureHarem_toPropertyKey(arg) {var key = QuestGoblinTortureHarem_toPrimitive(arg, "string");return QuestGoblinTortureHarem_typeof(key) === "symbol" ? key : String(key);}function QuestGoblinTortureHarem_toPrimitive(input, hint) {if (QuestGoblinTortureHarem_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestGoblinTortureHarem_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestGoblinTortureHarem = /*#__PURE__*/function () {function QuestGoblinTortureHarem() {QuestGoblinTortureHarem_classCallCheck(this, QuestGoblinTortureHarem);QuestGoblinTortureHarem_defineProperty(this, "harem",
    external_kolmafia_.Location.get("Cobb's Knob Harem"));QuestGoblinTortureHarem_defineProperty(this, "lab",
    external_kolmafia_.Location.get("Cobb's Knob Laboratory"));}QuestGoblinTortureHarem_createClass(QuestGoblinTortureHarem, [{ key: "getId", value:

    function getId() {
      return "GoblinLabs / LabUnlock";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if (canGreyAdventure(this.lab)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("questL05Goblin") != "finished") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.harem,
        run: function run() {
          greyAdv(_this.harem, outfit);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.harem];
    } }]);return QuestGoblinTortureHarem;}();
;// CONCATENATED MODULE: ./src/quests/custom/goblin/QuestGoblinTortureLab.ts
function QuestGoblinTortureLab_typeof(obj) {"@babel/helpers - typeof";return QuestGoblinTortureLab_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestGoblinTortureLab_typeof(obj);}function QuestGoblinTortureLab_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGoblinTortureLab_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestGoblinTortureLab_toPropertyKey(descriptor.key), descriptor);}}function QuestGoblinTortureLab_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGoblinTortureLab_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGoblinTortureLab_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGoblinTortureLab_defineProperty(obj, key, value) {key = QuestGoblinTortureLab_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestGoblinTortureLab_toPropertyKey(arg) {var key = QuestGoblinTortureLab_toPrimitive(arg, "string");return QuestGoblinTortureLab_typeof(key) === "symbol" ? key : String(key);}function QuestGoblinTortureLab_toPrimitive(input, hint) {if (QuestGoblinTortureLab_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestGoblinTortureLab_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestGoblinTortureLab = /*#__PURE__*/function () {function QuestGoblinTortureLab() {QuestGoblinTortureLab_classCallCheck(this, QuestGoblinTortureLab);QuestGoblinTortureLab_defineProperty(this, "lab",
    external_kolmafia_.Location.get("Cobb's Knob Laboratory"));QuestGoblinTortureLab_defineProperty(this, "megL3",
    external_kolmafia_.Location.get("Menagerie Level 3"));}QuestGoblinTortureLab_createClass(QuestGoblinTortureLab, [{ key: "getLocations", value:

    function getLocations() {
      return [this.lab];
    } }, { key: "getId", value:

    function getId() {
      return "GoblinLabs / MegUnlock";
    } }, { key: "status", value:

    function status() {
      if (canGreyAdventure(this.megL3)) {
        return QuestStatus.COMPLETED;
      }

      if (
      !canGreyAdventure(this.lab) ||
      (0,external_kolmafia_.getProperty)("questL05Goblin") != "finished")
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setItemDrops();

      return {
        outfit: outfit,
        location: this.lab,
        run: function run() {
          greyAdv(_this.lab, outfit);
        }
      };
    } }, { key: "level", value:

    function level() {
      return 5;
    } }]);return QuestGoblinTortureLab;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestBugbearBakery.ts
function QuestBugbearBakery_typeof(obj) {"@babel/helpers - typeof";return QuestBugbearBakery_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestBugbearBakery_typeof(obj);}function QuestBugbearBakery_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestBugbearBakery_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestBugbearBakery_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestBugbearBakery_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestBugbearBakery_arrayLikeToArray(o, minLen);}function QuestBugbearBakery_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestBugbearBakery_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestBugbearBakery_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestBugbearBakery_toPropertyKey(descriptor.key), descriptor);}}function QuestBugbearBakery_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestBugbearBakery_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestBugbearBakery_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestBugbearBakery_defineProperty(obj, key, value) {key = QuestBugbearBakery_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestBugbearBakery_toPropertyKey(arg) {var key = QuestBugbearBakery_toPrimitive(arg, "string");return QuestBugbearBakery_typeof(key) === "symbol" ? key : String(key);}function QuestBugbearBakery_toPrimitive(input, hint) {if (QuestBugbearBakery_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestBugbearBakery_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestBugbearBakery = /*#__PURE__*/function () {function QuestBugbearBakery() {QuestBugbearBakery_classCallCheck(this, QuestBugbearBakery);QuestBugbearBakery_defineProperty(this, "asdon",
    external_kolmafia_.Item.get("Asdon Martin keyfob"));QuestBugbearBakery_defineProperty(this, "garage",
    external_kolmafia_.Location.get("The Degrassi Knoll Garage"));QuestBugbearBakery_defineProperty(this, "guard",
    external_kolmafia_.Monster.get("Guard Bugbear"));QuestBugbearBakery_defineProperty(this, "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));}QuestBugbearBakery_createClass(QuestBugbearBakery, [{ key: "getId", value:

    function getId() {
      return "Misc / BugbearBakery";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.outfitPieces)("Bugbear Costume").find(function (i) {return (0,external_kolmafia_.availableAmount)(i) == 0;}) ==
      null ||
      !(0,external_kolmafia_.knollAvailable)() ||
      (0,external_kolmafia_.getWorkshed)() != this.asdon)
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.myMeat)() < 200 || (0,external_kolmafia_.isBanished)(this.guard)) {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_.knollAvailable)() && !(0,external_kolmafia_.haveSkill)(this.nanovision)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      if ((0,external_kolmafia_.knollAvailable)()) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {var _iterator = QuestBugbearBakery_createForOfIteratorHelper(
              (0,external_kolmafia_.outfitPieces)("Bugbear Costume")),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var item = _step.value;
                (0,external_kolmafia_.cliExecute)("acquire " + item.name);
              }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
          }
        };
      }

      var outfit = new GreyOutfit().setItemDrops();

      return {
        location: this.garage,
        outfit: outfit,
        run: function run() {
          greyAdv(
          _this.garage,
          outfit,
          new AdventureSettings().addNoBanish(_this.guard));

        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return (0,external_kolmafia_.knollAvailable)() ? [] : [this.garage];
    } }]);return QuestBugbearBakery;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestCustomPurchases.ts
function QuestCustomPurchases_typeof(obj) {"@babel/helpers - typeof";return QuestCustomPurchases_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestCustomPurchases_typeof(obj);}function QuestCustomPurchases_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestCustomPurchases_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestCustomPurchases_toPropertyKey(descriptor.key), descriptor);}}function QuestCustomPurchases_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestCustomPurchases_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestCustomPurchases_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestCustomPurchases_defineProperty(obj, key, value) {key = QuestCustomPurchases_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestCustomPurchases_toPropertyKey(arg) {var key = QuestCustomPurchases_toPrimitive(arg, "string");return QuestCustomPurchases_typeof(key) === "symbol" ? key : String(key);}function QuestCustomPurchases_toPrimitive(input, hint) {if (QuestCustomPurchases_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestCustomPurchases_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestCustomPurchases = /*#__PURE__*/function () {function QuestCustomPurchases() {QuestCustomPurchases_classCallCheck(this, QuestCustomPurchases);QuestCustomPurchases_defineProperty(this, "popper",
    external_kolmafia_.Item.get("Porkpie-mounted popper"));QuestCustomPurchases_defineProperty(this, "silent",
    external_kolmafia_.Item.get("Silent Beret"));QuestCustomPurchases_defineProperty(this, "stealth",
    external_kolmafia_.Item.get("Xiblaxian stealth cowl"));QuestCustomPurchases_defineProperty(this, "firePlusCombat",
    external_kolmafia_.Item.get("sombrero-mounted sparkler"));QuestCustomPurchases_defineProperty(this, "pack",
    external_kolmafia_.Item.get("protonic accelerator pack"));}QuestCustomPurchases_createClass(QuestCustomPurchases, [{ key: "getId", value:

    function getId() {
      return "Misc / Purchases";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.getProperty)("_fireworksShopHatBought") == "true" ||
      !(0,GreyClan/* canUseFireworks */.LA)())
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.myMeat)() <= 3000) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,GreyClan/* runFireworks */.Aj)(function () {
            var toBuy = _this.popper;

            if (
            (0,external_kolmafia_.availableAmount)(_this.stealth) > 0 ||
            (0,external_kolmafia_.availableAmount)(_this.silent) > 0 ||
            (0,external_kolmafia_.availableAmount)(_this.pack) > 0)
            {
              toBuy = _this.firePlusCombat;
            }

            (0,external_kolmafia_.visitUrl)("clan_viplounge.php");
            (0,external_kolmafia_.visitUrl)("clan_viplounge.php?action=fwshop&whichfloor=2");
            (0,external_kolmafia_.print)("Now trying to buy " + toBuy);
            (0,external_kolmafia_.retrieveItem)(toBuy);
            //          buy(item);
          });
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestCustomPurchases;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestDungeonsOfDoom.ts
function QuestDungeonsOfDoom_typeof(obj) {"@babel/helpers - typeof";return QuestDungeonsOfDoom_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestDungeonsOfDoom_typeof(obj);}function QuestDungeonsOfDoom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestDungeonsOfDoom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestDungeonsOfDoom_toPropertyKey(descriptor.key), descriptor);}}function QuestDungeonsOfDoom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestDungeonsOfDoom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestDungeonsOfDoom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestDungeonsOfDoom_defineProperty(obj, key, value) {key = QuestDungeonsOfDoom_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestDungeonsOfDoom_toPropertyKey(arg) {var key = QuestDungeonsOfDoom_toPrimitive(arg, "string");return QuestDungeonsOfDoom_typeof(key) === "symbol" ? key : String(key);}function QuestDungeonsOfDoom_toPrimitive(input, hint) {if (QuestDungeonsOfDoom_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestDungeonsOfDoom_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestDungeonsOfDoom = /*#__PURE__*/function () {function QuestDungeonsOfDoom() {QuestDungeonsOfDoom_classCallCheck(this, QuestDungeonsOfDoom);QuestDungeonsOfDoom_defineProperty(this, "bend",
    external_kolmafia_.Location.get("The Enormous Greater-Than Sign"));QuestDungeonsOfDoom_defineProperty(this, "plusSign",
    external_kolmafia_.Item.get("plus sign"));QuestDungeonsOfDoom_defineProperty(this, "teleportis",
    external_kolmafia_.Effect.get("Teleportitis"));QuestDungeonsOfDoom_defineProperty(this, "beatenUp",
    external_kolmafia_.Effect.get("Beaten Up"));QuestDungeonsOfDoom_defineProperty(this, "curse1",
    external_kolmafia_.Effect.get("Once-Cursed"));QuestDungeonsOfDoom_defineProperty(this, "curse2",
    external_kolmafia_.Effect.get("Twice-Cursed"));QuestDungeonsOfDoom_defineProperty(this, "curse3",
    external_kolmafia_.Effect.get("Thrice-Cursed"));}QuestDungeonsOfDoom_createClass(QuestDungeonsOfDoom, [{ key: "getId", value:

    function getId() {
      return "Misc / UnlockDungeonsOfDoom";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "isDoomUnlocked", value:

    function isDoomUnlocked() {
      return (
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_.myAscensions)() &&
        (0,external_kolmafia_.availableAmount)(this.plusSign) == 0);

    } }, { key: "status", value:

    function status() {
      if (this.isDoomUnlocked()) {
        return QuestStatus.COMPLETED;
      }

      // Due to poison, we don't want to get into the rare state where we are double nerfed
      if ((0,external_kolmafia_.myMeat)() < 1300 || (0,external_kolmafia_.haveEffect)(this.beatenUp) > 0) {
        return QuestStatus.NOT_READY;
      }

      // If we have not purchased the 5k forged documents yet, or the tavern is not available yet
      if (
      ((0,external_kolmafia_.myMeat)() < 7000 && (0,external_kolmafia_.getProperty)("questL11Black") != "finished" ||
      (0,external_kolmafia_.getProperty)("questL02Larva") != "finished") &&
      (0,external_kolmafia_.availableAmount)(this.plusSign) > 0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.myLevel)() < 12 && (0,external_kolmafia_.availableAmount)(this.plusSign) == 0) {
        return QuestStatus.NOT_READY;
      }

      if (!hasNonCombatSkillsReady(false)) {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.haveEffect)(this.curse1) +
      (0,external_kolmafia_.haveEffect)(this.curse2) +
      (0,external_kolmafia_.haveEffect)(this.curse3) >
      0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.plusSign) > 0 && (0,external_kolmafia_.myLevel)() < 16) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.bend,
        freeRun: function freeRun() {return true;},
        run: function run() {
          if (
          (0,external_kolmafia_.availableAmount)(_this.plusSign) > 0 &&
          (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_.myAscensions)())
          {
            (0,external_kolmafia_.use)(_this.plusSign);
            return;
          }

          var settings = new AdventureSettings();
          settings.setChoices({
            handleChoice: function handleChoice(choiceNo) {
              if (choiceNo == 3) {
                return 3;
              } else if (choiceNo == 451) {
                return (0,external_kolmafia_.availableAmount)(_this.plusSign) > 0 ? 5 : 3;
              }

              return null;
            },

            calledOutOfScopeChoiceBehavior: function calledOutOfScopeChoiceBehavior(choiceNo) {
              return false;
            }
          });

          greyAdv(_this.bend, outfit, settings);

          if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_.myAscensions)()) {
            if ((0,external_kolmafia_.availableAmount)(_this.plusSign) == 0) {
              (0,external_kolmafia_.cliExecute)("refresh inventory");
            }

            (0,external_kolmafia_.use)(_this.plusSign);
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.bend];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (
        (0,external_kolmafia_.haveEffect)(this.teleportis) > 0 && (0,external_kolmafia_.availableAmount)(this.plusSign) > 0);

    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return (
        (0,external_kolmafia_.availableAmount)(this.plusSign) == 0 && (0,external_kolmafia_.haveEffect)(this.teleportis) == 0);

    } }]);return QuestDungeonsOfDoom;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestFamiliarEquip.ts
function QuestFamiliarEquip_typeof(obj) {"@babel/helpers - typeof";return QuestFamiliarEquip_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestFamiliarEquip_typeof(obj);}function QuestFamiliarEquip_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestFamiliarEquip_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestFamiliarEquip_toPropertyKey(descriptor.key), descriptor);}}function QuestFamiliarEquip_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestFamiliarEquip_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestFamiliarEquip_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestFamiliarEquip_defineProperty(obj, key, value) {key = QuestFamiliarEquip_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestFamiliarEquip_toPropertyKey(arg) {var key = QuestFamiliarEquip_toPrimitive(arg, "string");return QuestFamiliarEquip_typeof(key) === "symbol" ? key : String(key);}function QuestFamiliarEquip_toPrimitive(input, hint) {if (QuestFamiliarEquip_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestFamiliarEquip_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var QuestFamiliarEquip = /*#__PURE__*/function () {function QuestFamiliarEquip() {QuestFamiliarEquip_classCallCheck(this, QuestFamiliarEquip);QuestFamiliarEquip_defineProperty(this, "familiar",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestFamiliarEquip_defineProperty(this, "equip",
    external_kolmafia_.Item.get("Grey Down Vest"));}QuestFamiliarEquip_createClass(QuestFamiliarEquip, [{ key: "getId", value:

    function getId() {
      return "Misc / FamEquip";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.availableAmount)(this.equip) > 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.familiarWeight)(this.familiar) >= 6 || (0,external_kolmafia_.myMeat)() < 100) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.useFamiliar)(_this.familiar);
          (0,external_kolmafia_.maximize)("familiar experience +familiar weight -tie", false);
          (0,external_kolmafia_.visitUrl)("arena.php");

          while (
          (0,external_kolmafia_.availableAmount)(_this.equip) == 0 &&
          (0,external_kolmafia_.familiarWeight)(_this.familiar) < 6 &&
          (0,external_kolmafia_.myMeat)() >= 100)
          {
            var exp = _this.familiar.experience;
            (0,external_kolmafia_.cliExecute)("train turns 1");

            if (exp >= _this.familiar.experience) {
              throw "We attempted to train your familiar in the cake arena, but they gained no experience. Something is likely wrong. You may need to acquire a grey goose vest yourself.";
            }
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestFamiliarEquip;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestFortuneExp.ts
function QuestFortuneExp_typeof(obj) {"@babel/helpers - typeof";return QuestFortuneExp_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestFortuneExp_typeof(obj);}function QuestFortuneExp_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestFortuneExp_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestFortuneExp_toPropertyKey(descriptor.key), descriptor);}}function QuestFortuneExp_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestFortuneExp_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestFortuneExp_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestFortuneExp_defineProperty(obj, key, value) {key = QuestFortuneExp_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestFortuneExp_toPropertyKey(arg) {var key = QuestFortuneExp_toPrimitive(arg, "string");return QuestFortuneExp_typeof(key) === "symbol" ? key : String(key);}function QuestFortuneExp_toPrimitive(input, hint) {if (QuestFortuneExp_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestFortuneExp_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestFortuneExp = /*#__PURE__*/function () {function QuestFortuneExp() {QuestFortuneExp_classCallCheck(this, QuestFortuneExp);QuestFortuneExp_defineProperty(this, "fam",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestFortuneExp_defineProperty(this, "equip",
    (0,external_kolmafia_.familiarEquipment)(this.fam));}QuestFortuneExp_createClass(QuestFortuneExp, [{ key: "getId", value:

    function getId() {
      return "Misc / FortuneExp";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("_clanFortuneBuffUsed") == "true" || !(0,GreyClan/* canUseFortuneBuff */.uS)()) {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.familiarWeight)(this.fam) > 2 ||
      (0,external_kolmafia_.availableAmount)(this.equip) == 0 ||
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_.myAscensions)())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,GreyClan/* useFortuneBuff */.Qu)(function () {return (0,external_kolmafia_.cliExecute)("fortune buff familiar");});
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestFortuneExp;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestGetZapWand.ts
function QuestGetZapWand_typeof(obj) {"@babel/helpers - typeof";return QuestGetZapWand_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestGetZapWand_typeof(obj);}function QuestGetZapWand_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGetZapWand_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestGetZapWand_toPropertyKey(descriptor.key), descriptor);}}function QuestGetZapWand_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGetZapWand_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGetZapWand_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGetZapWand_defineProperty(obj, key, value) {key = QuestGetZapWand_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestGetZapWand_toPropertyKey(arg) {var key = QuestGetZapWand_toPrimitive(arg, "string");return QuestGetZapWand_typeof(key) === "symbol" ? key : String(key);}function QuestGetZapWand_toPrimitive(input, hint) {if (QuestGetZapWand_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestGetZapWand_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestGetZapWand = /*#__PURE__*/function () {function QuestGetZapWand() {QuestGetZapWand_classCallCheck(this, QuestGetZapWand);QuestGetZapWand_defineProperty(this, "realDung",
    external_kolmafia_.Location.get("The Dungeons of Doom"));QuestGetZapWand_defineProperty(this, "deadMimic",
    external_kolmafia_.Item.get("dead mimic"));QuestGetZapWand_defineProperty(this, "plusSign",
    external_kolmafia_.Item.get("plus sign"));QuestGetZapWand_defineProperty(this, "toAbsorb", void 0);}QuestGetZapWand_createClass(QuestGetZapWand, [{ key: "getId", value:


    function getId() {
      return "Misc / GrabZapWand";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "shouldHaveWand", value:

    function shouldHaveWand() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastZapperWand")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "isDoomUnlocked", value:

    function isDoomUnlocked() {
      return (
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_.myAscensions)() &&
        (0,external_kolmafia_.availableAmount)(this.plusSign) == 0);

    } }, { key: "getTimesZapped", value:

    function getTimesZapped() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_zapCount"));
    } }, { key: "status", value:

    function status() {
      if (
      !GreySettings_GreySettings.greyGrabZapWand ||
      this.shouldHaveWand() ||
      this.getWand() != null)
      {
        return QuestStatus.COMPLETED;
      }

      var meatOnHand = 6000;

      if (getQuestStatus("questL11Black") < 3) {
        meatOnHand += 3000;
      }

      if ((0,external_kolmafia_.myMeat)() < meatOnHand || !this.isDoomUnlocked()) {
        return QuestStatus.NOT_READY;
      }

      // Only be very requirement if we have the MP regen skill
      if (!hasNonCombatSkillsReady(this.toAbsorb.length == 0 ? true : false)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getWand", value:

    function getWand() {
      var wand = (0,external_kolmafia_.getZapWand)();

      return wand == external_kolmafia_.Item.none ? null : wand;
    } }, { key: "hasWandExploded", value:

    function hasWandExploded() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastZapperWandExplosionDay")) == (0,external_kolmafia_.myDaycount)();
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setNoCombat();

      return {
        outfit: outfit,
        location: this.realDung,
        freeRun: function freeRun() {return true;},
        run: function run() {
          var props = new Properties_PropertyManager();

          props.setChoice(25, 2);

          try {
            greyAdv(_this.realDung, outfit);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_.availableAmount)(_this.deadMimic) > 0) {
            (0,external_kolmafia_.use)(_this.deadMimic);

            if (_this.getWand() == null) {
              (0,external_kolmafia_.print)(
              "Something has gone wrong. We used a dead mimic but didn't get a wand.");

            }
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.realDung];
    } }]);return QuestGetZapWand;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestGrabBoatVacation.ts
function QuestGrabBoatVacation_typeof(obj) {"@babel/helpers - typeof";return QuestGrabBoatVacation_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestGrabBoatVacation_typeof(obj);}function QuestGrabBoatVacation_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestGrabBoatVacation_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestGrabBoatVacation_toPropertyKey(descriptor.key), descriptor);}}function QuestGrabBoatVacation_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestGrabBoatVacation_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestGrabBoatVacation_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestGrabBoatVacation_defineProperty(obj, key, value) {key = QuestGrabBoatVacation_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestGrabBoatVacation_toPropertyKey(arg) {var key = QuestGrabBoatVacation_toPrimitive(arg, "string");return QuestGrabBoatVacation_typeof(key) === "symbol" ? key : String(key);}function QuestGrabBoatVacation_toPrimitive(input, hint) {if (QuestGrabBoatVacation_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestGrabBoatVacation_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestGrabBoatVacation = /*#__PURE__*/function () {function QuestGrabBoatVacation() {QuestGrabBoatVacation_classCallCheck(this, QuestGrabBoatVacation);QuestGrabBoatVacation_defineProperty(this, "junkKey",
    external_kolmafia_.Item.get("funky junk key"));QuestGrabBoatVacation_defineProperty(this, "boatParts",
    [
    "old claw-foot bathtub",
    "old clothesline pole",
    "antique cigar sign"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestGrabBoatVacation_defineProperty(this, "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));}QuestGrabBoatVacation_createClass(QuestGrabBoatVacation, [{ key: "getId", value:

    function getId() {
      return "Boat / Vacation";
    } }, { key: "level", value:

    function level() {
      return 6;
    } }, { key: "hasDesertAccess", value:

    function hasDesertAccess() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM19Hippy") == "unstarted") {
        return QuestStatus.READY;
      }

      if (this.hasBoat()) {
        return QuestStatus.COMPLETED;
      }

      if (!this.hasDesertAccess()) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.myMeat)() < 2000) {
        return QuestStatus.NOT_READY;
      }

      if (
      !GreySettings_GreySettings.isHippyMode() &&
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Brother Corsican's Blessing")) +
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("A Girl Named Sue")) >
      0)
      {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.myAdventures)() < ((0,external_kolmafia_.myLevel)() < 11 ? 35 : 20)) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "doHippyJunk", value:

    function doHippyJunk() {
      return {
        location: null,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=woods&action=woods_smokesignals");
          (0,external_kolmafia_.runChoice)(1);
          (0,external_kolmafia_.runChoice)(2);
        }
      };
    } }, { key: "run", value:

    function run() {var _this = this;
      if ((0,external_kolmafia_.getProperty)("questM19Hippy") == "unstarted") {
        return this.doHippyJunk();
      }

      return {
        location: null,
        run: function run() {
          var scriptAvailable = (0,external_kolmafia_.availableAmount)(
          external_kolmafia_.Item.get("Shore Inc. Ship Trip Scrip"));


          var props = new Properties_PropertyManager();
          props.setChoice(793, 1);

          try {
            for (var i = 0; i < 3 - scriptAvailable; i++) {
              greyAdv(external_kolmafia_.Location.get("The Shore, Inc. Travel Agency"));
            }
          } finally {
            props.resetAll();
          }

          var planks = external_kolmafia_.Item.get("Dingy Planks");

          if ((0,external_kolmafia_.availableAmount)(planks) == 0) {
            (0,external_kolmafia_.retrieveItem)(planks);
          }

          (0,external_kolmafia_.cliExecute)("make dinghy plans");
          (0,external_kolmafia_.use)(external_kolmafia_.Item.get("Dinghy plans"));

          if (!_this.hasBoat()) {
            throw "We should've had a boat!";
          }
        }
      };
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      if (!GreySettings_GreySettings.isHippyMode() || reallyMustBeDone) {
        return false;
      }

      if ((0,external_kolmafia_.myLevel)() == 11) {
        return true;
      }

      return false;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "hasBoat", value:

    function hasBoat() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastIslandUnlock")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestGrabBoatVacation;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestInitialPulls.ts
function QuestInitialPulls_typeof(obj) {"@babel/helpers - typeof";return QuestInitialPulls_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestInitialPulls_typeof(obj);}function QuestInitialPulls_toConsumableArray(arr) {return QuestInitialPulls_arrayWithoutHoles(arr) || QuestInitialPulls_iterableToArray(arr) || QuestInitialPulls_unsupportedIterableToArray(arr) || QuestInitialPulls_nonIterableSpread();}function QuestInitialPulls_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestInitialPulls_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestInitialPulls_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestInitialPulls_arrayLikeToArray(arr);}function QuestInitialPulls_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestInitialPulls_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestInitialPulls_slicedToArray(arr, i) {return QuestInitialPulls_arrayWithHoles(arr) || QuestInitialPulls_iterableToArrayLimit(arr, i) || QuestInitialPulls_unsupportedIterableToArray(arr, i) || QuestInitialPulls_nonIterableRest();}function QuestInitialPulls_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestInitialPulls_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestInitialPulls_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestInitialPulls_arrayLikeToArray(o, minLen);}function QuestInitialPulls_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestInitialPulls_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestInitialPulls_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestInitialPulls_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestInitialPulls_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestInitialPulls_toPropertyKey(descriptor.key), descriptor);}}function QuestInitialPulls_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestInitialPulls_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestInitialPulls_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestInitialPulls_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestInitialPulls_setPrototypeOf(subClass, superClass);}function QuestInitialPulls_setPrototypeOf(o, p) {QuestInitialPulls_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestInitialPulls_setPrototypeOf(o, p);}function QuestInitialPulls_createSuper(Derived) {var hasNativeReflectConstruct = QuestInitialPulls_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestInitialPulls_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestInitialPulls_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestInitialPulls_possibleConstructorReturn(this, result);};}function QuestInitialPulls_possibleConstructorReturn(self, call) {if (call && (QuestInitialPulls_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestInitialPulls_assertThisInitialized(self);}function QuestInitialPulls_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestInitialPulls_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestInitialPulls_getPrototypeOf(o) {QuestInitialPulls_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestInitialPulls_getPrototypeOf(o);}function QuestInitialPulls_defineProperty(obj, key, value) {key = QuestInitialPulls_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestInitialPulls_toPropertyKey(arg) {var key = QuestInitialPulls_toPrimitive(arg, "string");return QuestInitialPulls_typeof(key) === "symbol" ? key : String(key);}function QuestInitialPulls_toPrimitive(input, hint) {if (QuestInitialPulls_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestInitialPulls_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestInitialPulls = /*#__PURE__*/function (_TaskInfo) {QuestInitialPulls_inherits(QuestInitialPulls, _TaskInfo);var _super = QuestInitialPulls_createSuper(QuestInitialPulls);function QuestInitialPulls() {var _this;QuestInitialPulls_classCallCheck(this, QuestInitialPulls);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "requiredPulls",
    [
    [external_kolmafia_.Item.get("Yule Hatchet"), -150],
    [external_kolmafia_.Item.get("Teacher's Pen"), -70]]);QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "possiblePulls",

    [
    [external_kolmafia_.Item.get("Giant Yellow Hat"), -35],
    [external_kolmafia_.Item.get("Mafia Thumb Ring"), -30],
    [external_kolmafia_.Item.get("Portable cassette player"), -15],
    [external_kolmafia_.Item.get("Pantsgiving"), -10]]);QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "paths", void 0);QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "freeRunners",


    [
    "Greatest American Pants",
    "navel ring of navel gazing"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestInitialPulls_defineProperty(QuestInitialPulls_assertThisInitialized(_this), "donePulls", void 0);return _this;}QuestInitialPulls_createClass(QuestInitialPulls, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      var mlItem = ["HOA regulation book", "Space Trip safety headphones"].
      map(function (s) {return external_kolmafia_.Item.get(s);}).
      filter(function (i) {return (0,external_kolmafia_.availableAmount)(i) + (0,external_kolmafia_.storageAmount)(i) > 0;});

      if (
      mlItem.length > 0 && (
      assumeUnstarted || mlItem.find(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;}) == null))
      {
        this.requiredPulls.push([mlItem[0], -30]);
      }

      var freeRunner = this.freeRunners.find(
      function (i) {return (0,external_kolmafia_.availableAmount)(i) + (0,external_kolmafia_.storageAmount)(i) > 0;});


      this.paths = [];
      this.paths.push(new PossiblePath(0));

      // If we're not assuming we're unstarted, then filter all the pulls we already have
      if (!assumeUnstarted) {
        this.requiredPulls = this.requiredPulls.filter(
        function (_ref) {var _ref2 = QuestInitialPulls_slicedToArray(_ref, 1),i = _ref2[0];return (0,external_kolmafia_.availableAmount)(i) == 0;});

        this.possiblePulls = this.possiblePulls.filter(
        function (_ref3) {var _ref4 = QuestInitialPulls_slicedToArray(_ref3, 1),i = _ref4[0];return (
            (0,external_kolmafia_.availableAmount)(i) == 0 && (
            (0,external_kolmafia_.historicalPrice)(i) < 50000 || (0,external_kolmafia_.storageAmount)(i) > 0));});

      }

      if (freeRunner != null && (0,external_kolmafia_.availableAmount)(freeRunner) == 0) {
        this.possiblePulls.push([freeRunner, -20]);
      }

      this.paths.push(this.getTotals(this.requiredPulls));

      // Need to make this better.. Its a real laugh.
      var _iterator = QuestInitialPulls_createForOfIteratorHelper(getAllCombinations(this.possiblePulls)),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var combination = _step.value;
          this.paths.push(this.getTotals([].concat(QuestInitialPulls_toConsumableArray(this.requiredPulls), QuestInitialPulls_toConsumableArray(combination))));
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "getId", value:

    function getId() {
      return "Misc / Initial Pulls";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getTotals", value:

    function getTotals(items) {var _this2 = this;
      /*items = items.filter(
        ([i]) => storageAmount(i) > 0 || historicalPrice(i) < 50000
      );*/

      var advs = items.map(function (_ref5) {var _ref6 = QuestInitialPulls_slicedToArray(_ref5, 2),amount = _ref6[1];return amount;}).reduce(function (p, n) {return p + n;}, 0);

      if (
      items.find(function (_ref7) {var _ref8 = QuestInitialPulls_slicedToArray(_ref7, 1),item = _ref8[0];return item == external_kolmafia_.Item.get("Mafia Thumb Ring");}) != null &&
      items.find(function (_ref9) {var _ref10 = QuestInitialPulls_slicedToArray(_ref9, 1),item = _ref10[0];return _this2.freeRunners.includes(item);}))
      {
        // If we're using mafia ring and we plan to do free runs, mafia won't trigger as much..
        advs -= 20;
      }

      var path = new PossiblePath(advs);

      items.forEach(function (_ref11) {var _ref12 = QuestInitialPulls_slicedToArray(_ref11, 1),i = _ref12[0];return path.addPull(i);});

      return path;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status(path) {
      if (
      this.donePulls ||
      (0,external_kolmafia_.pullsRemaining)() <= 0 ||
      GreySettings_GreySettings.isHardcoreMode() ||
      path != null && !path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL))
      {
        this.donePulls = true;
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run(path) {var _this3 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          _this3.donePulls = true;
          (0,external_kolmafia_.useFamiliar)(external_kolmafia_.Familiar.get("Grey Goose")); // Force it to be leveled up if we happen to have short order cook
          var _iterator2 = QuestInitialPulls_createForOfIteratorHelper(
            path.pulls),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var item = _step2.value;
              if (hasPulled(item)) {
                continue;
              }

              GreyPulls.tryPull(item, 25000);
            }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

          var failedPulls = path.pulls.filter(function (i) {return (0,external_kolmafia_.itemAmount)(i) == 0;});

          if (failedPulls.length > 0) {
            throw "Failed to pull the items " + failedPulls.join(", ");
          }
        }
      };
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }]);return QuestInitialPulls;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/custom/QuestInitialStart.ts
function QuestInitialStart_typeof(obj) {"@babel/helpers - typeof";return QuestInitialStart_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestInitialStart_typeof(obj);}function QuestInitialStart_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestInitialStart_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestInitialStart_slicedToArray(arr, i) {return QuestInitialStart_arrayWithHoles(arr) || QuestInitialStart_iterableToArrayLimit(arr, i) || QuestInitialStart_unsupportedIterableToArray(arr, i) || QuestInitialStart_nonIterableRest();}function QuestInitialStart_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestInitialStart_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestInitialStart_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestInitialStart_arrayLikeToArray(o, minLen);}function QuestInitialStart_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestInitialStart_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function QuestInitialStart_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function QuestInitialStart_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestInitialStart_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestInitialStart_toPropertyKey(descriptor.key), descriptor);}}function QuestInitialStart_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestInitialStart_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestInitialStart_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestInitialStart_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestInitialStart_setPrototypeOf(subClass, superClass);}function QuestInitialStart_setPrototypeOf(o, p) {QuestInitialStart_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestInitialStart_setPrototypeOf(o, p);}function QuestInitialStart_createSuper(Derived) {var hasNativeReflectConstruct = QuestInitialStart_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestInitialStart_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestInitialStart_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestInitialStart_possibleConstructorReturn(this, result);};}function QuestInitialStart_possibleConstructorReturn(self, call) {if (call && (QuestInitialStart_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestInitialStart_assertThisInitialized(self);}function QuestInitialStart_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestInitialStart_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestInitialStart_getPrototypeOf(o) {QuestInitialStart_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestInitialStart_getPrototypeOf(o);}function QuestInitialStart_defineProperty(obj, key, value) {key = QuestInitialStart_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestInitialStart_toPropertyKey(arg) {var key = QuestInitialStart_toPrimitive(arg, "string");return QuestInitialStart_typeof(key) === "symbol" ? key : String(key);}function QuestInitialStart_toPrimitive(input, hint) {if (QuestInitialStart_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestInitialStart_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestInitialStart = /*#__PURE__*/function (_TaskInfo) {QuestInitialStart_inherits(QuestInitialStart, _TaskInfo);var _super = QuestInitialStart_createSuper(QuestInitialStart);function QuestInitialStart() {var _this;QuestInitialStart_classCallCheck(this, QuestInitialStart);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "familiar",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "equip",
    external_kolmafia_.Item.get("Grey Down Vest"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "desiredLevel", void 0);QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "weightRequired", void 0);QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "spaceBlanket",


    external_kolmafia_.Item.get("Space Blanket"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "mayday",
    external_kolmafia_.Item.get("MayDay supply package"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "saber",
    external_kolmafia_.Item.get("Fourth of May Cosplay Saber"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "flimsyScraps",
    external_kolmafia_.Item.get("Flimsy hardwood scraps"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "birchBattery",
    external_kolmafia_.Item.get("Birch battery"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "mummingTrunk",
    external_kolmafia_.Item.get("mumming trunk"));QuestInitialStart_defineProperty(QuestInitialStart_assertThisInitialized(_this), "paths", void 0);return _this;}QuestInitialStart_createClass(QuestInitialStart, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [];
      this.paths.push(new PossiblePath(0));
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.availableAmount)(this.mayday) > 0) {
        return QuestStatus.READY;
      }

      if (
      (0,external_kolmafia_.getProperty)("hasMaydayContract") == "true" &&
      (0,external_kolmafia_.getProperty)("_maydayDropped") == "false")
      {
        return QuestStatus.NOT_READY;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.saber) > 0 &&
      (0,external_kolmafia_.getProperty)("_saberMod") == "0" &&
      GreySettings_GreySettings.greyCosplaySaber != "")
      {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.getProperty)("breakfastCompleted") == "false") {
        if ((0,external_kolmafia_.myMeat)() >= 900) {
          return QuestStatus.READY;
        }

        return QuestStatus.NOT_READY;
      }

      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          if (!(0,external_kolmafia_.hippyStoneBroken)() && (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("greyEnablePvP"))) {
            (0,external_kolmafia_.print)("Enabling pvp as defined by 'greyEnablePvP'", "blue");
            (0,external_kolmafia_.visitUrl)("peevpee.php?action=smashstone&pwd&confirm=on", true);
            (0,external_kolmafia_.visitUrl)("peevpee.php?place=fight");
          }

          if (
          (0,external_kolmafia_.getProperty)("backupCameraReverserEnabled") != "true" &&
          (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Backup Camera")) > 0)
          {
            (0,external_kolmafia_.print)("Now reversing the backup camera..", "blue");
            (0,external_kolmafia_.cliExecute)("backupcamera reverser on");
          }

          if (
          (0,external_kolmafia_.availableAmount)(_this2.saber) > 0 &&
          (0,external_kolmafia_.getProperty)("_saberMod") == "0" &&
          GreySettings_GreySettings.greyCosplaySaber != "")
          {
            (0,external_kolmafia_.cliExecute)("saber " + GreySettings_GreySettings.greyCosplaySaber);
          }

          if (
          (0,external_kolmafia_.getProperty)("telegraphOfficeAvailable") == "true" &&
          (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Your cowboy boots")) == 0)
          {
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=town_right&action=townright_ltt");
            (0,external_kolmafia_.runChoice)(8);
          }

          var clipFams = GreySettings_GreySettings.greyClipArt.split(",").
          filter(function (s) {return s.length != 0;}).
          map(function (s) {return external_kolmafia_.Familiar.get(s);}).
          map(function (f) {return [f, (0,external_kolmafia_.familiarEquipment)(f)];}).
          filter(function (_ref) {var _ref2 = QuestInitialStart_slicedToArray(_ref, 2),f = _ref2[0],e = _ref2[1];return (0,external_kolmafia_.availableAmount)(e) == 0 && (0,external_kolmafia_.haveFamiliar)(f);});

          var clipArt = external_kolmafia_.Skill.get("Summon Clip Art");
          var jacks = external_kolmafia_.Item.get("box of familiar jacks");var _iterator = QuestInitialStart_createForOfIteratorHelper(

            clipFams),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = QuestInitialStart_slicedToArray(_step.value, 2),fam = _step$value[0],item = _step$value[1];
              if (!(0,external_kolmafia_.haveSkill)(clipArt) || clipArt.dailylimit <= 0) {
                break;
              }

              if ((0,external_kolmafia_.availableAmount)(item) > 0) {
                continue;
              }

              (0,external_kolmafia_.print)("Using the familiar ".concat(
              fam.toString(), " to acquire fam equip ").concat(item, " from Summon Clip Art"),
              "blue");


              if ((0,external_kolmafia_.availableAmount)(jacks) == 0) {
                (0,external_kolmafia_.cliExecute)("acquire box of familiar jacks");
              }

              (0,external_kolmafia_.useFamiliar)(fam);
              (0,external_kolmafia_.use)(jacks);
            }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

          if (
          GreySettings_GreySettings.greyUseMummery &&
          (0,external_kolmafia_.getProperty)("_mummeryUses") == "" &&
          (0,external_kolmafia_.availableAmount)(_this2.mummingTrunk) > 0)
          {
            (0,external_kolmafia_.useFamiliar)(_this2.familiar);

            if ((0,external_kolmafia_.myFamiliar)() == _this2.familiar) {
              (0,external_kolmafia_.cliExecute)("mummery mp");
            } else {
              (0,external_kolmafia_.print)("Unable to apply mp regen on goose", "Red");
            }
          }

          if (
          (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("SongBoom&trade; BoomBox")) > 0 &&
          (0,external_kolmafia_.getProperty)("_boomBoxSongsLeft") == "11")
          {
            (0,external_kolmafia_.cliExecute)("boombox meat");
          }

          if ((0,external_kolmafia_.availableAmount)(_this2.mayday) > 0) {
            (0,external_kolmafia_.use)(_this2.mayday);

            if ((0,external_kolmafia_.availableAmount)(_this2.spaceBlanket) > 0) {
              (0,external_kolmafia_.autosell)(_this2.spaceBlanket, 1);
            }
          }

          if ((0,external_kolmafia_.getProperty)("breakfastCompleted") == "false" && (0,external_kolmafia_.myMeat)() >= 900) {
            var breakfastScript = (0,external_kolmafia_.getProperty)("breakfastScript");
            var props = new Properties_PropertyManager();
            props.setProperty("grabCloversSoftcore", "true");
            props.setProperty("grabCloversHardcore", "true");

            (0,GreyClan/* doFortuneTeller */._D)();

            try {
              if (breakfastScript == "") {
                breakfastScript = "breakfast";
              }

              (0,external_kolmafia_.cliExecute)(breakfastScript);

              var clover = external_kolmafia_.Item.get("11-leaf Clover");

              if ((0,external_kolmafia_.availableAmount)(clover) == 0) {
                (0,external_kolmafia_.print)(
                "Don't see any clovers available, maybe mafia hiccuped? Trying breakfast again..",
                "gray");

                (0,external_kolmafia_.cliExecute)(breakfastScript);
              }
            } finally {
              props.resetAll();
            }

            deleteJunkKmails();
          }

          if (
          (0,external_kolmafia_.availableAmount)(_this2.flimsyScraps) > 0 &&
          (0,external_kolmafia_.availableAmount)(_this2.birchBattery) == 0)
          {
            (0,external_kolmafia_.cliExecute)("acquire " + _this2.birchBattery.name);
          }

          if ((0,external_kolmafia_.getProperty)("breakfastCompleted") == "false") {
            throw "Failed to complete breakfast! Did you set something that doesn't call breakfast, to `breakfastScript`?";
          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Misc / InitialStart";
    } }]);return QuestInitialStart;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/custom/QuestJuneCleaver.ts
function QuestJuneCleaver_typeof(obj) {"@babel/helpers - typeof";return QuestJuneCleaver_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestJuneCleaver_typeof(obj);}function QuestJuneCleaver_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestJuneCleaver_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestJuneCleaver_toPropertyKey(descriptor.key), descriptor);}}function QuestJuneCleaver_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestJuneCleaver_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestJuneCleaver_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestJuneCleaver_defineProperty(obj, key, value) {key = QuestJuneCleaver_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestJuneCleaver_toPropertyKey(arg) {var key = QuestJuneCleaver_toPrimitive(arg, "string");return QuestJuneCleaver_typeof(key) === "symbol" ? key : String(key);}function QuestJuneCleaver_toPrimitive(input, hint) {if (QuestJuneCleaver_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestJuneCleaver_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestJuneCleaver = /*#__PURE__*/function () {function QuestJuneCleaver() {QuestJuneCleaver_classCallCheck(this, QuestJuneCleaver);QuestJuneCleaver_defineProperty(this, "warren",
    external_kolmafia_.Location.get("The Dire Warren"));QuestJuneCleaver_defineProperty(this, "cleaver",
    external_kolmafia_.Item.get("June Cleaver"));QuestJuneCleaver_defineProperty(this, "teleportis",
    external_kolmafia_.Effect.get("Teleportitis"));QuestJuneCleaver_defineProperty(this, "icyPeak",
    external_kolmafia_.Location.get("The Icy Peak"));QuestJuneCleaver_defineProperty(this, "palindom",
    external_kolmafia_.Location.get("Inside the Palindome"));QuestJuneCleaver_defineProperty(this, "ultraRares",
    [
    "Battlefield (No Uniform)",
    "Inside the Palindome",
    "The Dungeons of Doom",
    "Menagerie Level 1",
    "Cobb's Knob Treasury",
    "Pandamonium Slums",
    "A Mob of Zeppelin Protesters",
    "The Icy Peak",
    "The Sleazy Back Alley",
    "The Haunted Billiards Room",
    "The VERY Unquiet Garves",
    "The Spooky Forest"].
    map(function (s) {return external_kolmafia_.Location.get(s);}));QuestJuneCleaver_defineProperty(this, "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestJuneCleaver_defineProperty(this, "talisman",
    external_kolmafia_.Item.get("Talisman o' Namsilat"));}QuestJuneCleaver_createClass(QuestJuneCleaver, [{ key: "getId", value:

    function getId() {
      return "Misc / JuneCleaver";
    } }, { key: "level", value:

    function level() {
      return 3;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.availableAmount)(this.cleaver) == 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.haveEffect)(this.teleportis) > 0) {
        return QuestStatus.NOT_READY;
      }

      var fightsLeft = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_juneCleaverFightsLeft"));

      if (fightsLeft > 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      // We fish for zones with URs in them, on the chance it lets us. Unlikely hey.
      var loc = this.ultraRares.find(
      function (l) {return (
          canGreyAdventure(l) && (
          l != _this.icyPeak || (0,external_kolmafia_.numericModifier)("Cold Resistance") >= 5));});


      if (loc == null) {
        loc = this.warren;
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.maximize)("+equip " + _this.cleaver.name + " -tie", false);

          if ((0,external_kolmafia_.equippedAmount)(_this.cleaver) == 0) {
            throw "Something went wrong. Expected to be holding the june cleaver";
          }

          if (loc == _this.palindom && (0,external_kolmafia_.equippedAmount)(_this.talisman) == 0) {
            (0,external_kolmafia_.equip)(external_kolmafia_.Slot.get("acc3"), _this.talisman);
          }

          // We're using the grey goose if it has enough fam weight to dupe, incase we hit an UR
          if (
          (0,external_kolmafia_.myFamiliar)() != _this.goose &&
          (0,external_kolmafia_.familiarWeight)(_this.goose) >= 6 &&
          _this.ultraRares.includes(loc))
          {
            (0,external_kolmafia_.useFamiliar)(_this.goose);
          }

          var turn = (0,external_kolmafia_.turnsPlayed)();

          greyAdv(loc);

          if (turn != (0,external_kolmafia_.turnsPlayed)()) {
            throw "Something went wrong, expected to hit a june cleaver NC but instead spent a turn.";
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestJuneCleaver;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestMoonSign.ts
function QuestMoonSign_typeof(obj) {"@babel/helpers - typeof";return QuestMoonSign_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestMoonSign_typeof(obj);}function QuestMoonSign_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestMoonSign_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestMoonSign_toPropertyKey(descriptor.key), descriptor);}}function QuestMoonSign_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestMoonSign_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestMoonSign_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestMoonSign_defineProperty(obj, key, value) {key = QuestMoonSign_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestMoonSign_toPropertyKey(arg) {var key = QuestMoonSign_toPrimitive(arg, "string");return QuestMoonSign_typeof(key) === "symbol" ? key : String(key);}function QuestMoonSign_toPrimitive(input, hint) {if (QuestMoonSign_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestMoonSign_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestMoonSign = /*#__PURE__*/function () {function QuestMoonSign() {QuestMoonSign_classCallCheck(this, QuestMoonSign);QuestMoonSign_defineProperty(this, "spoon",
    external_kolmafia_.Item.get("hewn moon-rune spoon"));QuestMoonSign_defineProperty(this, "asdon",
    external_kolmafia_.Item.get("Asdon Martin keyfob"));QuestMoonSign_defineProperty(this, "knollAbsorb",
    external_kolmafia_.Monster.get("revolving bugbear"));QuestMoonSign_defineProperty(this, "gnomeAbsorb",
    external_kolmafia_.Monster.get("vicious gnauga"));QuestMoonSign_defineProperty(this, "canadiaAbsorb",
    external_kolmafia_.Monster.get("Cloud of disembodied whiskers"));QuestMoonSign_defineProperty(this, "gnomeSkills",
    [
    "Powers of Observatiogn",
    "Torso Awareness",
    "Gnefarious Pickpocketing "].
    map(function (s) {return external_kolmafia_.Skill.get(s);}));}QuestMoonSign_createClass(QuestMoonSign, [{ key: "getId", value:

    function getId() {
      return "Misc / Moonsign";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.getProperty)("moonTuned") != "false" ||
      (0,external_kolmafia_.availableAmount)(this.spoon) == 0)
      {
        return QuestStatus.COMPLETED;
      }

      if (
      moonSigns.find(
      function (s) {var _GreySettings$greyTun;return s.toLowerCase() == ((_GreySettings$greyTun = GreySettings_GreySettings.greyTuneMoonSpoon) === null || _GreySettings$greyTun === void 0 ? void 0 : _GreySettings$greyTun.toLowerCase());}) ==
      null)
      {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.knollAvailable)() && this.isKnollDone()) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.gnomadsAvailable)() && this.isGnomesDone()) {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.canadiaAvailable)() && this.isCanadaDone()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          /*let confirm = userConfirm("Ready to change moon signs?");
           if (!confirm) {
            throw "User wasn't ready";
          }*/


          (0,external_kolmafia_.cliExecute)("spoon " + GreySettings_GreySettings.greyTuneMoonSpoon);

          if ((0,external_kolmafia_.getProperty)("moonTuned") != "true") {
            throw "Something went wrong when trying to moon spoon tune!";
          }

          (0,external_kolmafia_.cliExecute)("refresh all");
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "isKnollDone", value:

    function isKnollDone() {
      // We can get costume from here
      if ((0,external_kolmafia_.getWorkshed)() == this.asdon && !(0,external_kolmafia_.haveOutfit)("Bugbear Costume")) {
        return false;
      }

      if ((0,external_kolmafia_.getProperty)("questM01Untinker") != "finished") {
        return false;
      }

      // We can make car from here
      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) != (0,external_kolmafia_.myAscensions)()) {
        return false;
      }

      if (!GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.knollAbsorb)) {
        return false;
      }

      return true;
    } }, { key: "isGnomesDone", value:

    function isGnomesDone() {
      if (this.gnomeSkills.find(function (s) {return !(0,external_kolmafia_.haveSkill)(s);}) != null) {
        return false;
      }

      if (!GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.gnomeAbsorb)) {
        return false;
      }

      return true;
    } }, { key: "isCanadaDone", value:

    function isCanadaDone() {
      if (!GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.canadiaAbsorb)) {
        return false;
      }

      return true;
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestMoonSign;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestNpcStuff.ts
function QuestNpcStuff_typeof(obj) {"@babel/helpers - typeof";return QuestNpcStuff_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestNpcStuff_typeof(obj);}function QuestNpcStuff_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestNpcStuff_setPrototypeOf(subClass, superClass);}function QuestNpcStuff_setPrototypeOf(o, p) {QuestNpcStuff_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestNpcStuff_setPrototypeOf(o, p);}function QuestNpcStuff_createSuper(Derived) {var hasNativeReflectConstruct = QuestNpcStuff_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestNpcStuff_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestNpcStuff_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestNpcStuff_possibleConstructorReturn(this, result);};}function QuestNpcStuff_possibleConstructorReturn(self, call) {if (call && (QuestNpcStuff_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestNpcStuff_assertThisInitialized(self);}function QuestNpcStuff_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestNpcStuff_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestNpcStuff_getPrototypeOf(o) {QuestNpcStuff_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestNpcStuff_getPrototypeOf(o);}function QuestNpcStuff_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestNpcStuff_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestNpcStuff_toPropertyKey(descriptor.key), descriptor);}}function QuestNpcStuff_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestNpcStuff_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestNpcStuff_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestNpcStuff_defineProperty(obj, key, value) {key = QuestNpcStuff_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestNpcStuff_toPropertyKey(arg) {var key = QuestNpcStuff_toPrimitive(arg, "string");return QuestNpcStuff_typeof(key) === "symbol" ? key : String(key);}function QuestNpcStuff_toPrimitive(input, hint) {if (QuestNpcStuff_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestNpcStuff_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestNPCStuff = /*#__PURE__*/function () {function QuestNPCStuff() {QuestNpcStuff_classCallCheck(this, QuestNPCStuff);QuestNpcStuff_defineProperty(this, "children",
    [
    new QuestMeatSmith(),
    new QuestArtist(),
    new QuestGnomeTrainer(),
    new QuestMadBaker(),
    new QuestUntinker(),
    new QuestDruggie(),
    new QuestKnollMayor(),
    new QuestDoctor()]);}QuestNpcStuff_createClass(QuestNPCStuff, [{ key: "getId", value:


    function getId() {
      return "NPC / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }]);return QuestNPCStuff;}();var


QuestDoctor = /*#__PURE__*/function () {function QuestDoctor() {QuestNpcStuff_classCallCheck(this, QuestDoctor);}QuestNpcStuff_createClass(QuestDoctor, [{ key: "getId", value:
    function getId() {
      return "NPC / Doctor";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM24Doc") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastCouncilVisit")) < 1) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("shop.php?whichshop=doc&action=talk");
          (0,external_kolmafia_.runChoice)(1);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestDoctor;}();var


QuestKnollMayor = /*#__PURE__*/function () {function QuestKnollMayor() {QuestNpcStuff_classCallCheck(this, QuestKnollMayor);QuestNpcStuff_defineProperty(this, "spoon",
    external_kolmafia_.Item.get("hewn moon-rune spoon"));}QuestNpcStuff_createClass(QuestKnollMayor, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Knoll Mayor";
    } }, { key: "level", value:

    function level() {
      return 2;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM03Bugbear") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_.knollAvailable)()) {
        if (
        (0,external_kolmafia_.availableAmount)(this.spoon) > 0 &&
        (0,external_kolmafia_.getProperty)("moonTuned") == "false" &&
        getMoonZone(GreySettings_GreySettings.greyTuneMoonSpoon) == "Knoll")
        {
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("questL02Larva") == "unstarted") {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        outfit: GreyOutfit.IGNORE_OUTFIT,
        location: null,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=knoll_friendly&action=dk_mayor");
        }
      };
    } }]);return QuestKnollMayor;}();var


QuestDruggie = /*#__PURE__*/function () {function QuestDruggie() {QuestNpcStuff_classCallCheck(this, QuestDruggie);}QuestNpcStuff_createClass(QuestDruggie, [{ key: "getId", value:
    function getId() {
      return "NPC / Druggie";
    } }, { key: "level", value:

    function level() {
      return 5;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastGoofballBuy")) == (0,external_kolmafia_.myAscensions)()) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questL03Rat") < 0) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=woods");
          (0,external_kolmafia_.visitUrl)("tavern.php?place=susguy&action=buygoofballs", true);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }]);return QuestDruggie;}();var


QuestGnomeTrainer = /*#__PURE__*/function (_TaskInfo) {QuestNpcStuff_inherits(QuestGnomeTrainer, _TaskInfo);var _super = QuestNpcStuff_createSuper(QuestGnomeTrainer);function QuestGnomeTrainer() {var _this;QuestNpcStuff_classCallCheck(this, QuestGnomeTrainer);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "skills",
    [
    "Torso Awareness",
    "Powers of Observatiogn",
    "Gnefarious Pickpocketing"].
    map(function (s) {return external_kolmafia_.Skill.get(s);}));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "letter",
    external_kolmafia_.Item.get("Letter for Melvign the Gnome"));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "shirt",
    external_kolmafia_.Item.get('"Remember the Trees" Shirt'));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "torso",
    external_kolmafia_.Skill.get("Torso Awareness"));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "spoon",
    external_kolmafia_.Item.get("hewn moon-rune spoon"));QuestNpcStuff_defineProperty(QuestNpcStuff_assertThisInitialized(_this), "paths", void 0);return _this;}QuestNpcStuff_createClass(QuestGnomeTrainer, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [];

      if (!assumeUnstarted && (0,external_kolmafia_.availableAmount)(this.shirt) > 0) {
        this.paths.push(new PossiblePath(0));
        return;
      }

      // If we're not in gnomes
      if (
      getMoonZone() != "Gnomad" &&
      !GreySettings_GreySettings.willBeAccessible("Gnomad", assumeUnstarted))
      {
        // If we won't be in gnomes
        this.paths.push(new PossiblePath(0));
        return;
      }

      this.paths.push(
      new PossiblePath(0).addPull(this.shirt),
      new PossiblePath(10));

    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "NPC / GnomeSkills";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_.availableAmount)(this.letter) > 0 && !(0,external_kolmafia_.haveSkill)(this.torso)) {
        return QuestStatus.READY;
      }

      if (
      path == null ||
      (0,external_kolmafia_.haveSkill)(this.torso) && path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL))
      {
        return QuestStatus.READY;
      }

      if (
      getQuestStatus("questL13Final") >= 0 ||
      this.getSkillLacking() == null)
      {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_.gnomadsAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      var meat = 7500 + ((0,external_kolmafia_.haveSkill)(this.torso) ? 5000 : 0);

      if ((0,external_kolmafia_.myMeat)() < meat) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "getSkillLacking", value:

    function getSkillLacking() {
      return this.skills.find(function (s) {return !(0,external_kolmafia_.haveSkill)(s);});
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if ((0,external_kolmafia_.availableAmount)(this.letter) > 0 && !(0,external_kolmafia_.haveSkill)(this.torso)) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.use)(_this2.letter);
          }
        };
      }

      if ((0,external_kolmafia_.haveSkill)(this.torso) && path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            GreyPulls.tryPull(_this2.shirt);
          }
        };
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          var skill = _this2.getSkillLacking();

          (0,external_kolmafia_.visitUrl)("gnomes.php?action=trainskill&whichskill=" + (0,external_kolmafia_.toInt)(skill));

          if ((0,external_kolmafia_.haveSkill)(_this2.torso) && path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
            GreyPulls.tryPull(_this2.shirt);
          }

          if (skill == _this2.torso) {
            AdventureFinder.recalculatePath();
          }
        }
      };
    } }]);return QuestGnomeTrainer;}(TaskInfo);var


QuestArtist = /*#__PURE__*/function () {function QuestArtist() {QuestNpcStuff_classCallCheck(this, QuestArtist);QuestNpcStuff_defineProperty(this, "paintbrush",
    external_kolmafia_.Item.get("Pretentious Paintbrush"));QuestNpcStuff_defineProperty(this, "palette",
    external_kolmafia_.Item.get("Pretentious Palette"));QuestNpcStuff_defineProperty(this, "pail",
    external_kolmafia_.Item.get("Pail of Pretentious Paint"));}QuestNpcStuff_createClass(QuestArtist, [{ key: "level", value:

    function level() {
      return 1;
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Painter";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM02Artist") == "finished") {
        return QuestStatus.COMPLETED;
      }

      // Don't start it since it's not a free turn
      // User has to start it.
      if ((0,external_kolmafia_.getProperty)("questM02Artist") == "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if (this.hasAllItems()) {
        return QuestStatus.READY;
      }

      return QuestStatus.NOT_READY;
    } }, { key: "startQuest", value:

    function startQuest() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_noquest");

          (0,external_kolmafia_.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_noquest&getquest=1");

          (0,external_kolmafia_.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_quest");

        }
      };
    } }, { key: "turnInQuest", value:

    function turnInQuest() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)(
          "place.php?whichplace=town_wrong&action=townwrong_artist_quest");

        }
      };
    } }, { key: "run", value:

    function run() {
      if (this.hasAllItems()) {
        return this.turnInQuest();
      }

      return this.startQuest();
    } }, { key: "hasAllItems", value:

    function hasAllItems() {
      return (
        (0,external_kolmafia_.availableAmount)(this.paintbrush) > 0 &&
        (0,external_kolmafia_.availableAmount)(this.pail) > 0 &&
        (0,external_kolmafia_.availableAmount)(this.palette) > 0);

    } }]);return QuestArtist;}();var


QuestMadBaker = /*#__PURE__*/function () {function QuestMadBaker() {QuestNpcStuff_classCallCheck(this, QuestMadBaker);}QuestNpcStuff_createClass(QuestMadBaker, [{ key: "level", value:
    function level() {
      return 1;
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Baker";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM25Armorer") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "turnInPie", value:

    function turnInPie() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("shop.php?whichshop=armory");
          (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=" + (0,external_kolmafia_.lastChoice)() + "&option=2&pwd=");
        }
      };
    } }, { key: "startQuest", value:

    function startQuest() {
      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("shop.php?whichshop=armory");
          (0,external_kolmafia_.visitUrl)("shop.php?whichshop=armory&action=talk");
          (0,external_kolmafia_.visitUrl)("choice.php?pwd=&whichchoice=1065&option=1");

          if ((0,external_kolmafia_.getProperty)("choiceAdventure1061") == "0") {
            (0,external_kolmafia_.setProperty)("choiceAdventure1061", "1");
          }
        }
      };
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_.getProperty)("questM25Armorer") == "unstarted") {
        return this.startQuest();
      }

      return this.turnInPie();
    } }]);return QuestMadBaker;}();var


QuestUntinker = /*#__PURE__*/function () {function QuestUntinker() {QuestNpcStuff_classCallCheck(this, QuestUntinker);QuestNpcStuff_defineProperty(this, "item",
    external_kolmafia_.Item.get("Rusty screwdriver"));}QuestNpcStuff_createClass(QuestUntinker, [{ key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getId", value:

    function getId() {
      return "NPC / Untinkerer";
    } }, { key: "level", value:

    function level() {
      return 4;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM01Untinker") == "finished") {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastCouncilVisit")) < 4) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.getProperty)("questM01Untinker") == "unstarted") {
        return QuestStatus.READY;
      }

      if ((0,external_kolmafia_.availableAmount)(this.item) == 0 && !(0,external_kolmafia_.knollAvailable)()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_.getProperty)("questM01Untinker") == "unstarted") {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.visitUrl)(
            "place.php?whichplace=forestvillage&preaction=screwquest&action=fv_untinker_quest");

            (0,external_kolmafia_.setProperty)("questM01Untinker", "started");
          }
        };
      }

      if ((0,external_kolmafia_.knollAvailable)() && (0,external_kolmafia_.availableAmount)(this.item) == 0) {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.visitUrl)("place.php?whichplace=knoll_friendly&action=dk_innabox");
          }
        };
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("place.php?whichplace=forestvillage&action=fv_untinker");
        }
      };
    } }]);return QuestUntinker;}();var


QuestMeatSmith = /*#__PURE__*/function () {function QuestMeatSmith() {QuestNpcStuff_classCallCheck(this, QuestMeatSmith);}QuestNpcStuff_createClass(QuestMeatSmith, [{ key: "getId", value:
    function getId() {
      return "NPC / Meatsmith";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "free", value:

    function free() {
      return true;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_.getProperty)("questM23Meatsmith") == "unstarted") {
        return {
          location: null,
          outfit: GreyOutfit.IGNORE_OUTFIT,
          run: function run() {
            (0,external_kolmafia_.visitUrl)("shop.php?whichshop=meatsmith");
            (0,external_kolmafia_.visitUrl)("shop.php?whichshop=meatsmith&action=talk");
            (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=1059&option=1&pwd=");
          }
        };
      }

      return {
        location: null,
        outfit: GreyOutfit.IGNORE_OUTFIT,
        run: function run() {
          (0,external_kolmafia_.visitUrl)("shop.php?whichshop=meatsmith");
          (0,external_kolmafia_.visitUrl)("choice.php?whichchoice=" + (0,external_kolmafia_.lastChoice)() + "&option=2&pwd=");
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM23Meatsmith") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }]);return QuestMeatSmith;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestPowerLeveling.ts
function QuestPowerLeveling_typeof(obj) {"@babel/helpers - typeof";return QuestPowerLeveling_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestPowerLeveling_typeof(obj);}function QuestPowerLeveling_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestPowerLeveling_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestPowerLeveling_toPropertyKey(descriptor.key), descriptor);}}function QuestPowerLeveling_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestPowerLeveling_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestPowerLeveling_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestPowerLeveling_defineProperty(obj, key, value) {key = QuestPowerLeveling_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestPowerLeveling_toPropertyKey(arg) {var key = QuestPowerLeveling_toPrimitive(arg, "string");return QuestPowerLeveling_typeof(key) === "symbol" ? key : String(key);}function QuestPowerLeveling_toPrimitive(input, hint) {if (QuestPowerLeveling_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestPowerLeveling_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestPowerLeveling = /*#__PURE__*/function () {







  function QuestPowerLeveling(desiredLevel) {QuestPowerLeveling_classCallCheck(this, QuestPowerLeveling);QuestPowerLeveling_defineProperty(this, "property", "greyYouLastPowerLeveled");QuestPowerLeveling_defineProperty(this, "familiar", external_kolmafia_.Familiar.get("Grey Goose"));QuestPowerLeveling_defineProperty(this, "equip", external_kolmafia_.Item.get("Grey Down Vest"));QuestPowerLeveling_defineProperty(this, "skill", external_kolmafia_.Skill.get("Infinite Loop"));QuestPowerLeveling_defineProperty(this, "desiredLevel", void 0);QuestPowerLeveling_defineProperty(this, "weightRequired", void 0);
    this.desiredLevel = desiredLevel;

    this.weightRequired = this.getWeightNeededToReachLevel(desiredLevel);

    if (this.weightRequired > 20) {
      throw (
        "You want to reach level " +
        desiredLevel +
        " but to do that, the goose would have to weigh " +
        this.weightRequired +
        "...");

    }

    var expNeeded = this.weightRequired ^ 2;

    if ((0,external_kolmafia_.familiarWeight)(this.familiar) <= 1) {
      expNeeded -= 81; // Short order cook
    } else {
      expNeeded -= this.familiar.experience;
    }

    var turns = expNeeded / 5; // Expect to gain 5 exp per arena fight

    if (turns > 20) {
      throw (
        "Sorry, I can't let you do this. That'd burn more than 20 turns to a total of est " +
        turns);

    }
  }QuestPowerLeveling_createClass(QuestPowerLeveling, [{ key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_.myLevel)() < 5 && (0,external_kolmafia_.myMeat)() >= 100;
    } }, { key: "getWeightNeededToReachLevel", value:

    function getWeightNeededToReachLevel(level) {
      var statsNeeded = this.getStatsRequired(level);

      return 5 + Math.ceil((0,external_kolmafia_.squareRoot)(statsNeeded));
    } }, { key: "getStatsRequired", value:

    function getStatsRequired(level) {
      return (level - 1 ^ 2) + 4 ^ 2;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.myLevel)() >= this.desiredLevel ||
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)(this.property)) == (0,external_kolmafia_.myAscensions)())
      {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.skill)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        outfit: new GreyOutfit("familiar experience +familiar weight -tie"),
        location: null,
        run: function run() {
          (0,external_kolmafia_.useFamiliar)(_this.familiar);
          (0,external_kolmafia_.maximize)("familiar experience", false);

          var weightNeeded = _this.getWeightNeededToReachLevel(
          _this.desiredLevel);


          (0,external_kolmafia_.visitUrl)("arena.php");

          while (
          (0,external_kolmafia_.familiarWeight)(_this.familiar) < weightNeeded &&
          (0,external_kolmafia_.myAdventures)() > 20 &&
          (0,external_kolmafia_.myMeat)() >= 100)
          {
            if (
            (0,external_kolmafia_.equippedAmount)(_this.equip) == 0 &&
            (0,external_kolmafia_.availableAmount)(_this.equip) > 0)
            {
              (0,external_kolmafia_.equip)(_this.equip);
            }

            (0,external_kolmafia_.cliExecute)("train turns 1");
          }

          (0,external_kolmafia_.setProperty)(_this.property, (0,external_kolmafia_.myAscensions)() + "");

          if ((0,external_kolmafia_.familiarWeight)(_this.familiar) < weightNeeded) {
            throw (
              "Oh god! You are a disappointment Mr Goose! You only weigh " +
              (0,external_kolmafia_.familiarWeight)(_this.familiar) +
              " of the " +
              weightNeeded +
              " we wanted!");

            return;
          }

          if ((0,external_kolmafia_.myLevel)() < 4) {
            (0,external_kolmafia_.print)("Now we just need to travel somewhere to burn this exp");

            (0,external_kolmafia_.maximize)(new GreyOutfit().createString(), false);
            greyAdv(
            external_kolmafia_.Location.get("The Dire Warren"),
            null,
            new AdventureSettings().setFinishingBlowMacro(
            MacroBuilder/* Macro.trySkill */.LE.trySkill(external_kolmafia_.Skill.get("Convert Matter to Pomade")).step(
            greyKillingBlow(new GreyOutfit()))));



          }
          // Eh, just burn it in knob as delay.
          // TODO
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "Misc / PowerLeveling";
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestPowerLeveling;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestLocketInfiniteLoop.ts
function QuestLocketInfiniteLoop_typeof(obj) {"@babel/helpers - typeof";return QuestLocketInfiniteLoop_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestLocketInfiniteLoop_typeof(obj);}function QuestLocketInfiniteLoop_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestLocketInfiniteLoop_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestLocketInfiniteLoop_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestLocketInfiniteLoop_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestLocketInfiniteLoop_arrayLikeToArray(o, minLen);}function QuestLocketInfiniteLoop_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestLocketInfiniteLoop_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestLocketInfiniteLoop_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestLocketInfiniteLoop_toPropertyKey(descriptor.key), descriptor);}}function QuestLocketInfiniteLoop_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestLocketInfiniteLoop_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestLocketInfiniteLoop_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestLocketInfiniteLoop_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestLocketInfiniteLoop_setPrototypeOf(subClass, superClass);}function QuestLocketInfiniteLoop_setPrototypeOf(o, p) {QuestLocketInfiniteLoop_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestLocketInfiniteLoop_setPrototypeOf(o, p);}function QuestLocketInfiniteLoop_createSuper(Derived) {var hasNativeReflectConstruct = QuestLocketInfiniteLoop_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestLocketInfiniteLoop_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestLocketInfiniteLoop_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestLocketInfiniteLoop_possibleConstructorReturn(this, result);};}function QuestLocketInfiniteLoop_possibleConstructorReturn(self, call) {if (call && (QuestLocketInfiniteLoop_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestLocketInfiniteLoop_assertThisInitialized(self);}function QuestLocketInfiniteLoop_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestLocketInfiniteLoop_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestLocketInfiniteLoop_getPrototypeOf(o) {QuestLocketInfiniteLoop_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestLocketInfiniteLoop_getPrototypeOf(o);}function QuestLocketInfiniteLoop_defineProperty(obj, key, value) {key = QuestLocketInfiniteLoop_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestLocketInfiniteLoop_toPropertyKey(arg) {var key = QuestLocketInfiniteLoop_toPrimitive(arg, "string");return QuestLocketInfiniteLoop_typeof(key) === "symbol" ? key : String(key);}function QuestLocketInfiniteLoop_toPrimitive(input, hint) {if (QuestLocketInfiniteLoop_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestLocketInfiniteLoop_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}









var QuestLocketInfiniteLoop = /*#__PURE__*/function (_TaskInfo) {QuestLocketInfiniteLoop_inherits(QuestLocketInfiniteLoop, _TaskInfo);var _super = QuestLocketInfiniteLoop_createSuper(QuestLocketInfiniteLoop);function QuestLocketInfiniteLoop() {var _this;QuestLocketInfiniteLoop_classCallCheck(this, QuestLocketInfiniteLoop);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "monster",
    external_kolmafia_.Monster.get("Pygmy witch lawyer"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "skill",
    external_kolmafia_.Skill.get("Infinite Loop"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "instantKill",
    external_kolmafia_.Item.get("Flame orb"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "wish",
    external_kolmafia_.Item.get("Pocket Wish"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "pantsgiving",
    external_kolmafia_.Item.get("Pantsgiving"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "doctorsBag",
    external_kolmafia_.Item.get("Lil' Doctor&trade; bag"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "cape",
    external_kolmafia_.Item.get("Unwrapped knock-off retro superhero cape"));QuestLocketInfiniteLoop_defineProperty(QuestLocketInfiniteLoop_assertThisInitialized(_this), "paths", void 0);return _this;}QuestLocketInfiniteLoop_createClass(QuestLocketInfiniteLoop, [{ key: "level", value:


    function level() {
      return 1;
    } }, { key: "createPaths", value:

    function createPaths(assumeUnstarted) {var _this2 = this;
      this.paths = [];

      var create = function create() {
        var res = [new PossiblePath(1).addFax(_this2.monster)];

        if ((0,ResourceTypes/* getResourcesLeft */.r)("Wish") == 0) {
          res.push(new PossiblePath(1).addConsumablePull(_this2.wish));
        }

        return res;
      };

      if (
      (0,external_kolmafia_.availableAmount)(this.pantsgiving) + (0,external_kolmafia_.availableAmount)(this.doctorsBag) ==
      0)
      {var _iterator = QuestLocketInfiniteLoop_createForOfIteratorHelper(
          create()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var path = _step.value;
            path.add(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).addIgnored("Cosplay Saber");

            this.paths.push(path);
          }} catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = QuestLocketInfiniteLoop_createForOfIteratorHelper(

          create()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _path = _step2.value;
            _path.addConsumablePull(this.instantKill);

            this.paths.push(_path);
          }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
      } else {var _iterator3 = QuestLocketInfiniteLoop_createForOfIteratorHelper(
          create()),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _path2 = _step3.value;
            this.paths.push(_path2);
          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
      }
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "status", value:

    function status(path) {
      if ((0,external_kolmafia_.getProperty)("questM05Toot") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (path == null) {
        return QuestStatus.NOT_READY;
      }

      if (
      path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) &&
      !path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).ready())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return true;
    } }, { key: "run", value:

    function run(path) {var _this3 = this;
      var outfit = new GreyOutfit();
      outfit.addWeight("init", 10);
      outfit.addWeight("ML", -1);
      outfit.hpRegenWeight = 1;
      outfit.mpRegenWeight = 1;

      if ((0,external_kolmafia_.availableAmount)(this.cape) > 0) {
        outfit.addWeight(this.cape);
      }

      if ((0,external_kolmafia_.availableAmount)(this.doctorsBag) > 0) {
        outfit.addWeight(this.doctorsBag);
      } else if ((0,external_kolmafia_.availableAmount)(this.pantsgiving) > 0) {
        outfit.addWeight(this.pantsgiving);
      } else if (path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY)) {
        path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY).prepare(outfit);
      }

      return {
        location: null,
        outfit: outfit,
        run: function run() {
          if ((0,external_kolmafia_.equippedAmount)(_this3.cape) > 0) {
            (0,external_kolmafia_.cliExecute)("retrocape heck hold"); // Make sure we try a stunner
          } else if ((0,external_kolmafia_.numericModifier)("Initiative") <= 40) {
            throw "Initiative is 40 or less, aborting to be safe as we can't be sure you'd get the jump.";
          }

          var props = new Properties_PropertyManager();
          var macro;
          var faxResource = path.getResource(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);

          if (path.canUse(ResourceTypes/* ResourceCategory.PULL */.s6.PULL)) {
            GreyPulls.tryPull(_this3.wish, 51000);

            if ((0,external_kolmafia_.itemAmount)(_this3.wish) == 0) {
              throw "Expected to have pulled a wish!";
            }

            GreyPulls.tryPull(_this3.instantKill, 10000);

            if ((0,external_kolmafia_.itemAmount)(_this3.instantKill) == 0) {
              throw "Expected to have pulled an instant kill source!";
            }

            path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
            path.addUsed(ResourceTypes/* ResourceCategory.PULL */.s6.PULL);
            faxResource = (0,ResourceTypes/* getResources */.jh)().find(function (r) {return r.resource == "Wish";});
          }

          if ((0,external_kolmafia_.equippedAmount)(_this3.doctorsBag) > 0) {
            macro = MacroBuilder/* Macro.skill */.LE.skill(external_kolmafia_.Skill.get("Chest X-Ray"));
          } else if ((0,external_kolmafia_.equippedAmount)(_this3.pantsgiving) > 0) {
            macro = MacroBuilder/* Macro.skill */.LE.skill(external_kolmafia_.Skill.get("Talk about politics"));
          } else {
            var yrResource = path.getResource(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY);

            if (faxResource != null) {
              yrResource.prepare(null, props);
              macro = yrResource.macro();
            } else {
              macro = MacroBuilder/* Macro.item */.LE.item(_this3.instantKill);
            }
          }

          faxResource.fax(_this3.monster);

          macro.submit();

          if ((0,external_kolmafia_.handlingChoice)() || (0,external_kolmafia_.currentRound)() != 0) {
            throw "We're supposed to be done with this infinite loop fight!";
          }

          if (!(0,external_kolmafia_.haveSkill)(_this3.skill)) {
            throw "Expected to have Infinite Loop skill!";
          }

          if (
          path.canUse(ResourceTypes/* ResourceCategory.YELLOW_RAY */.s6.YELLOW_RAY) && (
          (0,external_kolmafia_.equippedAmount)(_this3.doctorsBag) > 0 ||
          (0,external_kolmafia_.equippedAmount)(_this3.pantsgiving) > 0))
          {
            (0,external_kolmafia_.print)(
            "The following error about a YR not being used can be ignored, this is because the script found an alternative.",
            "blue");

          }
        }
      };
    } }, { key: "getId", value:

    function getId() {
      return "CombatLocket / InfiniteLoop";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestLocketInfiniteLoop;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/skills/QuestMPRegen.ts
function QuestMPRegen_typeof(obj) {"@babel/helpers - typeof";return QuestMPRegen_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestMPRegen_typeof(obj);}function QuestMPRegen_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestMPRegen_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestMPRegen_toPropertyKey(descriptor.key), descriptor);}}function QuestMPRegen_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestMPRegen_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestMPRegen_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestMPRegen_defineProperty(obj, key, value) {key = QuestMPRegen_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestMPRegen_toPropertyKey(arg) {var key = QuestMPRegen_toPrimitive(arg, "string");return QuestMPRegen_typeof(key) === "symbol" ? key : String(key);}function QuestMPRegen_toPrimitive(input, hint) {if (QuestMPRegen_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestMPRegen_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}








var QuestMPRegen = /*#__PURE__*/function () {function QuestMPRegen() {QuestMPRegen_classCallCheck(this, QuestMPRegen);QuestMPRegen_defineProperty(this, "realDung",
    external_kolmafia_.Location.get("The Dungeons of Doom"));QuestMPRegen_defineProperty(this, "none",
    external_kolmafia_.Item.none);QuestMPRegen_defineProperty(this, "deadMimic",
    external_kolmafia_.Item.get("dead mimic"));QuestMPRegen_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("Hivemindedness"));QuestMPRegen_defineProperty(this, "plusSign",
    external_kolmafia_.Item.get("plus sign"));QuestMPRegen_defineProperty(this, "mindflayer",
    external_kolmafia_.Monster.get("Mind flayer"));}QuestMPRegen_createClass(QuestMPRegen, [{ key: "getId", value:

    function getId() {
      return "Skills / MPRegen";
    } }, { key: "level", value:

    function level() {
      return 8;
    } }, { key: "shouldHaveWand", value:

    function shouldHaveWand() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastZapperWand")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "getTimesZapped", value:

    function getTimesZapped() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_zapCount"));
    } }, { key: "isDoomUnlocked", value:

    function isDoomUnlocked() {
      return (
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastPlusSignUnlock")) == (0,external_kolmafia_.myAscensions)() &&
        (0,external_kolmafia_.availableAmount)(this.plusSign) == 0);

    } }, { key: "getWand", value:

    function getWand() {
      var wand = (0,external_kolmafia_.getZapWand)();

      if (wand == this.none) {
        return null;
      }

      return wand;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (!this.isDoomUnlocked()) {
        return QuestStatus.NOT_READY;
      }

      if (this.getWand() == null) {
        if ((0,external_kolmafia_.myMeat)() < 6000 || getQuestStatus("questL11Black") < 3) {
          return QuestStatus.NOT_READY;
        }

        if (!hasNonCombatSkillsReady()) {
          return QuestStatus.FASTER_LATER;
        }
      }

      return QuestStatus.READY;
    } }, { key: "hasWandExploded", value:

    function hasWandExploded() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastZapperWandExplosionDay")) == (0,external_kolmafia_.myDaycount)();
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      var seekingWand =
      GreySettings_GreySettings.greyGrabZapWand &&
      this.getWand() == null &&
      (0,external_kolmafia_.myMeat)() >= 5000;

      if (seekingWand) {
        outfit.setNoCombat();
      } else {
        outfit.plusCombatWeight = 1;
      }

      return {
        outfit: outfit,
        location: this.realDung,
        orbs: [this.mindflayer],
        run: function run() {
          var props = new Properties_PropertyManager();

          props.setChoice(25, seekingWand ? 2 : 3);

          try {
            greyAdv(_this.realDung, outfit);
          } finally {
            props.resetAll();
          }

          if ((0,external_kolmafia_.availableAmount)(_this.deadMimic) > 0) {
            (0,external_kolmafia_.use)(_this.deadMimic);

            if (_this.getWand() == null) {
              (0,external_kolmafia_.print)(
              "Something has gone wrong. We used a dead mimic but didn't get a wand.");

            }
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.realDung];
    } }]);return QuestMPRegen;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillAbstract.ts
function QuestSkillAbstract_typeof(obj) {"@babel/helpers - typeof";return QuestSkillAbstract_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSkillAbstract_typeof(obj);}function QuestSkillAbstract_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillAbstract_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSkillAbstract_toPropertyKey(descriptor.key), descriptor);}}function QuestSkillAbstract_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillAbstract_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillAbstract_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillAbstract_defineProperty(obj, key, value) {key = QuestSkillAbstract_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSkillAbstract_toPropertyKey(arg) {var key = QuestSkillAbstract_toPrimitive(arg, "string");return QuestSkillAbstract_typeof(key) === "symbol" ? key : String(key);}function QuestSkillAbstract_toPrimitive(input, hint) {if (QuestSkillAbstract_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSkillAbstract_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestSkillAbstract = /*#__PURE__*/function () {







  function QuestSkillAbstract(
  level,
  location,
  monster,
  skill,
  questName,
  valid)
  {QuestSkillAbstract_classCallCheck(this, QuestSkillAbstract);QuestSkillAbstract_defineProperty(this, "requiredLevel", void 0);QuestSkillAbstract_defineProperty(this, "location", void 0);QuestSkillAbstract_defineProperty(this, "monster", void 0);QuestSkillAbstract_defineProperty(this, "skill", void 0);QuestSkillAbstract_defineProperty(this, "questName", void 0);QuestSkillAbstract_defineProperty(this, "valid", void 0);
    this.requiredLevel = level;
    this.location = location;
    this.monster = monster;
    this.skill = skill;
    this.questName = questName;
    this.valid = valid;
  }QuestSkillAbstract_createClass(QuestSkillAbstract, [{ key: "getId", value:

    function getId() {
      return this.questName;
    } }, { key: "level", value:

    function level() {
      return this.requiredLevel;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (!canGreyAdventure(this.location)) {
        return QuestStatus.NOT_READY;
      }

      if (this.valid != null && !this.valid()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (this.location.combatPercent < 100) {
        outfit.setPlusCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        orbs: [this.monster],
        run: function run() {
          var settings = new AdventureSettings();
          settings.addNoBanish(_this.monster);

          greyAdv(_this.location, outfit, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillAbstract;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillColdDamage.ts
function QuestSkillColdDamage_typeof(obj) {"@babel/helpers - typeof";return QuestSkillColdDamage_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSkillColdDamage_typeof(obj);}function QuestSkillColdDamage_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillColdDamage_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSkillColdDamage_toPropertyKey(descriptor.key), descriptor);}}function QuestSkillColdDamage_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillColdDamage_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillColdDamage_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillColdDamage_defineProperty(obj, key, value) {key = QuestSkillColdDamage_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSkillColdDamage_toPropertyKey(arg) {var key = QuestSkillColdDamage_toPrimitive(arg, "string");return QuestSkillColdDamage_typeof(key) === "symbol" ? key : String(key);}function QuestSkillColdDamage_toPrimitive(input, hint) {if (QuestSkillColdDamage_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSkillColdDamage_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestSkillColdDamage15 = /*#__PURE__*/function () {function QuestSkillColdDamage15() {QuestSkillColdDamage_classCallCheck(this, QuestSkillColdDamage15);QuestSkillColdDamage_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("Snow-Cooling System"));QuestSkillColdDamage_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("Snow Queen"));QuestSkillColdDamage_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Icy Peak"));}QuestSkillColdDamage_createClass(QuestSkillColdDamage15, [{ key: "getId", value:

    function getId() {
      return "Skills / ColdDamage15";
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "status", value:

    function status() {
      if (
      (0,external_kolmafia_.haveSkill)(this.skill) ||
      getQuestStatus("questL09Topping") > 0 ||
      !GreySettings_GreySettings.isHardcoreMode())
      {
        return QuestStatus.COMPLETED;
      }

      if (
      (0,external_kolmafia_.getProperty)("questL08Trapper") != "finished" ||
      !canGreyAdventure(this.location))
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: this.location,
        orbs: [this.monster],
        run: function run() {
          var settings = new AdventureSettings().addNoBanish(_this.monster);

          greyAdv(_this.location, null, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillColdDamage15;}();


var QuestSkillColdDamage10 = /*#__PURE__*/function () {function QuestSkillColdDamage10() {QuestSkillColdDamage_classCallCheck(this, QuestSkillColdDamage10);QuestSkillColdDamage_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("Cooling Tubules"));QuestSkillColdDamage_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("Ninja Snowman Weaponmaster"));QuestSkillColdDamage_defineProperty(this, "location",
    external_kolmafia_.Location.get("Lair of the Ninja Snowmen"));}QuestSkillColdDamage_createClass(QuestSkillColdDamage10, [{ key: "getId", value:

    function getId() {
      return "Skills / ColdDamage10";
    } }, { key: "level", value:

    function level() {
      return 10;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.haveSkill)(this.skill) || getQuestStatus("questL09Topping") > 0) {
        return QuestStatus.COMPLETED;
      }

      if (
      getQuestStatus("questL08Trapper") < 3 ||
      !canGreyAdventure(this.location) ||
      !GreySettings_GreySettings.isHardcoreMode())
      {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this2 = this;
      return {
        location: this.location,
        run: function run() {
          var settings = new AdventureSettings().addNoBanish(_this2.monster);

          greyAdv(_this2.location, null, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillColdDamage10;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillConiferPolymers.ts
function QuestSkillConiferPolymers_typeof(obj) {"@babel/helpers - typeof";return QuestSkillConiferPolymers_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSkillConiferPolymers_typeof(obj);}function QuestSkillConiferPolymers_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillConiferPolymers_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSkillConiferPolymers_toPropertyKey(descriptor.key), descriptor);}}function QuestSkillConiferPolymers_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillConiferPolymers_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillConiferPolymers_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillConiferPolymers_defineProperty(obj, key, value) {key = QuestSkillConiferPolymers_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSkillConiferPolymers_toPropertyKey(arg) {var key = QuestSkillConiferPolymers_toPrimitive(arg, "string");return QuestSkillConiferPolymers_typeof(key) === "symbol" ? key : String(key);}function QuestSkillConiferPolymers_toPrimitive(input, hint) {if (QuestSkillConiferPolymers_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSkillConiferPolymers_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestSkillConiferPolymers = /*#__PURE__*/function () {function QuestSkillConiferPolymers() {QuestSkillConiferPolymers_classCallCheck(this, QuestSkillConiferPolymers);QuestSkillConiferPolymers_defineProperty(this, "location",
    external_kolmafia_.Location.get("The Bat Hole Entrance"));QuestSkillConiferPolymers_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("Pine Bat"));QuestSkillConiferPolymers_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("Conifer Polymers"));QuestSkillConiferPolymers_defineProperty(this, "hasRes",
    false);QuestSkillConiferPolymers_defineProperty(this, "nextCheck",
    0);}QuestSkillConiferPolymers_createClass(QuestSkillConiferPolymers, [{ key: "getId", value:

    function getId() {
      return "Skills / Conifer Polymers";
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if (this.hasRes || (0,external_kolmafia_.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (getQuestStatus("questM20Necklace") > 0) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.turnsPlayed)() >= this.nextCheck) {
        this.nextCheck = (0,external_kolmafia_.turnsPlayed)() + 5;
        (0,external_kolmafia_.maximize)("stench res -tie", true);
        this.hasRes =
        (0,external_kolmafia_.numericModifier)("Generated:_spec", "Stench Resistance") >= 4;
      }

      if (getQuestStatus("questL09Topping") < 1) {
        return QuestStatus.NOT_READY;
      }

      if (!canGreyAdventure(this.location)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      if (this.location.combatPercent < 100) {
        outfit.setPlusCombat();
      }

      return {
        location: this.location,
        outfit: outfit,
        orbs: [this.monster],
        run: function run() {
          var settings = new AdventureSettings();
          settings.addNoBanish(_this.monster);

          greyAdv(_this.location, outfit, settings);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.location];
    } }]);return QuestSkillConiferPolymers;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillDoubleNanovision.ts
function QuestSkillDoubleNanovision_typeof(obj) {"@babel/helpers - typeof";return QuestSkillDoubleNanovision_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSkillDoubleNanovision_typeof(obj);}function QuestSkillDoubleNanovision_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillDoubleNanovision_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSkillDoubleNanovision_toPropertyKey(descriptor.key), descriptor);}}function QuestSkillDoubleNanovision_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillDoubleNanovision_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillDoubleNanovision_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillDoubleNanovision_defineProperty(obj, key, value) {key = QuestSkillDoubleNanovision_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSkillDoubleNanovision_toPropertyKey(arg) {var key = QuestSkillDoubleNanovision_toPrimitive(arg, "string");return QuestSkillDoubleNanovision_typeof(key) === "symbol" ? key : String(key);}function QuestSkillDoubleNanovision_toPrimitive(input, hint) {if (QuestSkillDoubleNanovision_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSkillDoubleNanovision_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestSkillDoubleNanovision = /*#__PURE__*/function () {function QuestSkillDoubleNanovision() {QuestSkillDoubleNanovision_classCallCheck(this, QuestSkillDoubleNanovision);QuestSkillDoubleNanovision_defineProperty(this, "bowling",
    external_kolmafia_.Location.get("The Hidden Bowling Alley"));QuestSkillDoubleNanovision_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestSkillDoubleNanovision_defineProperty(this, "ball",
    external_kolmafia_.Item.get("Bowling Ball"));QuestSkillDoubleNanovision_defineProperty(this, "drunk",
    external_kolmafia_.Monster.get("Drunk pygmy"));}QuestSkillDoubleNanovision_createClass(QuestSkillDoubleNanovision, [{ key: "getId", value:

    function getId() {
      return "Skills / DoubleNanovision";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.getProperty)("questL11Spare") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.isBanished)(this.drunk)) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      return {
        location: this.bowling,
        orbs: [this.drunk],
        run: function run() {
          if ((0,external_kolmafia_.itemAmount)(_this.ball) > 0) {
            (0,external_kolmafia_.putCloset)(_this.ball, (0,external_kolmafia_.itemAmount)(_this.ball));
          }

          greyAdv(_this.bowling);
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.bowling];
    } }]);return QuestSkillDoubleNanovision;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillSystemSweep.ts
function QuestSkillSystemSweep_typeof(obj) {"@babel/helpers - typeof";return QuestSkillSystemSweep_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSkillSystemSweep_typeof(obj);}function QuestSkillSystemSweep_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillSystemSweep_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSkillSystemSweep_toPropertyKey(descriptor.key), descriptor);}}function QuestSkillSystemSweep_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillSystemSweep_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillSystemSweep_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillSystemSweep_defineProperty(obj, key, value) {key = QuestSkillSystemSweep_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSkillSystemSweep_toPropertyKey(arg) {var key = QuestSkillSystemSweep_toPrimitive(arg, "string");return QuestSkillSystemSweep_typeof(key) === "symbol" ? key : String(key);}function QuestSkillSystemSweep_toPrimitive(input, hint) {if (QuestSkillSystemSweep_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSkillSystemSweep_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





var QuestSkillSystemSweep = /*#__PURE__*/function () {function QuestSkillSystemSweep() {QuestSkillSystemSweep_classCallCheck(this, QuestSkillSystemSweep);QuestSkillSystemSweep_defineProperty(this, "park",
    external_kolmafia_.Location.get("The Hidden Park"));QuestSkillSystemSweep_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("System Sweep"));QuestSkillSystemSweep_defineProperty(this, "sword",
    external_kolmafia_.Item.get("Antique Machete"));QuestSkillSystemSweep_defineProperty(this, "nanovision",
    external_kolmafia_.Skill.get("Double Nanovision"));QuestSkillSystemSweep_defineProperty(this, "book",
    external_kolmafia_.Item.get("Book of matches"));QuestSkillSystemSweep_defineProperty(this, "monster",
    external_kolmafia_.Monster.get("pygmy janitor"));}QuestSkillSystemSweep_createClass(QuestSkillSystemSweep, [{ key: "getId", value:
    function getId() {
      return "Skills / System Sweep";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.haveSkill)(this.skill)) {
        return QuestStatus.COMPLETED;
      }

      if (!this.hasRelocated() || (0,external_kolmafia_.availableAmount)(this.sword) == 0) {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_.haveSkill)(this.nanovision) && this.wantBook()) {
        return QuestStatus.FASTER_LATER;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.setPlusCombat().setItemDrops();

      return {
        location: this.park,
        outfit: outfit,
        orbs: [this.monster],
        run: function run() {
          greyAdv(_this.park, outfit);
        }
      };
    } }, { key: "hasRelocated", value:

    function hasRelocated() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("relocatePygmyJanitor")) == (0,external_kolmafia_.myAscensions)();
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "wantBook", value:

    function wantBook() {
      if (
      (0,external_kolmafia_.availableAmount)(this.book) > 0 ||
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hiddenTavernUnlock")) == (0,external_kolmafia_.myAscensions)() ||
      (0,external_kolmafia_.getProperty)("questL11Spare") == "finished")
      {
        return false;
      }

      return true;
    } }]);return QuestSkillSystemSweep;}();
;// CONCATENATED MODULE: ./src/quests/skills/QuestSkillRegistry.ts
function QuestSkillRegistry_typeof(obj) {"@babel/helpers - typeof";return QuestSkillRegistry_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestSkillRegistry_typeof(obj);}function QuestSkillRegistry_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestSkillRegistry_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestSkillRegistry_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestSkillRegistry_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestSkillRegistry_arrayLikeToArray(o, minLen);}function QuestSkillRegistry_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestSkillRegistry_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestSkillRegistry_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestSkillRegistry_toPropertyKey(descriptor.key), descriptor);}}function QuestSkillRegistry_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestSkillRegistry_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestSkillRegistry_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestSkillRegistry_defineProperty(obj, key, value) {key = QuestSkillRegistry_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestSkillRegistry_toPropertyKey(arg) {var key = QuestSkillRegistry_toPrimitive(arg, "string");return QuestSkillRegistry_typeof(key) === "symbol" ? key : String(key);}function QuestSkillRegistry_toPrimitive(input, hint) {if (QuestSkillRegistry_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestSkillRegistry_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestSkillRegistry = /*#__PURE__*/function () {


  function QuestSkillRegistry() {QuestSkillRegistry_classCallCheck(this, QuestSkillRegistry);QuestSkillRegistry_defineProperty(this, "children", []);
    /*
    | "Skills / MPRegen"
    | "Skills / HPRegen"
    | "Skills / ScalingItem"
    | "Skills / ScalingDR"
    | "Skills / InfiniteLoop"
    | "Skills / Shroud"
    | "Skills / Hoonk"
    | "Skills / PhaseShift"
    | "Skills / ConiferPolymers";
    */

    this.addSkill("Skills / Phase Shift");
    this.addSkill(
    "Skills / Photonic Shroud",
    function () {return getQuestStatus("questL11Black") > 1;});

    this.addSkill(
    "Skills / Piezoelectric Honk",
    function () {return getQuestStatus("questL11Palindome") > 4;});

    this.addSkill(
    "Skills / ScalingItem",
    null,
    external_kolmafia_.Skill.get("Gravitational Compression"));

    this.addSkill(
    "Skills / HPRegen",
    null,
    external_kolmafia_.Skill.get("Fluid Dynamics Simulation"));

    this.addSkill(
    "Skills / ScalingDR",
    function () {return getQuestStatus("questM20Necklace") > 2;},
    external_kolmafia_.Skill.get("Subatomic Hardening"));

    this.addSkill("Skills / ScalingMeat", null, external_kolmafia_.Skill.get("Ponzi Apparatus"));

    this.children.push(new QuestMPRegen());
    this.children.push(new QuestSkillSystemSweep());
    this.children.push(
    new QuestSkillAbstract(
    11,
    external_kolmafia_.Location.get("The Hidden Park"),
    external_kolmafia_.Monster.get("pygmy witch lawyer"),
    external_kolmafia_.Skill.get("Infinite Loop"),
    "Skills / Infinite Loop",
    function () {return (
        (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Antique Machete")) > 0 &&
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("relocatePygmyJanitor")) == (0,external_kolmafia_.myAscensions)());}));


    this.children.push(new QuestSkillColdDamage15());
    this.children.push(new QuestSkillColdDamage10());
    this.children.push(new QuestSkillDoubleNanovision());
    this.children.push(new QuestSkillConiferPolymers());
  }QuestSkillRegistry_createClass(QuestSkillRegistry, [{ key: "addSkill", value:

    function addSkill(questType, valid, skill) {
      if (skill == null) {
        skill = external_kolmafia_.Skill.get(
        questType.substring(questType.lastIndexOf("/") + 1).trim());

      }

      if (skill == external_kolmafia_.Skill.none) {
        throw "There's no skill found for " + questType;
      }

      if ((0,external_kolmafia_.haveSkill)(skill)) {
        return;
      }

      var location;
      var monster;var _iterator = QuestSkillRegistry_createForOfIteratorHelper(

        GreyAbsorber_AbsorbsProvider.loadAbsorbs()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var absorb = _step.value;
          if (absorb.skill != skill) {
            continue;
          }

          var locs = getLocations(absorb.monster);

          if (locs.length != 1) {
            throw (
              "Expected to find only one location, instead received multiple when trying to handle " +
              questType);

          }

          location = locs[0];
          monster = absorb.monster;
          break;
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      if (location == null) {
        throw (
          "No location / monster found for the skill " +
          skill.name +
          " and type " +
          questType);

      }

      var level = Math.max(5, Math.sqrt(location.recommendedStat) * 1.35);

      this.children.push(
      new QuestSkillAbstract(level, location, monster, skill, questType, valid));

    } }, { key: "getId", value:

    function getId() {
      return "Skills / Parent";
    } }, { key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.children;
    } }]);return QuestSkillRegistry;}();
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbGnomads.ts
function QuestAbsorbGnomads_typeof(obj) {"@babel/helpers - typeof";return QuestAbsorbGnomads_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestAbsorbGnomads_typeof(obj);}function QuestAbsorbGnomads_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbGnomads_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestAbsorbGnomads_toPropertyKey(descriptor.key), descriptor);}}function QuestAbsorbGnomads_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbGnomads_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbGnomads_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbGnomads_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbGnomads_setPrototypeOf(subClass, superClass);}function QuestAbsorbGnomads_setPrototypeOf(o, p) {QuestAbsorbGnomads_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbGnomads_setPrototypeOf(o, p);}function QuestAbsorbGnomads_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbGnomads_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbGnomads_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbGnomads_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbGnomads_possibleConstructorReturn(this, result);};}function QuestAbsorbGnomads_possibleConstructorReturn(self, call) {if (call && (QuestAbsorbGnomads_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbGnomads_assertThisInitialized(self);}function QuestAbsorbGnomads_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbGnomads_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbGnomads_getPrototypeOf(o) {QuestAbsorbGnomads_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbGnomads_getPrototypeOf(o);}function QuestAbsorbGnomads_defineProperty(obj, key, value) {key = QuestAbsorbGnomads_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestAbsorbGnomads_toPropertyKey(arg) {var key = QuestAbsorbGnomads_toPrimitive(arg, "string");return QuestAbsorbGnomads_typeof(key) === "symbol" ? key : String(key);}function QuestAbsorbGnomads_toPrimitive(input, hint) {if (QuestAbsorbGnomads_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestAbsorbGnomads_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var QuestAbsorbGnomads = /*#__PURE__*/function (_QuestMoonSignAbsorb) {QuestAbsorbGnomads_inherits(QuestAbsorbGnomads, _QuestMoonSignAbsorb);var _super = QuestAbsorbGnomads_createSuper(QuestAbsorbGnomads);function QuestAbsorbGnomads() {var _this;QuestAbsorbGnomads_classCallCheck(this, QuestAbsorbGnomads);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbGnomads_defineProperty(QuestAbsorbGnomads_assertThisInitialized(_this), "location",
    external_kolmafia_.Location.get("Thugnderdome"));QuestAbsorbGnomads_defineProperty(QuestAbsorbGnomads_assertThisInitialized(_this), "monster",
    external_kolmafia_.Monster.get("Vicious gnauga"));QuestAbsorbGnomads_defineProperty(QuestAbsorbGnomads_assertThisInitialized(_this), "moonZone",
    "Gnomad");return _this;}QuestAbsorbGnomads_createClass(QuestAbsorbGnomads, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Gnomads";
    } }]);return QuestAbsorbGnomads;}(QuestMoonSignAbsorb);
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestL11PalinAbsorbs.ts
function QuestL11PalinAbsorbs_typeof(obj) {"@babel/helpers - typeof";return QuestL11PalinAbsorbs_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestL11PalinAbsorbs_typeof(obj);}function QuestL11PalinAbsorbs_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestL11PalinAbsorbs_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestL11PalinAbsorbs_toPropertyKey(descriptor.key), descriptor);}}function QuestL11PalinAbsorbs_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestL11PalinAbsorbs_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestL11PalinAbsorbs_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestL11PalinAbsorbs_defineProperty(obj, key, value) {key = QuestL11PalinAbsorbs_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestL11PalinAbsorbs_toPropertyKey(arg) {var key = QuestL11PalinAbsorbs_toPrimitive(arg, "string");return QuestL11PalinAbsorbs_typeof(key) === "symbol" ? key : String(key);}function QuestL11PalinAbsorbs_toPrimitive(input, hint) {if (QuestL11PalinAbsorbs_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestL11PalinAbsorbs_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}







var QuestL11PalinAbsorbs = /*#__PURE__*/function () {function QuestL11PalinAbsorbs() {QuestL11PalinAbsorbs_classCallCheck(this, QuestL11PalinAbsorbs);QuestL11PalinAbsorbs_defineProperty(this, "talisman",
    external_kolmafia_.Item.get("Talisman o' Namsilat"));QuestL11PalinAbsorbs_defineProperty(this, "palindome",
    external_kolmafia_.Location.get("Inside the Palindome"));QuestL11PalinAbsorbs_defineProperty(this, "toAbsorb", void 0);QuestL11PalinAbsorbs_defineProperty(this, "goose",

    external_kolmafia_.Familiar.get("Grey Goose"));}QuestL11PalinAbsorbs_createClass(QuestL11PalinAbsorbs, [{ key: "getId", value:

    function getId() {
      return "Absorbs / Palin";
    } }, { key: "level", value:

    function level() {
      return 11;
    } }, { key: "status", value:

    function status() {
      if (GreySettings_GreySettings.greySkipPalindome) {
        return QuestStatus.COMPLETED;
      }

      var status = getQuestStatus("questL11Palindome");

      if (status < 100 || (0,external_kolmafia_.familiarWeight)(this.goose) < 6) {
        return QuestStatus.NOT_READY;
      }

      if (this.toAbsorb.length == 0) {
        return QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();
      outfit.addWeight(this.talisman);

      return {
        location: this.palindome,
        outfit: outfit,
        run: function run() {
          var props = new Properties_PropertyManager();
          props.setChoice(127, 1);
          props.setChoice(126, 1);
          props.setChoice(180, 2);
          props.setChoice(2, 2);

          try {
            greyAdv(_this.palindome, outfit);
          } finally {
            props.resetAll();
          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.palindome];
    } }]);return QuestL11PalinAbsorbs;}();
;// CONCATENATED MODULE: ./src/quests/absorbs/QuestAbsorbIrateMariachi.ts
function QuestAbsorbIrateMariachi_typeof(obj) {"@babel/helpers - typeof";return QuestAbsorbIrateMariachi_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestAbsorbIrateMariachi_typeof(obj);}function QuestAbsorbIrateMariachi_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestAbsorbIrateMariachi_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestAbsorbIrateMariachi_toPropertyKey(descriptor.key), descriptor);}}function QuestAbsorbIrateMariachi_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestAbsorbIrateMariachi_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestAbsorbIrateMariachi_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestAbsorbIrateMariachi_inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) QuestAbsorbIrateMariachi_setPrototypeOf(subClass, superClass);}function QuestAbsorbIrateMariachi_setPrototypeOf(o, p) {QuestAbsorbIrateMariachi_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return QuestAbsorbIrateMariachi_setPrototypeOf(o, p);}function QuestAbsorbIrateMariachi_createSuper(Derived) {var hasNativeReflectConstruct = QuestAbsorbIrateMariachi_isNativeReflectConstruct();return function _createSuperInternal() {var Super = QuestAbsorbIrateMariachi_getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = QuestAbsorbIrateMariachi_getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return QuestAbsorbIrateMariachi_possibleConstructorReturn(this, result);};}function QuestAbsorbIrateMariachi_possibleConstructorReturn(self, call) {if (call && (QuestAbsorbIrateMariachi_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return QuestAbsorbIrateMariachi_assertThisInitialized(self);}function QuestAbsorbIrateMariachi_assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function QuestAbsorbIrateMariachi_isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function QuestAbsorbIrateMariachi_getPrototypeOf(o) {QuestAbsorbIrateMariachi_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return QuestAbsorbIrateMariachi_getPrototypeOf(o);}function QuestAbsorbIrateMariachi_defineProperty(obj, key, value) {key = QuestAbsorbIrateMariachi_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestAbsorbIrateMariachi_toPropertyKey(arg) {var key = QuestAbsorbIrateMariachi_toPrimitive(arg, "string");return QuestAbsorbIrateMariachi_typeof(key) === "symbol" ? key : String(key);}function QuestAbsorbIrateMariachi_toPrimitive(input, hint) {if (QuestAbsorbIrateMariachi_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestAbsorbIrateMariachi_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}











var QuestAbsorbIrateMariachi = /*#__PURE__*/function (_TaskInfo) {QuestAbsorbIrateMariachi_inherits(QuestAbsorbIrateMariachi, _TaskInfo);var _super = QuestAbsorbIrateMariachi_createSuper(QuestAbsorbIrateMariachi);function QuestAbsorbIrateMariachi() {var _this;QuestAbsorbIrateMariachi_classCallCheck(this, QuestAbsorbIrateMariachi);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "irateMariachi",
    external_kolmafia_.Monster.get("Irate Mariachi"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "familiar",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "avoid",
    new PossiblePath(10));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "manual",
    new PossiblePath(0));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "paths", void 0);QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "combatSkill",

    external_kolmafia_.Skill.get("Piezoelectric Honk"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "ncItems",
    [
    "Silent beret",
    "Xiblaxian stealth cowl",
    "protonic accelerator pack"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "combatHat",
    external_kolmafia_.Item.get("sombrero-mounted sparkler"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "player",
    external_kolmafia_.Item.get("portable cassette player"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "thermal",
    external_kolmafia_.Item.get("thermal blanket"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "shirt",
    external_kolmafia_.Item.get("&quot;Remember the Trees&quot; Shirt"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "loc",
    external_kolmafia_.Location.get("South of The Border"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "ball",
    external_kolmafia_.Item.get("miniature crystal ball"));QuestAbsorbIrateMariachi_defineProperty(QuestAbsorbIrateMariachi_assertThisInitialized(_this), "toAbsorb", void 0);return _this;}QuestAbsorbIrateMariachi_createClass(QuestAbsorbIrateMariachi, [{ key: "createPaths", value:


    function createPaths(assumeUnstarted) {
      this.paths = [];
      this.paths.push(new PossiblePath(1).addFax(this.irateMariachi));
      this.paths.push(this.avoid);

      if (
      this.getExpectedTurns(this.getPossibleCombats(false, assumeUnstarted)) <
      10)
      {
        this.paths.push(this.manual);
      }
    } }, { key: "getExpectedTurns", value:

    function getExpectedTurns(combatRate) {
      // Base combat rate is 50
      var monsters = 5;
      var hasOrb = (0,external_kolmafia_.availableAmount)(this.ball) > 0;

      // We're starting off by assuming we have no banishes, cos I'm lazy
      var turns = monsters;

      if (hasOrb) {
        turns /= 2;
      }

      // Now we add the combat rate. Default is 50/50 chance
      // So 50 is 200% turns
      // 75 is 133% turns
      // 100 is 100% turns
      var turnsMult = 100 / (50 + combatRate);

      return Math.ceil(turns * turnsMult);
    } }, { key: "getPossibleCombats", value:

    function getPossibleCombats(
    usingWhatWeHaveNow,
    assumeUnstarted)
    {
      var combat = 10; // Start off with skill

      if (
      !usingWhatWeHaveNow &&
      !(0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("_fireworksShopHatBought")))
      {
        if (this.ncItems.find(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;}) != null) {
          combat += 5; // We buy the hat
        }
      } else if ((0,external_kolmafia_.availableAmount)(this.combatHat) > 0) {
        combat += 5;
      }

      if (
      (0,external_kolmafia_.availableAmount)(this.thermal) > 0 ||
      !usingWhatWeHaveNow && (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("hasMaydayContract")))
      {
        combat += 5; // Cape
      }

      if (
      usingWhatWeHaveNow ?
      (0,external_kolmafia_.availableAmount)(this.shirt) > 0 :
      !GreySettings_GreySettings.isHardcoreMode() && (
      (0,external_kolmafia_.gnomadsAvailable)() ||
      GreySettings_GreySettings.willBeAccessible("Gnomad", assumeUnstarted)))
      {
        combat += 5; // Shirt
      }

      if (
      usingWhatWeHaveNow ?
      (0,external_kolmafia_.availableAmount)(this.player) > 0 :
      !GreySettings_GreySettings.isHardcoreMode())
      {
        combat += 5; // Portable cassette player
      }

      if (combat > 25) {
        return 25 + Math.round((combat - 25) / 5);
      }

      return combat;
    } }, { key: "getPossiblePaths", value:

    function getPossiblePaths() {
      return this.paths;
    } }, { key: "getId", value:

    function getId() {
      return "Absorbs / Irate Mariachi";
    } }, { key: "level", value:

    function level() {
      return 18;
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.loc];
    } }, { key: "status", value:

    function status(path) {
      if (
      GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(this.irateMariachi) ||
      path == this.avoid)
      {
        return QuestStatus.COMPLETED;
      }

      if (path == null) {
        return QuestStatus.NOT_READY;
      }

      if ((0,external_kolmafia_.familiarWeight)(this.familiar) < 6) {
        return QuestStatus.NOT_READY;
      }

      if (path == this.manual) {
        if (!(0,external_kolmafia_.haveSkill)(this.combatSkill)) {
          return QuestStatus.NOT_READY;
        }

        if (hasNonCombatSkillActive()) {
          return QuestStatus.NOT_READY;
        }

        if ((0,external_kolmafia_.availableAmount)(this.ball) > 0) {
          var mon = currentPredictions().get(this.loc);

          if (mon != null && !this.toAbsorb.includes(mon)) {
            return QuestStatus.NOT_READY;
          }
        }

        var turns = this.getExpectedTurns(this.getPossibleCombats(true, false));

        if (turns > 8) {
          return QuestStatus.NOT_READY;
        }

        return QuestStatus.READY;
      }

      return QuestStatus.FASTER_LATER;
    } }, { key: "run", value:

    function run(path) {var _this2 = this;
      if (path == this.manual) {
        var outfit = new GreyOutfit().setPlusCombat().setPlusCombat();

        return {
          location: this.loc,
          outfit: outfit,
          freeRun: function freeRun(monster) {return monster != _this2.irateMariachi;},
          run: function run() {
            greyAdv(_this2.loc, outfit);
          }
        };
      }

      return this.runFax(path);
    } }, { key: "runFax", value:

    function runFax(path) {var _this3 = this;
      var resource = path.getResource(ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER);

      return {
        location: null,
        outfit: null,
        familiar: this.familiar,
        disableFamOverride: true,
        run: function run() {
          resource.fax(_this3.irateMariachi);

          greyAdv(null);

          if ((0,external_kolmafia_.handlingChoice)() || (0,external_kolmafia_.currentRound)() != 0) {
            throw "We're supposed to be done with this fight!";
          }
        }
      };
    } }, { key: "getAbsorbs", value:

    function getAbsorbs() {
      return [this.irateMariachi];
    } }]);return QuestAbsorbIrateMariachi;}(TaskInfo);
;// CONCATENATED MODULE: ./src/quests/custom/QuestShortOrderCookLevel.ts
function QuestShortOrderCookLevel_typeof(obj) {"@babel/helpers - typeof";return QuestShortOrderCookLevel_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestShortOrderCookLevel_typeof(obj);}function QuestShortOrderCookLevel_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestShortOrderCookLevel_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestShortOrderCookLevel_toPropertyKey(descriptor.key), descriptor);}}function QuestShortOrderCookLevel_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestShortOrderCookLevel_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestShortOrderCookLevel_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestShortOrderCookLevel_defineProperty(obj, key, value) {key = QuestShortOrderCookLevel_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestShortOrderCookLevel_toPropertyKey(arg) {var key = QuestShortOrderCookLevel_toPrimitive(arg, "string");return QuestShortOrderCookLevel_typeof(key) === "symbol" ? key : String(key);}function QuestShortOrderCookLevel_toPrimitive(input, hint) {if (QuestShortOrderCookLevel_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestShortOrderCookLevel_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestShortOrderExpLevel = /*#__PURE__*/function () {function QuestShortOrderExpLevel() {QuestShortOrderCookLevel_classCallCheck(this, QuestShortOrderExpLevel);QuestShortOrderCookLevel_defineProperty(this, "cook",
    external_kolmafia_.Familiar.get("Shorter-Order Cook"));QuestShortOrderCookLevel_defineProperty(this, "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));QuestShortOrderCookLevel_defineProperty(this, "warren",
    external_kolmafia_.Location.get("The Dire Warren"));}QuestShortOrderCookLevel_createClass(QuestShortOrderExpLevel, [{ key: "getId", value:

    function getId() {
      return "Misc / Short Cook Goose";
    } }, { key: "level", value:

    function level() {
      return 1;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("questM05Toot") != "finished") {
        return QuestStatus.NOT_READY;
      }

      if (!(0,external_kolmafia_.haveFamiliar)(this.cook) || (0,external_kolmafia_.myLevel)() > 7) {
        return QuestStatus.COMPLETED;
      }

      if ((0,external_kolmafia_.familiarWeight)(this.goose) < 9) {
        return this.goose.experience <= 0 ?
        QuestStatus.NOT_READY :
        QuestStatus.COMPLETED;
      }

      return QuestStatus.READY;
    } }, { key: "mustBeDone", value:

    function mustBeDone(reallyMustBeDone) {
      return !reallyMustBeDone;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit();

      return {
        location: null,
        familiar: this.goose,
        disableFamOverride: true,
        outfit: outfit,
        run: function run() {
          (0,external_kolmafia_.useFamiliar)(_this.goose);
          var macro = MacroBuilder/* Macro.skill */.LE.skill(external_kolmafia_.Skill.get("Convert Matter to Pomade"));
          macro.attack().attack();

          greyAdv(
          _this.warren,
          outfit,
          new AdventureSettings().setFinishingBlowMacro(macro));

        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return false;
    } }]);return QuestShortOrderExpLevel;}();
;// CONCATENATED MODULE: ./src/quests/custom/QuestTotPirate.ts
function QuestTotPirate_typeof(obj) {"@babel/helpers - typeof";return QuestTotPirate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestTotPirate_typeof(obj);}function QuestTotPirate_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestTotPirate_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestTotPirate_toPropertyKey(descriptor.key), descriptor);}}function QuestTotPirate_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestTotPirate_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestTotPirate_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestTotPirate_defineProperty(obj, key, value) {key = QuestTotPirate_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestTotPirate_toPropertyKey(arg) {var key = QuestTotPirate_toPrimitive(arg, "string");return QuestTotPirate_typeof(key) === "symbol" ? key : String(key);}function QuestTotPirate_toPrimitive(input, hint) {if (QuestTotPirate_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestTotPirate_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}






var QuestTotPirate = /*#__PURE__*/function () {function QuestTotPirate() {QuestTotPirate_classCallCheck(this, QuestTotPirate);QuestTotPirate_defineProperty(this, "familiar",
    external_kolmafia_.Familiar.get("Trick-or-Treating Tot"));QuestTotPirate_defineProperty(this, "item",
    external_kolmafia_.Item.get("li'l pirate costume"));QuestTotPirate_defineProperty(this, "pirate",
    external_kolmafia_.Location.get("The Obligatory Pirate's Cove"));}QuestTotPirate_createClass(QuestTotPirate, [{ key: "getId", value:

    function getId() {
      return "Misc / Tot Pirate";
    } }, { key: "level", value:

    function level() {
      return 7;
    } }, { key: "status", value:

    function status() {
      if ((0,external_kolmafia_.getProperty)("warProgress") != "unstarted") {
        return QuestStatus.COMPLETED;
      }

      if (!(0,external_kolmafia_.haveFamiliar)(this.familiar) || (0,external_kolmafia_.availableAmount)(this.item) > 0) {
        return QuestStatus.COMPLETED;
      }

      if (!this.isIslandUnlocked() || hasNonCombatSkillActive()) {
        return QuestStatus.NOT_READY;
      }

      return QuestStatus.READY;
    } }, { key: "run", value:

    function run() {var _this = this;
      var outfit = new GreyOutfit().setPlusCombat();

      return {
        outfit: outfit,
        location: this.pirate,
        run: function run() {
          greyAdv(_this.pirate);

          if (
          (0,external_kolmafia_.lastMonster)().phylum == external_kolmafia_.Phylum.get("pirate") &&
          (0,external_kolmafia_.availableAmount)(_this.item) == 0)
          {
            throw (
              "Oh dear, we fought a pirate and expected to drop " +
              _this.item +
              " but that didn't happen.");

          }
        }
      };
    } }, { key: "getLocations", value:

    function getLocations() {
      return [this.pirate];
    } }, { key: "mustBeDone", value:

    function mustBeDone() {
      return (0,external_kolmafia_.myLevel)() == 11 && this.isIslandUnlocked();
    } }, { key: "canAcceptPrimes", value:

    function canAcceptPrimes() {
      return true;
    } }, { key: "isIslandUnlocked", value:

    function isIslandUnlocked() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastIslandUnlock")) >= (0,external_kolmafia_.myAscensions)();
    } }]);return QuestTotPirate;}();
;// CONCATENATED MODULE: ./src/quests/QuestsCustom.ts
function QuestsCustom_typeof(obj) {"@babel/helpers - typeof";return QuestsCustom_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestsCustom_typeof(obj);}function QuestsCustom_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestsCustom_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestsCustom_toPropertyKey(descriptor.key), descriptor);}}function QuestsCustom_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestsCustom_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestsCustom_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestsCustom_defineProperty(obj, key, value) {key = QuestsCustom_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestsCustom_toPropertyKey(arg) {var key = QuestsCustom_toPrimitive(arg, "string");return QuestsCustom_typeof(key) === "symbol" ? key : String(key);}function QuestsCustom_toPrimitive(input, hint) {if (QuestsCustom_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestsCustom_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}





























var QuestsCustom = /*#__PURE__*/function () {
  // This is a wrapper class around some of our custom routing goals. Like combat locket or so.



  function QuestsCustom() {QuestsCustom_classCallCheck(this, QuestsCustom);QuestsCustom_defineProperty(this, "quests", []);
    this.quests.push(new QuestInitialStart());
    this.quests.push(new QuestInitialPulls());
    this.quests.push(new QuestLocketInfiniteLoop());
    //this.quests.push(new QuestLocketSystemSweep());
    this.quests.push(new QuestGoblinTortureHarem());
    this.quests.push(new QuestGoblinTortureLab());
    this.quests.push(new QuestDungeonsOfDoom());
    this.quests.push(new QuestGetZapWand());
    this.quests.push(new QuestNPCStuff());
    this.quests.push(new QuestCustomPurchases());
    this.quests.push(new QuestGrabBoatVacation());
    this.quests.push(new QuestSkillRegistry());
    this.quests.push(new QuestFamiliarEquip());
    this.quests.push(new QuestFortuneExp());
    this.quests.push(new QuestPowerLeveling(4));
    this.quests.push(new QuestBugbearBakery());
    this.quests.push(new QuestAbsorbStarMonster());
    this.quests.push(new QuestMoonSign());
    this.quests.push(new QuestAbsorbCanadia());
    this.quests.push(new QuestAbsorbKnoll());
    this.quests.push(new QuestAbsorbGnomads());
    this.quests.push(new QuestL11PalinAbsorbs());
    this.quests.push(new QuestAbsorbIrateMariachi());
    this.quests.push(new QuestJuneCleaver());
    this.quests.push(new QuestTrapGhost());
    this.quests.push(new QuestShortOrderExpLevel());
    this.quests.push(new QuestTotPirate());
  }QuestsCustom_createClass(QuestsCustom, [{ key: "level", value:

    function level() {
      return -1;
    } }, { key: "status", value:

    function status() {
      return QuestStatus.COMPLETED;
    } }, { key: "run", value:

    function run() {
      throw new Error("Method not implemented.");
    } }, { key: "getId", value:

    function getId() {
      return "Misc / Custom";
    } }, { key: "getLocations", value:

    function getLocations() {
      return [];
    } }, { key: "getChildren", value:

    function getChildren() {
      return this.quests;
    } }]);return QuestsCustom;}();
;// CONCATENATED MODULE: ./src/quests/QuestTypes.ts
function QuestTypes_toConsumableArray(arr) {return QuestTypes_arrayWithoutHoles(arr) || QuestTypes_iterableToArray(arr) || QuestTypes_unsupportedIterableToArray(arr) || QuestTypes_nonIterableSpread();}function QuestTypes_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function QuestTypes_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestTypes_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestTypes_arrayLikeToArray(o, minLen);}function QuestTypes_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function QuestTypes_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return QuestTypes_arrayLikeToArray(arr);}function QuestTypes_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}var QuestToot = ["Council / Toot"];
var QuestLarva = ["Council / Larva"];
var QuestTavern = ["Council / Tavern"];
var QuestBats = [
"Council / Bats / Sonars",
"Council / Bats / UnlockLeft",
"Council / Bats / UnlockRight",
"Council / Bats / UnlockBoss",
"Council / Bats / Boss"];

var QuestGoblins = [
"Council / Goblins / Outskirts",
"Council / Goblins / HaremOutfit",
"Council / Goblins / King"];

var QuestFriars = [
"Council / Friars / Heart",
"Council / Friars / Elbow",
"Council / Friars / Neck",
"Council / Friars / TurnIn"];

var QuestCrypt = [
"Council / Crypt / Sprinters",
"Council / Crypt / Gravy Boat Pull",
"Council / Crypt / Eyes",
"Council / Crypt / Rattling",
"Council / Crypt / DirtyMan",
"Council / Crypt / Boss"];

var QuestIcePeak = [
"Council / Ice / Trapper",
"Council / Ice / Goats",
"Council / Ice / Ore",
"Council / Ice / Ninjas",
"Council / Ice / Boss"];

var QuestTriplePeaks = [
"Council / Peaks / Orcs",
"Council / Peaks / CargoShortsSmut",
"Council / Peaks / AbooPeak",
"Council / Peaks / TwinPeak",
"Council / Peaks / OilPeak",
"Council / Peaks / Lord"];

var QuestBeanStalk = [
"Council / Beanstalk / EnchantedBean",
"Council / Beanstalk / Ship",
"Council / Beanstalk / Basement",
"Council / Beanstalk / Ground",
"Council / Beanstalk / Top"];


var QuestPalin = [
"Council / MacGruffin / Palin / Book",
"Council / MacGruffin / Palin / WetStew",
"Council / MacGruffin / Palin / Boss"];

var QuestPyamid = [
"Council / MacGruffin / Pyramid / Top",
"Council / MacGruffin / Pyramid / Middle",
"Council / MacGruffin / Pyramid / Wheel",
"Council / MacGruffin / Pyramid / EdUndying"];

var QuestRon = [
"Council / MacGruffin / Ron / Crowd",
"Council / MacGruffin / Ron / Zepp",
"Council / MacGruffin / Ron / Parent"];

var QuestShen = [
"Council / MacGruffin / Shen / Meet",
"Council / MacGruffin / Shen / Bats",
"Council / MacGruffin / Shen / TurnIn",
"Council / MacGruffin / Shen / Ninjas",
"Council / MacGruffin / Shen / Giants"];

var QuestTemple = [
"Council / MacGruffin / Temple / Unlock",
"Council / MacGruffin / Temple / GrabWool",
"Council / MacGruffin / Temple / Nostril",
"Council / MacGruffin / Temple / HiddenCity"];

var QuestHiddenCity = [
"Council / MacGruffin / HiddenCity / Vines",
"Council / MacGruffin / HiddenCity / Accountants",
"Council / MacGruffin / HiddenCity / Curses",
"Council / MacGruffin / HiddenCity / Doctor",
"Council / MacGruffin / HiddenCity / Bowling",
"Council / MacGruffin / HiddenCity / BookOfMatches",
"Council / MacGruffin / HiddenCity / HiddenPark",
"Council / MacGruffin / HiddenCity / Boss"];

var QuestBlack = ["Council / MacGruffin / Black"];
var QuestDesert = [
"Council / MacGruffin / Desert / Parent",
"Council / MacGruffin / Desert / Explore",
"Council / MacGruffin / Desert / StoneRose",
"Council / MacGruffin / Desert / Gnome",
"Council / MacGruffin / Desert / Compass",
"Council / MacGruffin / Desert / WormRide"];

var QuestManorMacGruffin = [
"Council / MacGruffin / Manor / Ballroom",
"Council / MacGruffin / Manor / Recipe",
"Council / MacGruffin / Manor / Soda",
"Council / MacGruffin / Manor / Wine",
"Council / MacGruffin / Manor / Bomb",
"Council / MacGruffin / Manor / Boss"];

var QuestMacGruffin = [
"Council / MacGruffin / Vacation",
"Council / MacGruffin / Shore"].concat(
QuestPalin,
QuestPyamid,
QuestDesert,
QuestRon,
QuestShen,
QuestTemple,
QuestHiddenCity,
QuestBlack,
QuestManorMacGruffin);

var QuestIslandWarGremlins = [
"Council / War / Gremlins / Burning Barrel",
"Council / War / Gremlins / Rusted Car",
"Council / War / Gremlins / Old Tires",
"Council / War / Gremlins / Abandoned Refrigerator"];

var QuestIslandWar = [
"Council / War / Parent",
"Council / War / Frat Outfit",
"Council / War / Start",
"Council / War / Gremlins",
"Council / War / Lobsters",
"Council / War / Flyers",
"Council / War / Battlefield",
"Council / War / Filthworms",
"Council / War / Nuns",
"Council / War / Boss"].concat(
QuestIslandWarGremlins);

var QuestKeys = [
"Council / Tower / Keys / Heroes",
"Council / Tower / Keys / Heroes / DailyDungeon",
"Council / Tower / Keys / Heroes / DailyDungeon + Malware",
"Council / Tower / Keys / Heroes / FantasyBandit",
"Council / Tower / Keys / Heroes / Buy and Zap Keys",
"Council / Tower / Keys / Heroes / DeckOfCards",
"Council / Tower / Keys / Digital",
"Council / Tower / Keys / HoleInSkyUnlock",
"Council / Tower / Keys / Star",
"Council / Tower / Keys / Skeleton"];

var QuestTower = [
"Council / Tower / Contests",
"Council / Tower / Maze",
"Council / Tower / KeyDoor",
"Council / Tower / WallOfSkin",
"Council / Tower / WallOfMeat",
"Council / Tower / WallOfBones",
"Council / Tower / Shadow",
"Council / Tower / Mirror",
"Council / Tower / NaughtyBoss",
"Council / Tower / Parent"].concat(
QuestKeys);

var QuestTypes_QuestManor = [
"Manor / Chat",
"Manor / Kitchen",
"Manor / Billards",
"Manor / Library",
"Manor / Bathroom",
"Manor / Gallery",
"Manor / Bedroom"];

var QuestSkills = [
"Skills / Parent",
"Skills / MPRegen",
"Skills / HPRegen",
"Skills / ScalingItem",
"Skills / ScalingMeat",
"Skills / ScalingDR",
"Skills / Infinite Loop",
"Skills / Photonic Shroud",
"Skills / Piezoelectric Honk",
"Skills / Phase Shift",
"Skills / Conifer Polymers",
"Skills / System Sweep",
"Skills / ColdDamage15",
"Skills / ColdDamage10",
"Skills / DoubleNanovision"];

var QuestMisc = [
"Misc / Custom",
"Misc / Initial Pulls",
"Misc / FamEquip",
"Misc / MeatCar",
"Misc / ManorLights",
"Misc / UnlockDungeonsOfDoom",
"Misc / GrabZapWand",
"Misc / InitialStart",
"Misc / PowerLeveling",
"Misc / FortuneExp",
"Misc / Purchases",
"Misc / FriarExp",
"Misc / BugbearBakery",
"Misc / Moonsign",
"Misc / JuneCleaver",
"Misc / Ghost Buster",
"Misc / Short Cook Goose",
"Misc / Latte / Fam Exp",
"Misc / Latte / Plus Combat",
"Misc / Tot Pirate"];

var QuestCombatLocket = ["CombatLocket / InfiniteLoop"];
var QuestIslandUnlock = ["Boat / Vacation"];
var QuestTypes_QuestCouncil = [
"Quests / Council"].concat(
QuestToot,
QuestLarva,
QuestTavern,
QuestBats,
QuestGoblins,
QuestFriars,
QuestCrypt,
QuestIcePeak,
QuestTriplePeaks,
QuestBeanStalk, QuestTypes_toConsumableArray(
QuestMacGruffin), QuestTypes_toConsumableArray(
QuestIslandWar), QuestTypes_toConsumableArray(
QuestTower));

var QuestNPCs = [
"NPC / Parent",
"NPC / Meatsmith",
"NPC / GnomeSkills",
"NPC / Untinkerer",
"NPC / Baker",
"NPC / Druggie",
"NPC / Knoll Mayor",
"NPC / Doctor",
"NPC / Painter"];

var QuestGoblinsExperiments = [
"GoblinLabs / LabUnlock",
"GoblinLabs / MegUnlock"];

var QuestAbsorbs = [
"Absorbs / Hole in Sky",
"Absorbs / Canadia",
"Absorbs / Knoll",
"Absorbs / Gnomads",
"Absorbs / Palin",
"Absorbs / Irate Mariachi"];

var QuestLevels = [
"Level / 1",
"Level / 2",
"Level / 3",
"Level / 4",
"Level / 5",
"Level / 6",
"Level / 7",
"Level / 8",
"Level / 9",
"Level / 10",
"Level / 11",
"Level / 12",
"Level / 13"];

var QuestTypeArray = [].concat(QuestTypes_toConsumableArray(
QuestTypes_QuestCouncil),
QuestMisc,
QuestGoblinsExperiments,
QuestTypes_QuestManor,
QuestNPCs,
QuestSkills,
QuestCombatLocket,
QuestIslandUnlock,
QuestAbsorbs,
QuestLevels);
;// CONCATENATED MODULE: ./src/quests/QuestRegistry.ts
function QuestRegistry_typeof(obj) {"@babel/helpers - typeof";return QuestRegistry_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, QuestRegistry_typeof(obj);}function QuestRegistry_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = QuestRegistry_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function QuestRegistry_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return QuestRegistry_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QuestRegistry_arrayLikeToArray(o, minLen);}function QuestRegistry_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function QuestRegistry_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function QuestRegistry_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, QuestRegistry_toPropertyKey(descriptor.key), descriptor);}}function QuestRegistry_createClass(Constructor, protoProps, staticProps) {if (protoProps) QuestRegistry_defineProperties(Constructor.prototype, protoProps);if (staticProps) QuestRegistry_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function QuestRegistry_defineProperty(obj, key, value) {key = QuestRegistry_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function QuestRegistry_toPropertyKey(arg) {var key = QuestRegistry_toPrimitive(arg, "string");return QuestRegistry_typeof(key) === "symbol" ? key : String(key);}function QuestRegistry_toPrimitive(input, hint) {if (QuestRegistry_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (QuestRegistry_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




















// We get one non-combat at goblin basement from jellyfish
// Another non-combat at Black panther
// Goblin only has one -combat to speak of, and its not really worth much?
// Black is Car > Desert > Forest
var order = [
{ id: "Quests / Council" },

{ id: "Council / Toot" },
{ id: "Misc / Initial Pulls" },
{ id: "Misc / InitialStart" },
{ id: "Misc / PowerLeveling" },
{ id: "Misc / FortuneExp" },
{ id: "Misc / Ghost Buster" },

{ id: "CombatLocket / InfiniteLoop" },
{ id: "Misc / FamEquip" },
{ id: "Misc / JuneCleaver" },

{ id: "NPC / Meatsmith" },
{ id: "NPC / GnomeSkills" },
{ id: "NPC / Painter" }, // Takes up to 3 advs so meh, not quest relevant either. Only supported if user starts it
{ id: "NPC / Untinkerer" },
{ id: "NPC / Baker" },
{ id: "NPC / Druggie" },
{ id: "NPC / Knoll Mayor" },
{ id: "NPC / Doctor" },
{ id: "Misc / Purchases" },
{ id: "Misc / FriarExp" },
{ id: "Misc / Moonsign" },
// These just make the absorbs prioritized higher
{
  id: "Absorbs / Knoll",
  testValid: function testValid() {return (0,external_kolmafia_.knollAvailable)() && GreySettings_GreySettings.greyTuneMoonSpoon != null;}
},
{
  id: "Absorbs / Canadia",
  testValid: function testValid() {return (
      (0,external_kolmafia_.canadiaAvailable)() && GreySettings_GreySettings.greyTuneMoonSpoon != null);}
},
{
  id: "Absorbs / Gnomads",
  testValid: function testValid() {return (
      (0,external_kolmafia_.gnomadsAvailable)() && GreySettings_GreySettings.greyTuneMoonSpoon != null);}
},

// We might want system sweep after all! This needs to be cleaned
{ id: "Council / MacGruffin / HiddenCity / HiddenPark" },

{ id: "Skills / Infinite Loop" },
{ id: "Skills / System Sweep" },
{ id: "Skills / Phase Shift" },
{ id: "Skills / HPRegen" },
{ id: "Skills / ScalingItem" },
{ id: "Skills / ScalingMeat" },
{ id: "Skills / DoubleNanovision" },
{ id: "Misc / Short Cook Goose" },

{ id: "Skills / ScalingDR" },
{ id: "Skills / Conifer Polymers" },

// Vines are free kills, why not prioritize them to unlock zones
{ id: "Council / MacGruffin / HiddenCity / Vines" },

{ id: "Misc / ManorLights" },
{ id: "Misc / UnlockDungeonsOfDoom" },
{ id: "Skills / MPRegen" },

// We do this early so we can grab our hippy outfit asap
{ id: "Boat / Vacation" },

// Always try to buy access to the shore, 8-9 adventures spent trying to farm stuff up?
{ id: "Council / MacGruffin / Shore" },
{ id: "Misc / MeatCar" },
{ id: "Misc / BugbearBakery" },

// Get goblin done early so we can grab our first -combat skill
{ id: "Council / Goblins / Outskirts" },
{ id: "Council / Goblins / HaremOutfit" },

{ id: "GoblinLabs / LabUnlock" },
{ id: "GoblinLabs / MegUnlock" },

{ id: "Council / MacGruffin / Vacation" },

{ id: "Council / Larva" },

{ id: "Council / Ice / Ore" },

// Get this done early so we can start flyering
{ id: "Council / War / Frat Outfit" },
{ id: "Council / War / Start" },
{ id: "Council / War / Flyers" },

// OMG who cares about your stupid war
{
  id: "Council / War / Filthworms"
},

// We get +3 hot resist from raging bull
// +3 stench resist from pine bat
// And the other two skills are manor located
{ id: "Manor / Chat" },
{ id: "Manor / Kitchen" },
{ id: "Manor / Billards" },
{ id: "Manor / Bathroom" },
{ id: "Manor / Gallery" },
{ id: "Manor / Bedroom" },

// Do the king cos he's lonely, also has 2k meat
{ id: "Council / Goblins / King" },

// Register these here, because we want to burn their backups in delay zones
{
  id: "Council / Tower / Keys / Heroes / FantasyBandit",
  towerDelayed: true
},
{ id: "Council / War / Lobsters" },

// Get friars done early so we can grab stuff from hell
{ id: "Council / Friars / Heart" },
{ id: "Council / Friars / Elbow" },
{ id: "Council / Friars / Neck" },
{ id: "Council / Friars / TurnIn" },

{ id: "Misc / Latte / Fam Exp" },
{ id: "Misc / Latte / Plus Combat" },

// If we have the skill, then this doesn't need prioritizing as such
{
  id: "Council / MacGruffin / Black"
},

{ id: "Skills / Photonic Shroud" },
{ id: "Misc / GrabZapWand" },
{ id: "Misc / Tot Pirate" },

// Meh
{ id: "Council / MacGruffin / HiddenCity / Boss" },
{ id: "Council / MacGruffin / Temple / Unlock" },
{ id: "Council / MacGruffin / Temple / GrabWool" },
{ id: "Council / MacGruffin / Temple / Nostril" },
{ id: "Council / MacGruffin / Temple / HiddenCity" },

// Now we do our bowling, we prioritize this because of special code that has the bowling ball with combat turns = 0
// We also prioritize it for double nanovision
{ id: "Council / MacGruffin / HiddenCity / BookOfMatches" },
{ id: "Council / MacGruffin / HiddenCity / Bowling" },

// Do library after we should have system sweep stuff
{ id: "Manor / Library" },

// Crypt does give us meat hmm
{ id: "Council / Crypt / Gravy Boat Pull" },
{ id: "Council / Crypt / Sprinters" },
{ id: "Council / Crypt / Eyes" },

{ id: "Council / Bats / Sonars" },
{ id: "Council / Bats / UnlockLeft" },
{ id: "Council / Bats / Boss" },

// We've unlocked the left way, just do shen and hopefully we unlock right without actually burning extra turns
{ id: "Council / MacGruffin / Shen / Meet" },
{ id: "Council / MacGruffin / Shen / Bats" },
{ id: "Council / MacGruffin / Shen / TurnIn" },

// Unlock ninja tower
{ id: "Council / Ice / Trapper" },
{ id: "Council / Ice / Goats" },

// Ninja power!
{ id: "Council / MacGruffin / Shen / Ninjas" },

// Try unlock right bats if not unlocked
{ id: "Council / Bats / UnlockRight" },

// Hunt for enchanted beans
{ id: "Council / Beanstalk / EnchantedBean" },
{ id: "Council / Beanstalk / Ship" },
{ id: "Council / Beanstalk / Basement" },
{ id: "Council / Beanstalk / Ground" },
// We're now trying to do the top stuff yay
{ id: "Council / Beanstalk / Top" },

// If we still haven't unlocked from doing our top castle, lets try unlock our hole in sky
{ id: "Council / Tower / Keys / HoleInSkyUnlock" },
// Oh wow, hole in sky unlocked but still no boss. Lets just do it manually.
{ id: "Council / MacGruffin / Shen / Giants" },
{ id: "Council / Tower / Keys / Star", towerDelayed: true },

{ id: "Council / MacGruffin / Ron / Crowd" },
{ id: "Council / MacGruffin / Ron / Zepp" },

// Palin needs Ron and Shen done
{ id: "Council / MacGruffin / Palin / Book" },
{ id: "Council / MacGruffin / Palin / WetStew" },
{ id: "Council / MacGruffin / Palin / Boss" },
{ id: "Skills / Piezoelectric Honk" },

// Ninja needs +combat, so delay it until we've finished Shen and grabbed our +combat skill from Palin
{ id: "Council / Ice / Ninjas" },
// We earn a cold damage skill, so may as well. We also get meats
{ id: "Council / Ice / Boss" },

// Given we earn nothing but meat, delays for days
{ id: "Council / Bats / UnlockBoss" },

// We do shaman first to potentially grab extra accountant stuff
{ id: "Council / MacGruffin / HiddenCity / Curses" },

{ id: "Council / MacGruffin / HiddenCity / Accountants" },

// Meh
{ id: "Council / MacGruffin / HiddenCity / Doctor" },

// Nothing interesting from desert and pyramid yawn
{ id: "Council / MacGruffin / Desert / Compass" },

{ id: "Council / MacGruffin / Desert / WormRide" },
{ id: "Council / MacGruffin / Desert / Gnome" },
{
  id: "Council / MacGruffin / Desert / StoneRose"
},
{
  id: "Council / MacGruffin / Desert / Explore"
},

// Unlock cellar
{ id: "Council / MacGruffin / Manor / Ballroom" },
{ id: "Council / MacGruffin / Manor / Recipe" },
{ id: "Council / MacGruffin / Manor / Soda" },
{ id: "Council / MacGruffin / Manor / Wine" },
{ id: "Council / MacGruffin / Manor / Bomb" },
{ id: "Council / MacGruffin / Manor / Boss" },

// Nothing special from the top of the pyramid, but burn some turns here anyways
{ id: "Council / MacGruffin / Pyramid / Top" },

// Alright, unlock the control room and the undying man. And keep going until you have enough rats
{ id: "Council / MacGruffin / Pyramid / Middle" },
{ id: "Council / MacGruffin / Pyramid / Wheel" },

// Given we earn nothing from crypt..
{ id: "Council / Crypt / Rattling" },
{ id: "Council / Crypt / DirtyMan" },
{ id: "Council / Crypt / Boss" },

{ id: "Skills / ColdDamage15" },
{ id: "Skills / ColdDamage10" },

// Given that we earn nothing from peaks, just delay it until we should've hit our max +cold damage
{ id: "Council / Peaks / CargoShortsSmut" },
{ id: "Council / Peaks / Orcs" },
{ id: "Council / Peaks / OilPeak" },
{ id: "Council / Peaks / TwinPeak" },
{ id: "Council / Peaks / AbooPeak" },
{ id: "Council / Peaks / Lord" },

{ id: "Council / War / Gremlins" },
{ id: "Council / War / Gremlins / Burning Barrel" },
{ id: "Council / War / Gremlins / Abandoned Refrigerator" },
{ id: "Council / War / Gremlins / Old Tires" },
{ id: "Council / War / Gremlins / Rusted Car" },

{ id: "Council / War / Boss" },

// Tavern needs Larva done
{ id: "Council / Tavern" },

{ id: "Council / War / Battlefield" },

{ id: "Council / MacGruffin / Pyramid / EdUndying" },

// Alright, this run is just about over kids. Lets finish it.
{ id: "Council / Tower / Contests", towerDelayed: true },
{ id: "Council / Tower / Maze", towerDelayed: true },

{
  id: "Council / Tower / Keys / Heroes / Buy and Zap Keys",
  towerDelayed: true
},
{
  id: "Council / Tower / Keys / Heroes / DailyDungeon",
  towerDelayed: true
},
{
  id: "Council / Tower / Keys / Heroes / DailyDungeon + Malware",
  towerDelayed: true
},
{
  id: "Council / Tower / Keys / Heroes / DeckOfCards",
  towerDelayed: true
},
{ id: "Council / Tower / Keys / Digital", towerDelayed: true },
{ id: "Council / Tower / Keys / Skeleton", towerDelayed: true },

{ id: "Council / War / Nuns" },

// By the time we hit this, we should 100% have our keys
{ id: "Council / Tower / KeyDoor", towerDelayed: true },

{ id: "Council / Tower / WallOfSkin", towerDelayed: true },

{ id: "Council / Tower / WallOfMeat", towerDelayed: true },

{ id: "Council / Tower / WallOfBones", towerDelayed: true },

{ id: "Council / Tower / Shadow", towerDelayed: true },
{ id: "Council / Tower / Mirror", towerDelayed: true },
{ id: "Council / Tower / NaughtyBoss", towerDelayed: true },

{ id: "Absorbs / Hole in Sky" },
{ id: "Absorbs / Canadia" },
{ id: "Absorbs / Knoll" },
{ id: "Absorbs / Gnomads" },
{ id: "Absorbs / Palin" },
{ id: "Absorbs / Irate Mariachi" },
{ id: "Council / Tower / Keys / Heroes", towerDelayed: true }];


var QuestRegistry = /*#__PURE__*/function () {


  function QuestRegistry() {QuestRegistry_classCallCheck(this, QuestRegistry);QuestRegistry_defineProperty(this, "map", new Map());
    this.addInfo(new QuestCouncil());
    this.addInfo(new QuestCar());
    this.addInfo(new QuestManorLights());
    this.addInfo(new QuestsCustom());
    this.addInfo(new QuestManor());

    var ordered = this.getQuestOrder();var _iterator = QuestRegistry_createForOfIteratorHelper(

      this.map.keys()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var type = _step.value;
        if (ordered.includes(type)) {
          continue;
        }

        if (this.map.get(type).level() == -1) {
          continue;
        }

        (0,external_kolmafia_.print)(
        "DEBUG: Quests registry priority order does not contain: " + type,
        "gray");

      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = QuestRegistry_createForOfIteratorHelper(

      QuestTypeArray),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _type = _step2.value;
        if (this.map.has(_type) || !GreySettings_GreySettings.greyDebug) {
          continue;
        }

        if (_type.includes("Council / Tower / Keys / Heroes /")) {
          continue;
        }

        if (
        GreySettings_GreySettings.shouldAvoidTowerRequirements() &&
        !GreySettings_GreySettings.greyReachedTower &&
        QuestRegistry.isTowerDelayed(_type))
        {
          continue;
        }

        (0,external_kolmafia_.print)(
        "ERROR! No quest registered for the quest id '" + _type + "'",
        "red");

      }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
  }QuestRegistry_createClass(QuestRegistry, [{ key: "addInfo", value:

    function addInfo(questInfo) {
      var id = questInfo.getId();

      if (id == null) {
        throw "Null quest id found!";
      }

      if (this.map.has(id)) {
        throw "Map already contains the quest '" + id + "'";
      }

      if (
      GreySettings_GreySettings.shouldAvoidTowerRequirements() &&
      !GreySettings_GreySettings.greyReachedTower &&
      QuestRegistry.isTowerDelayed(questInfo.getId()))
      {
        return;
      }

      this.map.set(id, questInfo);
      // TODO Add to map

      if (questInfo.getChildren != null) {var _iterator3 = QuestRegistry_createForOfIteratorHelper(
          questInfo.getChildren()),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var child = _step3.value;
            this.addInfo(child);
          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
      }
    } }, { key: "getQuestOrder", value:

    function getQuestOrder() {
      var ordered = [].concat(order).
      filter(function (order) {return order.testValid == null || order.testValid();}).
      map(function (order) {return order.id;});

      return ordered.filter(function (q, index) {return ordered.indexOf(q) == index;});
    } }, { key: "getQuestsInOrder", value:

    function getQuestsInOrder() {
      var quests = [];var _iterator4 = QuestRegistry_createForOfIteratorHelper(

        this.getQuestOrder()),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var questType = _step4.value;
          var info = this.map.get(questType);

          if (info == null) {
            continue;
          }

          quests.push(info);
        }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

      return quests;
    } }], [{ key: "isTowerDelayed", value:

    function isTowerDelayed(questType) {
      return (
        order.find(function (q) {return q.id == questType && q.towerDelayed == true;}) != null);

    } }]);return QuestRegistry;}();
;// CONCATENATED MODULE: ./src/GreyChooser.ts
function GreyChooser_typeof(obj) {"@babel/helpers - typeof";return GreyChooser_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyChooser_typeof(obj);}function GreyChooser_toConsumableArray(arr) {return GreyChooser_arrayWithoutHoles(arr) || GreyChooser_iterableToArray(arr) || GreyChooser_unsupportedIterableToArray(arr) || GreyChooser_nonIterableSpread();}function GreyChooser_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyChooser_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function GreyChooser_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return GreyChooser_arrayLikeToArray(arr);}function GreyChooser_slicedToArray(arr, i) {return GreyChooser_arrayWithHoles(arr) || GreyChooser_iterableToArrayLimit(arr, i) || GreyChooser_unsupportedIterableToArray(arr, i) || GreyChooser_nonIterableRest();}function GreyChooser_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyChooser_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyChooser_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyChooser_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyChooser_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyChooser_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyChooser_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyChooser_arrayLikeToArray(o, minLen);}function GreyChooser_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyChooser_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyChooser_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyChooser_toPropertyKey(descriptor.key), descriptor);}}function GreyChooser_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyChooser_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyChooser_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyChooser_defineProperty(obj, key, value) {key = GreyChooser_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyChooser_toPropertyKey(arg) {var key = GreyChooser_toPrimitive(arg, "string");return GreyChooser_typeof(key) === "symbol" ? key : String(key);}function GreyChooser_toPrimitive(input, hint) {if (GreyChooser_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyChooser_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}













var OrbStatus;(function (OrbStatus) {OrbStatus[OrbStatus["READY"] = 0] = "READY";OrbStatus[OrbStatus["NOT_SET"] = 1] = "NOT_SET";OrbStatus[OrbStatus["IGNORED"] = 2] = "IGNORED";OrbStatus[OrbStatus["NEEDS_RESET"] = 3] = "NEEDS_RESET";})(OrbStatus || (OrbStatus = {}));






var ConsiderPriority;











// When we'd hit an absorb that's useless to us
(function (ConsiderPriority) {ConsiderPriority[ConsiderPriority["INSISTS_ON_BEING_DONE"] = 0] = "INSISTS_ON_BEING_DONE";ConsiderPriority[ConsiderPriority["MUST_BE_DONE"] = 1] = "MUST_BE_DONE";ConsiderPriority[ConsiderPriority["ORB_ABSORB"] = 2] = "ORB_ABSORB";ConsiderPriority[ConsiderPriority["ORB_ABSORB_OTHER"] = 3] = "ORB_ABSORB_OTHER";ConsiderPriority[ConsiderPriority["ORB_OTHER"] = 4] = "ORB_OTHER";ConsiderPriority[ConsiderPriority["RANDOM_ABSORB"] = 5] = "RANDOM_ABSORB";ConsiderPriority[ConsiderPriority["RANDOM_COMBAT_ABSORB"] = 6] = "RANDOM_COMBAT_ABSORB";ConsiderPriority[ConsiderPriority["NOTHING_SPECIAL"] = 7] = "NOTHING_SPECIAL";ConsiderPriority[ConsiderPriority["BAD_COMBAT_RATE"] = 8] = "BAD_COMBAT_RATE";ConsiderPriority[ConsiderPriority["BAD_PREDICTION"] = 9] = "BAD_PREDICTION";ConsiderPriority[ConsiderPriority["BAD_ABSORB"] = 10] = "BAD_ABSORB";ConsiderPriority[ConsiderPriority["BAD_ABSORB_PREDICTION"] = 11] = "BAD_ABSORB_PREDICTION";})(ConsiderPriority || (ConsiderPriority = {}));













var crystalBall = external_kolmafia_.Item.get("miniature crystal ball");

var AdventureFinder = /*#__PURE__*/function () {











  function AdventureFinder() {GreyChooser_classCallCheck(this, AdventureFinder);GreyChooser_defineProperty(this, "registry", new QuestRegistry());GreyChooser_defineProperty(this, "defeated", void 0);GreyChooser_defineProperty(this, "allQuests", void 0);GreyChooser_defineProperty(this, "viableQuests", void 0);GreyChooser_defineProperty(this, "absorbs", new GreyAbsorber_AbsorbsProvider());GreyChooser_defineProperty(this, "goose", external_kolmafia_.Familiar.get("Grey Goose"));GreyChooser_defineProperty(this, "questLocations", void 0);GreyChooser_defineProperty(this, "possibleAdventures", void 0);GreyChooser_defineProperty(this, "path", void 0);
    AdventureFinder.instance = this;
  }GreyChooser_createClass(AdventureFinder, [{ key: "calculatePath", value:









    function calculatePath() {
      var simmedPath = new TaskManager_FigureOutPath().getPaths(this.getAllRawQuests());

      if (simmedPath == null) {
        if (this.path != null) {
          (0,external_kolmafia_.print)("Failed to calculate a path.. Staying on current path..", "gray");
        }

        return;
      }

      this.path = simmedPath;
      this.path.printInfo();
    } }, { key: "getAllRawQuests", value:

    function getAllRawQuests() {
      return this.registry.getQuestsInOrder();
    } }, { key: "setPossibleAdventures", value:

    function setPossibleAdventures() {var _this = this;
      this.possibleAdventures = [];var _iterator = GreyChooser_createForOfIteratorHelper(

        this.viableQuests),_step;try {var _loop = function _loop() {var _step$value = GreyChooser_slicedToArray(_step.value, 2),quest = _step$value[0],path = _step$value[1];
          var adventure = quest.run(path);
          var details;

          if (quest.getAbsorbs != null) {
            var absorbs = quest.getAbsorbs();

            if (absorbs.length > 0) {
              details = _this.absorbs.getAdventuresByAbsorbs(
              _this.defeated,
              absorbs,
              true);

            }
          }

          if (details == null && adventure.location != null) {
            details = _this.absorbs.getAdventuresInLocation(
            _this.defeated,
            adventure.location,
            true);

          }

          if (
          (details != null || adventure.olfaction != null) &&
          adventure.orbs == null)
          {
            adventure.orbs = [];
          }

          if (adventure.olfaction != null) {var _iterator3 = GreyChooser_createForOfIteratorHelper(
              adventure.olfaction),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var m = _step3.value;
                if (adventure.orbs.includes(m)) {
                  continue;
                }

                adventure.orbs.push(m);
              }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
          }

          if (details != null) {var _iterator4 = GreyChooser_createForOfIteratorHelper(
              details.monsters),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var _m = _step4.value;
                if (adventure.orbs.includes(_m)) {
                  continue;
                }

                adventure.orbs.push(_m);
              }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}
          }

          var noDisruptiveResources =
          path == null ||
          [
          ResourceTypes/* ResourceCategory.FAXER */.s6.FAXER,
          ResourceTypes/* ResourceCategory.COPIER */.s6.COPIER,
          ResourceTypes/* ResourceCategory.OLFACT_COPIER */.s6.OLFACT_COPIER,
          ResourceTypes/* ResourceCategory.CARGO_SHORTS */.s6.CARGO_SHORTS].
          find(function (r) {return path.resourceUsed.includes(r) || path.canUse(r);}) == null;
          var canFreeRun =
          noDisruptiveResources &&
          adventure.mayFreeRun !== false &&
          adventure.forcedFight == null;

          var adv = {
            quest: quest,
            path: path,
            locationInfo: details,
            adventure: adventure,
            orbStatus: OrbStatus.IGNORED,
            status: quest.status(path),
            considerPriority:
            quest.mustBeDone != null && quest.mustBeDone() ?
            quest.mustBeDone(true) ?
            ConsiderPriority.INSISTS_ON_BEING_DONE :
            ConsiderPriority.MUST_BE_DONE :
            null,
            mayFreeRun: canFreeRun,
            freeRun: function freeRun(monster, settings) {
              // Never run from a boss, or a free fight
              if (
              !canFreeRun ||
              monster.boss ||
              !monster.copyable ||
              monster.attributes.includes("FREE"))
              {
                return false;
              }

              // Never run from something we're trying to hit with orb, or oflact
              if (
              adventure.orbs != null && adventure.orbs.includes(monster) ||
              adventure.olfaction != null &&
              adventure.olfaction.includes(monster))
              {
                return false;
              }

              // Never run from something we're deliberately not banishing
              if (
              settings != null &&
              settings.dontBanishThese != null &&
              settings.dontBanishThese.includes(monster))
              {
                return false;
              }

              // Always run from something we're deliberately banishing
              if (
              settings != null &&
              settings.banishThese != null &&
              settings.banishThese.includes(monster))
              {
                return true;
              }

              // If the adventure hasn't decided to free run or not, never free run
              if (adventure.freeRun == null) {
                return false;
              }

              // If the adventure says not to free run, don't
              if (!adventure.freeRun(monster, settings)) {
                return false;
              }

              return _this.shouldFreeRun(monster);
            }
          };

          _this.possibleAdventures.push(adv);
        };for (_iterator.s(); !(_step = _iterator.n()).done;) {_loop();}} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      var nonQuests = this.absorbs.getExtraAdventures(this.defeated, true);

      nonQuests.sort(function (_ref, _ref2) {var _ref3 = GreyChooser_slicedToArray(_ref, 2),a1 = _ref3[1];var _ref4 = GreyChooser_slicedToArray(_ref2, 2),a2 = _ref4[1];return a2.weight - a1.weight;});var _iterator2 = GreyChooser_createForOfIteratorHelper(

        nonQuests),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _step2$value = GreyChooser_slicedToArray(_step2.value, 2),loc = _step2$value[0],details = _step2$value[1];
          if (
          this.questLocations.includes(loc) ||
          !canGreyAdventure(loc) ||
          GreyChooser_toConsumableArray(details.skills.keys()).find(function (s) {return (
              _this.absorbs.getMustHaveSkills().has(s.skill));}) ==
          null &&
          details.expectedTurnsProfit < 0)
          {
            continue;
          }

          if (loc == external_kolmafia_.Location.get("Oil Peak")) {
            continue;
          }

          var adv = {
            quest: null,
            path: null,
            locationInfo: details,
            adventure: this.getNonQuest(loc, details),
            orbStatus: OrbStatus.IGNORED,
            status: QuestStatus.READY,
            considerPriority: null,
            mayFreeRun: true,
            freeRun: function freeRun(monster) {
              return _this.shouldFreeRun(monster);
            }
          };

          this.possibleAdventures.push(adv);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      this.adjustAdventures();
    } }, { key: "shouldFreeRun", value:

    function shouldFreeRun(monster) {
      // Never run from a boss, or a free fight
      if (
      monster.boss ||
      !monster.copyable ||
      monster.attributes.includes("FREE"))
      {
        return false;
      }

      var absorb = GreyAbsorber_AbsorbsProvider.getAbsorb(monster);

      // If we absorb nothing from this, free run
      if (absorb == null) {
        return true;
      }

      // If we get adventures from this
      if (absorb.adventures > 0) {
        // Only free run if we can't absorb
        return this.defeated.get(monster) == Reabsorbed.REABSORBED;
      }

      if (this.defeated.has(monster)) {
        return true;
      }

      if (absorb.skill != null && this.absorbs.shouldGrabSkill(absorb.skill)) {
        return false;
      }

      // Free run if we've taken the absorb
      return absorb.hp + absorb.mp + ((0,external_kolmafia_.myLevel)() < 10 ? absorb.mox : 0) == 0;
    } }, { key: "adjustAdventures", value:

    function adjustAdventures() {var _this2 = this;
      var absorbTime = this.hasEnoughGooseWeight();

      if ((0,external_kolmafia_.availableAmount)(crystalBall) > 0) {
        var preds = currentPredictions();

        var advsWithPredictions = this.possibleAdventures.filter(
        function (a) {return (
            a.adventure.orbs != null &&
            a.adventure.orbs.length > 0 &&
            preds.has(a.adventure.location));});


        // If we have no adventures that like their predictions
        // And an adventure that dislikes their prediction..
        if (
        advsWithPredictions.find(function (a) {return (
            a.adventure.orbs.includes(preds.get(a.adventure.location)));}) ==
        null &&
        advsWithPredictions.find(
        function (a) {return !a.adventure.orbs.includes(preds.get(a.adventure.location));}) !=
        null)
        {
          doToasterGaze();
          preds = currentPredictions();
        }var _iterator5 = GreyChooser_createForOfIteratorHelper(

          this.possibleAdventures),_step5;try {var _loop2 = function _loop2() {var adv = _step5.value;
            if (
            adv.adventure.location == null ||
            adv.adventure.orbs == null ||
            adv.adventure.orbs.length == 0)
            {return "continue";

            }

            if (
            adv.adventure.forcedFight != null &&
            adv.adventure.forcedFight[0] == 0)
            {return "continue";

            }

            var appear = (0,external_kolmafia_.appearanceRates)(adv.adventure.location);
            var couldAppear = adv.adventure.orbs.filter(
            function (m) {return appear[m.name] > 0;});


            if (couldAppear.length == 0) {return "continue";

            }

            var prediction = preds.get(adv.adventure.location);

            if (prediction == null) {
              adv.orbStatus = OrbStatus.NOT_SET;
            } else if (adv.adventure.orbs.includes(prediction)) {
              adv.orbStatus = OrbStatus.READY;
              adv.mayFreeRun = false;

              var absorb = _this2.absorbs.getAbsorb(prediction);
              var advAbsorb = absorb != null && absorb.adventures > 0;
              var defeat = _this2.defeated.get(prediction);

              if (
              advAbsorb && (
              defeat == null ||
              defeat == Reabsorbed.NOT_REABSORBED && absorbTime))
              {
                if (defeat == Reabsorbed.NOT_REABSORBED || absorbTime) {
                  adv.considerPriority = ConsiderPriority.ORB_ABSORB;
                } else {
                  adv.considerPriority = ConsiderPriority.BAD_ABSORB_PREDICTION;
                }
              } else if (
              absorb != null &&
              absorb.skill != null &&
              _this2.absorbs.shouldGrabSkill(absorb.skill) &&
              defeat == null)
              {
                adv.considerPriority = ConsiderPriority.ORB_ABSORB_OTHER;
              } else {
                adv.considerPriority = ConsiderPriority.ORB_OTHER;
              }
            } else {
              adv.orbStatus = OrbStatus.NEEDS_RESET;
            }
          };for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var _ret = _loop2();if (_ret === "continue") continue;}} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}
      }

      var hasBlessing =
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Brother Corsican's Blessing")) +
      (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("A Girl Named Sue")) >
      0;var _iterator6 = GreyChooser_createForOfIteratorHelper(

        this.possibleAdventures),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var adv = _step6.value;
          if (adv.considerPriority != null) {
            continue;
          }

          var wantsAbsorb =
          adv.locationInfo != null && (
          adv.locationInfo.turnsToGain > 0 ||
          GreyChooser_toConsumableArray(adv.locationInfo.skills).find(
          function (_ref5) {var _ref6 = GreyChooser_slicedToArray(_ref5, 1),a = _ref6[0];return (
              !(0,external_kolmafia_.haveSkill)(a.skill) && _this2.absorbs.shouldGrabSkill(a.skill));}) !=
          null);

          // If we might hit an absorb we can't reabsorb
          if (
          adv.locationInfo != null &&
          adv.locationInfo.reabsorb &&
          !absorbTime)
          {
            adv.considerPriority = ConsiderPriority.BAD_ABSORB;
            continue;
          }

          if (adv.orbStatus == OrbStatus.NEEDS_RESET) {
            adv.considerPriority = ConsiderPriority.BAD_PREDICTION;
            continue;
          }

          var outfit = adv.adventure.outfit;

          // If we want to run -/+ combat but we're running the opposite
          if (
          outfit != null &&
          outfit != GreyOutfit.IGNORE_OUTFIT && (
          outfit.minusCombatWeight > 0 && hasCombatSkillActive() ||
          outfit.plusCombatWeight > 0 &&
          adv.quest != null &&
          hasNonCombatSkillActive()))
          {
            adv.considerPriority = ConsiderPriority.BAD_COMBAT_RATE;
            continue;
          }

          if (wantsAbsorb) {
            if (adv.adventure.location == null) {
              adv.considerPriority = ConsiderPriority.RANDOM_ABSORB;
              continue;
            }

            // We should run combat if combat percent is below 100
            // Or our outfit exists and wants to run combat
            // And the location isn't black forest, or if it is, we don't have the skill
            var shouldRunCombat =
            adv.adventure.location.combatPercent < 100 &&
            adv.adventure.outfit == null ||
            adv.adventure.outfit != null &&
            adv.adventure.outfit != GreyOutfit.IGNORE_OUTFIT &&
            adv.adventure.outfit.plusCombatWeight > 0;

            if (shouldRunCombat && hasNonCombatSkillActive()) {
              adv.considerPriority = ConsiderPriority.RANDOM_COMBAT_ABSORB;
            } else {
              adv.considerPriority = ConsiderPriority.RANDOM_ABSORB;
            }

            continue;
          }

          adv.considerPriority = ConsiderPriority.NOTHING_SPECIAL;
        }} catch (err) {_iterator6.e(err);} finally {_iterator6.f();}var _iterator7 = GreyChooser_createForOfIteratorHelper(

        this.possibleAdventures),_step7;try {for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {var _adv = _step7.value;
          _adv.status = this.getModifiedStatus(
          _adv.status,
          _adv.adventure,
          hasBlessing);

        }} catch (err) {_iterator7.e(err);} finally {_iterator7.f();}
    } }, { key: "getNonQuest", value:

    function getNonQuest(loc, adv) {
      var outfit = new GreyOutfit();

      if (loc.combatPercent < 100) {
        outfit.setPlusCombat();
      }

      var settings = new AdventureSettings();
      settings.nonquest = true;
      adv.monsters.forEach(function (m) {return settings.addNoBanish(m);});

      return {
        outfit: outfit,
        location: loc,
        orbs: adv.monsters,
        run: function run() {
          // We don't want it casting +combat skills
          greyAdv(loc, null, settings);
        }
      };
    } }, { key: "doAllQuests", value:

    function doAllQuests() {var _this3 = this;
      this.allQuests = [];

      var tryAdd = function tryAdd(q, path) {
        if (q.level() < 0) {
          return;
        }
        _this3.allQuests.push([q, path]);
      };

      this.path.thisPath.forEach(function (_ref7) {var _ref8 = GreyChooser_slicedToArray(_ref7, 2),quest = _ref8[0],path = _ref8[1];
        tryAdd(quest, path);
      });
    } }, { key: "getDoableQuests", value:

    function getDoableQuests() {var allQuests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var quests = [];

      var tryAdd = function tryAdd(q, path) {
        if (!allQuests && q.level() > (0,external_kolmafia_.myLevel)() || q.level() < 0) {
          return;
        }

        if (
        !allQuests &&
        q.level() != 1 &&
        q.level() * ((0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Infinite Loop")) ? 1 : 6) >
        (0,external_kolmafia_.myBasestat)(external_kolmafia_.Stat.get("Moxie")))
        {
          return;
        }

        var status = q.status(path);

        if (
        !allQuests && (
        status == QuestStatus.COMPLETED || status == QuestStatus.NOT_READY))
        {
          return;
        }

        quests.push([q, path]);
      };

      this.allQuests.forEach(function (_ref9) {var _ref10 = GreyChooser_slicedToArray(_ref9, 2),quest = _ref10[0],path = _ref10[1];
        tryAdd(quest, path);
      });

      return quests;
    } }, { key: "start", value:

    function start() {var allQuests = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.setPreAbsorbs();

      if (this.path.isRecalculateNeeded()) {
        this.calculatePath();
        this.setPreAbsorbs();
      }

      this.doAllQuests();
      this.viableQuests = this.getDoableQuests(allQuests);
      this.setAbsorbs();
      this.defeated = this.absorbs.getAbsorbedMonstersFromInstance();
      this.setQuestLocations(allQuests);
      this.setPossibleAdventures();
    } }, { key: "setPreAbsorbs", value:

    function setPreAbsorbs() {
      var defeated = this.absorbs.getAbsorbedMonstersFromInstance();var _iterator8 = GreyChooser_createForOfIteratorHelper(

        this.path.thisPath),_step8;try {for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {var _step8$value = GreyChooser_slicedToArray(_step8.value, 1),quest = _step8$value[0];
          quest.toAbsorb = [];var _iterator9 = GreyChooser_createForOfIteratorHelper(

            quest.getLocations()),_step9;try {for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {var _quest$toAbsorb;var loc = _step9.value;
              var result = this.absorbs.getAdventuresInLocation(defeated, loc);

              if (result == null) {
                continue;
              }

              (_quest$toAbsorb = quest.toAbsorb).push.apply(_quest$toAbsorb, GreyChooser_toConsumableArray(result.monsters));
            }} catch (err) {_iterator9.e(err);} finally {_iterator9.f();}
        }} catch (err) {_iterator8.e(err);} finally {_iterator8.f();}
    } }, { key: "setAbsorbs", value:

    function setAbsorbs() {
      var defeated = this.absorbs.getAbsorbedMonstersFromInstance();var _iterator10 = GreyChooser_createForOfIteratorHelper(

        this.path.thisPath),_step10;try {for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {var _step10$value = GreyChooser_slicedToArray(_step10.value, 2),quest = _step10$value[0],path = _step10$value[1];
          try {
            if (
            quest.status(path) == QuestStatus.NOT_READY ||
            quest.status(path) == QuestStatus.COMPLETED)
            {
              continue;
            }

            var run = quest.run(path);

            if (run.location == null) {
              continue;
            }

            var result = this.absorbs.getAdventuresInLocation(
            defeated,
            run.location);


            quest.toAbsorb = result == null ? [] : result.monsters;
          } catch (e) {
            (0,external_kolmafia_.print)("Errored while trying to set absorbs on " + quest.getId());
            throw e;
          }
        }} catch (err) {_iterator10.e(err);} finally {_iterator10.f();}
    } }, { key: "setQuestLocations", value:

    function setQuestLocations(allQuests) {
      this.questLocations = [];var _iterator11 = GreyChooser_createForOfIteratorHelper(

        this.path.thisPath),_step11;try {for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {var _this$questLocations;var _step11$value = GreyChooser_slicedToArray(_step11.value, 2),quest = _step11$value[0],path = _step11$value[1];
          if (!allQuests && quest.status(path) == QuestStatus.COMPLETED) {
            continue;
          }

          (_this$questLocations = this.questLocations).push.apply(_this$questLocations, GreyChooser_toConsumableArray(quest.getLocations()));
        }} catch (err) {_iterator11.e(err);} finally {_iterator11.f();}
    } }, { key: "hasEnoughGooseWeight", value:

    function hasEnoughGooseWeight() {
      return (0,external_kolmafia_.familiarWeight)(this.goose) >= 6;
    } }, { key: "getModifiedStatus", value:

    function getModifiedStatus(
    status,
    runned,
    hasBlessing)
    {
      if (status != QuestStatus.READY) {
        return status;
      }

      if ((0,external_kolmafia_.getProperty)("autumnatonQuestLocation") != "") {
        var loc = external_kolmafia_.Location.get((0,external_kolmafia_.getProperty)("autumnatonQuestLocation"));

        if (runned.location == loc) {
          status = QuestStatus.FASTER_LATER;
        }
      }

      var outfit = runned.outfit;

      if (outfit != null) {
        if (outfit.minusCombatWeight > 0 && hasBlessing) {
          status = QuestStatus.FASTER_LATER;
        } else if ((0,external_kolmafia_.myMp)() < 50) {
          if (outfit.minusCombatWeight > 0 && !hasNonCombatSkillActive()) {
            status = QuestStatus.FASTER_LATER;
          } else if (
          outfit.plusCombatWeight > 0 &&
          (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Piezoelectric Honk")) &&
          !hasCombatSkillActive())
          {
            status = QuestStatus.FASTER_LATER;
          }
        }
      }

      return status;
    } }, { key: "getRecommendedFamiliars", value:

    function getRecommendedFamiliars() {
      return this.path.thisPath.
      map(function (_ref11) {var _ref12 = GreyChooser_slicedToArray(_ref11, 2),q = _ref12[0],path = _ref12[1];
        if (q.hasFamiliarRecommendation == null) {
          return null;
        }

        var fam = q.hasFamiliarRecommendation();

        if (fam == null) {
          return null;
        }

        var status = q.status(path);

        if (status == QuestStatus.COMPLETED) {
          return null;
        }

        return fam;
      }).
      filter(function (f) {return f != null;});
    } }, { key: "getQuestColor", value:

    function getQuestColor(status) {
      switch (status) {
        case QuestStatus.COMPLETED:
          return "green";
        case QuestStatus.FASTER_LATER:
          return "gray";
        case QuestStatus.NOT_READY:
          return "red";
        case QuestStatus.READY:
          return "green";}

    } }, { key: "printStatus", value:

    function printStatus(quests) {var _iterator12 = GreyChooser_createForOfIteratorHelper(
        quests),_step12;try {for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {var adv = _step12.value;
          var status = adv.status;
          var id =
          adv.quest == null ?
          "Non-Quest / " + adv.adventure.location :
          adv.quest.getId();

          var line =
          "<u>" +
          id +
          "</u>: " +
          doColor(QuestStatus[status], this.getQuestColor(status)) +
          " - " +
          ConsiderPriority[adv.considerPriority];

          (0,external_kolmafia_.printHtml)(line, true);
        }} catch (err) {_iterator12.e(err);} finally {_iterator12.f();}
    } }, { key: "findPrimedVisit", value:

    function findPrimedVisit() {
      var primed = getPrimedResource();

      if (primed == null) {
        return null;
      }

      if (!primed.resource.primed()) {
        resetPrimedResource();
        return null;
      }

      var status = primed.quest.status(primed.path);

      if (status != QuestStatus.READY && status != QuestStatus.FASTER_LATER) {
        throw (
          "Expected a quest status of ready or faster later on " +
          primed.quest.getId() +
          " which was primed for a resource " +
          primed.resource.name);

      }

      var adv = primed.quest.run(primed.path);
      var run = adv.run;

      adv.run = function () {
        run();
        primed.resource.unprime();
        resetPrimedResource();
      };

      var toReturn = {
        quest: primed.quest,
        path: primed.path,
        locationInfo: null,
        adventure: adv,
        status: status,
        orbStatus: OrbStatus.IGNORED,
        considerPriority: ConsiderPriority.INSISTS_ON_BEING_DONE,
        mayFreeRun: false,
        freeRun: function freeRun() {return false;}
      };

      return toReturn;
    }

    // Try setup something so we can prime this visit
  }, { key: "tryPrime", value: function tryPrime(adventure) {
      if (adventure.quest == null) {
        return;
      }

      // If this quest has an opinion on being primed
      if (adventure.quest.canAcceptPrimes != null) {
        // If this quest doesn't want to be primed
        if (!adventure.quest.canAcceptPrimes(adventure.quest)) {
          return;
        }
      } else {
        // Quest has no opinion on being primed, so decide it for ourselves
        // If this quest is one that is an absorb potential, or will be using a crystal ball
        if (
        adventure.orbStatus == OrbStatus.READY ||
        adventure.orbStatus == OrbStatus.NOT_SET)
        {
          return;
        }

        // We don't want to prime on something that might demand to be done later
        if (adventure.quest.mustBeDone != null) {
          return;
        }

        // If this quest is something that wants a prime itself
        if (adventure.quest.attemptPrime != null) {
          return;
        }
      }

      // We don't want to prime on something that would be potentially messy with outfit
      var outfit = adventure.adventure.outfit;

      if (
      outfit != null && (
      outfit == GreyOutfit.IGNORE_OUTFIT ||
      //outfit.plusCombatWeight > 0 ||
      //  outfit.minusCombatWeight > 0 ||
      outfit.extra.find(function (e) {return e.startsWith("+equip");}) != null))
      {
        return;
      }

      // So! This adventure is one we can prime on!
      var _iterator13 = GreyChooser_createForOfIteratorHelper(
        this.path.thisPath),_step13;try {for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {var _step13$value = GreyChooser_slicedToArray(_step13.value, 2),quest = _step13$value[0],path = _step13$value[1];
          if (quest == null || path == null) {
            continue;
          }

          if (quest.attemptPrime == null) {
            continue;
          }

          var status = quest.status(path);

          if (status == QuestStatus.COMPLETED) {
            continue;
          }

          var hasPrimed = quest.attemptPrime(path);

          // If this did not want to prime a resource
          if (!hasPrimed) {
            if (getPrimedResource() != null) {
              throw (
                quest.getId() +
                " claimed it didn't want to prime, but primed anyways");

            }
            continue;
          }

          var primed = getPrimedResource();

          if (primed == null) {
            throw (
              quest.getId() +
              " claimed to have prepared a primed resource, but nothing was set.");

          }

          (0,external_kolmafia_.print)(
          "This quest will attempt to prime " +
          ResourceTypes/* ResourceCategory */.s6[primed.resource.type] +
          " (" +
          primed.resource.name +
          ") on this adventure as requested by " +
          primed.quest.getId(),
          "blue");

          return;
        }} catch (err) {_iterator13.e(err);} finally {_iterator13.f();}
    } }, { key: "findGoodVisit", value:

    function findGoodVisit() {
      var adv = this.findPrimedVisit();

      if (adv != null) {
        return adv;
      }

      var abortNotEnoughAdventures =
      (0,external_kolmafia_.myAdventures)() <= GreySettings_GreySettings.adventuresBeforeAbort;
      var generateAdventuresOrAbort =
      (0,external_kolmafia_.myAdventures)() <= GreySettings_GreySettings.adventuresGenerateIfPossibleOrAbort;

      if (abortNotEnoughAdventures) {
        (0,external_kolmafia_.print)(
        "We don't have enough adventures to feel comfortable, aborting..",
        "red");

        return;
      }

      var toNum = function toNum(status) {return (
          status == OrbStatus.IGNORED ? OrbStatus.NOT_SET : status);};
      var compareFreeRuns = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_navelRunaways")) > 0;
      var levelingGoose = (0,external_kolmafia_.familiarWeight)(this.goose) >= 6;
      var prioritize = [
      "Council / War / Start",
      "Council / War / Frat Outfit",
      "Skills / MPRegen",
      "Skills / ScalingItem",
      "Council / MacGruffin / Black",
      "Council / War / Filthworms"];

      var prioritize2 = ["Manor / Kitchen"];
      // If we're using CMC and have consults remaining
      var sortIndoorLocations =
      GreySettings_GreySettings.greySwitchWorkshed != "" &&
      (0,external_kolmafia_.getWorkshed)() == external_kolmafia_.Item.get("Cold Medicine Cabinet") &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_coldMedicineConsults")) < 5;
      // If indoor locations now would be wasted
      var avoidIndoors =
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_nextColdMedicineConsult")) - (0,external_kolmafia_.totalTurnsPlayed)() >= 10;
      var prioritizeIndoors =
      !avoidIndoors &&
      (0,external_kolmafia_.getProperty)("lastCombatEnvironments").
      split("").
      filter(function (s) {return s == "i";}).length > 4;

      this.possibleAdventures.sort(function (a1, a2) {var _a1$quest, _a2$quest, _a1$quest2, _a2$quest2;
        if (a1.considerPriority != a2.considerPriority) {
          return a1.considerPriority - a2.considerPriority;
        }

        if (toNum(a1.orbStatus) != toNum(a2.orbStatus)) {
          return a1.orbStatus - a2.orbStatus;
        }

        var p1 = prioritize.indexOf((_a1$quest = a1.quest) === null || _a1$quest === void 0 ? void 0 : _a1$quest.getId());
        var p2 = prioritize.indexOf((_a2$quest = a2.quest) === null || _a2$quest === void 0 ? void 0 : _a2$quest.getId());

        // Where the lower the index, the less we prioritize it
        if (p1 != p2) {
          return p2 - p1;
        }

        var banished1 =
        a1.adventure.location != null ?
        Object.keys((0,external_kolmafia_.getLocationMonsters)(a1.adventure.location)).filter(
        function (m) {return (0,external_kolmafia_.isBanished)(external_kolmafia_.Monster.get(m));}).
        length :
        0;
        var banished2 =
        a2.adventure.location != null ?
        Object.keys((0,external_kolmafia_.getLocationMonsters)(a2.adventure.location)).filter(
        function (m) {return (0,external_kolmafia_.isBanished)(external_kolmafia_.Monster.get(m));}).
        length :
        0;

        // If we've done banishes in one location..
        if (banished1 != banished2) {
          // We want the location with the most banishes to be prioritized
          return banished2 - banished1;
        }

        // If we're prioritizing indoors vs outdoors for w/e reason
        if (
        sortIndoorLocations &&
        a1.adventure.location != null &&
        a2.adventure.location != null)
        {
          var e1 = a1.adventure.location.environment;
          var e2 = a1.adventure.location.environment;

          if (e1 != e2 && (e1 == "indoor" || e2 == "indoor")) {
            // If we want to avoid indoors, then indoor locations are given a bad score
            if (avoidIndoors) {
              return e1 == "indoor" ? 1 : -1;
              // If we want to prioritize indoors, then indoor locations are given a good score
            } else if (prioritizeIndoors) {
              return e1 == "indoor" ? -1 : 1;
            }
          }
        }

        if (a1.quest == null != (a2.quest == null)) {
          return a1.quest == null ? 1 : -1;
        }

        if (a1.status != a2.status) {
          return a1.status - a2.status;
        }

        p1 = prioritize2.includes((_a1$quest2 = a1.quest) === null || _a1$quest2 === void 0 ? void 0 : _a1$quest2.getId()) ? -1 : 1;
        p2 = prioritize2.includes((_a2$quest2 = a2.quest) === null || _a2$quest2 === void 0 ? void 0 : _a2$quest2.getId()) ? -1 : 1;

        if (p1 != p2) {
          return p1 - p2;
        }

        if (a1.adventure.location == null != (a2.adventure.location == null)) {
          return a1.adventure.location == null ? -1 : 1;
        }

        if (compareFreeRuns && a1.mayFreeRun != a2.mayFreeRun) {
          // If we're trying to level our goose, we want to prioritize places we're not allowed to free run in

          if (levelingGoose) {
            return a1.mayFreeRun ? 1 : -1;
          }

          return a1.mayFreeRun ? -1 : 1;
        }

        return 0;
      });

      var mustBeDone = this.possibleAdventures.
      filter(
      function (adv) {return (
          adv.quest != null &&
          adv.quest.mustBeDone != null &&
          adv.quest.mustBeDone(false));}).

      map(function (a) {return [a, a.quest.free != null && a.quest.free() ? 0 : 1];});

      if (mustBeDone.length > 0) {
        mustBeDone.sort(function (_ref13, _ref14) {var _ref15 = GreyChooser_slicedToArray(_ref13, 2),m1 = _ref15[1];var _ref16 = GreyChooser_slicedToArray(_ref14, 2),m2 = _ref16[1];
          return m1 - m2;
        });

        if (
        mustBeDone.length > 1 &&
        mustBeDone[0][1] > 0 &&
        mustBeDone.find(function (_ref17) {var _ref18 = GreyChooser_slicedToArray(_ref17, 1),a = _ref18[0];return a.quest.mustBeDone(true);}) != null)
        {
          mustBeDone = mustBeDone.filter(function (_ref19) {var _ref20 = GreyChooser_slicedToArray(_ref19, 1),a = _ref20[0];return a.quest.mustBeDone(true);});
        }

        if (
        mustBeDone[0][1] > 0 &&
        mustBeDone.filter(function (_ref21) {var _ref22 = GreyChooser_slicedToArray(_ref21, 2),m = _ref22[1];return m > 0;}).length > 1)
        {
          (0,external_kolmafia_.print)(
          "Multiple quests demand to be done! " +
          mustBeDone.
          filter(function (_ref23) {var _ref24 = GreyChooser_slicedToArray(_ref23, 2),m = _ref24[1];return m > 0;}).
          map(function (a) {return a[0].quest.getId();}).
          join(", "),
          "red");

          (0,external_kolmafia_.print)("This is not a real error, but not that great either.", "red");
        }

        if (mustBeDone.length > 0) {
          return mustBeDone[0][0];
        }
      }

      if (generateAdventuresOrAbort && !this.hasEnoughGooseWeight()) {
        (0,external_kolmafia_.print)(
        "We need more adventures but we're not ready for a reabsorb..",
        "red");

        return;
      }

      if (this.possibleAdventures.length > 0) {
        var _adv2 = this.possibleAdventures[0];

        // If we don't want to go here.. Then consider our user friendly fam trainer!
        if (
        _adv2.considerPriority >= ConsiderPriority.BAD_ABSORB &&
        (0,external_kolmafia_.myMeat)() >= 1000 &&
        (0,external_kolmafia_.myAdventures)() >= 20)
        {
          return new EmergencyTrainer();
        }

        return this.possibleAdventures[0];
      }

      (0,external_kolmafia_.print)(
      "Failed to find any quests that are willing to run, and failed to find any non-quest locations willing to run.",
      "red");

      return null;
    } }], [{ key: "getPath", value: function getPath() {return AdventureFinder.instance.path;} }, { key: "recalculatePath", value: function recalculatePath() {AdventureFinder.instance.calculatePath();} }]);return AdventureFinder;}();GreyChooser_defineProperty(AdventureFinder, "instance", void 0);var


EmergencyTrainer = /*#__PURE__*/GreyChooser_createClass(function EmergencyTrainer() {GreyChooser_classCallCheck(this, EmergencyTrainer);GreyChooser_defineProperty(this, "locationInfo",
  null);GreyChooser_defineProperty(this, "adventure",
  {
    location: null,
    run: function run() {
      (0,external_kolmafia_.print)(
      "Oh gosh! Grey Goose underperforming? No worries! Emergency trainer is on the case! We're going to slam them into the cake arena, and they'll come out looking for a fight!",
      "blue");

      var fam = external_kolmafia_.Familiar.get("Grey Goose");
      (0,external_kolmafia_.useFamiliar)(fam);

      var chow = external_kolmafia_.Item.get("Ghost Dog Chow");

      if (
      (0,external_kolmafia_.itemAmount)(chow) > 0 &&
      (0,external_kolmafia_.historicalPrice)(chow) * 2 < GreySettings_GreySettings.greyValueOfAdventure)
      {
        (0,external_kolmafia_.print)("Oh gosh! Ghost Dog Chow is on the menu!", "blue");

        while ((0,external_kolmafia_.familiarWeight)(fam) < 6 && (0,external_kolmafia_.itemAmount)(chow) > 0) {
          (0,external_kolmafia_.use)(chow);
        }

        if ((0,external_kolmafia_.familiarWeight)(fam) >= 6) {
          return;
        }

        (0,external_kolmafia_.print)("Unfortunately Ghost Dog Chow wasn't enough!", "blue");
      }

      (0,external_kolmafia_.maximize)("familiar experience +familiar weight -tie", false);
      (0,external_kolmafia_.visitUrl)("arena.php");

      var turnsSpent = 0;

      while ((0,external_kolmafia_.familiarWeight)(fam) < 6) {
        if (turnsSpent >= 10) {
          throw "Spent 10 turns training grey goose, but no progress was made.";
        }

        var exp = fam.experience;

        turnsSpent++;
        (0,external_kolmafia_.cliExecute)("train turns 1");

        if (exp == fam.experience) {
          throw "Expected goose to have gained exp, it didn't.";
        }
      }
    }
  });GreyChooser_defineProperty(this, "path",
  null);GreyChooser_defineProperty(this, "quest",
  null);GreyChooser_defineProperty(this, "status",
  QuestStatus.READY);GreyChooser_defineProperty(this, "orbStatus",
  OrbStatus.IGNORED);GreyChooser_defineProperty(this, "considerPriority",
  ConsiderPriority.MUST_BE_DONE);GreyChooser_defineProperty(this, "mayFreeRun",
  false);GreyChooser_defineProperty(this, "freeRun",
  function () {return false;});});
;// CONCATENATED MODULE: ./src/tasks/TaskBoomboxSwitch.ts
function TaskBoomboxSwitch_typeof(obj) {"@babel/helpers - typeof";return TaskBoomboxSwitch_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskBoomboxSwitch_typeof(obj);}function TaskBoomboxSwitch_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskBoomboxSwitch_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskBoomboxSwitch_toPropertyKey(descriptor.key), descriptor);}}function TaskBoomboxSwitch_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskBoomboxSwitch_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskBoomboxSwitch_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskBoomboxSwitch_defineProperty(obj, key, value) {key = TaskBoomboxSwitch_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskBoomboxSwitch_toPropertyKey(arg) {var key = TaskBoomboxSwitch_toPrimitive(arg, "string");return TaskBoomboxSwitch_typeof(key) === "symbol" ? key : String(key);}function TaskBoomboxSwitch_toPrimitive(input, hint) {if (TaskBoomboxSwitch_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskBoomboxSwitch_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


var TaskBoomboxSwitch = /*#__PURE__*/function () {function TaskBoomboxSwitch() {TaskBoomboxSwitch_classCallCheck(this, TaskBoomboxSwitch);TaskBoomboxSwitch_defineProperty(this, "boombox",
    external_kolmafia_.Item.get("SongBoom&trade; BoomBox"));TaskBoomboxSwitch_defineProperty(this, "canSkip",
    false);TaskBoomboxSwitch_defineProperty(this, "noneItem",
    external_kolmafia_.Item.none);TaskBoomboxSwitch_defineProperty(this, "skill",
    external_kolmafia_.Skill.get("Hivemindedness"));}TaskBoomboxSwitch_createClass(TaskBoomboxSwitch, [{ key: "isForgedRequired", value:

    function isForgedRequired() {
      return (0,external_kolmafia_.getProperty)("questL11Black") != "finished";
    } }, { key: "isZapWandRequired", value:

    function isZapWandRequired() {
      return (0,external_kolmafia_.getZapWand)() == this.noneItem;
    } }, { key: "getSongChangesLeft", value:

    function getSongChangesLeft() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_boomBoxSongsLeft"));
    } }, { key: "isMeatSong", value:

    function isMeatSong() {
      return (0,external_kolmafia_.getProperty)("boomBoxSong") == "Total Eclipse of Your Meat";
    } }, { key: "run", value:

    function run() {
      if (this.canSkip) {
        return;
      }

      // If we don't have the mp regen skill and we might run out of meat..
      if (!(0,external_kolmafia_.haveSkill)(this.skill) && (0,external_kolmafia_.myMeat)() < 15000) {
        return;
      }

      if ((0,external_kolmafia_.availableAmount)(this.boombox) == 0 || this.getSongChangesLeft() < 10) {
        this.canSkip = true;
        return;
      }

      if (this.getSongChangesLeft() < 11 && !this.isMeatSong()) {
        this.canSkip = true;
        return;
      }

      if (
      (0,external_kolmafia_.getProperty)("sidequestNunsCompleted") == "none" &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hippiesDefeated")) >= 192)
      {
        return;
      }

      var requiredMeat =
      1000 + (
      this.isForgedRequired() ? 6000 : 0) + (
      this.isZapWandRequired() ? 5000 : 0);

      // If we have enough meat, switch to seasoning.
      if ((0,external_kolmafia_.myMeat)() < requiredMeat) {
        return;
      }

      (0,external_kolmafia_.cliExecute)("boombox food");
      this.canSkip = true;
    } }]);return TaskBoomboxSwitch;}();
;// CONCATENATED MODULE: ./src/tasks/TaskCouncil.ts
function TaskCouncil_typeof(obj) {"@babel/helpers - typeof";return TaskCouncil_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskCouncil_typeof(obj);}function TaskCouncil_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskCouncil_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskCouncil_toPropertyKey(descriptor.key), descriptor);}}function TaskCouncil_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskCouncil_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskCouncil_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskCouncil_defineProperty(obj, key, value) {key = TaskCouncil_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskCouncil_toPropertyKey(arg) {var key = TaskCouncil_toPrimitive(arg, "string");return TaskCouncil_typeof(key) === "symbol" ? key : String(key);}function TaskCouncil_toPrimitive(input, hint) {if (TaskCouncil_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskCouncil_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


var TaskCouncil = /*#__PURE__*/function () {function TaskCouncil() {TaskCouncil_classCallCheck(this, TaskCouncil);TaskCouncil_defineProperty(this, "lastLevelVisited",
    (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastCouncilVisit")));}TaskCouncil_createClass(TaskCouncil, [{ key: "run", value:

    function run() {
      this.lastLevelVisited = Math.min(
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastCouncilVisit")),
      this.lastLevelVisited);


      if (this.lastLevelVisited >= (0,external_kolmafia_.myLevel)()) {
        return;
      }

      (0,external_kolmafia_.council)();
      this.lastLevelVisited = (0,external_kolmafia_.myLevel)();
      (0,external_kolmafia_.cliExecute)("refresh inventory");
    } }]);return TaskCouncil;}();
;// CONCATENATED MODULE: ./src/tasks/TaskEater.ts
function TaskEater_typeof(obj) {"@babel/helpers - typeof";return TaskEater_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskEater_typeof(obj);}function TaskEater_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskEater_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function TaskEater_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskEater_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskEater_arrayLikeToArray(o, minLen);}function TaskEater_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function TaskEater_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskEater_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskEater_toPropertyKey(descriptor.key), descriptor);}}function TaskEater_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskEater_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskEater_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskEater_defineProperty(obj, key, value) {key = TaskEater_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskEater_toPropertyKey(arg) {var key = TaskEater_toPrimitive(arg, "string");return TaskEater_typeof(key) === "symbol" ? key : String(key);}function TaskEater_toPrimitive(input, hint) {if (TaskEater_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskEater_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var TaskEater = /*#__PURE__*/function () {















  function TaskEater() {TaskEater_classCallCheck(this, TaskEater);TaskEater_defineProperty(this, "prop", "_greyEatenToday");TaskEater_defineProperty(this, "npcFoods", ["Hot buttered roll", "Ketchup", "Catsup", "cup of lukewarm tea", "Fortune Cookie", "Pickled Egg"].map(function (s) {return external_kolmafia_.Item.get(s);}));TaskEater_defineProperty(this, "keepOnHand", ["Bunch of square grapes", "Boxed Wine"].map(function (s) {return external_kolmafia_.Item.get(s);}));TaskEater_defineProperty(this, "blackberry", external_kolmafia_.Item.get("Blackberry"));TaskEater_defineProperty(this, "seasoning", external_kolmafia_.Item.get("Special Seasoning"));
    if ((0,external_kolmafia_.getProperty)(this.prop) == "") {
      var dontEat = [];
      // Goat cheese quest
      dontEat.push(external_kolmafia_.Item.get("Goat Cheese"));

      // Are you sure you want to eat this bla bla
      // Suppress that annoying "pvp stone no brokey??"
      dontEat.push(external_kolmafia_.Item.get("Can of Red Minotaur"));
      dontEat.push(external_kolmafia_.Item.get("Watered-down Red Minotaur"));

      // Palin quest items
      dontEat.push(external_kolmafia_.Item.get("Stunt Nuts"));
      dontEat.push(external_kolmafia_.Item.get("Wet Stew"));

      // Azeal booze quest items
      dontEat.push(external_kolmafia_.Item.get("Giant marshmallow"));
      dontEat.push(external_kolmafia_.Item.get("Booze-soaked cherry"));
      dontEat.push(external_kolmafia_.Item.get("Sponge cake"));
      dontEat.push(external_kolmafia_.Item.get("Gin-soaked blotter paper"));

      // Protesters quest item
      dontEat.push(external_kolmafia_.Item.get("Unnamed cocktail"));
      dontEat.push(external_kolmafia_.Item.get("Flamin' Whatshisname"));

      // Insufficient level
      dontEat.push(external_kolmafia_.Item.get("Pie man was not meant to eat"));

      // Robortender driveby
      if ((0,external_kolmafia_.haveFamiliar)(external_kolmafia_.Familiar.get("Robortender"))) {
        dontEat.push(external_kolmafia_.Item.get("Grapefruit"));
      }

      (0,external_kolmafia_.setProperty)(this.prop, dontEat.map(function (s) {return (0,external_kolmafia_.toInt)(s);}).join(","));
    }
  }TaskEater_createClass(TaskEater, [{ key: "doAlwaysAvailable", value:

    function doAlwaysAvailable(eaten) {
      if ((0,external_kolmafia_.myMeat)() < 2000) {
        return;
      }

      var pants = external_kolmafia_.Item.get("Designer Sweatpants");var _iterator = TaskEater_createForOfIteratorHelper(

        this.npcFoods),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var item = _step.value;
          var id = (0,external_kolmafia_.toInt)(item).toString();

          if (eaten.includes(id)) {
            continue;
          }

          if ((0,external_kolmafia_.availableAmount)(pants) > 0 && (0,external_kolmafia_.equippedAmount)(pants) == 0) {
            (0,external_kolmafia_.equip)(pants);
          }

          (0,external_kolmafia_.cliExecute)("acquire 1 " + item.name);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }, { key: "doTavern", value:

    function doTavern() {
      if ((0,external_kolmafia_.getProperty)("questL03Rat") != "finished" || (0,external_kolmafia_.myMeat)() < 2000) {
        return;
      }
    } }, { key: "doChez", value:

    function doChez(eaten) {
      if (!(0,external_kolmafia_.canadiaAvailable)() || (0,external_kolmafia_.myMeat)() < 2000) {
        return;
      }

      var daily = (0,external_kolmafia_.toInt)(external_kolmafia_.Item.get((0,external_kolmafia_.getProperty)("_dailySpecial"))).toString();

      if (eaten.includes(daily)) {
        return;
      }

      eaten.push(daily);

      for (var _i = 0, _arr = ["-1", "-2", "-3", daily]; _i < _arr.length; _i++) {var itemId = _arr[_i];
        (0,external_kolmafia_.visitUrl)("cafe.php?cafeid=1&pwd=&action=CONSUME!&whichitem=" + itemId);
      }
    } }, { key: "doGnomes", value:

    function doGnomes(eaten) {
      if (!(0,external_kolmafia_.gnomadsAvailable)() || (0,external_kolmafia_.myMeat)() < 2000) {
        return;
      }

      var daily = (0,external_kolmafia_.toInt)(external_kolmafia_.Item.get((0,external_kolmafia_.getProperty)("_dailySpecial"))).toString();

      if (eaten.includes(daily)) {
        return;
      }

      eaten.push(daily);

      for (var _i2 = 0, _arr2 = ["-1", "-2", "-3", daily]; _i2 < _arr2.length; _i2++) {var itemId = _arr2[_i2];
        (0,external_kolmafia_.visitUrl)("cafe.php?cafeid=2&pwd=&action=CONSUME!&whichitem=" + itemId);
      }
    } }, { key: "run", value:

    function run() {
      if ((0,external_kolmafia_.pullsRemaining)() == -1) {
        return;
      }

      var eaten = (0,external_kolmafia_.getProperty)(this.prop).split(",");

      this.doAlwaysAvailable(eaten);
      this.doChez(eaten);
      this.doGnomes(eaten);

      for (var _i3 = 0, _Object$keys = Object.keys((0,external_kolmafia_.getInventory)()); _i3 < _Object$keys.length; _i3++) {var i = _Object$keys[_i3];
        var item = external_kolmafia_.Item.get(i);

        if (item.fullness == 0 && item.inebriety == 0 && item.spleen == 0) {
          continue;
        }

        if ((0,external_kolmafia_.availableAmount)(item) <= 1 && this.keepOnHand.includes(item)) {
          continue;
        }

        if (item.levelreq > (0,external_kolmafia_.myLevel)() || !item.tradeable || item.quest) {
          continue;
        }

        if (eaten.includes((0,external_kolmafia_.toInt)(item) + "") || (0,external_kolmafia_.historicalPrice)(item) > 4000) {
          continue;
        }

        if (item == this.blackberry && getQuestStatus("questL11Black") <= 1) {
          continue;
        }

        if (item.fullness > 0) {
          if ((0,external_kolmafia_.itemAmount)(this.seasoning) > 0) {
            (0,external_kolmafia_.putCloset)((0,external_kolmafia_.itemAmount)(this.seasoning), this.seasoning);
          }

          (0,external_kolmafia_.visitUrl)("inv_eat.php?pwd&which=1&whichitem=".concat((0,external_kolmafia_.toInt)(item)), true);
        } else if (item.inebriety > 0) {
          (0,external_kolmafia_.visitUrl)("inv_booze.php?pwd&which=1&&whichitem=".concat((0,external_kolmafia_.toInt)(item)), true);
        } else if (item.spleen > 0) {
          (0,external_kolmafia_.visitUrl)("inv_spleen.php?pwd&which=1&&whichitem=".concat((0,external_kolmafia_.toInt)(item)), true);
        }

        eaten.push((0,external_kolmafia_.toInt)(item).toString());
      }

      (0,external_kolmafia_.setProperty)(this.prop, eaten.join(","));
    } }, { key: "tryMakeCraftables", value:

    function tryMakeCraftables() {} }]);return TaskEater;}();
;// CONCATENATED MODULE: ./src/tasks/TaskEquipDistillery.ts
function TaskEquipDistillery_typeof(obj) {"@babel/helpers - typeof";return TaskEquipDistillery_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskEquipDistillery_typeof(obj);}function TaskEquipDistillery_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskEquipDistillery_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskEquipDistillery_toPropertyKey(descriptor.key), descriptor);}}function TaskEquipDistillery_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskEquipDistillery_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskEquipDistillery_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskEquipDistillery_defineProperty(obj, key, value) {key = TaskEquipDistillery_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskEquipDistillery_toPropertyKey(arg) {var key = TaskEquipDistillery_toPrimitive(arg, "string");return TaskEquipDistillery_typeof(key) === "symbol" ? key : String(key);}function TaskEquipDistillery_toPrimitive(input, hint) {if (TaskEquipDistillery_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskEquipDistillery_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


var TaskEquipDistillery = /*#__PURE__*/function () {function TaskEquipDistillery() {TaskEquipDistillery_classCallCheck(this, TaskEquipDistillery);TaskEquipDistillery_defineProperty(this, "gelcube",
    external_kolmafia_.Familiar.get("Gelatinous Cubeling"));TaskEquipDistillery_defineProperty(this, "distill",
    external_kolmafia_.Item.get("Tiny stillsuit"));TaskEquipDistillery_defineProperty(this, "lastChecked",
    0);}TaskEquipDistillery_createClass(TaskEquipDistillery, [{ key: "run", value:

    function run() {
      if ((0,external_kolmafia_.itemAmount)(this.distill) == 0) {
        return;
      }

      if (!(0,external_kolmafia_.haveFamiliar)(this.gelcube) || (0,external_kolmafia_.myFamiliar)() == this.gelcube) {
        return;
      }

      if (this.lastChecked == (0,external_kolmafia_.totalTurnsPlayed)()) {
        return;
      }

      this.lastChecked = (0,external_kolmafia_.totalTurnsPlayed)();

      (0,external_kolmafia_.visitUrl)("familiar.php?action=equip&pwd=&whichfam=171&whichitem=10932");
    } }]);return TaskEquipDistillery;}();
;// CONCATENATED MODULE: ./src/tasks/TaskFuelAsdon.ts
function TaskFuelAsdon_typeof(obj) {"@babel/helpers - typeof";return TaskFuelAsdon_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskFuelAsdon_typeof(obj);}function TaskFuelAsdon_slicedToArray(arr, i) {return TaskFuelAsdon_arrayWithHoles(arr) || TaskFuelAsdon_iterableToArrayLimit(arr, i) || TaskFuelAsdon_unsupportedIterableToArray(arr, i) || TaskFuelAsdon_nonIterableRest();}function TaskFuelAsdon_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskFuelAsdon_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskFuelAsdon_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskFuelAsdon_arrayLikeToArray(o, minLen);}function TaskFuelAsdon_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function TaskFuelAsdon_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function TaskFuelAsdon_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function TaskFuelAsdon_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskFuelAsdon_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskFuelAsdon_toPropertyKey(descriptor.key), descriptor);}}function TaskFuelAsdon_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskFuelAsdon_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskFuelAsdon_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskFuelAsdon_defineProperty(obj, key, value) {key = TaskFuelAsdon_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskFuelAsdon_toPropertyKey(arg) {var key = TaskFuelAsdon_toPrimitive(arg, "string");return TaskFuelAsdon_typeof(key) === "symbol" ? key : String(key);}function TaskFuelAsdon_toPrimitive(input, hint) {if (TaskFuelAsdon_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskFuelAsdon_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var TaskFuelAsdon = /*#__PURE__*/function () {function TaskFuelAsdon() {TaskFuelAsdon_classCallCheck(this, TaskFuelAsdon);TaskFuelAsdon_defineProperty(this, "sodaBread",
    external_kolmafia_.Item.get("Loaf of Soda Bread"));TaskFuelAsdon_defineProperty(this, "eachFuelWorth",
    24);TaskFuelAsdon_defineProperty(this, "invalidFuels",
    []);TaskFuelAsdon_defineProperty(this, "asdonMartin",
    external_kolmafia_.Item.get("Asdon Martin keyfob"));TaskFuelAsdon_defineProperty(this, "flower",
    external_kolmafia_.Item.get("All-purpose flower"));TaskFuelAsdon_defineProperty(this, "dough",
    external_kolmafia_.Item.get("Wad of Dough"));}TaskFuelAsdon_createClass(TaskFuelAsdon, [{ key: "run", value:

    function run() {
      if (
      (0,external_kolmafia_.myMeat)() < 8000 ||
      (0,external_kolmafia_.getWorkshed)() != this.asdonMartin ||
      getQuestStatus("questL11Black") < 2)
      {
        return;
      }

      if ((0,external_kolmafia_.getFuel)() >= 150) {
        return;
      }

      if (!this.canMakeBread()) {
        return;
      }

      while ((0,external_kolmafia_.myMeat)() > 4500 && (0,external_kolmafia_.getFuel)() < 50) {
        // Each soda bread is worth 5-7 so lets always keep 50 / 6 = 9ish on hand
        var toUse = Math.ceil((50 - (0,external_kolmafia_.getFuel)()) / 6);
        this.acquireBread(toUse);

        (0,external_kolmafia_.cliExecute)("asdonmartin fuel " + toUse + " " + this.sodaBread);
      }
    } }, { key: "acquireBread", value:

    function acquireBread(amount) {
      if ((0,external_kolmafia_.haveOutfit)("bugbear costume")) {
        return;
      }

      while ((0,external_kolmafia_.myMeat)() > 2000 && (0,external_kolmafia_.availableAmount)(this.dough) < amount) {
        (0,external_kolmafia_.buy)(this.flower);
        (0,external_kolmafia_.use)(this.flower);
      }
    } }, { key: "canMakeBread", value:

    function canMakeBread() {
      return (
        (0,external_kolmafia_.haveOutfit)("Bugbear Costume") ||
        (0,external_kolmafia_.myAscensions)() > 10 &&
        (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) == (0,external_kolmafia_.myAscensions)() &&
        (0,external_kolmafia_.myMeat)() > 2000);

    } }, { key: "getAvailableItems", value:

    function getAvailableItems() {
      // Returns <Item, Amount, Each Fuel Worth in Mall>
      var items = [];

      for (var _i = 0, _Object$entries = Object.entries((0,external_kolmafia_.getInventory)()); _i < _Object$entries.length; _i++) {var _Object$entries$_i = TaskFuelAsdon_slicedToArray(_Object$entries[_i], 2),itemName = _Object$entries$_i[0],amount = _Object$entries$_i[1];
        var item = external_kolmafia_.Item.get(itemName);

        if (this.invalidFuels.includes(item)) {
          continue;
        }

        if (item.fullness == 0 && item.inebriety == 0) {
          this.invalidFuels.push(item);
          continue;
        }

        if (item.quest || !item.tradeable || item.gift) {
          this.invalidFuels.push(item);
          continue;
        }

        var histPrice = (0,external_kolmafia_.historicalPrice)(item);

        if (histPrice <= 10) {
          continue;
        }

        if (!item.adventures.match(/^[0-9]+(-[0-9]+)?$/)) {
          this.invalidFuels.push(item);
          continue;
        }

        // Make sure we don't consume something great
        if (
        item.quality != "crappy" &&
        item.quality != "decent" &&
        item.quality != "good")
        {
          histPrice = Math.max(histPrice, (0,external_kolmafia_.mallPrice)(item));
        }

        var advs = (0,external_kolmafia_.toInt)(item.adventures.split("-")[0]);
        var costPerFuel = histPrice / advs;

        // If the fuel would cost more than soda bread..
        if (costPerFuel > this.eachFuelWorth) {
          this.invalidFuels.push(item);
          continue;
        }

        items.push([item, amount, costPerFuel]);
      }

      return items;
    } }]);return TaskFuelAsdon;}();
;// CONCATENATED MODULE: ./src/tasks/TaskJuneCleaver.ts
function TaskJuneCleaver_typeof(obj) {"@babel/helpers - typeof";return TaskJuneCleaver_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskJuneCleaver_typeof(obj);}function TaskJuneCleaver_slicedToArray(arr, i) {return TaskJuneCleaver_arrayWithHoles(arr) || TaskJuneCleaver_iterableToArrayLimit(arr, i) || TaskJuneCleaver_unsupportedIterableToArray(arr, i) || TaskJuneCleaver_nonIterableRest();}function TaskJuneCleaver_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskJuneCleaver_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function TaskJuneCleaver_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function TaskJuneCleaver_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskJuneCleaver_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function TaskJuneCleaver_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskJuneCleaver_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskJuneCleaver_arrayLikeToArray(o, minLen);}function TaskJuneCleaver_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function TaskJuneCleaver_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskJuneCleaver_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskJuneCleaver_toPropertyKey(descriptor.key), descriptor);}}function TaskJuneCleaver_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskJuneCleaver_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskJuneCleaver_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskJuneCleaver_defineProperty(obj, key, value) {key = TaskJuneCleaver_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskJuneCleaver_toPropertyKey(arg) {var key = TaskJuneCleaver_toPrimitive(arg, "string");return TaskJuneCleaver_typeof(key) === "symbol" ? key : String(key);}function TaskJuneCleaver_toPrimitive(input, hint) {if (TaskJuneCleaver_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskJuneCleaver_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}
var


CleaverChoices;(function (CleaverChoices) {CleaverChoices[CleaverChoices["AUNTS_NOT_ANTS"] = 1468] = "AUNTS_NOT_ANTS";CleaverChoices[CleaverChoices["BATH_TIME"] = 1473] = "BATH_TIME";CleaverChoices[CleaverChoices["BEWARE_OF_ALIGATOR"] = 1469] = "BEWARE_OF_ALIGATOR";CleaverChoices[CleaverChoices["DELICIOUS_SPROUTS"] = 1474] = "DELICIOUS_SPROUTS";CleaverChoices[CleaverChoices["HYPNOTIC_MASTER"] = 1475] = "HYPNOTIC_MASTER";CleaverChoices[CleaverChoices["LOST_AND_FOUND"] = 1471] = "LOST_AND_FOUND";CleaverChoices[CleaverChoices["POETIC_JUSTICE"] = 1467] = "POETIC_JUSTICE";CleaverChoices[CleaverChoices["SUMMER_DAYS"] = 1472] = "SUMMER_DAYS";CleaverChoices[CleaverChoices["TEACHERS_PET"] = 1470] = "TEACHERS_PET";})(CleaverChoices || (CleaverChoices = {}));











var TaskJuneCleaver = /*#__PURE__*/function () {function TaskJuneCleaver() {TaskJuneCleaver_classCallCheck(this, TaskJuneCleaver);TaskJuneCleaver_defineProperty(this, "teachersPen",
    external_kolmafia_.Item.get("Teacher's Pen"));TaskJuneCleaver_defineProperty(this, "eatenProp",
    "_greyEatenToday");TaskJuneCleaver_defineProperty(this, "fireTrout",
    external_kolmafia_.Item.get("fire-roasted lake trout"));TaskJuneCleaver_defineProperty(this, "cosplay",

    (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Fourth of May Cosplay Saber")) > 0);}TaskJuneCleaver_createClass(TaskJuneCleaver, [{ key: "run", value:

    function run() {
      var wantsKitchen =
      !this.cosplay &&
      getQuestStatus("questM20Necklace") == 0 &&
      (0,external_kolmafia_.myLevel)() >= 4;
      var peakProgress = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("booPeakProgress"));
      var wantsBooPeak =
      !this.cosplay && peakProgress > 0 && peakProgress < 100;

      var choices = new Map();

      choices.set(CleaverChoices.AUNTS_NOT_ANTS, 1); // moxie stats

      choices.set(CleaverChoices.BATH_TIME, 3); // +3 hot res, 50 init

      if (wantsBooPeak) {
        choices.set(CleaverChoices.BATH_TIME, 2); // +2 spooky, stench, sleaze res. +15 DR
      }

      choices.set(CleaverChoices.BEWARE_OF_ALIGATOR, 3); // 1500 meat
      choices.set(CleaverChoices.DELICIOUS_SPROUTS, 2); // Guilty Sprouts
      choices.set(CleaverChoices.HYPNOTIC_MASTER, 1); // Mother's Necklace
      choices.set(CleaverChoices.LOST_AND_FOUND, 1); // Savings bond +50 meat
      choices.set(CleaverChoices.POETIC_JUSTICE, 3); // +5 advs, +5 beaten up
      choices.set(CleaverChoices.SUMMER_DAYS, 2); // Fire roasted trout
      choices.set(CleaverChoices.TEACHERS_PET, 2); // Teacher's Pen

      if (
      (0,external_kolmafia_.availableAmount)(this.fireTrout) > 0 ||
      (0,external_kolmafia_.getProperty)(this.eatenProp).
      split(",").
      includes((0,external_kolmafia_.toInt)(this.fireTrout).toString()))
      {
        choices.set(CleaverChoices.SUMMER_DAYS, 1); // -5 combat potion
      }

      var hasSkips = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_juneCleaverSkips")) < 5;

      if (hasSkips) {
        choices.set(CleaverChoices.AUNTS_NOT_ANTS, 4);

        // If we don't want to do the kitchen..
        // This generally works pretty well for the +init boost tbh
        if (!wantsKitchen) {
          choices.set(CleaverChoices.BATH_TIME, 4);
        }

        choices.set(CleaverChoices.DELICIOUS_SPROUTS, 4);
        choices.set(CleaverChoices.HYPNOTIC_MASTER, 4);
        choices.set(CleaverChoices.SUMMER_DAYS, 4);

        if ((0,external_kolmafia_.availableAmount)(this.teachersPen) > 1) {
          choices.set(CleaverChoices.TEACHERS_PET, 4);
        }
      }var _iterator = TaskJuneCleaver_createForOfIteratorHelper(

        choices),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = TaskJuneCleaver_slicedToArray(_step.value, 2),choice = _step$value[0],value = _step$value[1];
          (0,external_kolmafia_.setProperty)("choiceAdventure" + choice, value.toString());
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
    } }]);return TaskJuneCleaver;}();
;// CONCATENATED MODULE: ./src/tasks/TaskLatteFiller.ts
function TaskLatteFiller_typeof(obj) {"@babel/helpers - typeof";return TaskLatteFiller_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskLatteFiller_typeof(obj);}function TaskLatteFiller_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskLatteFiller_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskLatteFiller_toPropertyKey(descriptor.key), descriptor);}}function TaskLatteFiller_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskLatteFiller_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskLatteFiller_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskLatteFiller_defineProperty(obj, key, value) {key = TaskLatteFiller_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskLatteFiller_toPropertyKey(arg) {var key = TaskLatteFiller_toPrimitive(arg, "string");return TaskLatteFiller_typeof(key) === "symbol" ? key : String(key);}function TaskLatteFiller_toPrimitive(input, hint) {if (TaskLatteFiller_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskLatteFiller_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var TaskLatteFiller = /*#__PURE__*/function () {function TaskLatteFiller() {TaskLatteFiller_classCallCheck(this, TaskLatteFiller);TaskLatteFiller_defineProperty(this, "skipLatte",
    (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_latteRefillsUsed")) > 0);TaskLatteFiller_defineProperty(this, "latte",
    external_kolmafia_.Item.get("Latte lovers member's mug"));TaskLatteFiller_defineProperty(this, "ghostBuster",
    external_kolmafia_.Item.get("Protonic accelerator pack"));}TaskLatteFiller_createClass(TaskLatteFiller, [{ key: "run", value:

    function run() {
      if (this.skipLatte) {
        return;
      }

      if ((0,external_kolmafia_.availableAmount)(this.latte) == 0) {
        this.skipLatte = true;
        return;
      }

      var firstFlavor =
      (0,external_kolmafia_.availableAmount)(this.ghostBuster) > 0 ?
      LatteFlavor.PLUS_COMBAT :
      LatteFlavor.FAMILIAR_WEIGHT;

      var flavors = [
      firstFlavor,
      LatteFlavor.MEAT_DROP,
      LatteFlavor.FAM_EXP];


      var currentFlavors = getCurrentLatteFlavors();

      if (flavors.filter(function (f) {return !currentFlavors.includes(f);}).length == 0) {
        this.skipLatte = true;
        return;
      }

      var notUnlocked = flavors.filter(function (f) {return !hasUnlockedLatteFlavor(f);});

      if (notUnlocked.length > 0) {
        return;
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_latteRefillsUsed")) > 0) {
        throw "latte was refilled but we don't remember that!";
      }

      (0,external_kolmafia_.cliExecute)("latte refill " + flavors.join(" "));
      (0,external_kolmafia_.visitUrl)("main.php");
    } }]);return TaskLatteFiller;}();
;// CONCATENATED MODULE: ./src/tasks/TaskSellCrap.ts
function TaskSellCrap_typeof(obj) {"@babel/helpers - typeof";return TaskSellCrap_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskSellCrap_typeof(obj);}function TaskSellCrap_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskSellCrap_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function TaskSellCrap_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskSellCrap_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskSellCrap_arrayLikeToArray(o, minLen);}function TaskSellCrap_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function TaskSellCrap_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskSellCrap_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskSellCrap_toPropertyKey(descriptor.key), descriptor);}}function TaskSellCrap_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskSellCrap_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskSellCrap_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskSellCrap_defineProperty(obj, key, value) {key = TaskSellCrap_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskSellCrap_toPropertyKey(arg) {var key = TaskSellCrap_toPrimitive(arg, "string");return TaskSellCrap_typeof(key) === "symbol" ? key : String(key);}function TaskSellCrap_toPrimitive(input, hint) {if (TaskSellCrap_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskSellCrap_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


var TaskSellCrap = /*#__PURE__*/function () {function TaskSellCrap() {TaskSellCrap_classCallCheck(this, TaskSellCrap);TaskSellCrap_defineProperty(this, "autosells",
    ["dense meat stack", "meat stack"].map(function (s) {return (
        external_kolmafia_.Item.get(s));}));TaskSellCrap_defineProperty(this, "junk",

    [
    "adder bladder",
    "loose teeth",
    "skeleton bone",
    "bottle of whiskey",
    "cranberries",
    "spiked femur",
    "batgut",
    "bat wing",
    "bone flute",
    "bottle of rum",
    "bottle of tequila",
    "spooky stick",
    "tequila grenade",
    "ancient frozen dinner",
    "accidental cider",
    "bottle of gin",
    "imp ale",
    "hot wing",
    "hellion cube",
    "hot katana blade",
    "ice-cold Willer",
    "lihc eye",
    "snifter of thoroughly aged brandy",
    "wussiness potion",
    "ancient pills",
    "Fat stacks of cash"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));TaskSellCrap_defineProperty(this, "autouse",
    [
    "Ancient Vinyl Coin Purse",
    "Black Pension Check",
    "CSA Discount Card",
    "Fat Wallet",
    "Gathered Meat-Clip",
    "Old Leather Wallet",
    "Penultimate Fantasy Chest",
    "Pixellated Moneybag",
    "Old Coin Purse",
    "Shiny Stones",
    "Briefcase"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));TaskSellCrap_defineProperty(this, "teachersPen",
    external_kolmafia_.Item.get("Teacher's Pen"));}TaskSellCrap_createClass(TaskSellCrap, [{ key: "run", value:

    function run() {
      var count = (0,external_kolmafia_.availableAmount)(this.teachersPen);

      if (count > 1) {
        if (
        count > 2 &&
        (0,external_kolmafia_.itemAmount)(this.teachersPen) > 0 &&
        (0,external_kolmafia_.pullsRemaining)() >= 0)
        {
          (0,external_kolmafia_.print)(
          "Selling a Teacher's Pen because Irrat is too lazy to handle too much accessories with +fam exp");

          (0,external_kolmafia_.autosell)(this.teachersPen, 1);
        }
      }

      if ((0,external_kolmafia_.myMeat)() > 15000) {
        return;
      }var _iterator = TaskSellCrap_createForOfIteratorHelper(

        this.autosells),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var i = _step.value;
          if ((0,external_kolmafia_.itemAmount)(i) == 0) {
            continue;
          }

          (0,external_kolmafia_.autosell)((0,external_kolmafia_.itemAmount)(i), i);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}var _iterator2 = TaskSellCrap_createForOfIteratorHelper(

        this.autouse),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _i = _step2.value;
          if ((0,external_kolmafia_.itemAmount)(_i) == 0) {
            continue;
          }

          (0,external_kolmafia_.use)((0,external_kolmafia_.itemAmount)(_i), _i);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = TaskSellCrap_createForOfIteratorHelper(

        this.junk),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _i2 = _step3.value;
          if ((0,external_kolmafia_.itemAmount)(_i2) <= 1) {
            continue;
          }

          (0,external_kolmafia_.autosell)((0,external_kolmafia_.itemAmount)(_i2) - 1, _i2);
        }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
    } }]);return TaskSellCrap;}();
;// CONCATENATED MODULE: ./src/tasks/TaskMedicineCabinet.ts
function TaskMedicineCabinet_typeof(obj) {"@babel/helpers - typeof";return TaskMedicineCabinet_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskMedicineCabinet_typeof(obj);}function TaskMedicineCabinet_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskMedicineCabinet_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskMedicineCabinet_toPropertyKey(descriptor.key), descriptor);}}function TaskMedicineCabinet_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskMedicineCabinet_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskMedicineCabinet_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskMedicineCabinet_defineProperty(obj, key, value) {key = TaskMedicineCabinet_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskMedicineCabinet_toPropertyKey(arg) {var key = TaskMedicineCabinet_toPrimitive(arg, "string");return TaskMedicineCabinet_typeof(key) === "symbol" ? key : String(key);}function TaskMedicineCabinet_toPrimitive(input, hint) {if (TaskMedicineCabinet_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskMedicineCabinet_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var TaskColdMedicineCabinet = /*#__PURE__*/function () {function TaskColdMedicineCabinet() {TaskMedicineCabinet_classCallCheck(this, TaskColdMedicineCabinet);TaskMedicineCabinet_defineProperty(this, "lastChecked",
    "_lastCheckedCabinet");TaskMedicineCabinet_defineProperty(this, "hat",
    external_kolmafia_.Item.get("Ice Crown"));TaskMedicineCabinet_defineProperty(this, "pants",
    external_kolmafia_.Item.get("frozen jeans"));TaskMedicineCabinet_defineProperty(this, "cabinet",
    external_kolmafia_.Item.get("Cold medicine cabinet"));TaskMedicineCabinet_defineProperty(this, "triedSwitch",
    false);}TaskMedicineCabinet_createClass(TaskColdMedicineCabinet, [{ key: "getConsults", value:

    function getConsults() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_coldMedicineConsults"));
    } }, { key: "hasConsults", value:

    function hasConsults() {
      return this.getConsults() < 5;
    } }, { key: "getNextConsult", value:

    function getNextConsult() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_nextColdMedicineConsult")) - (0,external_kolmafia_.totalTurnsPlayed)();
    } }, { key: "isConsultReady", value:

    function isConsultReady() {
      return this.hasConsults() && this.getNextConsult() <= 0;
    } }, { key: "isIndoors", value:

    function isIndoors() {
      return (
        (0,external_kolmafia_.getProperty)("lastCombatEnvironments").
        split("").
        filter(function (s) {return s == "i";}).length > 10);

    } }, { key: "isUnderground", value:

    function isUnderground() {
      return (
        (0,external_kolmafia_.getProperty)("lastCombatEnvironments").
        split("").
        filter(function (s) {return s == "u";}).length > 10);

    } }, { key: "getLastChecked", value:

    function getLastChecked() {
      return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)(this.lastChecked));
    } }, { key: "shouldCheck", value:

    function shouldCheck() {
      return this.getLastChecked() + 2 <= (0,external_kolmafia_.totalTurnsPlayed)();
    } }, { key: "check", value:

    function check() {
      var page = (0,external_kolmafia_.visitUrl)("campground.php?action=workshed");

      (0,external_kolmafia_.setProperty)(this.lastChecked, (0,external_kolmafia_.totalTurnsPlayed)().toString());

      if (!(0,external_kolmafia_.handlingChoice)()) {
        return;
      }

      if ((0,external_kolmafia_.lastChoice)() != 1455) {
        throw "Unexpected situation";
      }

      if (GreySettings_GreySettings.isHardcoreMode() && (0,external_kolmafia_.availableAmount)(this.pants) == 0) {
        (0,external_kolmafia_.runChoice)(1);
      } else if (
      page.includes("Extrovermectin&trade;") ||
      page.includes("Breathitin&trade;"))
      {
        (0,external_kolmafia_.runChoice)(5);
      } else {
        (0,external_kolmafia_.visitUrl)("main.php");
      }
    } }, { key: "run", value:

    function run() {
      if (
      (0,external_kolmafia_.getWorkshed)() == external_kolmafia_.Item.none &&
      GreySettings_GreySettings.greyDefaultWorkshed != "" &&
      (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get(GreySettings_GreySettings.greyDefaultWorkshed)) > 0)
      {
        (0,external_kolmafia_.use)(external_kolmafia_.Item.get(GreySettings_GreySettings.greyDefaultWorkshed));
      }

      if ((0,external_kolmafia_.getWorkshed)() != this.cabinet) {
        return;
      }

      this.trySwitch();

      if (!this.isConsultReady()) {
        return;
      }

      if (!this.shouldCheck()) {
        return;
      }

      // If we would not get extro
      if (!this.isIndoors()) {
        // If we don't care about breathitin
        if (GreySettings_GreySettings.greySwitchWorkshed == "") {
          return;
        }

        // If we wouldn't get breathitin
        if (!this.isUnderground()) {
          return;
        }

        // If we haven't spent enough turns to get desperate to grab breathitin
        if ((0,external_kolmafia_.turnsPlayed)() < this.getConsults() * 75) {
          return;
        }
      }

      this.check();

      this.trySwitch();
    } }, { key: "trySwitch", value:

    function trySwitch() {
      if (!this.hasConsults()) {
        if (!this.triedSwitch && GreySettings_GreySettings.greySwitchWorkshed != "") {
          this.triedSwitch = true;

          var item = (0,external_kolmafia_.toItem)(GreySettings_GreySettings.greySwitchWorkshed);

          if (!item.usable) {
            (0,external_kolmafia_.print)(
            "An item was set in greySwitchWorkshed but is not usable",
            "red");

            return;
          }

          if ((0,external_kolmafia_.availableAmount)(item) == 0) {
            (0,external_kolmafia_.print)(
            "An item was set in greySwitchWorkshed but is not available, will skip",
            "red");

            return;
          }

          (0,external_kolmafia_.use)(item);

          if ((0,external_kolmafia_.getWorkshed)() == this.cabinet) {
            throw (
              "Failed to switch workshed to " +
              item +
              ", are you sure it's a workshed item?");

          }

          (0,external_kolmafia_.print)("Now using " + (0,external_kolmafia_.getWorkshed)() + " as the workshed!", "blue");
        }
        return;
      }
    } }]);return TaskColdMedicineCabinet;}();
;// CONCATENATED MODULE: ./src/tasks/TaskAutumnaton.ts
function TaskAutumnaton_typeof(obj) {"@babel/helpers - typeof";return TaskAutumnaton_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskAutumnaton_typeof(obj);}function TaskAutumnaton_slicedToArray(arr, i) {return TaskAutumnaton_arrayWithHoles(arr) || TaskAutumnaton_iterableToArrayLimit(arr, i) || TaskAutumnaton_unsupportedIterableToArray(arr, i) || TaskAutumnaton_nonIterableRest();}function TaskAutumnaton_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskAutumnaton_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function TaskAutumnaton_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function TaskAutumnaton_toConsumableArray(arr) {return TaskAutumnaton_arrayWithoutHoles(arr) || TaskAutumnaton_iterableToArray(arr) || TaskAutumnaton_unsupportedIterableToArray(arr) || TaskAutumnaton_nonIterableSpread();}function TaskAutumnaton_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function TaskAutumnaton_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function TaskAutumnaton_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return TaskAutumnaton_arrayLikeToArray(arr);}function TaskAutumnaton_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = TaskAutumnaton_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function TaskAutumnaton_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return TaskAutumnaton_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TaskAutumnaton_arrayLikeToArray(o, minLen);}function TaskAutumnaton_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function TaskAutumnaton_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskAutumnaton_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskAutumnaton_toPropertyKey(descriptor.key), descriptor);}}function TaskAutumnaton_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskAutumnaton_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskAutumnaton_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskAutumnaton_defineProperty(obj, key, value) {key = TaskAutumnaton_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskAutumnaton_toPropertyKey(arg) {var key = TaskAutumnaton_toPrimitive(arg, "string");return TaskAutumnaton_typeof(key) === "symbol" ? key : String(key);}function TaskAutumnaton_toPrimitive(input, hint) {if (TaskAutumnaton_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskAutumnaton_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}



var leaf = external_kolmafia_.Item.get("Autumn Leaf");
var debrisShield = external_kolmafia_.Item.get("Autumn Debris Shield");
var leafPendant = external_kolmafia_.Item.get("Autumn Leaf Pendant");
var ale = external_kolmafia_.Item.get("AutumnFest Ale");
var donut = external_kolmafia_.Item.get("Autumn-Spice Donut");
var breeze = external_kolmafia_.Item.get("Autumn Breeze");
var sweater = external_kolmafia_.Item.get("Autumn Sweater-weather sweater");
var dollar = external_kolmafia_.Item.get("Autumn Dollar");
var wisdom = external_kolmafia_.Item.get("Autumn Years Wisdom");







var TaskAutumnaton = /*#__PURE__*/function () {




  function TaskAutumnaton() {TaskAutumnaton_classCallCheck(this, TaskAutumnaton);TaskAutumnaton_defineProperty(this, "item", external_kolmafia_.Item.get("Autumn-aton"));TaskAutumnaton_defineProperty(this, "skipFor", 0);TaskAutumnaton_defineProperty(this, "toGrab", void 0);
    this.createItems();
  }TaskAutumnaton_createClass(TaskAutumnaton, [{ key: "getExpectedFallbotProfits", value:

    function getExpectedFallbotProfits(loc) {
      var map = new Map();var _iterator = TaskAutumnaton_createForOfIteratorHelper(

        Object.entries(
        (0,external_kolmafia_.appearanceRates)(loc)).
        map(
        function (_ref3) {var _ref4 = TaskAutumnaton_slicedToArray(_ref3, 2),monster = _ref4[0],rate = _ref4[1];return [external_kolmafia_.Monster.get(monster), rate];})),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;)
        {var _step$value = TaskAutumnaton_slicedToArray(_step.value, 2),monster = _step$value[0],encounterRate = _step$value[1];
          if (encounterRate <= 0) {
            continue;
          }var _iterator3 = TaskAutumnaton_createForOfIteratorHelper(

            (0,external_kolmafia_.itemDropsArray)(monster)),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _step3$value = _step3.value,drop = _step3$value.drop,rate = _step3$value.rate,type = _step3$value.type;
              if (type != "" || drop.quest || !drop.tradeable) {
                continue;
              }

              map.set(drop, (map.get(drop) || 0) + rate);
            }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      var expectedItems = getItemsPerExpedition();
      var totalItemDrop = TaskAutumnaton_toConsumableArray(map.values()).reduce(function (p, n) {return p + n;}, 0);
      var multiBy = expectedItems * 100 / totalItemDrop;var _iterator2 = TaskAutumnaton_createForOfIteratorHelper(

        map),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _step2$value = TaskAutumnaton_slicedToArray(_step2.value, 2),_drop = _step2$value[0],_rate = _step2$value[1];
          map.set(_drop, _rate * multiBy);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      var outcome = getAutumnOutcome(loc);

      var expectedProfit =
      (outcome != null ? (0,external_kolmafia_.historicalPrice)(outcome[1]) : 0) +
      TaskAutumnaton_toConsumableArray(map.entries()).
      map(function (_ref) {var _ref2 = TaskAutumnaton_slicedToArray(_ref, 2),i = _ref2[0],rate = _ref2[1];return 0.01 * (0,external_kolmafia_.historicalPrice)(i) * rate;}).
      reduce(function (p, n) {return p + n;}, 0);

      return Math.round(expectedProfit);
    } }, { key: "selectLocation", value:

    function selectLocation(locs) {var _this = this;
      var weights = new Map([
      ["time taken", (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_autumnatonQuests")) == 0 ? 800 : 1000], // We always want it to return asap except the first quest isn't as important
      ["extra item", 900], // We want extra items
      ["extra seasonal item", 10], // This is more profit!
      ["item drop%", 3], // Eh, sure
      ["stats", 1]]);


      var selections = [];var _iterator4 = TaskAutumnaton_createForOfIteratorHelper(

        locs),_step4;try {var _loop = function _loop() {var _step4$value = _step4.value,location = _step4$value.location,item = _step4$value.item,upgrade = _step4$value.upgrade;
          var score = _this.getExpectedFallbotProfits(location) / 2500; // Turn 5k expected profit into a score of 2

          var toGrab = _this.toGrab.filter(
          function (t) {return (
              t.loc == location && (
              t.viable == null || t.viable()) &&
              (0,external_kolmafia_.availableAmount)(t.item) < t.amount && (
              t.allowLongExpeditions == true ||
              (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_autumnatonQuests")) <= 7));});


          if (toGrab.length > 0) {
            score +=
            1 +
            _this.toGrab.length -
            toGrab.
            map(function (t) {return _this.toGrab.indexOf(t);}).
            reduce(function (p1, p2) {return Math.min(p1, p2);}, 999);
          }

          // Add scores for stuff we want
          if (!getAutumnUpgrades().includes(upgrade)) {
            var stat = getAutumnStat(upgrade);

            if (weights.has(stat)) {
              score += weights.get(stat);
            }
          }

          if (score <= 0) {return "continue";

          }

          var reason = toGrab.length > 0 ? "grab " + toGrab[0].item : "";

          if (getAutumnUpgraded(upgrade) == 0) {
            if (reason.length > 0) {
              reason += " and ";
            }

            reason +=
            "get upgrade " +
            _this.getEnumByEnumValue(AutumnUpgrades, upgrade) +
            " (" +
            upgrade +
            ") which upgrades stat '" +
            getAutumnStat(upgrade) +
            "'";
          }

          selections.push({ location: location, score: score, reason: reason });
        };for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;}} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

      if (selections.length == 0) {
        return null;
      }

      selections.sort(function (s1, s2) {return s2.score - s1.score;});

      return selections[0];
    } }, { key: "getEnumByEnumValue", value:

    function getEnumByEnumValue(myEnum, enumValue) {
      var keys = Object.keys(myEnum).filter(function (x) {return myEnum[x] == enumValue;});

      return keys.length > 0 ? keys[0] : null;
    } }, { key: "run", value:

    function run() {
      if (this.item == null || (0,external_kolmafia_.availableAmount)(this.item) == 0) {
        return;
      }

      if (this.skipFor-- > 0) {
        return;
      }

      var outcomes = getAutumnatonLocations();

      if ((0,external_kolmafia_.availableChoiceOptions)()[1] != null) {
        (0,external_kolmafia_.print)("Beep Boop, now upgrading autumn-aton", "blue");
        (0,external_kolmafia_.print)("Autumn-aton upgrade will: " + (0,external_kolmafia_.availableChoiceOptions)()[1], "blue");
        (0,external_kolmafia_.visitUrl)("choice.php?option=1&pwd&whichchoice=1483");
      }

      var bestChoice = this.selectLocation(outcomes);

      if (bestChoice == null) {
        this.skipFor = 2;
        (0,external_kolmafia_.visitUrl)("main.php");
        return;
      }

      if (!(0,external_kolmafia_.handlingChoice)()) {
        throw "Expected to be handling the aton choice";
      }

      if ((0,external_kolmafia_.lastChoice)() != 1483) {
        throw "Expected to be in aton choice";
      }

      (0,external_kolmafia_.print)("Sending Autumn-aton on a glorious quest to ".concat(
      bestChoice.reason, " from ").concat(bestChoice.location),
      "blue");


      (0,external_kolmafia_.visitUrl)(
      "choice.php?option=2&pwd&whichchoice=1483&heythereprogrammer=" +
      (0,external_kolmafia_.toInt)(bestChoice.location));


      if ((0,external_kolmafia_.handlingChoice)()) {
        throw "Unexpectedly still handling a choice!";
      }
    } }, { key: "createItems", value:

    function createItems() {
      this.toGrab = [];

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("Sonofa Beach"),
        item: external_kolmafia_.Item.get("barrel of gunpowder"),
        amount: 5,
        allowLongExpeditions: true,
        viable: function viable() {return (
            (0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") == "none" &&
            getItemsPerExpedition() >= 5);}
      });

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("The Smut Orc Logging Camp"),
        item: external_kolmafia_.Item.get("Raging hardwood plank"),
        amount: 10,
        viable: function viable() {return (
            getQuestStatus("questL09Topping") == 0 &&
            (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("chasmBridgeProgress")) < 30);}
      });

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("The Copperhead Club"),
        item: external_kolmafia_.Item.get("Crappy Waiter Disguise"),
        amount: 5,
        viable: function viable() {return getQuestStatus("questL11Shen") < 5;}
      });

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("A Mob Of Zeppelin Protesters"),
        item: external_kolmafia_.Item.get("cigarette lighter"),
        amount: 10,
        viable: function viable() {return getQuestStatus("questL11Ron") <= 1;}
      });

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("The Penultimate Fantasy Airship"),
        item: external_kolmafia_.Item.get("Mohawk Wig"),
        amount: 1,
        viable: function viable() {return getQuestStatus("questL10Garbage") < 9;}
      });

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("The Penultimate Fantasy Airship"),
        item: external_kolmafia_.Item.get("Amulet of Extreme Plot Significance"),
        amount: 1,
        viable: function viable() {return getQuestStatus("questL10Garbage") < 6;}
      });

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("The Beanbat Chamber"),
        item: external_kolmafia_.Item.get("Enchanted Bean"),
        amount: 1,
        viable: function viable() {return getQuestStatus("questL10Garbage") <= 0;}
      });

      /* this.toGrab.push({
        loc: Location.get("The Goatlet"),
        item: Item.get("Goat Cheese"),
        amount: 3,
        viable: () => getQuestStatus("questL08Trapper") <= 1,
      });*/

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("The Hidden Bowling Alley"),
        item: external_kolmafia_.Item.get("bowling ball"),
        amount: 5,
        viable: function viable() {return (
            (0,external_kolmafia_.getProperty)("questL11Spare") != "finished" &&
            (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("bowling ball")) -
            (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("hiddenBowlingAlleyProgress")) >
            5);}
      });

      // If we want a drum machine, have turned in stone rose, yet have not turned in drum machine..
      this.toGrab.push({
        loc: external_kolmafia_.Location.get("The Oasis"),
        item: external_kolmafia_.Item.get("Drum Machine"),
        amount: 1,
        viable: function viable() {return (
            ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress")) & 1) == 1 &&
            ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("gnasirProgress")) & 16) != 16);}
      });

      this.toGrab.push({
        loc: external_kolmafia_.Location.get("Guano Junction"),
        item: external_kolmafia_.Item.get("sonar-in-a-biscuit"),
        amount: 1,
        viable: function viable() {return getQuestStatus("questL04Bat") <= 2;}
      });

      // Harem
      // Gauno Junction - Bat sonar
      // Infernal Rackets Backstage / laugh floor
      // Oil peak?
      // Sonofa Beach
      // Black Forest
      // Castle in clouds basement - WAND
      // Castle in clouds ground - Maybe +combat weapon
      // Dungeons of Doom - Ring of +combat
      // The greater than sign - Mehhh
      // Goatlet - Goat Cheese
      // Haunted Billiards - Hand of chalk, meh
      // Haunted library - Killing jar
      // Janitor - Book of matches
      // Bowling Balls
      // Surgeon outfit?
      // Misc locations for when we can't tower break, like key locs?
      // Middle chamber - tomb ratchets?
      // Red zeppelin - Glark cables
      // Crypt - Evil eyes
      // Twin Peak - Hedge trimmers
      // Whitey's grove - White page? lol
    } }]);return TaskAutumnaton;}();










// autumnatonUpgrades=leftleg1,periscope,radardish,rightleg1
var AutumnUpgrades;








// More stats
(function (AutumnUpgrades) {AutumnUpgrades["LEFT_ARM"] = "leftarm1";AutumnUpgrades["LEFT_LEG"] = "leftleg1";AutumnUpgrades["RIGHT_ARM"] = "rightarm1";AutumnUpgrades["RIGHT_LEG"] = "rightleg1";AutumnUpgrades["ENERGY_HAT"] = "base_blackhat";AutumnUpgrades["COLLECTION_PROW"] = "cowcatcher";AutumnUpgrades["VISION_EXTENDER"] = "periscope";AutumnUpgrades["RADAR"] = "radardish";AutumnUpgrades["EXHAUST"] = "dualexhaust";})(AutumnUpgrades || (AutumnUpgrades = {}));








function getAutumnStat(upgrade) {
  switch (upgrade) {
    case AutumnUpgrades.LEFT_ARM:
    case AutumnUpgrades.RIGHT_ARM:
      return "extra item";
    case AutumnUpgrades.LEFT_LEG:
    case AutumnUpgrades.RIGHT_LEG:
      return "time taken";
    case AutumnUpgrades.ENERGY_HAT:
    case AutumnUpgrades.EXHAUST:
      return "stats";
    case AutumnUpgrades.VISION_EXTENDER:
      return "item drop%";
    case AutumnUpgrades.COLLECTION_PROW:
      return "extra seasonal item";

      throw "Unknown Autumn upgrade '" + upgrade + "'";}

}

function getItemsPerExpedition() {
  return (
    3 + getAutumnUpgraded(AutumnUpgrades.LEFT_ARM, AutumnUpgrades.RIGHT_ARM));

}

function getExpeditionTime() {
  // It goes 11 > 11 > 22 > 33
  var questsDone = toInt(getProperty("_autumnatonQuests"));

  // With 1 upgrade, it takes 0 turns. At 2, it takes -11 turns
  questsDone -= getAutumnUpgraded(
  AutumnUpgrades.LEFT_LEG,
  AutumnUpgrades.RIGHT_LEG);


  // We demand a min of 1 quests, for 11 turns
  return 11 * Math.max(1, questsDone);
}

function getAutumnUpgraded() {for (var _len = arguments.length, upgrades = new Array(_len), _key = 0; _key < _len; _key++) {upgrades[_key] = arguments[_key];}
  return getAutumnUpgrades().filter(function (u) {return upgrades.includes(u);}).length;
}







function getAutumnatonLocations() {
  var validLocs = [];

  var page = (0,external_kolmafia_.visitUrl)("inv_use.php?pwd&whichitem=10954");
  var match;

  while ((match = page.match(/<option {2}value="(\d+)">/)) != null) {
    page = page.replace(match[0], "");
    var loc = (0,external_kolmafia_.toLocation)((0,external_kolmafia_.toInt)(match[1]));
    var outcome = getAutumnOutcome(loc);

    if (outcome == null) {
      continue;
    }

    validLocs.push({ location: loc, upgrade: outcome[0], item: outcome[1] });
  }

  return validLocs;
}

function getAutumnUpgrades() {
  return (0,external_kolmafia_.getProperty)("autumnatonUpgrades").
  split(",").
  filter(function (s) {return s.length > 0;});
}

function getAutumnOutcome(location) {
  if (location.environment == "outdoor") {
    if (location.difficultyLevel == "low") {
      return [AutumnUpgrades.ENERGY_HAT, leaf];
    } else if (location.difficultyLevel == "mid") {
      return [AutumnUpgrades.RIGHT_ARM, debrisShield];
    } else if (location.difficultyLevel == "high") {
      return [AutumnUpgrades.VISION_EXTENDER, leafPendant];
    }
  } else if (location.environment == "indoor") {
    if (location.difficultyLevel == "low") {
      return [AutumnUpgrades.LEFT_ARM, ale];
    } else if (location.difficultyLevel == "mid") {
      return [AutumnUpgrades.RIGHT_LEG, donut];
    } else if (location.difficultyLevel == "high") {
      return [AutumnUpgrades.RADAR, breeze];
    }
  } else if (location.environment == "underground") {
    if (location.difficultyLevel == "low") {
      return [AutumnUpgrades.LEFT_LEG, sweater];
    } else if (location.difficultyLevel == "mid") {
      return [AutumnUpgrades.COLLECTION_PROW, dollar];
    } else if (location.difficultyLevel == "high") {
      return [AutumnUpgrades.EXHAUST, wisdom];
    }
  }

  return null;
}
;// CONCATENATED MODULE: ./src/tasks/TaskTrainset.ts
function TaskTrainset_typeof(obj) {"@babel/helpers - typeof";return TaskTrainset_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, TaskTrainset_typeof(obj);}function TaskTrainset_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function TaskTrainset_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, TaskTrainset_toPropertyKey(descriptor.key), descriptor);}}function TaskTrainset_createClass(Constructor, protoProps, staticProps) {if (protoProps) TaskTrainset_defineProperties(Constructor.prototype, protoProps);if (staticProps) TaskTrainset_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function TaskTrainset_defineProperty(obj, key, value) {key = TaskTrainset_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function TaskTrainset_toPropertyKey(arg) {var key = TaskTrainset_toPrimitive(arg, "string");return TaskTrainset_typeof(key) === "symbol" ? key : String(key);}function TaskTrainset_toPrimitive(input, hint) {if (TaskTrainset_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (TaskTrainset_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}




var TaskTrainset = /*#__PURE__*/function () {function TaskTrainset() {TaskTrainset_classCallCheck(this, TaskTrainset);TaskTrainset_defineProperty(this, "mpSkill",
    external_kolmafia_.Skill.get("Hivemindedness"));}TaskTrainset_createClass(TaskTrainset, [{ key: "run", value:

    function run() {
      if (
      !isTrainsetConfigurable() ||
      (0,external_kolmafia_.getProperty)("questL13Final") != "unstarted")
      {
        return;
      }

      var desired = this.getDesiredPieces();
      var current = getTrainsetConfiguration();

      // If the current and desired trainset configurations are the same
      if (
      desired.length == current.length &&
      desired.find(function (d, ind) {return d != current[ind];}) == null)
      {
        return;
      }

      setTrainsetConfiguration(desired);
    } }, { key: "getDesiredPieces", value:

    function getDesiredPieces() {
      var pieces = [];

      // 1
      pieces.push(TrainsetPiece.DOUBLE_NEXT_STATION);

      // 2
      if (!(0,external_kolmafia_.haveSkill)(this.mpSkill)) {
        pieces.push(TrainsetPiece.EFFECT_MP);
      }

      // 3
      // Always double our meat if we have less than 5k
      if ((0,external_kolmafia_.myMeat)() < 5000) {
        pieces.push(TrainsetPiece.GAIN_MEAT);
      }

      // 4
      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("chasmBridgeProgress")) < 30) {
        pieces.push(TrainsetPiece.SMUT_BRIDGE_OR_STATS);
      }

      // Add the meat piece here if it wasn't added before
      if (!pieces.includes(TrainsetPiece.GAIN_MEAT)) {
        pieces.push(TrainsetPiece.GAIN_MEAT);
      }

      // 5
      pieces.push(TrainsetPiece.DROP_LAST_FOOD_OR_RANDOM);
      // 6
      pieces.push(TrainsetPiece.RANDOM_BOOZE);

      // 7
      if (
      getQuestStatus("questL08Trapper") == 1 &&
      (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get((0,external_kolmafia_.getProperty)("trapperOre"))) < 3)
      {
        pieces.push(TrainsetPiece.ORE);
      }

      // 8
      pieces.push(TrainsetPiece.CANDY);

      // And the extras

      // If kitchen isn't done.
      if (getQuestStatus("questM20Necklace") == 0) {
        pieces.push(TrainsetPiece.STENCH_RES_SPOOKY_DMG);
        pieces.push(TrainsetPiece.HOT_RES_COLD_DMG);
      }

      // If icy peak or aboo peak is up
      var booPeak =
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("booPeakProgress")) > 0 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("booPeakProgress")) < 100;
      var icyPeak =
      getQuestStatus("questL08Trapper") >= 3 &&
      getQuestStatus("questL08Trapper") < 100;
      var protesters =
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("zeppelinProtestors")) > 0 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("zeppelinProtestors")) < 80;

      if (booPeak || icyPeak) {
        pieces.push(TrainsetPiece.COLD_RES_STENCH_DMG);
      }

      if (booPeak || protesters) {
        pieces.push(TrainsetPiece.SPOOKY_RES_SLEAZE_DMG);
      }

      for (var _i = 0, _arr = [
        TrainsetPiece.BUFF_FOOD_DROP,
        TrainsetPiece.HOT_RES_COLD_DMG,
        TrainsetPiece.STENCH_RES_SPOOKY_DMG,
        TrainsetPiece.SPOOKY_RES_SLEAZE_DMG,
        TrainsetPiece.SLEAZE_RES_HOT_DMG,
        TrainsetPiece.COLD_RES_STENCH_DMG]; _i < _arr.length; _i++)
      {var leftover = _arr[_i];
        if (pieces.length >= 8) {
          break;
        }

        if (pieces.includes(leftover)) {
          continue;
        }

        pieces.push(leftover);
      }

      while (pieces.length > 8) {
        pieces.pop();
      }

      return pieces;
    } }]);return TaskTrainset;}();
;// CONCATENATED MODULE: ./src/utils/GreyFamiliars.ts
function GreyFamiliars_slicedToArray(arr, i) {return GreyFamiliars_arrayWithHoles(arr) || GreyFamiliars_iterableToArrayLimit(arr, i) || GreyFamiliars_unsupportedIterableToArray(arr, i) || GreyFamiliars_nonIterableRest();}function GreyFamiliars_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyFamiliars_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyFamiliars_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyFamiliars_arrayLikeToArray(o, minLen);}function GreyFamiliars_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyFamiliars_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyFamiliars_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}


// Map<Familiar, If it still valid>
// So the value is if this familiar is still worth running
var familiarsToUse = [];
var familiarsNotToLevel = [
external_kolmafia_.Familiar.get("Cat Burglar"),
external_kolmafia_.Familiar.get("Gelatinous Cubeling")];

var familiarsToLevel = [external_kolmafia_.Familiar.get("Reagnimated Gnome")];

function shouldLevelFamiliar(fam) {
  return (
    !familiarsNotToLevel.includes(fam) && (
    familiarsToLevel.includes(fam) ||
    familiarsToUse.find(function (_ref) {var _ref2 = GreyFamiliars_slicedToArray(_ref, 1),f = _ref2[0];return f == fam;}) == null));

}

function add(familiar, func) {
  familiarsToUse.push([familiar, func]);
}

function lessThan(familiar, propertyName, value) {
  add(external_kolmafia_.Familiar.get(familiar), function () {return (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)(propertyName)) < value;});
}

function alwaysValid(familiar) {
  add(external_kolmafia_.Familiar.get(familiar), function () {return true;});
}

function canLevel(familiar, fullLevel) {
  var fam = external_kolmafia_.Familiar.get(familiar);

  if (!familiarsToLevel.includes(fam)) {
    familiarsToLevel.push(fam);
  }

  add(fam, function () {return (0,external_kolmafia_.familiarWeight)(fam) < (fullLevel ? 20 : 15);});
}

function addLevelers(fullLevel) {
  add(
  external_kolmafia_.Familiar.get("Robortender"),
  function () {return (
      (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Robortender")) < (fullLevel ? 20 : 15) &&
      (0,external_kolmafia_.getProperty)("_roboDrinks").includes("drive-by shooting"));});

  canLevel("Pocket Professor", fullLevel);
  canLevel("Jumpsuited Hound Dog", fullLevel);
  add(
  external_kolmafia_.Familiar.get("Hobo Monkey"),
  function () {return (
      (0,external_kolmafia_.familiarWeight)(external_kolmafia_.Familiar.get("Hobo Monkey")) < (fullLevel ? 20 : 15) &&
      !(0,external_kolmafia_.haveFamiliar)(external_kolmafia_.Familiar.get("Robortender")));});

  canLevel("Stomping Boots", fullLevel);
  canLevel("Frumious Bandersnatch", fullLevel);
}

lessThan("Grimstone Golem", "_grimstoneMaskDrops", 1);
lessThan("Angry Jung Man", "_jungDrops", 1);
lessThan("Grim Brother", "_grimFairyTaleDrops", 5);
lessThan("Adventurous Spelunker", "_spelunkingTalesDrops", 1);
lessThan("Unconscious Collective", "_dreamJarDrops", 5);
lessThan("Astral badger", "_astralDrops", 5);
lessThan("Baby Sandworm", "_aguaDrops", 5);
lessThan("Blavious Kloop", "_kloopDrops", 5);
lessThan("Bloovian Groose", "_grooseDrops", 5);
lessThan("Fist Turkey", "_turkeyBooze", 5);
lessThan("Golden Monkey", "_powderedGoldDrops", 5);
lessThan("Green Pixie", "_absintheDrops", 5);
lessThan("Li'l Xenomorph", "_transponderDrops", 5);
lessThan("Llama Lama", "_gongDrops", 5);
lessThan("Ms. Puck Man", "_powerPillDrops", 5);
lessThan("Puck Man", "_powerPillDrops", 5);
lessThan("Rogue Program", "_tokenDrops", 5);
lessThan("Machine Elf", "_snowglobeDrops", 1);
lessThan("Mini-Hipster", "_hipsterAdv", 7);
lessThan("Artistic Goth Kid", "_hipsterAdv", 7);

alwaysValid("Reagnimated Gnome");
alwaysValid("Temporal Riftlet");

addLevelers(false);

alwaysValid("Cookbookbat");
alwaysValid("Obtuse Angel");
alwaysValid("XO Skeleton");

addLevelers(true);

// Crappy
lessThan("Galloping Grill", "_hotAshesDrops", 5);
lessThan("Cotton Candy Carnie", "_carnieCandyDrops", 10);
lessThan("Miniature Sword & Martini Guy", "_miniMartiniDrops", 10);
lessThan("Melodramedary", "camelSpit", 100);

var gnome = external_kolmafia_.Familiar.get("Reagnimated Gnome");
var gnomeKnee = external_kolmafia_.Item.get("gnomish housemaid's kgnee");

function getFamiliarsToUse() {
  var famsToUse = [];

  if (GreySettings_GreySettings.greyUseFamiliars.length > 0) {
    GreySettings_GreySettings.greyUseFamiliars.split(",").
    map(function (f) {return (0,external_kolmafia_.toFamiliar)(f);}).
    forEach(function (fam) {
      if (!(0,external_kolmafia_.haveFamiliar)(fam)) {
        return;
      }

      var toUse = familiarsToUse.filter(function (_ref3) {var _ref4 = GreyFamiliars_slicedToArray(_ref3, 1),f = _ref4[0];return f == fam;});

      if (toUse.length > 0 && toUse.find(function (_ref5) {var _ref6 = GreyFamiliars_slicedToArray(_ref5, 2),canUse = _ref6[1];return canUse();}) == null) {
        return;
      }

      famsToUse.push(fam);
    });
  } else {
    familiarsToUse.
    filter(function (_ref7) {var _ref8 = GreyFamiliars_slicedToArray(_ref7, 2),f = _ref8[0],canUse = _ref8[1];return (0,external_kolmafia_.haveFamiliar)(f) && canUse();}).
    forEach(function (_ref9) {var _ref10 = GreyFamiliars_slicedToArray(_ref9, 1),f = _ref10[0];
      if (famsToUse.includes(f)) {
        return;
      }

      famsToUse.push(f);
    });
  }

  // TODO Make sure this only runs when we're actually running
  if (famsToUse.includes(gnome) && (0,external_kolmafia_.availableAmount)(gnomeKnee) == 0) {
    (0,external_kolmafia_.useFamiliar)(gnome);

    (0,external_kolmafia_.visitUrl)("arena.php");
    (0,external_kolmafia_.runChoice)(4);

    if ((0,external_kolmafia_.availableAmount)(gnomeKnee) == 0) {
      throw "Expected to have " + gnomeKnee;
    }
  }

  return famsToUse;
}
;// CONCATENATED MODULE: ./src/GreyAdventurer.ts
function GreyAdventurer_typeof(obj) {"@babel/helpers - typeof";return GreyAdventurer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyAdventurer_typeof(obj);}function GreyAdventurer_toConsumableArray(arr) {return GreyAdventurer_arrayWithoutHoles(arr) || GreyAdventurer_iterableToArray(arr) || GreyAdventurer_unsupportedIterableToArray(arr) || GreyAdventurer_nonIterableSpread();}function GreyAdventurer_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyAdventurer_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function GreyAdventurer_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return GreyAdventurer_arrayLikeToArray(arr);}function GreyAdventurer_slicedToArray(arr, i) {return GreyAdventurer_arrayWithHoles(arr) || GreyAdventurer_iterableToArrayLimit(arr, i) || GreyAdventurer_unsupportedIterableToArray(arr, i) || GreyAdventurer_nonIterableRest();}function GreyAdventurer_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyAdventurer_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyAdventurer_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyAdventurer_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyAdventurer_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyAdventurer_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyAdventurer_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyAdventurer_arrayLikeToArray(o, minLen);}function GreyAdventurer_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyAdventurer_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyAdventurer_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyAdventurer_toPropertyKey(descriptor.key), descriptor);}}function GreyAdventurer_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyAdventurer_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyAdventurer_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyAdventurer_defineProperty(obj, key, value) {key = GreyAdventurer_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyAdventurer_toPropertyKey(arg) {var key = GreyAdventurer_toPrimitive(arg, "string");return GreyAdventurer_typeof(key) === "symbol" ? key : String(key);}function GreyAdventurer_toPrimitive(input, hint) {if (GreyAdventurer_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyAdventurer_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}


























var GreyAdventurer_GreyAdventurer = /*#__PURE__*/function () {function GreyAdventurer() {GreyAdventurer_classCallCheck(this, GreyAdventurer);GreyAdventurer_defineProperty(this, "goose",
    external_kolmafia_.Familiar.get("Grey Goose"));GreyAdventurer_defineProperty(this, "adventureFinder",
    new AdventureFinder());GreyAdventurer_defineProperty(this, "goTime", void 0);GreyAdventurer_defineProperty(this, "tasks",

    [
    new TaskEater(),
    new TaskSellCrap(),
    new TaskColdMedicineCabinet(),
    new TaskCouncil(),
    new TaskLatteFiller(),
    new TaskMaintainStatus(),
    new TaskFuelAsdon(),
    new TaskJuneCleaver(),
    new TaskBoomboxSwitch(),
    new TaskEquipDistillery(),
    new TaskAutumnaton(),
    new TaskTrainset()
    //new TaskBountyHunter(),
    ]);GreyAdventurer_defineProperty(this, "freeRunners",

    [
    "Greatest American Pants",
    "navel ring of navel gazing"].
    map(function (s) {return external_kolmafia_.Item.get(s);}));GreyAdventurer_defineProperty(this, "lastTasksComplete",
    -1);GreyAdventurer_defineProperty(this, "gnome",
    external_kolmafia_.Familiar.get("Reagnimated Gnome"));GreyAdventurer_defineProperty(this, "gnomeKnee",
    external_kolmafia_.Item.get("gnomish housemaid's kgnee"));}GreyAdventurer_createClass(GreyAdventurer, [{ key: "runTurn", value:

    function runTurn(goTime) {
      this.goTime = goTime;

      if (goTime) {var _iterator = GreyAdventurer_createForOfIteratorHelper(
          this.tasks),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var task = _step.value;
            task.run();
          }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
      }

      this.adventureFinder.start();

      var goodAdventure = this.adventureFinder.findGoodVisit();

      this.adventureFinder.printStatus(this.adventureFinder.possibleAdventures);

      if (goodAdventure == null) {
        if (getQuestStatus("questL13Final") > 11) {
          (0,external_kolmafia_.print)("You've defeated the NS and saved the day!", "blue");

          if ((0,external_kolmafia_.myAdventures)() > 40) {
            (0,external_kolmafia_.print)(
            "Caution! Burn your adventures! You have more than 40 adventures! Breaking the prism will reset them to 40!",
            "red");

          } else {
            (0,external_kolmafia_.print)(
            "Break the prism and become that class you were always meant to be!",
            "blue");

          }
        } else {
          (0,external_kolmafia_.print)("Failed, should have printed an error..", "gray");
        }

        return false;
      }

      var snapshot = createResourcesSnapshot(goodAdventure.path);

      if (getPrimedResource() == null) {
        this.adventureFinder.tryPrime(goodAdventure);
      }

      this.printMessage(goodAdventure);

      if (shouldGreydayStop()) {
        return false;
      }

      this.runAdventure(goodAdventure);

      var changed =
      goodAdventure.path == null ?
      getResourcesChanged(snapshot) :
      goodAdventure.path.detectResourceUsage(snapshot);

      if (this.isMismatch(snapshot, changed)) {
        return false;
      }

      if (getPrimedResource() != null && getPrimedResource().resource.primed()) {
        (0,external_kolmafia_.print)(
        "Successfully primed for quest " + getPrimedResource().quest.getId(),
        "blue");

      }

      return true;
    } }, { key: "isMismatch", value:

    function isMismatch(
    snapshotBeforeRun,
    changedBy)
    {
      var expected = new Map();var _iterator2 = GreyAdventurer_createForOfIteratorHelper(

        ResourceTypes/* ResourceIds */.is),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var resourceId = _step2.value;
          expected.set(resourceId, snapshotBeforeRun.resourceMap.get(resourceId));
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}var _iterator3 = GreyAdventurer_createForOfIteratorHelper(

        changedBy.resources),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _resource$resourcesUs;var resource = _step3.value;
          expected.set(
          resource.resource,
          expected.get(resource.resource) - ((_resource$resourcesUs = resource.resourcesUsed) !== null && _resource$resourcesUs !== void 0 ? _resource$resourcesUs : 1));

        }

        // Resource ID
        // What it was before we used resources
        // How much the snapshot said changed
        // What it should be after we used resources
        // What it currently is
      } catch (err) {_iterator3.e(err);} finally {_iterator3.f();}var mismatch =
      new Map();var _iterator4 = GreyAdventurer_createForOfIteratorHelper(

        ResourceTypes/* ResourceIds */.is),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var id = _step4.value;
          if (expected.get(id) == (0,ResourceTypes/* getResourcesLeft */.r)(id)) {
            continue;
          }

          // If we actually gained resources, probs clovers..
          if (snapshotBeforeRun.resourceMap.get(id) < (0,ResourceTypes/* getResourcesLeft */.r)(id)) {
            continue;
          }

          if (id == "Yellow Ray") {
            continue;
          } else if (id == "Pull" && (0,ResourceTypes/* getResourcesLeft */.r)(id) > 50) {
            continue;
          }

          mismatch.set(id, [
          snapshotBeforeRun.resourceMap.get(id),
          changedBy.resourceMap.get(id),
          expected.get(id),
          (0,ResourceTypes/* getResourcesLeft */.r)(id)]);

        }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

      if (mismatch.size == 0) {
        return false;
      }

      (0,external_kolmafia_.print)("Mismatch in resources used, aborting to be safe.", "red");

      (0,external_kolmafia_.print)("These resources were allowed to be used: ".concat(
      snapshotBeforeRun.resources.map(
      function (r) {var _r$resourcesUsed;return (
          r.name +
          " (" +
          ResourceTypes/* ResourceCategory */.s6[r.type] +
          ", uses " + ((_r$resourcesUsed =
          r.resourcesUsed) !== null && _r$resourcesUsed !== void 0 ? _r$resourcesUsed : 1) +
          ")");})),

      "red");

      (0,external_kolmafia_.print)("These resources were marked as used: ".concat(
      changedBy.resources.map(
      function (r) {var _r$resourcesUsed2;return (
          r.name +
          " (" +
          ResourceTypes/* ResourceCategory */.s6[r.type] +
          ", uses " + ((_r$resourcesUsed2 =
          r.resourcesUsed) !== null && _r$resourcesUsed2 !== void 0 ? _r$resourcesUsed2 : 1) +
          ")");})),

      "red");


      mismatch.forEach(
      function (_ref, resourceId) {var _ref2 = GreyAdventurer_slicedToArray(_ref, 4),beforeUsage = _ref2[0],changedBy = _ref2[1],shouldBe = _ref2[2],actualResource = _ref2[3];
        (0,external_kolmafia_.print)("".concat(
        resourceId, " was ").concat(beforeUsage, " and calculated to be ").concat(shouldBe, ", expected to have changed by ").concat(changedBy, ". Is now ").concat(actualResource),
        "red");

      });


      return true;
    } }, { key: "printMessage", value:

    function printMessage(goodAdventure) {
      var plan = [];

      if (goodAdventure.quest != null) {
        plan.push("Quest");
      }

      if (goodAdventure.locationInfo != null) {
        if (goodAdventure.locationInfo.turnsToGain > 0) {
          plan.push(
          "Absorb Adventures (Expect " +
          goodAdventure.locationInfo.expectedTurnsProfit +
          " profit of total " +
          goodAdventure.locationInfo.turnsToGain +
          " possible)");

        }

        if (goodAdventure.locationInfo.skills.size > 0) {
          var skills = [];

          goodAdventure.locationInfo.skills.forEach(function (v, k) {
            skills.push(k.skill.name + " (" + v + ")");
          });

          plan.push("Grab Skills: " + skills.join(", "));
        }

        if (goodAdventure.locationInfo.monsters != null) {
          var monsters = [];

          var absorbed = this.adventureFinder.defeated;

          goodAdventure.locationInfo.monsters.
          map(function (m) {
            var absorb = GreyAbsorber_AbsorbsProvider.getAbsorb(m);

            if (absorb == null) {
              return m.name;
            }

            if (absorb.skill != null) {
              return m.name + " (Skill)";
            }

            if ((absorb.adventures || 0) <= 0) {
              return m.name;
            }

            if (absorbed.get(m) == Reabsorbed.REABSORBED) {
              return m.name;
            }

            return (
              m.name + " (Absorbs x " + (!absorbed.has(m) ? "2" : "1") + ")");

          }).
          forEach(function (m) {return monsters.push(m);});

          plan.push("Fight: " + monsters.join(", "));
        }
      }

      var prefix;

      if (goodAdventure.quest != null) {
        prefix =
        goodAdventure.quest.getId() + " @ " + goodAdventure.adventure.location;
      } else {
        prefix = "Non-Quest @ " + goodAdventure.adventure.location;
      }

      var completed = 0;
      var notReady = 0;
      var inProgress = 0;var _iterator5 = GreyAdventurer_createForOfIteratorHelper(

        this.adventureFinder.allQuests),_step5;try {for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {var _step5$value = GreyAdventurer_slicedToArray(_step5.value, 2),quest = _step5$value[0],path = _step5$value[1];
          var status = quest.status(path);

          if (status == QuestStatus.COMPLETED) {
            completed++;
          } else if (status == QuestStatus.NOT_READY) {
            notReady++;
          } else {
            inProgress++;
          }
        }} catch (err) {_iterator5.e(err);} finally {_iterator5.f();}

      var changed =
      this.lastTasksComplete >= 0 ? completed - this.lastTasksComplete : 0;
      this.lastTasksComplete = completed;

      (0,external_kolmafia_.printHtml)(
      "<font color='blue'>Tasks Complete: " +
      completed + (
      changed > 0 ? "<font color='green'> (+" + changed + ")</font>" : "") +
      " / " +
      this.adventureFinder.allQuests.length +
      "</font>");


      (0,external_kolmafia_.printHtml)(
      "<u>" +
      doColor(prefix, "blue") +
      ", Goals:</u> " +
      doColor(plan.map(function (s) {return "<u>" + s + "</u>";}).join(", "), "gray") +
      " Consideration: " +
      ConsiderPriority[goodAdventure.considerPriority],
      true);

    } }, { key: "doOutfitPrep", value:

    function doOutfitPrep(adventure) {var _this = this;
      var toRun = adventure.adventure;
      var outfit = toRun.outfit;

      if (toRun.location == external_kolmafia_.Location.get("Inside the Palindome")) {
        outfit.addWeight(external_kolmafia_.Item.get("Talisman o' Namsilat"));
      } else if (toRun.location == external_kolmafia_.Location.get("The Icy Peak")) {
        outfit.addWeight("cold res", 5, 5);
      }

      var doOrb = false;

      if (
      adventure.orbStatus != OrbStatus.IGNORED &&
      adventure.orbStatus != OrbStatus.NEEDS_RESET &&
      adventure.considerPriority != ConsiderPriority.BAD_ABSORB)
      {
        doOrb = true;

        if (
        adventure.orbStatus == OrbStatus.NOT_SET &&
        adventure.quest == null && (
        toRun.location == null || toRun.location.combatQueue.length > 3))
        {
          outfit.addWeight(external_kolmafia_.Item.get("Kramco Sausage-o-Matic&trade;"), 20);
        }
      }

      var wantToAbsorb =
      adventure.locationInfo != null &&
      adventure.locationInfo.turnsToGain > 0 && (
      !doOrb ||
      adventure.considerPriority != ConsiderPriority.ORB_OTHER &&
      adventure.considerPriority != ConsiderPriority.ORB_ABSORB_OTHER);
      var gooseReplaceable =
      !wantToAbsorb && this.adventureFinder.hasEnoughGooseWeight();
      var canDoMagGlass =
      this.adventureFinder.hasEnoughGooseWeight() &&
      outfit.minusCombatWeight == 0 &&
      outfit.itemDropWeight < 1 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cursedMagnifyingGlassCount")) < 13 &&
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_voidFreeFights")) < 5;
      var reallyLovesMagGlass =
      (0,external_kolmafia_.getProperty)("sidequestLighthouseCompleted") == "none" &&
      (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("barrel of gunpowder")) < 5;

      if (canDoMagGlass) {
        var bonus = 10;

        if (reallyLovesMagGlass) {
          bonus = 100;
        }

        outfit.addWeight(external_kolmafia_.Item.get("cursed magnifying glass"), bonus);
      } else if (
      (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("cursedMagnifyingGlassCount")) == 13 &&
      outfit.minusCombatWeight < 0)
      {
        outfit.addWeight(external_kolmafia_.Item.get("cursed magnifying glass"), -50);
      } else if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_voidFreeFights")) >= 5) {
        outfit.addWeight(external_kolmafia_.Item.get("cursed magnifying glass"), -30);
      }

      if (adventure.considerPriority == ConsiderPriority.ORB_ABSORB) {
        outfit.addIgnored(external_kolmafia_.Item.get("Carnivorous potted plant"));
      }

      if ((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("scrapbookCharges")) < 100) {
        var _bonus = 2;

        if (GreySettings_GreySettings.greyPrepareLevelingResources) {
          _bonus = 6;

          if (canDoMagGlass) {
            _bonus = 11;
          }
        }

        outfit.addWeight(external_kolmafia_.Item.get("familiar scrapbook"), _bonus);
      }

      var sweat = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("sweat"));

      if (sweat < 100 && outfit.itemDropWeight < 1) {
        outfit.addWeight(external_kolmafia_.Item.get("designer sweatpants"), sweat < 5 ? 16 : 8);
      }

      outfit.addWeight(external_kolmafia_.Item.get("june cleaver"), 1);

      var powerLevelGoose = false;
      // We want cat burglar to always be charged first
      var prioritize = [
      external_kolmafia_.Familiar.get("Cat Burglar"),
      external_kolmafia_.Familiar.get("Gelatinous Cubeling")];


      var familiar = this.goose;

      if (
      toRun.familiar != null && (
      toRun.disableFamOverride == true || !wantToAbsorb))
      {
        familiar = toRun.familiar;
      } else if (gooseReplaceable) {
        var replaceWith = [];

        // If we don't expect to be doing absorbs in the future..
        if (
        GreySettings_GreySettings.greyPrepareLevelingResources &&
        (0,external_kolmafia_.familiarWeight)(this.goose) < 20 &&
        (0,external_kolmafia_.absorbedMonsters)()["tomb asp"] == true &&
        (0,external_kolmafia_.getProperty)("questL09Topping") == "finished")
        {
          GreyAbsorber_AbsorbsProvider.remainingAdvAbsorbs =
          GreyAbsorber_AbsorbsProvider.remainingAdvAbsorbs.filter(
          function (m) {return !GreyAbsorber_AbsorbsProvider.getReabsorbedMonsters().includes(m);});


          if (GreyAbsorber_AbsorbsProvider.remainingAdvAbsorbs.length <= 3) {
            replaceWith.push(this.goose);
            powerLevelGoose = true;
          }
        }

        var recced = this.adventureFinder.getRecommendedFamiliars();

        // If fam wants to be charged, add it to the list
        var _iterator6 = GreyAdventurer_createForOfIteratorHelper(prioritize),_step6;try {for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {var fam = _step6.value;
            if (!recced.includes(fam)) {
              continue;
            }

            replaceWith.push(fam);
          }

          // Add every other fam, exclude burglar.
        } catch (err) {_iterator6.e(err);} finally {_iterator6.f();}replaceWith.push.apply(replaceWith, GreyAdventurer_toConsumableArray(recced.filter(function (f) {return !replaceWith.includes(f);})));
        replaceWith.push.apply(replaceWith, GreyAdventurer_toConsumableArray(getFamiliarsToUse()));

        replaceWith.push(this.goose);

        familiar = replaceWith.filter(
        function (f) {return (0,external_kolmafia_.haveFamiliar)(f) && (!doOrb || f != _this.gnome);})[
        0];
      }

      if (
      doOrb ||
      toRun.familiar == null && gooseReplaceable ||
      familiar == external_kolmafia_.Familiar.get("Melodramedary"))
      {
        outfit.addWeight(external_kolmafia_.Item.get("june cleaver"), 10);
      }

      if (familiar == this.gnome) {
        outfit.addWeight(this.gnomeKnee);
      }

      if (
      adventure.mayFreeRun && (
      familiar != this.goose || (0,external_kolmafia_.familiarWeight)(this.goose) >= 6))
      {
        var item = this.freeRunners.find(function (i) {return (0,external_kolmafia_.availableAmount)(i) > 0;});

        if (item != null) {
          outfit.addWeight(item, 12);
        }
      }

      var locationToSet = toRun.location;

      if (locationToSet == null) {
        locationToSet = external_kolmafia_.Location.get("Noob Cave");
      }

      (0,external_kolmafia_.setLocation)(locationToSet);

      if ((0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("Unbreakable Umbrella")) > 0) {
        setUmbrella(outfit.getUmbrella());
      }

      (0,external_kolmafia_.useFamiliar)(familiar);

      if (!shouldLevelFamiliar(familiar)) {
        outfit.famExpWeight = 0;
      } else if (
      familiar != this.goose ||
      (0,external_kolmafia_.familiarWeight)(this.goose) >= 6 &&
      !powerLevelGoose &&
      adventure.considerPriority != ConsiderPriority.ORB_ABSORB)
      {
        outfit.famExpWeight =
        adventure.considerPriority == ConsiderPriority.RANDOM_ABSORB ? 3 : 1;
      }

      if (shouldGreydayStop()) {
        return;
      }

      var primed = getPrimedResource();

      if (primed != null) {
        primed.resource.prepare(outfit);
      }

      var maximizeResult = (0,external_kolmafia_.maximize)(
      outfit.createString() +
      " " + (
      doOrb ? "+99999 bonus" : "-equip") +
      " miniature crystal ball",
      false);


      if (!maximizeResult) {
        throw "Failed to maximize. Either fix, or report to the script author";
      }

      if (shouldGreydayStop()) {
        return;
      }

      if (primed != null) {
        primed.resource.prepare(null);
      }

      var closet = external_kolmafia_.Item.get("Funky junk key");

      if ((0,external_kolmafia_.itemAmount)(closet) > 0) {
        (0,external_kolmafia_.putCloset)(closet, (0,external_kolmafia_.itemAmount)(closet));
      }
    } }, { key: "runAdventure", value:

    function runAdventure(adventure) {
      var toRun = adventure.adventure;

      if (toRun.outfit != GreyOutfit.IGNORE_OUTFIT) {
        if (toRun.outfit == null) {
          toRun.outfit = new GreyOutfit();
        }

        this.doOutfitPrep(adventure);

        if (shouldGreydayStop()) {
          return;
        }
      } else if (toRun.outfit == null) {
        toRun.outfit = new GreyOutfit();
      }

      if (this.goTime) {
        var turn = (0,external_kolmafia_.turnsPlayed)();

        try {
          var choices = handledChoices.join(",");

          GreyAdventurer.currentAdventure = adventure;
          toRun.run();

          var afterChoices = handledChoices.join(",");

          if (
          choices != afterChoices &&
          (0,external_kolmafia_.getProperty)("greyIgnoreErrors") != "true")
          {
            throw (
              "Expected handled choices to be the same after the adenture was run! Previously: " +
              choices +
              ", now: " +
              afterChoices +
              ". To ignore this, set 'greyIgnoreErrors' to 'true'");

          }
        } finally {
          GreyAdventurer.currentAdventure = null;

          if (GreySettings_GreySettings.greyDebug) {
            var name = "grey_turns_played_".concat((0,external_kolmafia_.myAscensions)(), ".txt");

            var buffer = (0,external_kolmafia_.fileToBuffer)(name);

            if (buffer == "") {
              buffer =
              "# Turns Played\tQuest ID\tLocation\tTurns Taken\tFamiliar";
            }

            var id = adventure.quest ? adventure.quest.getId() : "Non-Quest";

            toRun.location;

            buffer += "\n".concat((0,external_kolmafia_.turnsPlayed)(), "\t").concat(id, "\t").concat(toRun.location, "\t").concat(
            (0,external_kolmafia_.turnsPlayed)() - turn, "\t").concat(
            (0,external_kolmafia_.myFamiliar)());

            (0,external_kolmafia_.bufferToFile)(buffer.toString(), name);
          }
        }
      } else {
        (0,external_kolmafia_.print)("Sim run()!");
      }
    } }]);return GreyAdventurer;}();GreyAdventurer_defineProperty(GreyAdventurer_GreyAdventurer, "currentAdventure", void 0);


function castNoCombatSkills() {
  if (
  (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Phase Shift")) &&
  (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Shifted Phase")) == 0 &&
  restoreMPTo(50))
  {
    (0,external_kolmafia_.useSkill)(external_kolmafia_.Skill.get("Phase Shift"));
  }

  if (
  (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Photonic Shroud")) &&
  (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Darkened Photons")) == 0 &&
  restoreMPTo(50))
  {
    (0,external_kolmafia_.useSkill)(external_kolmafia_.Skill.get("Photonic Shroud"));
  }

  restoreMPTo(20);

  if ((0,external_kolmafia_.myMp)() < 20) {
    throw "Expected at least 20 mp";
  }
}

function castCombatSkill() {
  if (
  (0,external_kolmafia_.haveSkill)(external_kolmafia_.Skill.get("Piezoelectric Honk")) &&
  (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Hooooooooonk!")) == 0 &&
  restoreMPTo(50))
  {
    (0,external_kolmafia_.useSkill)(external_kolmafia_.Skill.get("Piezoelectric Honk"));
  }

  restoreMPTo(20);

  if ((0,external_kolmafia_.myMp)() < 20) {
    throw "Expected at least 20 mp";
  }
}

var skillPhaseShift = external_kolmafia_.Skill.get("Phase Shift");
var skillPhotonicShroud = external_kolmafia_.Skill.get("Photonic Shroud");
var skillHonk = external_kolmafia_.Skill.get("Piezoelectric Honk");

function hasNonCombatSkillsReady() {var wantBoth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var s1 = (0,external_kolmafia_.haveSkill)(skillPhaseShift);
  var s2 = (0,external_kolmafia_.haveSkill)(skillPhotonicShroud);

  var s1e = (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Shifted Phase")) > 0;
  var s2e = (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Darkened Photons")) > 0;

  if (wantBoth) {
    return (
      s1 &&
      s2 &&
      (s1e ? 0 : 50) + (s2e ? 0 : 40) + 20 <= (0,external_kolmafia_.myMp)() + (0,external_kolmafia_.myMeat)() / 200);

  }

  return s1e || s2e || (s1 || s2) && (0,external_kolmafia_.myMp)() + (0,external_kolmafia_.myMeat)() / 200 >= 60;
}

function hasCombatSkillReady() {
  return (
    hasCombatSkillActive() ||
    (0,external_kolmafia_.haveSkill)(skillHonk) && (0,external_kolmafia_.myMp)() + (0,external_kolmafia_.myMeat)() / 200 >= 50);

}

function hasBanisherSkill() {
  return haveSkill(Skill.get("System Sweep"));
}

function hasCombatSkillActive() {
  return (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Hooooooooonk!")) > 0;
}

function hasNonCombatSkillActive() {
  return (
    (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Shifted Phase")) > 0 ||
    (0,external_kolmafia_.haveEffect)(external_kolmafia_.Effect.get("Darkened Photons")) > 0);

}
;// CONCATENATED MODULE: ./src/utils/RandomChoiceHandler.ts


function getBackupChoices() {
  var backupChoices = [];

  var choices = function choices(choiceNumber) {for (var _len = arguments.length, choices = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {choices[_key - 1] = arguments[_key];}
    for (var _i = 0, _choices = choices; _i < _choices.length; _i++) {var choice = _choices[_i];
      backupChoices.push([choiceNumber, choice]);
    }
  };

  // Sleazy back alley
  choices(112, 1);
  choices(110, 4);
  choices(109, 1);
  choices(108, 4);
  choices(31, 2);

  // Skeleton Office
  choices(1060, 4, 1);

  // Madness Bakery
  choices(1061, 1, 4);

  // Overgrown lot
  choices(1062, 5, 3);

  // Deep Machine
  choices(1119, 6);

  // NEP
  choices(1322, 6);
  choices(1324, 5);

  // Manor pantry
  choices(888, 4);
  choices(889, 5);
  choices(114, 2);
  choices(115, 1);
  choices(116, 4);
  choices(117, 1);

  // Manor library
  choices(163, 3);

  // Manor billards
  choices(875, 1, 3);

  // Manor gallery
  choices(91, 2);
  choices(89, 4);

  // Manor bathroom
  choices(90, 3);
  choices(106, 3);
  choices(107, 4);
  choices(105, 2);
  choices(402, 3);
  choices(882, 1);

  // Manor bedroom
  choices(876, 1);
  choices(877, 1);
  choices(878, 4);
  choices(879, 4, 2);
  choices(880, 1, 2);

  // Manor babies
  choices(884, 1);
  choices(885, 1);
  choices(886, 1);

  // Palin
  choices(180, 2);
  choices(127, 1);
  choices(126, 1);

  // Airship
  choices(178, 2);
  choices(182, 4, 1);
  choices(669, 1, 4);
  choices(670, 1, 5);
  choices(671, 1);
  choices(672, 3);
  choices(673, 3);
  choices(674, 3);
  choices(677, 2, 1);
  choices(678, 1);
  choices(1026, 2);
  choices(1431, 1);
  choices(676, 1);
  choices(675, 1);

  // Knob Goblin
  choices(76, 3);
  choices(111, 3);
  choices(113, 1, 2);
  choices(118, 2);
  choices(120, 4);
  choices(522, 2);

  // Crypts
  choices(153, 4);
  choices(157, 4);
  choices(155, 4, 5);
  choices(523, 4);
  choices(527, 2);

  // Distant woods
  // The NC
  choices(502, 2);
  choices(505, 2);

  choices(46, 3);
  choices(47, 2);
  choices(73, 2);
  choices(74, 2);
  choices(75, 2);
  choices(511, 2);
  choices(512, 2);
  choices(579, 2);
  choices(581, 3);
  choices(582, 1);
  choices(584, 4);
  choices(794, 1);
  choices(795, 1);
  choices(796, 2);
  choices(798, 1);
  choices(923, 1);
  choices(924, 1);

  // Hidden city
  choices(785, 6);
  choices(783, 6);
  choices(781, 6);
  choices(787, 6);
  choices(791, 6);
  choices(788, 1);
  choices(786, 1);
  choices(789, 6);
  choices(784, 1);
  choices(780, 6);
  choices(787, 1, 6);
  choices(685, 1, 6);
  choices(783, 1, 6);
  choices(781, 1, 6);

  // Smut orcs
  choices(1345, 3);

  // Daily dungeon
  choices(692, 3, 8);
  choices(693, 2, 3);
  choices(690, 2);
  choices(691, 2);
  choices(689, 1);

  // Mountains
  choices(25, 3);
  choices(297, 3);
  choices(451, 1);

  // Mountain Peak
  choices(15, 3);
  choices(16, 3);
  choices(17, 3);
  choices(575, 3);
  choices(18, 3);
  choices(19, 3);
  choices(20, 3);
  choices(556, 2);

  // Protesters
  choices(856, 2);
  choices(857, 2);
  choices(858, 2);

  // Desert
  choices(4, 3);
  choices(929, 6);

  // Desert vacation
  choices(793, 4);

  // Island
  choices(22, 3);
  choices(23, 3);
  choices(24, 2);
  choices(72, 2);
  choices(138, 4);
  choices(136, 3);
  choices(137, 3);
  choices(181, 2);
  choices(1433, 3, 1, 2);
  choices(1434, 2, 3, 1);

  // Island war
  choices(147, 3);
  choices(148, 1);
  choices(149, 2);

  choices(139, 3);
  choices(140, 3);
  choices(141, 2);
  choices(142, 3, 2);
  choices(143, 3);
  choices(144, 3);
  choices(145, 2);
  choices(146, 3, 2);

  // Signed zones
  choices(5, 2);

  choices(696, 1, 2);
  choices(697, 1, 2);
  choices(698, 1, 2);

  // Manor lights
  for (var _i2 = 0, _arr = [
    890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903]; _i2 < _arr.length; _i2++)
  {var choiceNo = _arr[_i2];
    choices(choiceNo, 1, 2, 3);
  }

  // Lil Doctor Bag, turn it off today if we have all upgrades. Otherwise accept.
  choices(1340, (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("doctorBagUpgrades")) >= 5 ? 3 : 1);
  choices(1341, 1);

  // Haunted dog
  choices(1108, 1); // Food
  choices(1106, 3); //Dog chow
  choices(1107, (0,external_kolmafia_.myMeat)() < 6000 ? 3 : 1); // Meat or tennis ball

  // Gingerbread city
  choices(1215, 1); // Set the clock forward

  return backupChoices;
}
;// CONCATENATED MODULE: ./src/utils/GreyLocations.ts
function GreyLocations_typeof(obj) {"@babel/helpers - typeof";return GreyLocations_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreyLocations_typeof(obj);}function GreyLocations_slicedToArray(arr, i) {return GreyLocations_arrayWithHoles(arr) || GreyLocations_iterableToArrayLimit(arr, i) || GreyLocations_unsupportedIterableToArray(arr, i) || GreyLocations_nonIterableRest();}function GreyLocations_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyLocations_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyLocations_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyLocations_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyLocations_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyLocations_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyLocations_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyLocations_arrayLikeToArray(o, minLen);}function GreyLocations_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function GreyLocations_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreyLocations_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreyLocations_toPropertyKey(descriptor.key), descriptor);}}function GreyLocations_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreyLocations_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreyLocations_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreyLocations_defineProperty(obj, key, value) {key = GreyLocations_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreyLocations_toPropertyKey(arg) {var key = GreyLocations_toPrimitive(arg, "string");return GreyLocations_typeof(key) === "symbol" ? key : String(key);}function GreyLocations_toPrimitive(input, hint) {if (GreyLocations_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreyLocations_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}

















var primedResource;

function runPrimedResource() {
  if (getPrimedResource() == null || getPrimedResource().resource.primed()) {
    return;
  }

  getPrimedResource().resource.attemptPrime();
}

function getPrimedResource() {
  return primedResource;
}

function resetPrimedResource() {
  if (getPrimedResource() == null) {
    return;
  }

  if (getPrimedResource().resource.primed()) {
    throw "Can't reset a resource that's been primed";
  }

  primedResource = null;
}

function setPrimedResource(
quest,
path,
resource)
{
  if (getPrimedResource() != null) {
    throw (
      "A resource " +
      getPrimedResource().quest.getId() +
      " has already been set to be primed. Said resource primed? " +
      getPrimedResource().resource.primed());

  }

  if (resource.primed == null) {
    throw "This resource isn't one that can be primed";
  }

  if (resource.primed()) {
    throw "This resource ".concat(resource.name, " is already primed. For now, either use the primed resource or run \"greyday unprime\" to ignore that");
  }

  if (quest.status(path) == QuestStatus.COMPLETED) {
    throw "The quest " + quest.getId() + " claims to be completed";
  }

  primedResource = {
    quest: quest,
    path: path,
    resource: resource
  };
}

var AdventureSettings = /*#__PURE__*/function () {function AdventureSettings() {GreyLocations_classCallCheck(this, AdventureSettings);GreyLocations_defineProperty(this, "startOfFightMacro", void 0);GreyLocations_defineProperty(this, "duringFightMacro", void 0);GreyLocations_defineProperty(this, "finishingBlowMacro", void 0);GreyLocations_defineProperty(this, "choices", void 0);GreyLocations_defineProperty(this, "dontBanishThese", void 0);GreyLocations_defineProperty(this, "banishThese", void 0);GreyLocations_defineProperty(this, "nonquest",






    false);}GreyLocations_createClass(AdventureSettings, [{ key: "addBanishes", value:

    function addBanishes(monsters) {var _iterator = GreyLocations_createForOfIteratorHelper(
        monsters),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var monster = _step.value;
          this.addBanish(monster);
        }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return this;
    } }, { key: "addBanish", value:

    function addBanish(monster) {
      if (this.dontBanishThese != null) {
        throw "Already declared banish everything but";
      }

      if (this.banishThese == null) {
        this.banishThese = [];
      }

      this.banishThese.push(monster);

      return this;
    } }, { key: "addNoBanishes", value:

    function addNoBanishes(monsters) {var _iterator2 = GreyLocations_createForOfIteratorHelper(
        monsters),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var monster = _step2.value;
          this.addNoBanish(monster);
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      return this;
    } }, { key: "addNoBanish", value:

    function addNoBanish(monster) {
      if (this.banishThese != null) {
        throw "Already declared banish only X";
      }

      if (this.dontBanishThese == null) {
        this.dontBanishThese = [];
      }

      this.dontBanishThese.push(monster);

      return this;
    } }, { key: "setBanishAnything", value:

    function setBanishAnything() {
      if (this.dontBanishThese != null || this.banishThese != null) {
        throw "Already declared some banishing";
      }

      if (this.dontBanishThese == null) {
        this.dontBanishThese = [];
      }

      return this;
    } }, { key: "setChoices", value:

    function setChoices(choices) {
      this.choices = choices;

      return this;
    } }, { key: "setStartOfFightMacro", value:

    function setStartOfFightMacro(startOfFightMacro) {
      this.startOfFightMacro = startOfFightMacro;

      return this;
    } }, { key: "setDuringFightMacro", value:

    function setDuringFightMacro(duringFightMacro) {
      this.duringFightMacro = duringFightMacro;

      return this;
    } }, { key: "setFinishingBlowMacro", value:

    function setFinishingBlowMacro(finishingBlowMacro) {
      this.finishingBlowMacro = finishingBlowMacro;

      return this;
    } }]);return AdventureSettings;}();


var backupChoices = getBackupChoices();
var freeRunners = [
"navel ring of navel gazing",
"Greatest American Pants"].
map(function (s) {return external_kolmafia_.Item.get(s);});

function greyAdv(
location,
outfit,
settings)
{
  if (outfit == null) {
    outfit = new GreyOutfit();
  }

  if (settings == null) {
    settings = new AdventureSettings();
  }

  var macro;

  var createMacro = function createMacro() {
    if (settings.startOfFightMacro == null) {
      macro = new MacroBuilder/* Macro */.LE();
    } else {
      macro = settings.startOfFightMacro;
    }

    if (settings.duringFightMacro == null) {
      macro.step(greyDuringFightMacro(settings));
    } else {
      macro.
      step(settings.duringFightMacro).
      step(greyDuringFightMacro(settings));
    }

    if (settings.finishingBlowMacro == null) {
      if (
      freeRunners.find(function (i) {return (0,external_kolmafia_.equippedAmount)(i) > 0;}) != null &&
      GreyAdventurer_GreyAdventurer.currentAdventure != null &&
      GreyAdventurer_GreyAdventurer.currentAdventure.freeRun != null &&
      GreyAdventurer_GreyAdventurer.currentAdventure.freeRun((0,external_kolmafia_.lastMonster)(), settings))
      {
        macro.runaway();
      }

      runPrimedResource();

      macro.step(greyKillingBlow(outfit));
    } else {
      macro.step(settings.finishingBlowMacro);
    }
  };

  var choicesRun = [];

  var runChoice = function runChoice() {
    var choiceToPick;

    if (Object.keys((0,external_kolmafia_.availableChoiceOptions)()).length == 0) {
      (0,external_kolmafia_.visitUrl)("choice.php");
    }

    if ((0,external_kolmafia_.lastChoice)() == 904) {
      (0,external_kolmafia_.cliExecute)("choice-goal");
      return "";
    }

    var juneCleaver = (0,external_kolmafia_.lastChoice)() >= 1467 && (0,external_kolmafia_.lastChoice)() <= 1475;

    if (juneCleaver) {
      choiceToPick = (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("choiceAdventure" + (0,external_kolmafia_.lastChoice)()));
    } else if (settings.choices != null) {
      if (settings.choices.calledOutOfScopeChoiceBehavior((0,external_kolmafia_.lastChoice)())) {
        return;
      }

      choiceToPick = settings.choices.handleChoice((0,external_kolmafia_.lastChoice)());
    }

    if (choiceToPick == null) {
      loop: for (var _i = 0, _arr = [handledChoices, backupChoices]; _i < _arr.length; _i++) {var choices = _arr[_i];var _iterator3 = GreyLocations_createForOfIteratorHelper(
          choices),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _step3$value = GreyLocations_slicedToArray(_step3.value, 2),choiceNumber = _step3$value[0],choiceValue = _step3$value[1];
            if (choiceNumber != (0,external_kolmafia_.lastChoice)()) {
              continue;
            }

            if ((0,external_kolmafia_.availableChoiceOptions)()[choiceValue] == null) {
              continue;
            }

            choiceToPick = choiceValue;
            break loop;
          }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}
      }
    }

    if (choiceToPick == null) {
      (0,external_kolmafia_.print)("Oh god", "red");
      throw "No idea what to do! Handle the choice manually? Report this issue! Reported to be in choice ".concat((0,external_kolmafia_.lastChoice)(), " with choice options ").concat((0,external_kolmafia_.toJson)(
      (0,external_kolmafia_.availableChoiceOptions)()), ", handling choice: ").concat(
      (0,external_kolmafia_.handlingChoice)(), ", fight follows: ").concat((0,external_kolmafia_.fightFollowsChoice)());
    }

    if (choicesRun.filter(function (c) {return c == (0,external_kolmafia_.lastChoice)();}).length > 6) {
      throw "Detected we're looping in a choice, you will need to manually resolve the choice and should report this issue.";
    }

    choicesRun.push((0,external_kolmafia_.lastChoice)());

    var url =
    "choice.php?pwd=&whichchoice=" + (0,external_kolmafia_.lastChoice)() + "&option=" + choiceToPick;

    (0,external_kolmafia_.print)("Visited " + url);
    return (0,external_kolmafia_.visitUrl)(url);
  };

  var runCombat = function runCombat() {
    if (macro == null) {
      createMacro();
    }

    (0,external_kolmafia_.print)(macro.toString());
    return macro.submit();
  };

  if ((0,external_kolmafia_.currentRound)() == 0 && !(0,external_kolmafia_.handlingChoice)()) {var _lastMonster, _lastMonster$attribut;
    if (outfit.plusCombatWeight > 0) {
      castCombatSkill();
    } else if (outfit.minusCombatWeight > 0) {
      castNoCombatSkills();
    }

    if (typeof location == "string") {
      (0,external_kolmafia_.visitUrl)(location);
    } else if (location != null) {
      (0,external_kolmafia_.visitUrl)("adventure.php?snarfblat=" + (0,external_kolmafia_.toInt)(location));
    }

    if (
    (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("stopForUltraRare")) && (_lastMonster =
    (0,external_kolmafia_.lastMonster)()) !== null && _lastMonster !== void 0 && (_lastMonster$attribut = _lastMonster.attributes) !== null && _lastMonster$attribut !== void 0 && _lastMonster$attribut.includes("ULTRARARE"))
    {
      throw "Ultrarare encounter?";
    }
  }

  while (
  (0,external_kolmafia_.currentRound)() != 0 ||
  (0,external_kolmafia_.handlingChoice)() ||
  (0,external_kolmafia_.fightFollowsChoice)() ||
  (0,external_kolmafia_.choiceFollowsFight)())
  {
    var page = "";

    if ((0,external_kolmafia_.currentRound)() != 0) {
      page = runCombat();

      if ((0,external_kolmafia_.currentRound)() != 0) {
        throw "Didn't expect to still be in combat! Maybe health is too low that we aborted to be safe?";
      }
    } else if ((0,external_kolmafia_.handlingChoice)() || (0,external_kolmafia_.fightFollowsChoice)()) {
      page = runChoice();
    }

    if (page != null) {
      var match = page.match(/<!-- autumnback -->(\d+)/);

      match;

      if (match != null) {
        (0,external_kolmafia_.print)(
        "Autumn-aton will be back from '" +
        (0,external_kolmafia_.getProperty)("autumnatonQuestLocation") +
        "' in " +
        match[1] +
        " adventures..",
        "gray");

      }

      if ((0,external_kolmafia_.choiceFollowsFight)()) {
        (0,external_kolmafia_.visitUrl)("main.php");
      }
    }
  }
}

var cachedLocations = new Map();

function getLocations(monster) {
  if (cachedLocations.has(monster)) {
    return cachedLocations.get(monster);
  }

  var locations = [];var _iterator4 = GreyLocations_createForOfIteratorHelper(

    external_kolmafia_.Location.all()),_step4;try {for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {var l = _step4.value;
      var monsters = Object.keys((0,external_kolmafia_.getLocationMonsters)(l)).map(function (k) {return (
          external_kolmafia_.Monster.get(k));});


      if (!monsters.includes(monster)) {
        continue;
      }

      locations.push(l);
    }} catch (err) {_iterator4.e(err);} finally {_iterator4.f();}

  cachedLocations.set(monster, locations);

  return locations;
}
;// CONCATENATED MODULE: ./src/utils/GreyUtils.ts
function GreyUtils_slicedToArray(arr, i) {return GreyUtils_arrayWithHoles(arr) || GreyUtils_iterableToArrayLimit(arr, i) || GreyUtils_unsupportedIterableToArray(arr, i) || GreyUtils_nonIterableRest();}function GreyUtils_nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreyUtils_iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function GreyUtils_arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function GreyUtils_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreyUtils_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreyUtils_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreyUtils_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreyUtils_arrayLikeToArray(o, minLen);}function GreyUtils_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}


var Worksheds = [
"",
"Model train set",
"cold medicine cabinet",
"diabolic pizza cube",
"Asdon Martin keyfob",
"portable Mayo Clinic",
"Little Geneticist DNA-Splicing Lab"];




var UmbrellaState;(function (UmbrellaState) {UmbrellaState["MONSTER_LEVEL"] = "broken";UmbrellaState["DAMAGE_REDUCTION_SHIELD"] = "forward";UmbrellaState["ITEM_DROPS"] = "bucket";UmbrellaState["WEAPON_DAMAGE"] = "pitchfork";UmbrellaState["SPELL_DAMAGE"] = "twirling";UmbrellaState["MINUS_COMBAT"] = "cocoon";})(UmbrellaState || (UmbrellaState = {}));








function GreyUtils_centerText(text, color) {
  return "<div style=\"text-align: center;\"".concat(
  color ? " color='" + color + "'" : "", "><p style=\"margin: 0; padding: 0;\">").concat(
  text, "</p></div>");
}

var umbrella = external_kolmafia_.Item.get("Unbreakable Umbrella");
var lefthand = external_kolmafia_.Familiar.get("Left-Hand Man");

function getUmbrella() {
  if ((0,external_kolmafia_.availableAmount)(umbrella) == 0) {
    return null;
  }
  var prop = (0,external_kolmafia_.getProperty)("umbrellaState");

  for (var _i = 0, _Object$values = Object.values(UmbrellaState); _i < _Object$values.length; _i++) {var state = _Object$values[_i];
    if (!prop.includes(state)) {
      return;
    }

    return state;
  }

  return null;
}

function setUmbrella(setting) {
  if (
  (0,external_kolmafia_.availableAmount)(umbrella) == 0 ||
  (0,external_kolmafia_.getProperty)("umbrellaState").includes(setting))
  {
    return;
  }

  if (
  (0,external_kolmafia_.familiarEquippedEquipment)(lefthand) == umbrella &&
  (0,external_kolmafia_.myFamiliar)() != lefthand)
  {
    (0,external_kolmafia_.retrieveItem)(umbrella);
  }

  (0,external_kolmafia_.cliExecute)("umbrella " + setting);
}

function canCombatLocket(monster) {
  var foughtToday = getProperty("_locketMonstersFought").
  split(",").
  map(function (s) {return toMonster(toInt(s));});

  if (foughtToday.length >= 3 || foughtToday.includes(monster)) {
    return false;
  }

  var monsters = Object.keys(getLocketMonsters()).map(function (s) {return (
      toMonster(s));});


  if (!monsters.includes(monster)) {
    return false;
  }

  return true;
}

function getBackupsRemaining() {
  return 11 - (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("_backUpUses"));
}

function doColor(text, color) {
  return "<font color='".concat(color, "'>").concat(text, "</font>");
}

function getEncounters(
location)

{var encounters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var spl = (0,external_kolmafia_.sessionLogs)(1)[0].split("\n");
  var reg = /^\[(\d+)\] (.*?)\r?$/;
  var matches = [];
  var turn;
  var doing = false;var _iterator = GreyUtils_createForOfIteratorHelper(

    spl),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var s = _step.value;
      if (s.startsWith("[")) {
        var match = s.match(reg);

        if (match == null) {
          continue;
        }

        turn = (0,external_kolmafia_.toInt)(match[1]);

        if (location != null) {
          doing = match[2] == location;
        }
      } else if (s.startsWith("Encounter: ")) {
        if (turn == null) {
          continue;
        }

        var name = s.substring(s.indexOf(": ") + 2).replace("\r", "");

        if (!doing && (encounters == null || !encounters.includes(name))) {
          continue;
        }

        // TODO Really need to parse encounters without hardcoding this
        if (
        name == "Adjust your Parka" ||
        name == "Configure Your Unbreakable Umbrella" ||
        name == "Direct Autumn-Aton")
        {
          continue;
        }

        matches.push([name, turn]);
      }
    }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

  return matches;
}

var ballProp = function ballProp() {return (
    (0,external_kolmafia_.getProperty)("crystalBallPredictions").
    split("|").
    map(function (element) {return element.split(":");}).
    map(
    function (_ref) {var _ref2 = GreyUtils_slicedToArray(_ref, 3),turncount = _ref2[0],location = _ref2[1],monster = _ref2[2];return (
        [parseInt(turncount), (0,external_kolmafia_.toLocation)(location), (0,external_kolmafia_.toMonster)(monster)]);}));};






var lastToasterGaze = 0;
var lastPonder = 0;
var GreyUtils_crystalBall = external_kolmafia_.Item.get("miniature crystal ball");
var teleportis = external_kolmafia_.Effect.get("Teleportitis");

function doToasterGaze() {
  if (
  (0,external_kolmafia_.availableAmount)(GreyUtils_crystalBall) == 0 ||
  (0,external_kolmafia_.turnsPlayed)() == lastToasterGaze ||
  (0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("lastDesertUnlock")) < (0,external_kolmafia_.myAscensions)() ||
  (0,external_kolmafia_.haveEffect)(teleportis) > 0 ||
  getPrimedResource() != null && getPrimedResource().resource.primed())
  {
    return;
  }

  if (ballProp().find(function (_ref3) {var _ref4 = GreyUtils_slicedToArray(_ref3, 1),turn = _ref4[0];return turn + 1 < (0,external_kolmafia_.turnsPlayed)();}) == null) {
    return;
  }

  (0,external_kolmafia_.print)(
  "As if infected, your legs bring you to the beach where you feel compelled to toastergaze. A light slap brings you out of it, Gausie lectures you on the dangers of toast. But that's not right, you can see a mountain of toast in their displaycase..",
  "blue");

  greyAdv("adventure.php?snarfblat=355");
  lastToasterGaze = (0,external_kolmafia_.turnsPlayed)();
  lastPonder = (0,external_kolmafia_.turnsPlayed)();
  (0,external_kolmafia_.visitUrl)("inventory.php?ponder=1", false);
}

/**
 * Returns a map of locations, and the monsters predicted.
 *
 * The boolean is a "Should we show fights that will still be valid if we waste a turn elsewhere"
 */
function currentPredictions() {
  if ((0,external_kolmafia_.availableAmount)(GreyUtils_crystalBall) == 0) {
    return new Map();
  }

  var predictions = ballProp();

  if (lastPonder != (0,external_kolmafia_.turnsPlayed)()) {
    var expectedExpire =
    predictions.find(
    function (_ref5) {var _ref6 = GreyUtils_slicedToArray(_ref5, 2),turn = _ref6[0],loc = _ref6[1];return (
        turn + 1 < (0,external_kolmafia_.turnsPlayed)() &&
        loc != (0,external_kolmafia_.toLocation)((0,external_kolmafia_.getProperty)("lastAdventure")));}) !=
    null;

    if (expectedExpire) {
      lastPonder = (0,external_kolmafia_.turnsPlayed)();

      (0,external_kolmafia_.visitUrl)("inventory.php?ponder=1", false);

      predictions = ballProp();
    }
  }

  return new Map(
  predictions.map(function (_ref7) {var _ref8 = GreyUtils_slicedToArray(_ref7, 3),location = _ref8[1],monster = _ref8[2];return [location, monster];}));

}

function getAllCombinations(
valuesArray)

{var uniquesOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var combi = [];
  var temp = [];
  var slent = Math.pow(2, valuesArray.length);
  var uniques = [];
  var added = [];

  valuesArray.forEach(function (v, index) {
    if (valuesArray.indexOf(v) != index) {
      return;
    }

    uniques.push(v);
  });

  for (var i = 0; i < slent; i++) {
    temp = [];

    for (var j = 0; j < valuesArray.length; j++) {
      if (!(i & Math.pow(2, j))) {
        continue;
      }

      temp.push(valuesArray[j]);
    }

    if (temp.length == 0) {
      continue;
    }

    // If we don't want the same arrays but in different orders
    if (uniquesOnly) {
      var id = temp.
      map(function (t) {return uniques.findIndex(function (v) {return v === t;});}).
      sort().
      join(",");

      if (added.includes(id)) {
        continue;
      } else {
        added.push(id);
      }
    }

    combi.push(temp);
  }

  combi.sort(function (a, b) {return a.length - b.length;});

  return combi;
}

function hasPulled(item) {
  return (0,external_kolmafia_.getProperty)("_roninStoragePulls").
  split(",").
  includes((0,external_kolmafia_.toInt)(item).toString());
}

function canGreyAdventure(location) {
  if (
  location.zone == "Pandamonium" &&
  (0,external_kolmafia_.getProperty)("questL06Friar") != "finished")
  {
    return false;
  }

  return (0,external_kolmafia_.canAdventure)(location);
}

/**
 * Returns the list of effects from helmet in order of when you'd acquire them
 */
function getDaylightShavingsBuffs() {
  var lastBeardBuff = toInt(getProperty("lastBeardBuff"));

  if (lastBeardBuff > 0) {
    lastBeardBuff -= 2665;
  }

  lastBeardBuff = (toInt(myClass()) % 6 + lastBeardBuff) % 11;

  var effects = [];

  for (var i = 0; i < 11; i++) {
    var num = 2666 + (lastBeardBuff + i) % 11;
    var effect = toEffect(toInt(num));

    effects.push(effect);
  }

  return effects;
}

function isDaylightShavingBuffReady() {
  return getDaylightShavingsBuffs().find(function (e) {return haveEffect(e) > 1;}) == null;
}
;// CONCATENATED MODULE: ./src/utils/GreySettings.ts
function GreySettings_classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function GreySettings_defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, GreySettings_toPropertyKey(descriptor.key), descriptor);}}function GreySettings_createClass(Constructor, protoProps, staticProps) {if (protoProps) GreySettings_defineProperties(Constructor.prototype, protoProps);if (staticProps) GreySettings_defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function GreySettings_defineProperty(obj, key, value) {key = GreySettings_toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function GreySettings_toPropertyKey(arg) {var key = GreySettings_toPrimitive(arg, "string");return GreySettings_typeof(key) === "symbol" ? key : String(key);}function GreySettings_toPrimitive(input, hint) {if (GreySettings_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (GreySettings_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function GreySettings_typeof(obj) {"@babel/helpers - typeof";return GreySettings_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, GreySettings_typeof(obj);}function GreySettings_createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = GreySettings_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function GreySettings_toConsumableArray(arr) {return GreySettings_arrayWithoutHoles(arr) || GreySettings_iterableToArray(arr) || GreySettings_unsupportedIterableToArray(arr) || GreySettings_nonIterableSpread();}function GreySettings_nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function GreySettings_unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return GreySettings_arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GreySettings_arrayLikeToArray(o, minLen);}function GreySettings_iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function GreySettings_arrayWithoutHoles(arr) {if (Array.isArray(arr)) return GreySettings_arrayLikeToArray(arr);}function GreySettings_arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}

















function GreySettings_getGreySettings() {
  var isBoolean = function isBoolean(str) {return str == "true" || str == "false";};
  var triBoolean = ["Best Judgement", "Always", "Never"];
  var isTriBoolean = function isTriBoolean(str) {return (
      triBoolean.includes(str));};

  var towerBreak = {
    name: "greyBreakAtTower",
    description:
    "Should the script halt when it reaches the tower? False by default. Useful as continuing after breaking ronin takes less turns. This will change the behavior of the script to skip some zones.",
    valid: isBoolean,
    "default": true
  };

  var moonTune = {
    name: "greyTuneMoonSpoon",
    description:
    "If set, will use the rune moon spoon (if owned) to change moon signs to the requested moon sign when done with tasks in the current moon sign.",
    valid: function valid(value) {return (
        moonSigns.find(function (s) {return s.toLowerCase() == value.toLowerCase();}) != null);},
    viableSettings: [
    ["Don't Tune", ""]].concat(GreySettings_toConsumableArray(
    moonSigns.map(function (sign) {return [getMoonZone(sign) + " - " + sign, sign];}))),




    "default": null
  };

  var manorLights = {
    name: "greyFinishManorLights",
    description:
    "The script will do the hidden manor lights quest, but should it fight Elizabeth & Stephen at the end? (Garbo does fight Stephen for meat)",
    valid: isBoolean,
    "default": false
  };

  var pvpEnable = {
    name: "greyEnablePvP",
    description:
    "Should the script enable PvP at the start of the run? This doesn't actually make much difference vs enabling it later as there's no pvp generation, unless you have robortender.",
    valid: isBoolean,
    "default": false
  };

  for (var _i = 0, _arr = ["greyDailyMalware"]; _i < _arr.length; _i++) {var str = _arr[_i];
    if (!(0,external_kolmafia_.propertyExists)(str)) {
      continue;
    }

    var val = (0,external_kolmafia_.getProperty)(str);

    if (triBoolean.includes(val)) {
      continue;
    }

    if (val == "true") {
      (0,external_kolmafia_.setProperty)(str, "Always");
    } else if (val == "false") {
      (0,external_kolmafia_.setProperty)(str, "Never");
    } else {
      (0,external_kolmafia_.setProperty)(str, "Best Judgement");
    }
  }

  var dailyMalware = {
    name: "greyDailyMalware",
    description:
    "If we do daily dungeon, how should we treat daily malware? Set to 'Always' 'Never' or 'Best Judgement'",
    valid: isTriBoolean,
    viableSettings: triBoolean,
    "default": "Best Judgement"
  };

  var dailyDungeon = {
    name: "greyDailyDungeon",
    description:
    "Should the script always do daily dungeon, even when there is no need to? Eg, tower break. Useful in conjunction with greyDailyMalware",
    valid: isBoolean,
    "default": true
  };

  var levelingResources = {
    name: "greyPrepareLevelingResources",
    description:
    "If this is set to true, script will attempt to prepare resources that are useful for power leveling. Namely familiar scrapbook and raise goose weight.",
    valid: isBoolean,
    "default": true
  };

  var skipPalindome = {
    name: "greySkipPalindome",
    description:
    "If set to true, will not complete palindome. This is only useful if you intend to burn turns on UR farming, and you're recommended to save at least 80 turns minumum to resume the script. To resume, this will need to be set to false.",
    valid: isBoolean,
    "default": false
  };

  var doHellQuest = {
    name: "greyAzazelSteelMargarita",
    description:
    "If set to true, will complete the requirements for the Steel Margarita +5 Liver drink. There is different scenarios for this, but this is best used with towerbreaking and ronin escaping. It will attempt to use the no-trades previously acquired.",
    valid: isBoolean,
    "default": false
  };

  var deleteKmails = {
    name: "greyDeleteKmails",
    description:
    "When true, will delete kmails from spooky lady and fortune teller",
    valid: isBoolean,
    "default": true
  };

  var useMummery = {
    name: "greyUseMummery",
    description:
    "If set to true, will set grey goose to use MP restoring. This is enabled by default as there isn't really a reason not to.",
    valid: isBoolean,
    "default": true,
    viable: (0,external_kolmafia_.availableAmount)(external_kolmafia_.Item.get("mumming trunk")) > 0
  };

  var defaultAdvValue =
  Math.round((0,external_kolmafia_.toInt)((0,external_kolmafia_.getProperty)("valueOfAdventure")) * 0.7 / 100) * 100;

  var grayAdventureValue = {
    name: "greyValueOfAdventure",
    description:
    "Used to determine how to prioritize resources, a fax for example is worth 20k. If it saves 3 turns and each turn is worth 10k, then it's obviously worth using the fax to save those 3 turns. Default value is based off roughly 70% of pref valueOfAdventure.",
    valid: function valid(value) {return /\d+/.test(value);},
    "default": defaultAdvValue
  };

  var greySavePulls = {
    name: "greyPullsLimit",
    description:
    "How many pulls the script can use, if this is too low then you're going to have a bad time. 20 means the script can use up to 20 pulls, leaving 0 remaining.",
    valid: function valid(value) {return /\d+/.test(value);},
    "default": 20
  };

  var greyVoteMonster = {
    name: "greyVotingBooth",
    description:
    "If you own the voting booth, by default will not vote as aftercore voting can be better",
    valid: isBoolean,
    "default": false
  };

  var greyDefaultWorkshed = {
    name: "greyDefaultWorkshed",
    description:
    "What should Greyday set your empty workshed to at the start of the day?",
    valid: function valid(value) {return (
        value == "" ||
        Worksheds.find(function (s) {return s.toLowerCase() == value.toLowerCase();}) != null);},
    viableSettings: GreySettings_toConsumableArray(
    Worksheds.map(function (w) {return [w == "" ? "Don't Set" : w, w];})),




    "default": ""
  };
  var greySwitchWorkshed = {
    name: "greySwitchWorkshed",
    description:
    "Applicable only if you're starting your run with Cold Medicine Cabinet, if set to the name of a workshed item, will switch to that workshed after all 5 CMC uses are expended. Requires the item to be in inventory",
    valid: function valid(value) {return (
        value == "" ||
        Worksheds.find(function (s) {return s.toLowerCase() == value.toLowerCase();}) != null);},
    viableSettings: GreySettings_toConsumableArray(
    Worksheds.map(function (w) {return [w == "" ? "Don't Switch" : w, w];})),




    "default": ""
  };

  var greyClipArt = {
    name: "greyClipArt",
    description:
    "A comma seperated list of familiar names you'd like Greyday to summon and use Familiar Jacks on if you have Tome of Clip Art",
    valid: function valid(value) {var _iterator = GreySettings_createForOfIteratorHelper(
        value.split(",").map(function (s) {return s.trim();})),_step;try {var _loop = function _loop() {var s = _step.value;
          if (s.length == 0) {return "continue";

          }

          var fam = external_kolmafia_.Familiar.all().find(
          function (f) {return f.toString().toLowerCase() == s.toLowerCase();});


          if (fam != null) {return "continue";

          }return { v:

            false };
        };for (_iterator.s(); !(_step = _iterator.n()).done;) {var _ret = _loop();if (_ret === "continue") continue;if (GreySettings_typeof(_ret) === "object") return _ret.v;}} catch (err) {_iterator.e(err);} finally {_iterator.f();}

      return true;
    },
    "default": "Grey Goose"
  };

  var greyCosplaySaber = {
    name: "greyCosplaySaber",
    description:
    "What upgrade should GreyDay place on the Cosplay Saber if you own it?",
    valid: function valid(value) {return value.length == 0 || /^\d+$/.test(value);},
    "default": "resistance",
    viableSettings: [
    ["Don't Modify", ""],
    ["15-20 MP Regen", "mp"],
    ["+20 Monster Level", "ml"],
    ["+3 elemental resistance", "resistance"],
    ["+10 Familiar Weight", "familiar"]]

  };

  var viableClans = [
  ["Don't use VIP Invitation", ""]].concat(GreySettings_toConsumableArray(
  GreySettings_toConsumableArray((0,GreyClan/* getAvailableClans */.Q5)().values()).map(function (s) {return [s, s];})));


  var greyVIPClan = {
    name: "greyVIPClan",
    description:
    "The name of the clan we will use to execute Fax Requests, and switch to for other VIP functions if they are not available in our current clan. Set to empty (Or in relay, 'Don't use VIP Invitation') to disable all VIP usage, even the yellow rockets.. Best support for 'Bonus Adventures From Hell' and 'The Average Clan'",
    valid: function valid(value) {return (
        value.length == 0 ||
        (0,external_kolmafia_.getClanName)().toLowerCase() == value.toLowerCase() ||
        GreySettings_toConsumableArray((0,GreyClan/* getAvailableClans */.Q5)().values()).find(
        function (s) {return s.toLowerCase() == value.toLowerCase();}) !=
        null);},
    "default": "Bonus Adventures From Hell",
    viableSettings: viableClans
  };

  var greyFortuneTeller = {
    name: "greyFortuneTeller",
    description:
    "If the script should use fortune teller if possible. Will grab: Prank Item, then Potion, then Psychic Equipment",
    valid: isBoolean,
    "default": true
  };

  var greyGrabZapWand = {
    name: "greyGrabZapWand",
    description:
    "Should the script grab the zap wand? This generally adds another 5-6 turns to the run. You'll need this if you don't have enough key sources",
    valid: isBoolean,
    "default": false
  };

  var prioritizeLocket = {
    name: "greyLocketWeight",
    description:
    "Set this to a value higher than 0 to add weight to maximizer if you want Greyday to wear the locket more often, this is only useful if you're trying to locket everything",
    valid: function valid(s) {return /$\d+^/.test(s);},
    "default": 0
  };

  var grabMeatSkill = {
    name: "greyMeatSkill",
    description:
    "Should GreyDay grab Financial Spreadsheets? +40% meat from monsters, doesn't effect the run itself. Convenient means it'll grab the skill if it's an orb prediction or current fight, but not care about it.",
    valid: function valid(s) {return (
        ["Yes", "No", "Convenient"].find(
        function (a) {return a.toLowerCase() == s.toLowerCase();}) !=
        null);},
    viableSettings: [
    ["Yes", "Yes"],
    ["No", "No"],
    ["Only if Convenient", "Convenient"]],

    "default": "Yes"
  };

  var greyUseFamiliar = {
    name: "greyUseFamiliars",
    description:
    "Comma seperated list of familiars in order of priority to use. Best used with only a few fams at most, does support drop fams",
    valid: function valid(s) {return (
        ["Yes", "No", "Convenient"].find(
        function (a) {return a.toLowerCase() == s.toLowerCase();}) !=
        null);},
    viableSettings: [
    ["Yes", "Yes"],
    ["No", "No"],
    ["Only if Convenient", "Convenient"]],

    "default": "Yes"
  };

  return [
  //greyBountyHunter,
  towerBreak,
  manorLights,
  pvpEnable,
  dailyDungeon,
  levelingResources,
  deleteKmails,
  greyFortuneTeller,
  greyGrabZapWand,
  skipPalindome,
  useMummery,
  greyVIPClan,
  moonTune,
  dailyMalware,
  grabMeatSkill,
  greySavePulls,
  grayAdventureValue,
  greyDefaultWorkshed,
  greySwitchWorkshed,
  greyCosplaySaber,
  greyClipArt,
  prioritizeLocket].
  map(function (s) {
    s.setting = "main";

    return s;
  });
}

var moonSigns = [
"Mongoose",
"Wallaby",
"Vole",
"Platypus",
"Opossum",
"Marmot",
"Wombat",
"Blender",
"Packrat"];















function getMoonZone() {var sign = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,external_kolmafia_.mySign)();
  var index = moonSigns.findIndex(
  function (s) {return s.toLowerCase() == (sign === null || sign === void 0 ? void 0 : sign.toLowerCase());});


  if (index < 0) {
    return null;
  } else if (index <= 2) {
    return "Knoll";
  } else if (index <= 5) {
    return "Canadia";
  }

  return "Gnomad";
}

var spoon = external_kolmafia_.Item.get("hewn moon-rune spoon");

var GreySettings_GreySettings = /*#__PURE__*/function () {function GreySettings() {GreySettings_classCallCheck(this, GreySettings);}GreySettings_createClass(GreySettings, null, [{ key: "isHardcoreMode", value:



































    function isHardcoreMode() {
      return this.hardcoreMode || (0,external_kolmafia_.inHardcore)();
    } }, { key: "willBeAccessible", value:

    function willBeAccessible(
    moonzone)

    {var assumeUnstarted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return (
        (assumeUnstarted || (0,external_kolmafia_.getProperty)("moonTuned") != "true") &&
        (0,external_kolmafia_.availableAmount)(spoon) > 0 &&
        this.greyTuneMoonSpoon != null &&
        getMoonZone(this.greyTuneMoonSpoon) == moonzone);

    } }, { key: "canMoonSpoon", value:

    function canMoonSpoon() {
      return (
        (0,external_kolmafia_.getProperty)("moonTuned") == "false" &&
        (0,external_kolmafia_.availableAmount)(spoon) > 0 &&
        this.greyTuneMoonSpoon != null &&
        this.greyTuneMoonSpoon.toLowerCase() != (0,external_kolmafia_.mySign)().toLowerCase());

    }

    /**
     * If we aim to collect a hippy outfit
     */ }, { key: "isHippyMode", value:
    function isHippyMode() {
      return this.greyHippyMode || this.isHardcoreMode();
    } }, { key: "shouldAvoidTowerRequirements", value:

    function shouldAvoidTowerRequirements() {
      return !GreySettings.isHardcoreMode() && this.greyBreakAtTower;
    } }, { key: "loadSettings", value:

    function loadSettings() {var _iterator2 = GreySettings_createForOfIteratorHelper(
        GreySettings_getGreySettings()),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var setting = _step2.value;
          var prop = (0,external_kolmafia_.getProperty)(setting.name);

          if (prop == "") {
            prop = setting["default"];
          } else if (typeof setting["default"] == "boolean") {
            prop = (0,external_kolmafia_.toBoolean)(prop);
          } else if (typeof setting["default"] == "number") {
            prop = (0,external_kolmafia_.toInt)(prop);
          }

          GreySettings[setting.name] = prop;
        }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

      if (this.isHardcoreMode()) {
        GreySettings.greyBreakAtTower = false;
      }
    } }]);return GreySettings;}();GreySettings_defineProperty(GreySettings_GreySettings, "hardcoreMode", false);GreySettings_defineProperty(GreySettings_GreySettings, "speedRunMode", false);GreySettings_defineProperty(GreySettings_GreySettings, "adventuresBeforeAbort", 8);GreySettings_defineProperty(GreySettings_GreySettings, "adventuresGenerateIfPossibleOrAbort", 12);GreySettings_defineProperty(GreySettings_GreySettings, "usefulSkillsWeight", 6);GreySettings_defineProperty(GreySettings_GreySettings, "handySkillsWeight", 0.5);GreySettings_defineProperty(GreySettings_GreySettings, "greyBreakAtTower", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyReachedTower", (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("_greyReachedTower")));GreySettings_defineProperty(GreySettings_GreySettings, "greyDailyDungeon", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyDailyMalware", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyPrepareLevelingResources", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyFantasyBandits", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyTuneMoonSpoon", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyDebug", (0,external_kolmafia_.toBoolean)((0,external_kolmafia_.getProperty)("greyDebug") || "false"));GreySettings_defineProperty(GreySettings_GreySettings, "greySkipPalindome", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyPullsLimit", 20);GreySettings_defineProperty(GreySettings_GreySettings, "greyValueOfAdventure", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyUseMummery", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyVotingBooth", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyBountyHunting", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyDefaultWorkshed", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greySwitchWorkshed", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyClipArt", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyVIPClan", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyFortuneTeller", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyDeleteKmails", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyHippyMode", false);GreySettings_defineProperty(GreySettings_GreySettings, "greyGrabZapWand", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyLocketWeight", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyCosplaySaber", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyMeatSkill", void 0);GreySettings_defineProperty(GreySettings_GreySettings, "greyUseFamiliars", "");

/***/ }),

/***/ 152:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LE": () => (/* binding */ Macro)
/* harmony export */ });
/* unused harmony exports getMacroId, InvalidMacroError, adventureMacro, adventureMacroAuto, StrictMacro */
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _get() {if (typeof Reflect !== "undefined" && Reflect.get) {_get = Reflect.get.bind();} else {_get = function _get(target, property, receiver) {var base = _superPropBase(target, property);if (!base) return;var desc = Object.getOwnPropertyDescriptor(base, property);if (desc.get) {return desc.get.call(arguments.length < 3 ? target : receiver);}return desc.value;};}return _get.apply(this, arguments);}function _superPropBase(object, property) {while (!Object.prototype.hasOwnProperty.call(object, property)) {object = _getPrototypeOf(object);if (object === null) break;}return object;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}function _defineProperty(obj, key, value) {key = _toPropertyKey(key);if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(arg) {var key = _toPrimitive(arg, "string");return _typeof(key) === "symbol" ? key : String(key);}function _toPrimitive(input, hint) {if (_typeof(input) !== "object" || input === null) return input;var prim = input[Symbol.toPrimitive];if (prim !== undefined) {var res = prim.call(input, hint || "default");if (_typeof(res) !== "object") return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return (hint === "string" ? String : Number)(input);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });Object.defineProperty(subClass, "prototype", { writable: false });if (superClass) _setPrototypeOf(subClass, superClass);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;} else if (call !== void 0) {throw new TypeError("Derived constructors may only return object or undefined");}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _wrapNativeSuper(Class) {var _cache = typeof Map === "function" ? new Map() : undefined;_wrapNativeSuper = function _wrapNativeSuper(Class) {if (Class === null || !_isNativeFunction(Class)) return Class;if (typeof Class !== "function") {throw new TypeError("Super expression must either be null or a function");}if (typeof _cache !== "undefined") {if (_cache.has(Class)) return _cache.get(Class);_cache.set(Class, Wrapper);}function Wrapper() {return _construct(Class, arguments, _getPrototypeOf(this).constructor);}Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });return _setPrototypeOf(Wrapper, Class);};return _wrapNativeSuper(Class);}function _construct(Parent, args, Class) {if (_isNativeReflectConstruct()) {_construct = Reflect.construct.bind();} else {_construct = function _construct(Parent, args, Class) {var a = [null];a.push.apply(a, args);var Constructor = Function.bind.apply(Parent, a);var instance = new Constructor();if (Class) _setPrototypeOf(instance, Class.prototype);return instance;};}return _construct.apply(null, arguments);}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function _isNativeFunction(fn) {return Function.toString.call(fn).indexOf("[native code]") !== -1;}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}

var MACRO_NAME = "Script Autoattack Macro";
/**
 * Get the KoL native ID of the macro with name name.
 *
 * @category Combat
 * @returns {number} The macro ID.
 */
function getMacroId() {var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MACRO_NAME;
  var macroMatches = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account_combatmacros.php"), "//select[@name=\"macroid\"]/option[text()=\"".concat(
  name, "\"]/@value"));

  if (macroMatches.length === 0) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account_combatmacros.php?action=new");
    var newMacroText = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account_combatmacros.php?macroid=0&name=".concat(
    name, "&macrotext=abort&action=save"));

    return parseInt(
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.xpath)(newMacroText, "//input[@name=macroid]/@value")[0],
    10);

  } else {
    return parseInt(macroMatches[0], 10);
  }
}


function itemOrNameToItem(itemOrName) {
  return typeof itemOrName === "string" ? kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item.get(itemOrName) : itemOrName;
}

var substringCombatItems =
"spider web, really sticky spider web, dictionary, NG, Cloaca-Cola, yo-yo, top, ball, kite, yo, red potion, blue potion, adder, red button, pile of sand, mushroom, deluxe mushroom".
split(",").
map(function (s) {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toItem)(s);});
var substringCombatSkills =
"Shoot, Thrust-Smack, Headbutt, Toss, Sing, Disarm, LIGHT, BURN, Extract, Meteor Shower, Cleave, Boil, Slice, Rainbow".
split(",").
map(function (s) {return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toSkill)(s);});

function itemOrItemsBallsMacroName(
itemOrItems)
{
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroName).join(", ");
  } else {
    var item = itemOrNameToItem(itemOrItems);
    return !substringCombatItems.includes(item) ?
    item.name :
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(item).toString();
  }
}

function itemOrItemsBallsMacroPredicate(
itemOrItems)
{
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.map(itemOrItemsBallsMacroPredicate).join(" && ");
  } else {
    return "hascombatitem ".concat(itemOrItems);
  }
}


function skillOrNameToSkill(skillOrName) {
  if (typeof skillOrName === "string") {
    return kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill.get(skillOrName);
  } else {
    return skillOrName;
  }
}

function skillBallsMacroName(skillOrName) {
  var skill = skillOrNameToSkill(skillOrName);
  return skill.name.match(/^[A-Za-z ]+$/) &&
  !substringCombatSkills.includes(skill) ?
  skill.name :
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(skill);
}



var InvalidMacroError = /*#__PURE__*/function (_Error) {_inherits(InvalidMacroError, _Error);var _super = _createSuper(InvalidMacroError);function InvalidMacroError() {_classCallCheck(this, InvalidMacroError);return _super.apply(this, arguments);}return _createClass(InvalidMacroError);}( /*#__PURE__*/_wrapNativeSuper(Error));

/**
 * BALLS macro builder for direct submission to KoL.
 * Create a new macro with `new Macro()` and add steps using the instance methods.
 * Uses a fluent interface, so each step returns the object for easy chaining of steps.
 * Each method is also defined as a static method that creates a new Macro with only that step.
 * For example, you can do `Macro.skill('Saucestorm').attack()`.
 */
var Macro = /*#__PURE__*/function () {function Macro() {_classCallCheck(this, Macro);_defineProperty(this, "components",





    []);_defineProperty(this, "name",
    MACRO_NAME);}_createClass(Macro, [{ key: "toString", value:

    /**
     * Convert macro to string.
     */
    function toString() {
      return this.components.join(";");
    }

    /**
     * Gives your macro a new name to be used when saving an autoattack.
     * @param name The name to be used when saving as an autoattack.
     * @returns The previous name assigned to this macro.
     */ }, { key: "rename", value:
    function rename(name) {
      var returnValue = this.name;
      this.name = name;
      return returnValue;
    }

    /**
     * Save a macro to a Mafia property for use in a consult script.
     */ }, { key: "save", value:
    function save() {
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(Macro.SAVED_MACRO_PROPERTY, this.toString());
    }

    /**
     * Load a saved macro from the Mafia property.
     */ }, { key: "step", value:













    /**
     * Statefully add one or several steps to a macro.
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */
    function step() {var _ref;for (var _len = arguments.length, nextSteps = new Array(_len), _key = 0; _key < _len; _key++) {nextSteps[_key] = arguments[_key];}
      var nextStepsStrings = (_ref = []).concat.apply(_ref, _toConsumableArray(
      nextSteps.map(function (x) {return x instanceof Macro ? x.components : [x];})));

      this.components = [].concat(_toConsumableArray(
      this.components), _toConsumableArray(
      nextStepsStrings.filter(function (s) {return s.length > 0;})));

      return this;
    }

    /**
     * Statefully add one or several steps to a macro.
     * @param nextSteps The steps to add to the macro.
     * @returns {Macro} This object itself.
     */ }, { key: "submit", value:







    /**
     * Submit the built macro to KoL. Only works inside combat.
     */
    function submit() {
      var _final = this.toString();
      return (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("fight.php?action=macro&macrotext=".concat(
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.urlEncode)(_final)),
      true,
      true);

    }

    /**
     * Set this macro as a KoL native autoattack.
     */ }, { key: "setAutoAttack", value:
    function setAutoAttack() {
      var id = Macro.cachedMacroIds.get(this.name);
      if (id === undefined) {
        id = getMacroId(this.name);
        Macro.cachedMacroIds.set(this.name, id);
      }
      if (
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getAutoAttack)() === 99000000 + id &&
      this.toString() === Macro.cachedAutoAttacks.get(this.name))
      {
        // This macro is already set. Don"t make the server request.
        return;
      }

      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account_combatmacros.php?macroid=".concat(
      id, "&name=").concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.urlEncode)(
      this.name), "&macrotext=").concat(
      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.urlEncode)(this.toString()), "&action=save"),
      true,
      true);

      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account.php?am=1&action=autoattack&value=".concat(
      99000000 + id, "&ajax=1"));

      Macro.cachedAutoAttacks.set(this.name, this.toString());
    }

    /**
     * Renames the macro, then sets it as an autoattack.
     * @param name The name to save the macro under as an autoattack.
     */ }, { key: "setAutoAttackAs", value:
    function setAutoAttackAs(name) {
      this.name = name;
      this.setAutoAttack();
    }

    /**
     * Clear all cached autoattacks, and delete all stored macros server-side.
     */ }, { key: "abort", value:










    /**
     * Add an "abort" step to this macro.
     * @returns {Macro} This object itself.
     */
    function abort() {
      return this.step("abort");
    }

    /**
     * Create a new macro with an "abort" step.
     * @returns {Macro} This object itself.
     */ }, { key: "runaway", value:




    /**
     * Add a "runaway" step to this macro.
     * @returns {Macro} This object itself.
     */
    function runaway() {
      return this.step("runaway");
    }

    /**
     * Create a new macro with an "runaway" step.
     * @returns {Macro} This object itself.
     */ }, { key: "if_", value:




    /**
     * Add an "if" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */
    function if_(
    condition,








    ifTrue)
    {
      return this.step("if ".concat(this.createBalls(condition))).
      step(ifTrue).
      step("endif");
    }
    /**
     * Add an "if not" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param ifFalse Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */ }, { key: "ifNot_", value:
    function ifNot_(
    condition,








    ifFalse)
    {
      return this.step("if !".concat(this.createBalls(condition))).
      step(ifFalse).
      step("endif");
    } }, { key: "createBalls", value:

    function createBalls(
    condition)








    {
      var ballsCondition = "";
      if (condition instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Monster) {
        ballsCondition = "monsterid ".concat(condition.id);
      } else if (condition instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Effect) {
        ballsCondition = "haseffect ".concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(condition));
      } else if (condition instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Skill) {
        ballsCondition = "hasskill ".concat(skillBallsMacroName(condition));
      } else if (condition instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Item) {
        if (!condition.combat) {
          throw new InvalidMacroError("Item ".concat(
          condition, " cannot be made a valid BALLS predicate (it is not combat-usable)"));

        }

        ballsCondition = "hascombatitem ".concat(itemOrItemsBallsMacroName(condition));
      } else if (condition instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Location) {
        var snarfblat = condition.id;

        if (snarfblat < 1) {
          throw new InvalidMacroError("Location ".concat(
          condition, " cannot be made a valid BALLS predicate (it has no location id)"));

        }

        ballsCondition = "snarfblat ".concat(snarfblat);
      } else if (condition instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Class) {
        if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.toInt)(condition) > 6) {
          throw new InvalidMacroError("Class ".concat(
          condition, " cannot be made a valid BALLS predicate (it is not a standard class)"));

        }

        ballsCondition = condition.toString().replaceAll(" ", "").toLowerCase();
      } else if (condition instanceof kolmafia__WEBPACK_IMPORTED_MODULE_0__.Stat) {
        ballsCondition = "".concat(condition.toString().toLowerCase(), "class");
      } else {
        ballsCondition = condition;
      }

      return ballsCondition;
    }

    /**
     * Create a new macro with an "if" statement.
     * @param condition The BALLS condition for the if statement.
     * @param ifTrue Continuation if the condition is true.
     * @returns {Macro} This object itself.
     */ }, { key: "while_", value:






















    /**
     * Add a "while" statement to this macro.
     * @param condition The BALLS condition for the if statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */
    function while_(condition, contents) {
      return this.step("while ".concat(condition)).step(contents).step("endwhile");
    }

    /**
     * Create a new macro with a "while" statement.
     * @param condition The BALLS condition for the if statement.
     * @param contents Loop to repeat while the condition is true.
     * @returns {Macro} This object itself.
     */ }, { key: "externalIf", value:








    /**
     * Conditionally add a step to a macro based on a condition evaluated at the time of building the macro.
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */
    function externalIf(
    condition,
    ifTrue,
    ifFalse)
    {
      if (condition) {return this.step(ifTrue);} else
      if (ifFalse) {return this.step(ifFalse);} else
      {return this;}
    }

    /**
     * Create a new macro with a condition evaluated at the time of building the macro.
     * @param condition The JS condition.
     * @param ifTrue Continuation to add if the condition is true.
     * @param ifFalse Optional input to turn this into an if...else statement.
     * @returns {Macro} This object itself.
     */ }, { key: "repeat", value:









    /**
     * Add a repeat step to the macro.
     * @returns {Macro} This object itself.
     */
    function repeat() {
      return this.step("repeat");
    }

    /**
     * Add one or more skill cast steps to the macro.
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */ }, { key: "skill", value:
    function skill() {for (var _len2 = arguments.length, skills = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {skills[_key2] = arguments[_key2];}
      return this.step.apply(this, _toConsumableArray(
      skills.map(function (skill) {
        return "skill ".concat(skillBallsMacroName(skill));
      })));

    }

    /**
     * Create a new macro with one or more skill cast steps.
     * @param skills Skills to cast.
     * @returns {Macro} This object itself.
     */ }, { key: "trySkill", value:







    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */
    function trySkill() {for (var _len3 = arguments.length, skills = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {skills[_key3] = arguments[_key3];}
      return this.step.apply(this, _toConsumableArray(
      skills.map(function (skill) {
        return Macro.if_("hasskill ".concat(
        skillBallsMacroName(skill)),
        Macro.skill(skill));

      })));

    }

    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {Macro} This object itself.
     */ }, { key: "trySkillRepeat", value:







    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */
    function trySkillRepeat() {for (var _len4 = arguments.length, skills = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {skills[_key4] = arguments[_key4];}
      return this.step.apply(this, _toConsumableArray(
      skills.map(function (skill) {
        return Macro.if_("hasskill ".concat(
        skillBallsMacroName(skill)),
        Macro.skill(skill).repeat());

      })));

    }

    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {Macro} This object itself.
     */ }, { key: "item", value:







    /**
     * Add one or more item steps to the macro.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function item() {for (var _len5 = arguments.length, items = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {items[_key5] = arguments[_key5];}
      return this.step.apply(this, _toConsumableArray(
      items.map(function (itemOrItems) {
        return "use ".concat(itemOrItemsBallsMacroName(itemOrItems));
      })));

    }

    /**
     * Create a new macro with one or more item steps.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */ }, { key: "tryItem", value:







    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */
    function tryItem() {for (var _len6 = arguments.length, items = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {items[_key6] = arguments[_key6];}
      return this.step.apply(this, _toConsumableArray(
      items.map(function (item) {
        return Macro.if_(
        itemOrItemsBallsMacroPredicate(item), "use ".concat(
        itemOrItemsBallsMacroName(item)));

      })));

    }

    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {Macro} This object itself.
     */ }, { key: "attack", value:







    /**
     * Add an attack step to the macro.
     * @returns {Macro} This object itself.
     */
    function attack() {
      return this.step("attack");
    }

    /**
     * Create a new macro with an attack step.
     * @returns {Macro} This object itself.
     */ }, { key: "ifHolidayWanderer", value:




    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, unmutated.
     * @param macro The macro to place in the if_ statement
     */
    function ifHolidayWanderer(macro) {
      // const todaysWanderers = getTodaysHolidayWanderers();
      // if (todaysWanderers.length === 0) return this;
      // return this.if_(
      //   todaysWanderers.map((monster) => `monsterid ${monster.id}`).join(" || "),
      //   macro
      // );
      return this;
    }
    /**
     * Create a new macro starting with an ifHolidayWanderer step.
     * @param macro The macro to place inside the if_ statement
     */ }, { key: "ifNotHolidayWanderer", value:







    /**
     * Create an if_ statement based on what holiday of loathing it currently is. On non-holidays, returns the original macro, with the input macro appended.
     * @param macro The macro to place in the if_ statement.
     */
    function ifNotHolidayWanderer(macro) {
      /*const todaysWanderers = getTodaysHolidayWanderers();
      if (todaysWanderers.length === 0) return this.step(macro);
      return this.if_(
        todaysWanderers.map((monster) => `!monsterid ${monster.id}`).join(" && "),
        macro
      );*/
      return this;
    }
    /**
     * Create a new macro starting with an ifNotHolidayWanderer step.
     * @param macro The macro to place inside the if_ statement
     */ }], [{ key: "load", value: function load() {var _this;return (_this = new this()).step.apply(_this, _toConsumableArray((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(Macro.SAVED_MACRO_PROPERTY).split(";")));} /**
    * Clear the saved macro in the Mafia property.
    */ }, { key: "clearSaved", value: function clearSaved() {(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.removeProperty)(Macro.SAVED_MACRO_PROPERTY);} }, { key: "step", value: function step() {var _this2;return (_this2 = new this()).step.apply(_this2, arguments);} }, { key: "clearAutoAttackMacros", value: function clearAutoAttackMacros() {var _iterator = _createForOfIteratorHelper(Macro.cachedAutoAttacks.keys()),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _Macro$cachedMacroIds;var name = _step.value;var id = (_Macro$cachedMacroIds = Macro.cachedMacroIds.get(name)) !== null && _Macro$cachedMacroIds !== void 0 ? _Macro$cachedMacroIds : getMacroId(name);(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.visitUrl)("account_combatmacros.php?macroid=".concat(id, "&action=edit&what=Delete&confirm=1"));Macro.cachedAutoAttacks["delete"](name);}} catch (err) {_iterator.e(err);} finally {_iterator.f();}} }, { key: "abort", value: function abort() {return new this().abort();} }, { key: "runaway", value: function runaway() {return new this().runaway();} }, { key: "if_", value: function if_(condition, ifTrue) {return new this().if_(condition, ifTrue);} /**
    * Create a new macro with an "if" statement.
    * @param condition The BALLS condition for the if statement.
    * @param ifTrue Continuation if the condition is true.
    * @returns {Macro} This object itself.
    */ }, { key: "ifNot_", value: function ifNot_(condition, ifTrue) {return new this().ifNot_(condition, ifTrue);} }, { key: "while_", value: function while_(condition, contents) {return new this().while_(condition, contents);} }, { key: "externalIf", value: function externalIf(condition, ifTrue, ifFalse) {return new this().externalIf(condition, ifTrue, ifFalse);} }, { key: "skill", value: function skill() {var _this3;return (_this3 = new this()).skill.apply(_this3, arguments);} }, { key: "trySkill", value: function trySkill() {var _this4;return (_this4 = new this()).trySkill.apply(_this4, arguments);} }, { key: "trySkillRepeat", value: function trySkillRepeat() {var _this5;return (_this5 = new this()).trySkillRepeat.apply(_this5, arguments);} }, { key: "item", value: function item() {var _this6;return (_this6 = new this()).item.apply(_this6, arguments);} }, { key: "tryItem", value: function tryItem() {var _this7;return (_this7 = new this()).tryItem.apply(_this7, arguments);} }, { key: "attack", value: function attack() {return new this().attack();} }, { key: "ifHolidayWanderer", value: function ifHolidayWanderer(macro) {return new this().ifHolidayWanderer(macro);} }, { key: "ifNotHolidayWanderer", value: function ifNotHolidayWanderer(macro) {return new this().ifNotHolidayWanderer(macro);} }]);return Macro;}();

/**
 * Adventure in a location and handle all combats with a given macro.
 * To use this function you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param macro Macro to execute.
 */_defineProperty(Macro, "SAVED_MACRO_PROPERTY", "libram_savedMacro");_defineProperty(Macro, "cachedMacroIds", new Map());_defineProperty(Macro, "cachedAutoAttacks", new Map());
function adventureMacro(loc, macro) {
  macro.save();
  setAutoAttack(0);
  try {
    adv1(loc, 0, "");
    while (inMultiFight()) {runCombat();}
    if (choiceFollowsFight()) {visitUrl("choice.php");}
  } finally {
    Macro.clearSaved();
  }
}

/**
 * Adventure in a location and handle all combats with a given autoattack and manual macro.
 * To use the nextMacro parameter you will need to create a consult script that runs Macro.load().submit() and a CCS that calls that consult script.
 * See examples/consult.ts for an example.
 *
 * @category Combat
 * @param loc Location to adventure in.
 * @param autoMacro Macro to execute via KoL autoattack.
 * @param nextMacro Macro to execute manually after autoattack completes.
 */
function adventureMacroAuto(
loc,
autoMacro)

{var _nextMacro;var nextMacro = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  nextMacro = (_nextMacro = nextMacro) !== null && _nextMacro !== void 0 ? _nextMacro : Macro.abort();
  autoMacro.setAutoAttack();
  nextMacro.save();
  try {
    adv1(loc, 0, "");
    while (inMultiFight()) {runCombat();}
    if (choiceFollowsFight()) {visitUrl("choice.php");}
  } finally {
    Macro.clearSaved();
  }
}

var StrictMacro = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_Macro) {_inherits(StrictMacro, _Macro);var _super2 = _createSuper(StrictMacro);function StrictMacro() {_classCallCheck(this, StrictMacro);return _super2.apply(this, arguments);}_createClass(StrictMacro, [{ key: "skill", value:
    /**
     * Add one or more skill cast steps to the macro.
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */
    function skill() {var _get2;for (var _len7 = arguments.length, skills = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {skills[_key7] = arguments[_key7];}
      return (_get2 = _get(_getPrototypeOf(StrictMacro.prototype), "skill", this)).call.apply(_get2, [this].concat(skills));
    }

    /**
     * Create a new macro with one or more skill cast steps.
     * @param skills Skills to cast.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "item", value:







    /**
     * Add one or more item steps to the macro.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function item() {var _get3;for (var _len8 = arguments.length, items = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {items[_key8] = arguments[_key8];}
      return (_get3 = _get(_getPrototypeOf(StrictMacro.prototype), "item", this)).call.apply(_get3, [this].concat(items));
    }

    /**
     * Create a new macro with one or more item steps.
     * @param items Items to use. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "trySkill", value:







    /**
     * Add one or more skill cast steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkill() {var _get4;for (var _len9 = arguments.length, skills = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {skills[_key9] = arguments[_key9];}
      return (_get4 = _get(_getPrototypeOf(StrictMacro.prototype), "trySkill", this)).call.apply(_get4, [this].concat(skills));
    }

    /**
     * Create a new macro with one or more skill cast steps, where each step checks if you have the skill first.
     * @param skills Skills to try casting.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "tryItem", value:







    /**
     * Add one or more item steps to the macro, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */
    function tryItem() {var _get5;for (var _len10 = arguments.length, items = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {items[_key10] = arguments[_key10];}
      return (_get5 = _get(_getPrototypeOf(StrictMacro.prototype), "tryItem", this)).call.apply(_get5, [this].concat(items));
    }

    /**
     * Create a new macro with one or more item steps, where each step checks to see if you have the item first.
     * @param items Items to try using. Pass a tuple [item1, item2] to funksling.
     * @returns {StrictMacro} This object itself.
     */ }, { key: "trySkillRepeat", value:







    /**
     * Add one or more skill-cast-and-repeat steps to the macro, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */
    function trySkillRepeat() {var _get6;for (var _len11 = arguments.length, skills = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {skills[_key11] = arguments[_key11];}
      return (_get6 = _get(_getPrototypeOf(StrictMacro.prototype), "trySkillRepeat", this)).call.apply(_get6, [this].concat(skills));
    }

    /**
     * Create a new macro with one or more skill-cast-and-repeat steps, where each step checks if you have the skill first.
     * @param skills Skills to try repeatedly casting.
     * @returns {StrictMacro} This object itself.
     */ }], [{ key: "skill", value: function skill() {var _this8;return (_this8 = new this()).skill.apply(_this8, arguments);} }, { key: "item", value: function item() {var _this9;return (_this9 = new this()).item.apply(_this9, arguments);} }, { key: "trySkill", value: function trySkill() {var _this10;return (_this10 = new this()).trySkill.apply(_this10, arguments);} }, { key: "tryItem", value: function tryItem() {var _this11;return (_this11 = new this()).tryItem.apply(_this11, arguments);} }, { key: "trySkillRepeat", value:
    function trySkillRepeat()


    {var _this12;
      return (_this12 = new this()).trySkillRepeat.apply(_this12, arguments);
    } }]);return StrictMacro;}(Macro)));

/***/ }),

/***/ 530:
/***/ ((module) => {

module.exports = require("kolmafia");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "main": () => (/* binding */ main)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _typings_ResourceTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(733);
/* harmony import */ var _utils_GreySettings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(97);
function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _typeof(obj) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {return typeof obj;} : function (obj) {return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}, _typeof(obj);}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}















function main() {
  var notifications = [];
  // handle updating values
  var fields = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)();

  if (fields["api"] != null) {
    var returns = eval(fields["api"]) || "";

    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(returns + (returns ? "" : " "));
    return;
  }

  Object.keys(fields).forEach(function (field) {
    if (field === "relay") {
      return;
    }

    if (field === "notifications") {
      notifications.push.apply(notifications, _toConsumableArray(JSON.parse(fields[field])));
      return;
    }

    if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(field).toString() !== fields[field]) {
      notifications.push("".concat(
      field, " changed from ").concat((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(field), " to ").concat(fields[field]));


      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(field, fields[field]);
    }
  });

  var settings = [];

  // load user perferences into json object to pass to react
  var _loop = function _loop() {var setting = _arr[_i];
    var dropdowns;

    if (setting.viableSettings != null) {
      if (typeof setting.viableSettings[0] == "string") {
        dropdowns = setting.viableSettings = setting.viableSettings.map(function (s) {return [
          s,
          s];});

      } else {
        dropdowns = setting.viableSettings;
      }
    }

    var prop = {
      setting: setting.setting,
      name: setting.name,
      description: setting.description,
      "default": setting["default"] == null ? "" : setting["default"].toString(),
      value: (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(setting.name),
      savedValue: (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(setting.name),
      dropdown: dropdowns,
      viable: setting.viable != false,
      type: _typeof(setting["default"])
    };

    if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyExists)(prop.name) || !setting.valid(prop.value)) {
      prop.value = setting["default"] + "";

      if (!(0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyExists)(prop.name)) {
        prop.savedValue = prop.value;
      }
    }

    if (dropdowns != null) {
      var dropSetting = dropdowns.find(
      function (_ref) {var _ref2 = _slicedToArray(_ref, 1),s = _ref2[0];return s.toLowerCase().trim() == prop.value.toLowerCase().trim();});


      if (dropSetting != null && dropSetting[0] != prop.value) {
        prop.value = dropSetting[0];
      }
    }

    settings.push(prop);
  };for (var _i = 0, _arr = [].concat(_toConsumableArray((0,_typings_ResourceTypes__WEBPACK_IMPORTED_MODULE_1__/* .getResourceSettings */ .eF)()), _toConsumableArray((0,_utils_GreySettings__WEBPACK_IMPORTED_MODULE_2__/* .getGreySettings */ .p_)())); _i < _arr.length; _i++) {_loop();}

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.writeln)('<head><link rel="stylesheet" href="/greyday/main.css"></head>');
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.writeln)('<div id="root"></div>');

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.writeln)("<script>");

  // add script that react calls when loaded to get kol data
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.writeln)("let getData = function(callback) {callback(".concat(
  JSON.stringify({
    settings: settings,
    notifications: notifications
  }), ")}"));


  // close notifications when they are clicked on
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.writeln)("document.onclick = (e) => {\n    if(e.target.classList.contains('notification')) e.target.remove();\n  }");



  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.writeln)("</script>");

  // include react scripts
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.writeln)('<script src="./greyday/greyday_relay.js"></script>');
}
})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;